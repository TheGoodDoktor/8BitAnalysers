/*
 * Geargrafx - PC Engine / TurboGrafx Emulator
 * Copyright (C) 2024  Ignacio Sanchez

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
 *
 */

#ifndef HUC6260_H
#define HUC6260_H

#include <iostream>
#include <fstream>
#include "common.h"

#define HUC6260_LINE_LENGTH 1365
#define HUC6260_LINES 263
#define HUC6260_HSYNC_LENGTH 237
#define HUC6260_HSYNC_START_HPOS (HUC6260_LINE_LENGTH - HUC6260_HSYNC_LENGTH)
#define HUC6260_HSYNC_END_HPOS 0
#define HUC6260_VSYNC_HPOS (HUC6260_HSYNC_START_HPOS + 30)

class HuC6202;
class HuC6280;

class HuC6260
{
public:
    struct HuC6260_State
    {
        u8* CR;
        u16* CTA;
        s32* HPOS;
        s32* VPOS;
        bool* HSYNC;
        bool* VSYNC;
    };

    enum HuC6260_Speed
    {
        HuC6260_SPEED_5_36_MHZ,
        HuC6260_SPEED_7_16_MHZ,
        HuC6260_SPEED_10_8_MHZ,
    };

public:
    HuC6260(HuC6202* huc6202, HuC6280* huc6280);
    ~HuC6260();
    void Init(GG_Pixel_Format pixel_format = GG_PIXEL_RGBA8888);
    void Reset();
    template <bool is_sgx>
    bool Clock(u32 cycles);
    u8 ReadRegister(u16 address);
    void WriteRegister(u16 address, u8 value);
    HuC6260_State* GetState();
    HuC6260_Speed GetSpeed();
    int GetClockDivider();
    int GetTotalLines();
    u16* GetColorTable();
    void SetBuffer(u8* frame_buffer);
    u8* GetBuffer();
    int GetCurrentWidth();
    int GetCurrentHeight();
    int GetWidthScale();
    void SetScanlineStart(int scanline_start);
    void SetScanlineEnd(int scanline_end);
    void SetOverscan(bool overscan);
    GG_Pixel_Format GetPixelFormat();
    void SetResetValue(int value);
    void SetCompositePalette(bool enable);
    void SaveState(std::ostream& stream);
    void LoadState(std::istream& stream);

private:
    void InitPalettes();
    void AdjustForMultipleDividers();
    template <bool is_sgx>
    void RenderFrame();
    template <bool SGX, int BPP>
    void RenderFrameTemplate();
    void CalculateScreenBounds();

private:
    HuC6202* m_huc6202;
    HuC6280* m_huc6280;
    HuC6260_State m_state;
    u8 m_control_register;
    u16 m_color_table_address;
    s32 m_speed;
    s32 m_clock_divider;
    u16 m_color_table[512] = {};
    u8* m_frame_buffer;
    u8 m_scale_buffer[2048 * 512 * 4] = {};
    u16 m_vce_buffer_1[1024 * 512] = {};
    u16 m_vce_buffer_2[1024 * 512] = {};
    s32 m_line_speed[242] = {};
    bool m_multiple_speeds;
    bool m_scaled_width;
    bool m_active_line;
    s32 m_hpos;
    s32 m_vpos;
    s32 m_pixel_index;
    s32 m_pixel_x;
    bool m_hsync;
    bool m_vsync;
    s32 m_blur;
    u32 m_black_and_white;
    int m_overscan;
    int m_scanline_start;
    int m_scanline_end;
    GG_Pixel_Format m_pixel_format;
    u8 m_rgba888_palette[2][512][4] = {};
    u8 m_rgb565_palette[2][512][2] = {};
    int m_reset_value;
    int m_palette;
    int m_screen_start_x;
    int m_screen_end_x;
    int m_screen_start_y;
    int m_screen_end_y;
};

static const HuC6260::HuC6260_Speed k_huc6260_speed[4] = {
    HuC6260::HuC6260_SPEED_5_36_MHZ, HuC6260::HuC6260_SPEED_7_16_MHZ,
    HuC6260::HuC6260_SPEED_10_8_MHZ, HuC6260::HuC6260_SPEED_10_8_MHZ };

static const int k_huc6260_total_lines[2] = { HUC6260_LINES - 1, HUC6260_LINES };
static const int k_huc6260_full_line_width[4] = { 342, 455, 683, 683 };
static const int k_huc6260_line_width[2][4] = {
    { 256, 341, 512, 512 },
    { 256 + 24, 341 + 32, 512 + 48, 512 + 48 } };
static const int k_huc6260_line_start[2][4] = {
    { 24 + 24, 24 + 48, 24 + 96, 24 + 96 },
    { 24 + 24 - 12, 24 + 48 - 16, 24 + 96 - 24, 24 + 96 - 24 } };
static const int k_huc6260_line_end[2][4] = {
    { 256 + 24 + 24, 341 + 24 + 48, 512 + 24 + 96, 512 + 24 + 96 },
    { 256 + 24 + 24 + 24 - 12, 341 + 32 + 24 + 48 - 16, 512 + 48 + 24 + 96 - 24, 512 + 48 + 24 + 96 - 24 } };
static const int k_huc6260_scaling_width[2] = { 1024, 1120 };

// Composite palette by Kitrinx: https://github.com/Kitrinx/TG16_Palette
static const uint8_t k_rgb888_palette_composite[512][3] = {
    {   0,   0,   0 }, {   0,   0,  22 }, {   4,   2,  53 }, {   1,   0,  75 },
    {   7,   4, 106 }, {   5,   1, 128 }, {  11,   6, 159 }, {   9,   3, 181 },
    {  26,   0,   3 }, {  32,   5,  33 }, {  30,   2,  55 }, {  36,   7,  86 },
    {  34,   4, 108 }, {  40,   9, 139 }, {  37,   6, 161 }, {  43,  11, 192 },
    {  61,   8,  13 }, {  59,   5,  36 }, {  64,  10,  66 }, {  62,   7,  89 },
    {  68,  12, 119 }, {  66,   9, 141 }, {  72,  14, 172 }, {  69,  11, 194 },
    {  87,   9,  16 }, {  85,   5,  38 }, {  91,  10,  69 }, {  89,   7,  91 },
    {  94,  12, 122 }, {  92,   9, 144 }, {  98,  14, 175 }, {  96,  11, 197 },
    { 114,   9,  19 }, { 119,  14,  49 }, { 117,  11,  72 }, { 123,  16, 102 },
    { 121,  12, 124 }, { 127,  17, 155 }, { 124,  14, 177 }, { 130,  19, 208 },
    { 148,  17,  30 }, { 146,  14,  52 }, { 152,  19,  82 }, { 149,  16, 105 },
    { 155,  21, 135 }, { 153,  18, 158 }, { 159,  23, 188 }, { 157,  19, 210 },
    { 174,  17,  32 }, { 172,  14,  54 }, { 178,  19,  85 }, { 176,  16, 107 },
    { 182,  21, 138 }, { 179,  18, 160 }, { 185,  23, 191 }, { 183,  20, 213 },
    { 201,  17,  35 }, { 207,  22,  65 }, { 204,  19,  88 }, { 210,  24, 118 },
    { 208,  21, 140 }, { 214,  26, 171 }, { 212,  23, 193 }, { 218,  28, 224 },
    {   9,  36,   8 }, {   7,  33,  30 }, {  13,  38,  61 }, {  10,  35,  83 },
    {  16,  40, 114 }, {  14,  37, 136 }, {  20,  42, 167 }, {  17,  39, 189 },
    {  35,  36,  11 }, {  33,  33,  33 }, {  39,  38,  63 }, {  37,  35,  86 },
    {  42,  40, 116 }, {  40,  37, 139 }, {  46,  42, 169 }, {  44,  39, 191 },
    {  62,  36,  13 }, {  67,  41,  44 }, {  65,  38,  66 }, {  71,  43,  97 },
    {  69,  40, 119 }, {  75,  45, 149 }, {  72,  42, 172 }, {  78,  47, 202 },
    {  96,  44,  24 }, {  94,  41,  46 }, { 100,  46,  77 }, {  97,  43,  99 },
    { 103,  48, 130 }, { 101,  45, 152 }, { 107,  50, 183 }, { 105,  47, 205 },
    { 122,  45,  27 }, { 120,  41,  49 }, { 126,  46,  80 }, { 124,  43, 102 },
    { 130,  48, 132 }, { 127,  45, 155 }, { 133,  50, 185 }, { 131,  47, 208 },
    { 149,  45,  29 }, { 155,  50,  60 }, { 152,  47,  82 }, { 158,  52, 113 },
    { 156,  48, 135 }, { 162,  54, 166 }, { 160,  50, 188 }, { 166,  55, 218 },
    { 183,  53,  40 }, { 181,  50,  62 }, { 187,  55,  93 }, { 185,  52, 115 },
    { 191,  57, 146 }, { 188,  54, 168 }, { 194,  59, 199 }, { 192,  56, 221 },
    { 210,  53,  43 }, { 207,  50,  65 }, { 213,  55,  96 }, { 211,  52, 118 },
    { 217,  57, 148 }, { 215,  54, 171 }, { 220,  59, 201 }, { 218,  56, 224 },
    {  10,  64,   8 }, {  15,  69,  38 }, {  13,  66,  61 }, {  19,  71,  91 },
    {  17,  68, 113 }, {  23,  73, 144 }, {  20,  69, 166 }, {  26,  74, 197 },
    {  44,  72,  19 }, {  42,  69,  41 }, {  48,  74,  71 }, {  45,  71,  94 },
    {  51,  76, 124 }, {  49,  73, 147 }, {  47,  70, 169 }, {  53,  75, 199 },
    {  70,  72,  21 }, {  68,  69,  43 }, {  74,  74,  74 }, {  72,  71,  96 },
    {  78,  76, 127 }, {  75,  73, 149 }, {  81,  78, 180 }, {  79,  75, 202 },
    {  97,  72,  24 }, { 103,  77,  54 }, { 100,  74,  77 }, { 106,  79, 107 },
    { 104,  76, 129 }, { 110,  81, 160 }, { 108,  78, 182 }, { 114,  83, 213 },
    { 131,  81,  35 }, { 129,  77,  57 }, { 135,  82,  87 }, { 133,  79, 110 },
    { 139,  84, 140 }, { 136,  81, 163 }, { 134,  78, 185 }, { 140,  83, 215 },
    { 158,  81,  37 }, { 155,  77,  60 }, { 161,  83,  90 }, { 159,  79, 112 },
    { 165,  84, 143 }, { 163,  81, 165 }, { 168,  86, 196 }, { 166,  83, 218 },
    { 184,  81,  40 }, { 190,  86,  70 }, { 188,  83,  93 }, { 193,  88, 123 },
    { 191,  85, 146 }, { 197,  90, 176 }, { 195,  86, 198 }, { 201,  92, 229 },
    { 218,  89,  51 }, { 216,  86,  73 }, { 222,  91, 104 }, { 220,  88, 126 },
    { 217,  85, 148 }, { 223,  90, 179 }, { 221,  87, 201 }, { 227,  92, 232 },
    {  18, 100,  16 }, {  16,  97,  38 }, {  22, 102,  69 }, {  20,  98,  91 },
    {  26, 103, 121 }, {  23, 100, 144 }, {  29, 105, 174 }, {  27, 102, 197 },
    {  45, 100,  18 }, {  51, 105,  49 }, {  48, 102,  71 }, {  54, 107, 102 },
    {  52, 104, 124 }, {  58, 109, 155 }, {  56, 105, 177 }, {  62, 111, 207 },
    {  71, 100,  21 }, {  77, 105,  51 }, {  75, 102,  74 }, {  81, 107, 104 },
    {  78, 104, 127 }, {  84, 109, 157 }, {  82, 106, 179 }, {  88, 111, 210 },
    { 106, 108,  32 }, { 103, 105,  54 }, { 109, 110,  85 }, { 107, 107, 107 },
    { 113, 112, 137 }, { 111, 109, 160 }, { 116, 114, 190 }, { 114, 111, 213 },
    { 132, 108,  34 }, { 138, 113,  65 }, { 136, 110,  87 }, { 141, 115, 118 },
    { 139, 112, 140 }, { 145, 117, 171 }, { 143, 114, 193 }, { 149, 119, 223 },
    { 158, 108,  37 }, { 164, 113,  68 }, { 162, 110,  90 }, { 168, 115, 120 },
    { 166, 112, 143 }, { 171, 117, 173 }, { 169, 114, 196 }, { 175, 119, 226 },
    { 193, 117,  48 }, { 190, 114,  70 }, { 196, 119, 101 }, { 194, 115, 123 },
    { 200, 121, 154 }, { 198, 117, 176 }, { 204, 122, 206 }, { 201, 119, 229 },
    { 219, 117,  50 }, { 225, 122,  81 }, { 223, 119, 103 }, { 229, 124, 134 },
    { 226, 121, 156 }, { 232, 126, 187 }, { 230, 123, 209 }, { 236, 128, 240 },
    {  19, 127,  15 }, {  25, 132,  46 }, {  23, 129,  68 }, {  29, 134,  99 },
    {  26, 131, 121 }, {  32, 136, 152 }, {  30, 133, 174 }, {  36, 138, 205 },
    {  54, 136,  26 }, {  51, 133,  49 }, {  57, 138,  79 }, {  55, 134, 101 },
    {  61, 140, 132 }, {  59, 136, 154 }, {  65, 141, 185 }, {  62, 138, 207 },
    {  80, 136,  29 }, {  86, 141,  59 }, {  84, 138,  82 }, {  89, 143, 112 },
    {  87, 140, 135 }, {  93, 145, 165 }, {  91, 142, 187 }, {  97, 147, 218 },
    { 106, 136,  32 }, { 112, 141,  62 }, { 110, 138,  84 }, { 116, 143, 115 },
    { 114, 140, 137 }, { 119, 145, 168 }, { 117, 142, 190 }, { 123, 147, 221 },
    { 141, 144,  42 }, { 139, 141,  65 }, { 144, 146,  95 }, { 142, 143, 118 },
    { 148, 148, 148 }, { 146, 145, 170 }, { 152, 150, 201 }, { 149, 147, 223 },
    { 167, 144,  45 }, { 173, 149,  76 }, { 171, 146,  98 }, { 177, 151, 128 },
    { 174, 148, 151 }, { 180, 153, 181 }, { 178, 150, 204 }, { 184, 155, 234 },
    { 193, 144,  48 }, { 199, 150,  78 }, { 197, 146, 100 }, { 203, 151, 131 },
    { 201, 148, 153 }, { 207, 153, 184 }, { 204, 150, 206 }, { 210, 155, 237 },
    { 228, 153,  58 }, { 226, 150,  81 }, { 232, 155, 111 }, { 229, 152, 134 },
    { 235, 157, 164 }, { 233, 153, 186 }, { 239, 158, 217 }, { 237, 155, 239 },
    {  28, 163,  23 }, {  34, 168,  54 }, {  32, 165,  76 }, {  38, 170, 107 },
    {  35, 167, 129 }, {  41, 172, 160 }, {  39, 169, 182 }, {  37, 166, 204 },
    {  54, 163,  26 }, {  60, 169,  57 }, {  58, 165,  79 }, {  64, 170, 109 },
    {  62, 167, 132 }, {  67, 172, 162 }, {  65, 169, 185 }, {  71, 174, 215 },
    {  89, 172,  37 }, {  87, 169,  59 }, {  92, 174,  90 }, {  90, 171, 112 },
    {  96, 176, 143 }, {  94, 172, 165 }, { 100, 178, 195 }, {  97, 174, 218 },
    { 115, 172,  40 }, { 121, 177,  70 }, { 119, 174,  92 }, { 125, 179, 123 },
    { 122, 176, 145 }, { 120, 173, 168 }, { 126, 178, 198 }, { 124, 174, 220 },
    { 141, 172,  42 }, { 147, 177,  73 }, { 145, 174,  95 }, { 151, 179, 126 },
    { 149, 176, 148 }, { 155, 181, 178 }, { 152, 178, 201 }, { 158, 183, 231 },
    { 176, 180,  53 }, { 174, 177,  75 }, { 180, 182, 106 }, { 177, 179, 128 },
    { 183, 184, 159 }, { 181, 181, 181 }, { 187, 186, 212 }, { 185, 183, 234 },
    { 202, 180,  56 }, { 208, 185,  86 }, { 206, 182, 108 }, { 212, 187, 139 },
    { 210, 184, 161 }, { 207, 181, 184 }, { 213, 186, 214 }, { 211, 183, 236 },
    { 229, 181,  58 }, { 235, 186,  89 }, { 232, 182, 111 }, { 238, 187, 142 },
    { 236, 184, 164 }, { 242, 189, 194 }, { 240, 186, 217 }, { 245, 191, 247 },
    {  37, 199,  31 }, {  35, 196,  54 }, {  40, 201,  84 }, {  38, 198, 107 },
    {  44, 203, 137 }, {  42, 200, 159 }, {  48, 205, 190 }, {  45, 202, 212 },
    {  63, 199,  34 }, {  61, 196,  56 }, {  67, 201,  87 }, {  64, 198, 109 },
    {  70, 203, 140 }, {  68, 200, 162 }, {  74, 205, 193 }, {  72, 202, 215 },
    {  89, 200,  37 }, {  95, 205,  67 }, {  93, 201,  89 }, {  99, 207, 120 },
    {  97, 203, 142 }, { 103, 208, 173 }, { 100, 205, 195 }, { 106, 210, 226 },
    { 124, 208,  47 }, { 122, 205,  70 }, { 128, 210, 100 }, { 125, 207, 123 },
    { 131, 212, 153 }, { 129, 209, 175 }, { 135, 214, 206 }, { 133, 210, 228 },
    { 150, 208,  50 }, { 148, 205,  72 }, { 154, 210, 103 }, { 152, 207, 125 },
    { 158, 212, 156 }, { 155, 209, 178 }, { 161, 214, 209 }, { 159, 211, 231 },
    { 177, 208,  53 }, { 183, 213,  83 }, { 180, 210, 106 }, { 186, 215, 136 },
    { 184, 212, 158 }, { 190, 217, 189 }, { 188, 214, 211 }, { 193, 219, 242 },
    { 211, 216,  64 }, { 209, 213,  86 }, { 215, 218, 116 }, { 213, 215, 139 },
    { 218, 220, 169 }, { 216, 217, 192 }, { 222, 222, 222 }, { 220, 219, 244 },
    { 238, 216,  66 }, { 235, 213,  88 }, { 241, 218, 119 }, { 239, 215, 141 },
    { 245, 220, 172 }, { 242, 217, 194 }, { 248, 222, 225 }, { 246, 219, 247 },
    {  37, 227,  31 }, {  43, 232,  62 }, {  41, 229,  84 }, {  47, 234, 115 },
    {  45, 231, 137 }, {  51, 236, 167 }, {  48, 233, 190 }, {  54, 238, 220 },
    {  72, 235,  42 }, {  70, 232,  64 }, {  76, 237,  95 }, {  73, 234, 117 },
    {  79, 239, 148 }, {  77, 236, 170 }, {  83, 241, 201 }, {  81, 238, 223 },
    {  98, 236,  45 }, {  96, 232,  67 }, { 102, 237,  97 }, { 100, 234, 120 },
    { 106, 239, 150 }, { 103, 236, 173 }, { 109, 241, 203 }, { 107, 238, 225 },
    { 125, 236,  47 }, { 131, 241,  78 }, { 128, 238, 100 }, { 134, 243, 131 },
    { 132, 239, 153 }, { 138, 244, 183 }, { 136, 241, 206 }, { 141, 246, 236 },
    { 159, 244,  58 }, { 157, 241,  80 }, { 163, 246, 111 }, { 161, 243, 133 },
    { 166, 248, 164 }, { 164, 245, 186 }, { 170, 250, 217 }, { 168, 246, 239 },
    { 186, 244,  61 }, { 183, 241,  83 }, { 189, 246, 114 }, { 187, 243, 136 },
    { 193, 248, 166 }, { 191, 245, 189 }, { 196, 250, 219 }, { 194, 247, 242 },
    { 212, 244,  63 }, { 218, 249,  94 }, { 215, 246, 116 }, { 221, 251, 147 },
    { 219, 248, 169 }, { 225, 253, 200 }, { 223, 250, 222 }, { 229, 255, 252 },
    { 246, 252,  74 }, { 244, 249,  96 }, { 250, 254, 127 }, { 248, 251, 149 },
    { 254, 255, 180 }, { 251, 253, 202 }, { 255, 255, 233 }, { 255, 255, 255 }
};

#include "huc6260_inline.h"

#endif /* HUC6260_H */