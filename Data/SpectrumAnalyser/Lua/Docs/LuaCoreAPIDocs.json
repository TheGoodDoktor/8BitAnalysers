{
    "Functions": [
        {
            "Args": [
                "..."
            ],
            "Description": "",
            "Name": "print",
            "Returns": "",
            "Summary": "Log text to the debug log.",
            "Usage": "answer = 42\nprint(\"The answer is \" .. answer)",
            "Group": "Misc"
        },
        {
            "Args": [
                "uint16_t address"
            ],
            "Description": "Returns the value of the byte at the given address.",
            "Name": "ReadByte",
            "Returns": "uint8_t",
            "Summary": "Read a byte from memory.",
            "Usage": "print(\"The byte value at memory address 0 is \" .. ReadByte(0))",
            "Group": "Memory/Machine State"
        },
        {
            "Args": [
                "uint16_t address"
            ],
            "Description": "Returns the value of the word at the given address.",
            "Name": "ReadWord",
            "Returns": "uint16_t",
            "Summary": "Read a word from memory.",
            "Usage": "print(\"The word value at memory address 0 is \" .. ReadWord(0))",
            "Group": "Memory/Machine State"
        },
        {
            "Args": [
                "string regName"
            ],
            "Description": "For 8-bit registers, use arguments:\n\n  \"A\", \"F\", \"B\", \"C\", \"D\", \"E\", \"H\", \"L\", \"I\", \"R\"\n\nFor 16-bit register pairs, use arguments:\n\n  \"AF\", \"BC\", \"DE\", \"HL\", \"IX\", \"IY\", \"SP\", \"PC\"",
            "Name": "GetRegValue",
            "Returns": "uint8_t|uint16_t",
            "Summary": "Get the value of a register or register pair.",
            "Usage": "print(\"The register value of HL is \" .. GetRegValue(\"HL\"))",
            "Group": "Memory/Machine State"
        },
        {
            "Args": [
                "uint16_t address",
                "uint8_t value"
            ],
            "Description": "The value of the given byte is written to memory at the specified address.\n\nNote: Edit Mode must be enabled prior to calling WriteByte() or the call will fail. Edit Mode can be enabled by calling SetEditMode(true).",
            "Name": "WriteByte",
            "Returns": "",
            "Summary": "Write a byte to memory.",
            "Usage": "SetEditMode(true)\nWriteByte(0x8000, 0xff)",
            "Group": "Memory/Machine State"
        },
        {
            "Args": [
                "uint16_t address",
                "uint16_t value"
            ],
            "Description": "The value of the given word is written to memory at the specified address.\n\nNote: Edit Mode must be enabled prior to calling WriteWord() or the call will fail. Edit Mode can be enabled by calling SetEditMode(true).",
            "Name": "WriteWord",
            "Returns": "",
            "Summary": "Write a word to memory.",
            "Usage": "SetEditMode(true)\nWriteWord(0x8000, 0xffff)",
            "Group": "Memory/Machine State"
        },
        {
            "Args": [
                "uint16_t address"
            ],
            "Description": "Returns a pointer to memory at the given address.",
            "Name": "GetMemPtr",
            "Returns": "uint8_t*",
            "Summary": "Get pointer at memory address.",
            "Usage": "glyphData = GetMemPtr(0x3ff8)\nimage = CreateZXGraphicsView(8, 8)\nDrawZXBitImage(image, glyphData, 0, 0, 1, 1)",
            "Group": "Memory/Machine State"
        },
        {
            "Args": [
                "bool enabled"
            ],
            "Description": "Edit Mode allows the user to modify the contents of memory via WriteByte() and WriteWord(). When Edit Mode is not active the memory cannot be modified and can be considered read-only to the user.\n\nWhen SetEditMode(true) is called, a snapshot of the machine's state will be saved. Upon calling SetEditMode(false), the machine's state will be restored to the point when Edit Mode was enabled. After exiting Edit mode, any changes written in Edit Mode will be lost.",
            "Name": "SetEditMode",
            "Returns": "",
            "Summary": "Enable or disable Edit Mode.",
            "Usage": "SetEditMode(true)\nWriteWord(0x8000, 0xffff)",
            "Group": "Analysis"
        },
        {
            "Args": [
                "uint16_t address",
                "string comment"
            ],
            "Description": "",
            "Name": "SetDataItemComment",
            "Returns": "",
            "Summary": "Set the comment of a data item at address.",
            "Usage": "SetDataItemComment(0x8000, \"This data is interesting.\")",
            "Group": "Analysis"
        },
        {
            "Args": [
                "uint16_t address",
                "string comment"
            ],
            "Description": "",
            "Name": "SetCodeItemComment",
            "Returns": "",
            "Summary": "Set the comment of a code item at address.",
            "Usage": "SetCodeItemComment(0, \"This code is interesting.\")",
            "Group": "Analysis"
        },
        {
            "Args": [
                "int address",
                "string comment"
            ],
            "Description": "",
            "Name": "AddCommentBlock",
            "Returns": "",
            "Summary": "Set the comment block at address.",
            "Usage": "AddCommentBlock(0x8000, \"This is a comment block\")",
            "Group": "Analysis"
        },
        {
            "Args": [
                "uint16_t address",
                "EDataItemDisplayType type"
            ],
            "Description": "See LuaBase.lua for supported enums.",
            "Name": "SetDataItemDisplayType",
            "Returns": "",
            "Summary": "Set the display type of the item at address.",
            "Usage": "SetDataItemDisplayType(0x4001, EDataItemDisplayType.Binary)",
            "Group": "Analysis"
        },
        {
            "Args": [
                "uint16_t address",
                "string label",
                "uint16_t memoryRange"
            ],
            "Description": "",
            "Name": "AddDataLabel",
            "Returns": "",
            "Summary": "Add label for a data item at address.",
            "Usage": "AddDataLabel(0x8000, \"Level data\")",
            "Group": "Analysis"
        },
        {
            "Args": [
                "uint16_t address",
                "string function"
            ],
            "Description": "",
            "Name": "RegisterExecutionHandler",
            "Returns": "",
            "Summary": "Registers a lua function to be called every time a given memory address is executed.",
            "Usage": "function OnExecuted\n  print(\"Tick\")\nend\n\nRegisterExecutionHandler(0xee9d, \"OnExecuted\")",
            "Group": "Memory/Machine State"
        },
        {
            "Args": [
                "uint16_t address"
            ],
            "Description": "",
            "Name": "RemoveExecutionHandler",
            "Returns": "",
            "Summary": "Removes a previously registered execution handler.",
            "Usage": "RemoveExecutionHandler(0xee9d)",
            "Group": "Memory/Machine State"
        },
        {
            "Args": [
                "{table}"
            ],
            "Description": "Table fields\n\nDataType : EDataType*\nDisplayType : EDataItemDisplayType*\nStartAddress : int\nNoItems : int\nItemSize : int\nCharacterSet : int\nGraphicsSetRef : int\nPaletteNo : int\nStructId : int\nRegisterItem : bool\nClearCodeInfo : bool\nClearLabels : bool\nAddLabelAtStart : bool\nLabelName : string\nAddCommentAtStart : bool\nCommentText : string\n\n* See LuaBase.lua for enums\n\nSee the Format tab in the Code Analysis view for an idea of how this works. It follows the same procedure.",
            "Name": "FormatMemory",
            "Returns": "",
            "Summary": "Format memory at address, using a table to specify formatting options",
            "Usage": "FormatMemory({ StartAddress = 0x3ff8, DataType = EDataType.Byte, ItemSize = 1, NoItems = 8, DisplayType = EDataItemDisplayType.Binary })",
            "Group": "Formatting"
        },
        {
            "Args": [
                "uint16_t address",
                "int width",
                "int height",
                "int bpp"
            ],
            "Description": "",
            "Name": "FormatMemoryAsBitmap",
            "Returns": "",
            "Summary": "Format a region of memory as a bitmap.",
            "Usage": "FormatMemoryAsBitmap(0x5000, 16, 16, 1)",
            "Group": "Formatting"
        },
        {
            "Args": [
                "uint16_t address",
                "int width",
                "int height"
            ],
            "Description": "",
            "Name": "FormatMemoryAsCharMap",
            "Returns": "",
            "Summary": "Format a region of memory as a character map.",
            "Usage": "FormatMemoryAsCharMap(0x5000, 32, 20)",
            "Group": "Formatting"
        },
        {
            "Args": [
                "uint16_t address"
            ],
            "Description": "This function must be called every frame in order to work.",
            "Name": "DrawAddressLabel",
            "Returns": "",
            "Summary": "Draw a summary of a given address.",
            "Usage": "DrawAddressLabel(0)",
            "Group": "Graphics"
        },
        {
            "Description": "This gets the internal scaling value that is used to scale various graphical elements. This value is derived from the current font size.",
            "Name": "GetImageScale",
            "Returns": "float",
            "Summary": "Get the internal scaling value.",
            "Usage": "print(\"The current scaling value is \" .. GetImageScale())",
            "Group": "Graphics"
        },
        {
            "Args": [
                "GraphicsView view",
                "uint32_t colour"
            ],
            "Description": "Colour is specified in the AABBGGRR format.",
            "Name": "ClearGraphicsView",
            "Returns": "",
            "Summary": "Fill a graphics view with a single colour.",
            "Usage": "image = CreateZXGraphicsView(256, 192)\nClearGraphicsView(image, 0xffff0000)",
            "Group": "Graphics"
        },
        {
            "Args": [
                "GraphicsView view"
            ],
            "Description": "This function needs to be called every frame in order to work.",
            "Name": "DrawGraphicsView",
            "Returns": "",
            "Summary": "Draw the contents of a graphics view.",
            "Usage": "SampleViewer =\n{\n\tname = \"Sample Viewer\",\n\tgraphicsView = nil,\n\tonAdd = function(self)\n\t\tself.graphicsView = CreateZXGraphicsView(128,128)\n\t\tClearGraphicsView(self.graphicsView, 0xffff0000)\n\tend,\n\tonDrawUI = function(self)\n\t\tDrawGraphicsView(self.graphicsView)\n\tend\n}\nAddViewer(SampleViewer);",
            "Group": "Graphics"
        },
        {
            "Args": [
                "GraphicsView view",
                "string filename"
            ],
            "Description": "A PNG is written to disk with the contents of the graphics view. The PNG is written to the project's directory using the filename passed in.",
            "Name": "SaveGraphicsViewPNG",
            "Returns": "",
            "Summary": "Save a graphics view to a PNG file.",
            "Usage": "glyphData = GetMemPtr(0x3ff8)\nimage = CreateZXGraphicsView(8, 8)\nDrawZXBitImage(image, glyphData, 0, 0, 1, 1)\nSaveGraphicsViewPNG(image, \"Glyph.png\")",
            "Group": "Graphics"
        },
        {
            "Args": [
                "GraphicsView view",
                "GraphicsView otherView",
                "int xPos",
                "int yPos",
                "int width",
                "int height"
            ],
            "Description": "Graphics can be optionally scaled by setting a width and height different to the original.",
            "Name": "DrawOtherGraphicsViewScaled",
            "Returns": "",
            "Summary": "Draw the contents of one graphics view onto another graphics view.",
            "Usage": "glyphData = GetMemPtr(0x3ff8)\nglyphImage = CreateZXGraphicsView(8, 8)\nDrawZXBitImage(glyphImage, glyphData, 0, 0, 1, 1)\ndestImage = CreateZXGraphicsView(128, 128)\nDrawOtherGraphicsViewScaled(destImage, glyphImage, 0, 0, 64, 64)\n",
            "Group": "Graphics"
        }
    ]
}
