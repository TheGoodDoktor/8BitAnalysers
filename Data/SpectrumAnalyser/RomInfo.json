{
    "Banks": [
        {
            "Description": "",
            "Id": 0
        }
    ],
    "DataTypes": {
        "Enums": null,
        "Flags": null,
        "NextItemId": 0,
        "Structs": null
    },
    "FunctionInfo": [
        {
            "Description": "",
            "EndAddress": 7602176,
            "StartAddress": 7602176,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 8192000,
            "StartAddress": 8192000,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 46071808,
            "StartAddress": 46071808,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 52297728,
            "StartAddress": 52297728,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 53673984,
            "StartAddress": 53673984,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 98762752,
            "StartAddress": 98762752,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 99024896,
            "StartAddress": 99024896,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 153878528,
            "StartAddress": 153878528,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 184745984,
            "StartAddress": 184745984,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 186908672,
            "StartAddress": 186908672,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 188219392,
            "StartAddress": 188219392,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 188612608,
            "StartAddress": 188612608,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 191168512,
            "StartAddress": 191168512,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 198901760,
            "StartAddress": 198901760,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 201981952,
            "StartAddress": 201981952,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 202375168,
            "StartAddress": 202375168,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 205193216,
            "StartAddress": 205193216,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 205586432,
            "StartAddress": 205586432,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 206897152,
            "StartAddress": 206897152,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 223150080,
            "StartAddress": 223150080,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 229572608,
            "StartAddress": 229572608,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 234749952,
            "StartAddress": 234749952,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 234881024,
            "StartAddress": 234881024,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 239337472,
            "StartAddress": 239337472,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 243793920,
            "StartAddress": 243793920,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 245039104,
            "StartAddress": 245039104,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 250871808,
            "StartAddress": 250871808,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 271646720,
            "StartAddress": 271646720,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 287113216,
            "StartAddress": 287113216,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 294649856,
            "StartAddress": 294649856,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 294977536,
            "StartAddress": 294977536,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 366215168,
            "StartAddress": 366215168,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 367394816,
            "StartAddress": 367394816,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 367984640,
            "StartAddress": 367984640,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 369164288,
            "StartAddress": 369164288,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 370475008,
            "StartAddress": 370475008,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 371982336,
            "StartAddress": 371982336,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 374472704,
            "StartAddress": 374472704,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 374669312,
            "StartAddress": 374669312,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 375652352,
            "StartAddress": 375652352,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 378863616,
            "StartAddress": 378863616,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 380633088,
            "StartAddress": 380633088,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 383516672,
            "StartAddress": 383516672,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 385941504,
            "StartAddress": 385941504,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 387842048,
            "StartAddress": 387842048,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 391970816,
            "StartAddress": 391970816,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 395640832,
            "StartAddress": 395640832,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 405995520,
            "StartAddress": 405995520,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 408223744,
            "StartAddress": 408223744,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 410845184,
            "StartAddress": 410845184,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 414580736,
            "StartAddress": 414580736,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 415301632,
            "StartAddress": 415301632,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 417398784,
            "StartAddress": 417398784,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 420413440,
            "StartAddress": 420413440,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 421265408,
            "StartAddress": 421265408,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 423034880,
            "StartAddress": 423034880,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 426639360,
            "StartAddress": 426639360,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 427819008,
            "StartAddress": 427819008,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 431489024,
            "StartAddress": 431489024,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 434438144,
            "StartAddress": 434438144,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 434634752,
            "StartAddress": 434634752,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 435879936,
            "StartAddress": 435879936,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 437977088,
            "StartAddress": 437977088,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 438829056,
            "StartAddress": 438829056,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 454492160,
            "StartAddress": 454492160,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 462028800,
            "StartAddress": 462028800,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 468582400,
            "StartAddress": 468582400,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 475398144,
            "StartAddress": 475398144,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 478281728,
            "StartAddress": 478281728,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 478937088,
            "StartAddress": 478937088,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 484311040,
            "StartAddress": 484311040,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 484835328,
            "StartAddress": 484835328,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 495321088,
            "StartAddress": 495321088,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 500826112,
            "StartAddress": 500826112,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 512032768,
            "StartAddress": 512032768,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 513015808,
            "StartAddress": 513015808,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 513343488,
            "StartAddress": 513343488,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 520421376,
            "StartAddress": 520421376,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 525598720,
            "StartAddress": 525598720,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 534708224,
            "StartAddress": 534708224,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 536608768,
            "StartAddress": 536608768,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 541392896,
            "StartAddress": 541392896,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 541589504,
            "StartAddress": 541589504,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 541982720,
            "StartAddress": 541982720,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 544210944,
            "StartAddress": 544210944,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 549519360,
            "StartAddress": 549519360,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 565772288,
            "StartAddress": 565772288,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 567672832,
            "StartAddress": 567672832,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 568459264,
            "StartAddress": 568459264,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 569507840,
            "StartAddress": 569507840,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 570163200,
            "StartAddress": 570163200,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 585433088,
            "StartAddress": 585433088,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 587661312,
            "StartAddress": 587661312,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 588513280,
            "StartAddress": 588513280,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 612171776,
            "StartAddress": 612171776,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 615972864,
            "StartAddress": 615972864,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 620429312,
            "StartAddress": 620429312,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 623902720,
            "StartAddress": 623902720,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 682295296,
            "StartAddress": 682295296,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 682754048,
            "StartAddress": 682754048,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 697696256,
            "StartAddress": 697696256,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 710017024,
            "StartAddress": 710017024,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 716242944,
            "StartAddress": 716242944,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 716308480,
            "StartAddress": 716308480,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 718012416,
            "StartAddress": 718012416,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 718077952,
            "StartAddress": 718077952,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 720240640,
            "StartAddress": 720240640,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 720633856,
            "StartAddress": 720633856,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 734396416,
            "StartAddress": 734396416,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 736755712,
            "StartAddress": 736755712,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 737214464,
            "StartAddress": 737214464,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 747110400,
            "StartAddress": 747110400,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 747438080,
            "StartAddress": 747438080,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 748355584,
            "StartAddress": 748355584,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 756744192,
            "StartAddress": 756744192,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 757202944,
            "StartAddress": 757202944,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 757792768,
            "StartAddress": 757792768,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 758841344,
            "StartAddress": 758841344,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 765591552,
            "StartAddress": 765591552,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 768933888,
            "StartAddress": 768933888,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 797638656,
            "StartAddress": 797638656,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 800718848,
            "StartAddress": 800718848,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 803012608,
            "StartAddress": 803012608,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 805568512,
            "StartAddress": 805568512,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 816381952,
            "StartAddress": 816381952,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 848494592,
            "StartAddress": 848494592,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 848691200,
            "StartAddress": 848691200,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 866713600,
            "StartAddress": 866713600,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 867434496,
            "StartAddress": 867434496,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 868220928,
            "StartAddress": 868220928,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 872808448,
            "StartAddress": 872808448,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 879624192,
            "StartAddress": 879624192,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 887685120,
            "StartAddress": 887685120,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 889913344,
            "StartAddress": 889913344,
            "bManualEdit": false,
            "bROMFunction": true
        },
        {
            "Description": "",
            "EndAddress": 901709824,
            "StartAddress": 901709824,
            "bManualEdit": false,
            "bROMFunction": true
        }
    ],
    "Pages": [
        {
            "CodeInfo": [
                {
                    "Address": 0,
                    "ByteSize": 1,
                    "Comment": "Disable the 'keyboard interrupt'."
                },
                {
                    "Address": 1,
                    "ByteSize": 1,
                    "Comment": "&00 for start (but &FF for 'NEW')."
                },
                {
                    "Address": 2,
                    "ByteSize": 3,
                    "Comment": "Top of possible RAM."
                },
                {
                    "Address": 5,
                    "ByteSize": 3,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 8,
                    "ByteSize": 3,
                    "Comment": "{The address reached by the interpreter",
                    "OperandType": 1
                },
                {
                    "Address": 11,
                    "ByteSize": 3,
                    "Comment": "(\\#SYSVAR(CH-ADD)) is copied to the error pointer",
                    "OperandType": 1
                },
                {
                    "Address": 14,
                    "ByteSize": 2,
                    "Comment": "(\\#SYSVAR(X-PTR)) before proceeding.}",
                    "OperandType": 2
                },
                {
                    "Address": 16,
                    "ByteSize": 3,
                    "Comment": "Jump forward immediately.",
                    "OperandType": 2
                },
                {
                    "Address": 24,
                    "ByteSize": 3,
                    "Comment": "{Fetch the value that is addressed by \\#SYSVAR(CH-ADD).",
                    "OperandType": 1
                },
                {
                    "Address": 27,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 28,
                    "ByteSize": 3,
                    "Comment": "Find out if the character is printable.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 31,
                    "ByteSize": 1,
                    "Comment": "Return if it is so."
                },
                {
                    "Address": 32,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(CH-ADD) needs to be incremented.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 35,
                    "ByteSize": 2,
                    "Comment": "Jump back to test the new value.",
                    "OperandType": 2
                },
                {
                    "Address": 40,
                    "ByteSize": 3,
                    "Comment": "Jump forward immediately.",
                    "OperandType": 2
                },
                {
                    "Address": 48,
                    "ByteSize": 1,
                    "Comment": "Save the 'number'."
                },
                {
                    "Address": 49,
                    "ByteSize": 3,
                    "Comment": "{Fetch the present address of the start of the work",
                    "OperandType": 1
                },
                {
                    "Address": 52,
                    "ByteSize": 1,
                    "Comment": "space (\\#SYSVAR(WORKSP)) and save that also before"
                },
                {
                    "Address": 53,
                    "ByteSize": 3,
                    "Comment": "proceeding.}",
                    "OperandType": 2
                },
                {
                    "Address": 56,
                    "ByteSize": 1,
                    "Comment": "{Save the current values held in these registers."
                },
                {
                    "Address": 57,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 58,
                    "ByteSize": 3,
                    "Comment": "{The lower two bytes of the frame counter",
                    "OperandType": 1
                },
                {
                    "Address": 61,
                    "ByteSize": 1,
                    "Comment": "(\\#SYSVAR(FRAMES)) are incremented every 20 ms. (U.K.)"
                },
                {
                    "Address": 62,
                    "ByteSize": 3,
                    "Comment": "The highest byte of the frame counter is only",
                    "OperandType": 1
                },
                {
                    "Address": 65,
                    "ByteSize": 1,
                    "Comment": "incremented when the value of the lower two bytes is"
                },
                {
                    "Address": 66,
                    "ByteSize": 1,
                    "Comment": "zero."
                },
                {
                    "Address": 67,
                    "ByteSize": 2,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 69,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 72,
                    "ByteSize": 1,
                    "Comment": "{Save the current values held in these registers."
                },
                {
                    "Address": 73,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 74,
                    "ByteSize": 3,
                    "Comment": "Now scan the keyboard.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 77,
                    "ByteSize": 1,
                    "Comment": "{Restore the values."
                },
                {
                    "Address": 78,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 79,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 80,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 81,
                    "ByteSize": 1,
                    "Comment": "{The maskable interrupt is enabled before returning."
                },
                {
                    "Address": 82,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 83,
                    "ByteSize": 1,
                    "Comment": "{The address on the stack points to the error code."
                },
                {
                    "Address": 84,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 85,
                    "ByteSize": 3,
                    "Comment": "It is transferred to \\#SYSVAR(ERR-NR)."
                },
                {
                    "Address": 88,
                    "ByteSize": 4,
                    "Comment": "{The machine stack is cleared by setting the stack",
                    "OperandType": 1
                },
                {
                    "Address": 92,
                    "ByteSize": 3,
                    "Comment": "pointer to \\#SYSVAR(ERR-SP) before exiting via #ADDR:0x16C5#.}",
                    "OperandType": 2
                },
                {
                    "Address": 102,
                    "ByteSize": 1,
                    "Comment": "{Save the current values held in these registers.",
                    "Flags": 4
                },
                {
                    "Address": 103,
                    "ByteSize": 1,
                    "Comment": "}",
                    "Flags": 4
                },
                {
                    "Address": 104,
                    "ByteSize": 3,
                    "Comment": "{The two bytes of \\#SYSVAR(NMIADD) must both be zero for",
                    "Flags": 4,
                    "OperandType": 1
                },
                {
                    "Address": 107,
                    "ByteSize": 1,
                    "Comment": "the reset to occur.",
                    "Flags": 4
                },
                {
                    "Address": 108,
                    "ByteSize": 1,
                    "Comment": "}",
                    "Flags": 4
                },
                {
                    "Address": 109,
                    "ByteSize": 2,
                    "Comment": "Note: this should have been '\\#S/JR Z/'!",
                    "Flags": 4,
                    "OperandType": 2
                },
                {
                    "Address": 111,
                    "ByteSize": 1,
                    "Comment": "Jump to #ADDR:0x0000#.",
                    "Flags": 4
                },
                {
                    "Address": 112,
                    "ByteSize": 1,
                    "Comment": "{Restore the current values to these registers and",
                    "Flags": 4
                },
                {
                    "Address": 113,
                    "ByteSize": 1,
                    "Comment": "return.",
                    "Flags": 4
                },
                {
                    "Address": 114,
                    "ByteSize": 2,
                    "Comment": "}",
                    "Flags": 4
                },
                {
                    "Address": 116,
                    "ByteSize": 3,
                    "Comment": "Fetch the address from \\#SYSVAR(CH-ADD).",
                    "OperandType": 1
                },
                {
                    "Address": 119,
                    "ByteSize": 1,
                    "Comment": "Increment the pointer."
                },
                {
                    "Address": 120,
                    "ByteSize": 3,
                    "Comment": "Set \\#SYSVAR(CH-ADD).",
                    "OperandType": 1
                },
                {
                    "Address": 123,
                    "ByteSize": 1,
                    "Comment": "{Fetch the addressed value and then return."
                },
                {
                    "Address": 124,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 125,
                    "ByteSize": 2,
                    "Comment": "{Return with the carry flag reset if ordinary character"
                },
                {
                    "Address": 127,
                    "ByteSize": 1,
                    "Comment": "code.}"
                },
                {
                    "Address": 128,
                    "ByteSize": 2,
                    "Comment": "{Return if the end of the line has been reached."
                },
                {
                    "Address": 130,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 131,
                    "ByteSize": 2,
                    "Comment": "{Return with codes &00 to &0F but with carry set."
                },
                {
                    "Address": 133,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 134,
                    "ByteSize": 2,
                    "Comment": "{Return with codes &18 to &20 again with carry set."
                },
                {
                    "Address": 136,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 137,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 138,
                    "ByteSize": 1,
                    "Comment": "Skip over once."
                },
                {
                    "Address": 139,
                    "ByteSize": 2,
                    "Comment": "{Jump forward with codes &10 to &15 (INK to OVER)."
                },
                {
                    "Address": 141,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 143,
                    "ByteSize": 1,
                    "Comment": "Skip over once more (AT and TAB)."
                },
                {
                    "Address": 144,
                    "ByteSize": 1,
                    "Comment": "{Return with the carry flag set and \\#SYSVAR(CH-ADD)"
                },
                {
                    "Address": 145,
                    "ByteSize": 3,
                    "Comment": "holding the appropriate address.",
                    "OperandType": 1
                },
                {
                    "Address": 148,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 654,
                    "ByteSize": 2,
                    "Comment": "The initial key value for each line will be &2F,\n&2E,..., &28. (Eight lines.)"
                },
                {
                    "Address": 656,
                    "ByteSize": 3,
                    "Comment": "Initialise #REG:DE# to 'no-key'."
                },
                {
                    "Address": 659,
                    "ByteSize": 3,
                    "Comment": "#REG:C#=port address, #REG:B#=counter."
                },
                {
                    "Address": 662,
                    "ByteSize": 2,
                    "Comment": "Read from the port specified."
                },
                {
                    "Address": 664,
                    "ByteSize": 1,
                    "Comment": "{A pressed key in the line will set its respective bit,"
                },
                {
                    "Address": 665,
                    "ByteSize": 2,
                    "Comment": "from bit 0 (outer key) to bit 4 (inner key).}"
                },
                {
                    "Address": 667,
                    "ByteSize": 2,
                    "Comment": "Jump forward if none of the five keys in the line are\nbeing pressed.",
                    "OperandType": 2
                },
                {
                    "Address": 669,
                    "ByteSize": 1,
                    "Comment": "{The key-bits go to the #REG:H# register whilst the"
                },
                {
                    "Address": 670,
                    "ByteSize": 1,
                    "Comment": "initial key value is fetched.}"
                },
                {
                    "Address": 671,
                    "ByteSize": 1,
                    "Comment": "{If three keys are being pressed on the keyboard then"
                },
                {
                    "Address": 672,
                    "ByteSize": 1,
                    "Comment": "the #REG:D# register will no longer hold &FF - so return\nif this happens.}"
                },
                {
                    "Address": 673,
                    "ByteSize": 2,
                    "Comment": "{Repeatedly subtract 8 from the present key value until"
                },
                {
                    "Address": 675,
                    "ByteSize": 2,
                    "Comment": "a key-bit is found."
                },
                {
                    "Address": 677,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 679,
                    "ByteSize": 1,
                    "Comment": "Copy any earlier key value to the #REG:D# register."
                },
                {
                    "Address": 680,
                    "ByteSize": 1,
                    "Comment": "Pass the new key value to the #REG:E# register."
                },
                {
                    "Address": 681,
                    "ByteSize": 2,
                    "Comment": "If there is a second, or possibly a third, pressed key\nin this line then jump back.",
                    "OperandType": 2
                },
                {
                    "Address": 683,
                    "ByteSize": 1,
                    "Comment": "The line has been scanned so the initial key value is\nreduced for the next pass."
                },
                {
                    "Address": 684,
                    "ByteSize": 2,
                    "Comment": "{The counter is shifted and the jump taken if there are"
                },
                {
                    "Address": 686,
                    "ByteSize": 2,
                    "Comment": "still lines to be scanned.}",
                    "OperandType": 2
                },
                {
                    "Address": 688,
                    "ByteSize": 1,
                    "Comment": "{Accept any key value which still has the #REG:D# register"
                },
                {
                    "Address": 689,
                    "ByteSize": 1,
                    "Comment": "holding &FF, i.e. a single key pressed or 'no-key'."
                },
                {
                    "Address": 690,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 691,
                    "ByteSize": 2,
                    "Comment": "{Accept the key value for a pair of keys if the #REG:D#"
                },
                {
                    "Address": 693,
                    "ByteSize": 1,
                    "Comment": "key is CAPS SHIFT.}"
                },
                {
                    "Address": 694,
                    "ByteSize": 2,
                    "Comment": "{Accept the key value for a pair of keys if the #REG:D#"
                },
                {
                    "Address": 696,
                    "ByteSize": 1,
                    "Comment": "key is SYMBOL SHIFT.}"
                },
                {
                    "Address": 697,
                    "ByteSize": 1,
                    "Comment": "{It is however possible for the #REG:E# key of a pair to"
                },
                {
                    "Address": 698,
                    "ByteSize": 1,
                    "Comment": "be SYMBOL SHIFT - so this has to be considered."
                },
                {
                    "Address": 699,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 700,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 702,
                    "ByteSize": 1,
                    "Comment": "Return with the zero flag set if it was SYMBOL SHIFT and\n'another key'; otherwise reset."
                },
                {
                    "Address": 703,
                    "ByteSize": 3,
                    "Comment": "{Fetch a key value in the #REG:DE# register pair but",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 706,
                    "ByteSize": 1,
                    "Comment": "return immediately if the zero flag is reset.}"
                },
                {
                    "Address": 707,
                    "ByteSize": 3,
                    "Comment": "Start with #ADDR:0x5C00#(KSTATE0)."
                },
                {
                    "Address": 710,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if a 'set is free', i.e."
                },
                {
                    "Address": 712,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x5C00#(KSTATE0/4) holds &FF.}",
                    "OperandType": 2
                },
                {
                    "Address": 714,
                    "ByteSize": 1,
                    "Comment": "{However if the set is not free decrease its '5 call"
                },
                {
                    "Address": 715,
                    "ByteSize": 1,
                    "Comment": "counter' and when it reaches zero signal the set as"
                },
                {
                    "Address": 716,
                    "ByteSize": 1,
                    "Comment": "free."
                },
                {
                    "Address": 717,
                    "ByteSize": 2,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 719,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 721,
                    "ByteSize": 1,
                    "Comment": "{Fetch the low byte of the address and jump back if the"
                },
                {
                    "Address": 722,
                    "ByteSize": 3,
                    "Comment": "second set (#ADDR:0x5C04#(KSTATE4)) has still to be"
                },
                {
                    "Address": 725,
                    "ByteSize": 1,
                    "Comment": "considered."
                },
                {
                    "Address": 726,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 728,
                    "ByteSize": 3,
                    "Comment": "{Make the necessary tests and return if needed. Also",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 731,
                    "ByteSize": 1,
                    "Comment": "change the key value to a 'main code'.}"
                },
                {
                    "Address": 732,
                    "ByteSize": 3,
                    "Comment": "Look first at #ADDR:0x5C00#(KSTATE0)."
                },
                {
                    "Address": 735,
                    "ByteSize": 1,
                    "Comment": "{Jump forward if the codes match - indicating a repeat."
                },
                {
                    "Address": 736,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 738,
                    "ByteSize": 1,
                    "Comment": "Save the address of #ADDR:0x5C00#(KSTATE0)."
                },
                {
                    "Address": 739,
                    "ByteSize": 3,
                    "Comment": "Now look at #ADDR:0x5C04#(KSTATE4)."
                },
                {
                    "Address": 742,
                    "ByteSize": 1,
                    "Comment": "{Jump forward if the codes match - indicating a repeat."
                },
                {
                    "Address": 743,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 745,
                    "ByteSize": 2,
                    "Comment": "Consider the second set."
                },
                {
                    "Address": 747,
                    "ByteSize": 2,
                    "Comment": "Jump forward if 'free'.",
                    "OperandType": 2
                },
                {
                    "Address": 749,
                    "ByteSize": 1,
                    "Comment": "Now consider the first set."
                },
                {
                    "Address": 750,
                    "ByteSize": 2,
                    "Comment": "{Continue if the set is 'free' but exit if not."
                },
                {
                    "Address": 752,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 753,
                    "ByteSize": 1,
                    "Comment": "{The code is passed to the #REG:E# register and to"
                },
                {
                    "Address": 754,
                    "ByteSize": 1,
                    "Comment": "#ADDR:0x5C00#(KSTATE0/4).}"
                },
                {
                    "Address": 755,
                    "ByteSize": 1,
                    "Comment": "{The '5 call counter' for this set is reset to '5'."
                },
                {
                    "Address": 756,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 758,
                    "ByteSize": 1,
                    "Comment": "{The third system variable of the set holds the"
                },
                {
                    "Address": 759,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(REPDEL) value (normally 0.7 secs.).",
                    "OperandType": 1
                },
                {
                    "Address": 762,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 763,
                    "ByteSize": 1,
                    "Comment": "Point to #ADDR:0x5C00#(KSTATE3/7)."
                },
                {
                    "Address": 764,
                    "ByteSize": 3,
                    "Comment": "Fetch \\#SYSVAR(MODE)."
                },
                {
                    "Address": 767,
                    "ByteSize": 3,
                    "Comment": "Fetch \\#SYSVAR(FLAGS)."
                },
                {
                    "Address": 770,
                    "ByteSize": 1,
                    "Comment": "{Save the pointer whilst the 'main code' is decoded."
                },
                {
                    "Address": 771,
                    "ByteSize": 3,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 774,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 775,
                    "ByteSize": 1,
                    "Comment": "The final code value is saved in #ADDR:0x5C00#(KSTATE3/7),\nfrom where it is collected in case of a repeat."
                },
                {
                    "Address": 776,
                    "ByteSize": 3,
                    "Comment": "{Enter the final code value into \\#SYSVAR(LAST-K) and",
                    "OperandType": 1
                },
                {
                    "Address": 779,
                    "ByteSize": 4,
                    "Comment": "signal 'a new key' by setting bit 5 of \\#SYSVAR(FLAGS).}"
                },
                {
                    "Address": 783,
                    "ByteSize": 1,
                    "Comment": "Finally return."
                },
                {
                    "Address": 784,
                    "ByteSize": 1,
                    "Comment": "{Point to the '5 call counter' of the set being used"
                },
                {
                    "Address": 785,
                    "ByteSize": 2,
                    "Comment": "and reset it to 5.}"
                },
                {
                    "Address": 787,
                    "ByteSize": 1,
                    "Comment": "{Point to the third system variable - the"
                },
                {
                    "Address": 788,
                    "ByteSize": 1,
                    "Comment": "\\#SYSVAR(REPDEL)/\\#SYSVAR(REPPER) value - and decrement\nit.}"
                },
                {
                    "Address": 789,
                    "ByteSize": 1,
                    "Comment": "Exit from the #ADDR:0x02BF# subroutine if the delay period\nhas not passed."
                },
                {
                    "Address": 790,
                    "ByteSize": 3,
                    "Comment": "{However once it has passed the delay period for the",
                    "OperandType": 1
                },
                {
                    "Address": 793,
                    "ByteSize": 1,
                    "Comment": "next repeat is to be \\#SYSVAR(REPPER).}"
                },
                {
                    "Address": 794,
                    "ByteSize": 1,
                    "Comment": "{The repeat has been accepted so the final code value"
                },
                {
                    "Address": 795,
                    "ByteSize": 1,
                    "Comment": "is fetched from #ADDR:0x5C00#(KSTATE3/7) and passed to"
                },
                {
                    "Address": 796,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x0308#.}",
                    "OperandType": 2
                },
                {
                    "Address": 798,
                    "ByteSize": 1,
                    "Comment": "Copy the shift byte."
                },
                {
                    "Address": 799,
                    "ByteSize": 2,
                    "Comment": "Clear the #REG:D# register for later."
                },
                {
                    "Address": 801,
                    "ByteSize": 1,
                    "Comment": "Move the key number."
                },
                {
                    "Address": 802,
                    "ByteSize": 2,
                    "Comment": "{Return now if the key was 'CAPS SHIFT' only or"
                },
                {
                    "Address": 804,
                    "ByteSize": 1,
                    "Comment": "'no-key'.}"
                },
                {
                    "Address": 805,
                    "ByteSize": 2,
                    "Comment": "{Jump forward unless the #REG:E# key was SYMBOL SHIFT."
                },
                {
                    "Address": 807,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 809,
                    "ByteSize": 2,
                    "Comment": "{However accept SYMBOL SHIFT and another key; return"
                },
                {
                    "Address": 811,
                    "ByteSize": 1,
                    "Comment": "with SYMBOL SHIFT only.}"
                },
                {
                    "Address": 812,
                    "ByteSize": 3,
                    "Comment": "The base address of the #ADDR:0x0205#\\#$0205(main key table)."
                },
                {
                    "Address": 815,
                    "ByteSize": 1,
                    "Comment": "{Index into the table and fetch the 'main code'."
                },
                {
                    "Address": 816,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 817,
                    "ByteSize": 1,
                    "Comment": "{Signal 'valid keystroke' before returning."
                },
                {
                    "Address": 818,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 819,
                    "ByteSize": 1,
                    "Comment": "Copy the 'main code'."
                },
                {
                    "Address": 820,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if a digit key is being considered; also"
                },
                {
                    "Address": 822,
                    "ByteSize": 2,
                    "Comment": "SPACE, ENTER and both shifts.}",
                    "OperandType": 2
                },
                {
                    "Address": 824,
                    "ByteSize": 1,
                    "Comment": "Decrement the \\#SYSVAR(MODE) value."
                },
                {
                    "Address": 825,
                    "ByteSize": 3,
                    "Comment": "{Jump forward, as needed, for modes 'K', 'L', 'C' and",
                    "OperandType": 2
                },
                {
                    "Address": 828,
                    "ByteSize": 2,
                    "Comment": "'E'.}",
                    "OperandType": 2
                },
                {
                    "Address": 830,
                    "ByteSize": 2,
                    "Comment": "Add the offset."
                },
                {
                    "Address": 832,
                    "ByteSize": 1,
                    "Comment": "Return with the 'final code'."
                },
                {
                    "Address": 833,
                    "ByteSize": 3,
                    "Comment": "The base address for #ADDR:0x022C#(table 'b')."
                },
                {
                    "Address": 836,
                    "ByteSize": 1,
                    "Comment": "{Jump forward to use this table if neither shift key is"
                },
                {
                    "Address": 837,
                    "ByteSize": 2,
                    "Comment": "being pressed.}",
                    "OperandType": 2
                },
                {
                    "Address": 839,
                    "ByteSize": 3,
                    "Comment": "Otherwise use the base address for #ADDR:0x0246#(table 'c')."
                },
                {
                    "Address": 842,
                    "ByteSize": 2,
                    "Comment": "Clear the #REG:D# register."
                },
                {
                    "Address": 844,
                    "ByteSize": 1,
                    "Comment": "{Index the required table and fetch the 'final code'."
                },
                {
                    "Address": 845,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 846,
                    "ByteSize": 1,
                    "Comment": "Then return."
                },
                {
                    "Address": 847,
                    "ByteSize": 3,
                    "Comment": "The base address for #ADDR:0x026A#(table 'e')."
                },
                {
                    "Address": 850,
                    "ByteSize": 2,
                    "Comment": "{Jump back if using the SYMBOL SHIFT key and a letter"
                },
                {
                    "Address": 852,
                    "ByteSize": 2,
                    "Comment": "key.}",
                    "OperandType": 2
                },
                {
                    "Address": 854,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if currently in 'K' mode."
                },
                {
                    "Address": 856,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 858,
                    "ByteSize": 4,
                    "Comment": "{If CAPS LOCK is set (bit 3 of #ADDR:0x5C6A#(FLAGS2) set)"
                },
                {
                    "Address": 862,
                    "ByteSize": 1,
                    "Comment": "then return with the 'main code'.}"
                },
                {
                    "Address": 863,
                    "ByteSize": 1,
                    "Comment": "{Also return in the same manner if CAPS SHIFT is being"
                },
                {
                    "Address": 864,
                    "ByteSize": 1,
                    "Comment": "pressed.}"
                },
                {
                    "Address": 865,
                    "ByteSize": 2,
                    "Comment": "{However if lower case codes are required then &20 has"
                },
                {
                    "Address": 867,
                    "ByteSize": 1,
                    "Comment": "to be added to the 'main code' to give the correct\n'final code'.}"
                },
                {
                    "Address": 868,
                    "ByteSize": 2,
                    "Comment": "{Add the required offset and return."
                },
                {
                    "Address": 870,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 871,
                    "ByteSize": 2,
                    "Comment": "{Proceed only with the digit keys, i.e. return with"
                },
                {
                    "Address": 873,
                    "ByteSize": 1,
                    "Comment": "SPACE (&20), ENTER (&0D) and both shifts (&0E).}"
                },
                {
                    "Address": 874,
                    "ByteSize": 1,
                    "Comment": "Now separate the digit keys into three groups -\naccording to the mode."
                },
                {
                    "Address": 875,
                    "ByteSize": 3,
                    "Comment": "{Jump with 'K', 'L' and 'C' modes, and also with 'G'",
                    "OperandType": 2
                },
                {
                    "Address": 878,
                    "ByteSize": 2,
                    "Comment": "mode. Continue with 'E' mode.}",
                    "OperandType": 2
                },
                {
                    "Address": 880,
                    "ByteSize": 3,
                    "Comment": "The base address for #ADDR:0x0284#(table 'f')."
                },
                {
                    "Address": 883,
                    "ByteSize": 2,
                    "Comment": "{Use this table for SYMBOL SHIFT and a digit key in"
                },
                {
                    "Address": 885,
                    "ByteSize": 2,
                    "Comment": "extended mode.}",
                    "OperandType": 2
                },
                {
                    "Address": 887,
                    "ByteSize": 2,
                    "Comment": "{Jump forward with digit keys '8' and '9'."
                },
                {
                    "Address": 889,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 891,
                    "ByteSize": 2,
                    "Comment": "Reduce the range &30 to &37 giving &10 to &17."
                },
                {
                    "Address": 893,
                    "ByteSize": 1,
                    "Comment": "{Return with this 'paper colour code' if CAPS SHIFT is"
                },
                {
                    "Address": 894,
                    "ByteSize": 1,
                    "Comment": "not being used.}"
                },
                {
                    "Address": 895,
                    "ByteSize": 2,
                    "Comment": "{But if it is then the range is to be &18 to &1F"
                },
                {
                    "Address": 897,
                    "ByteSize": 1,
                    "Comment": "instead - indicating an 'ink colour code'.}"
                },
                {
                    "Address": 898,
                    "ByteSize": 2,
                    "Comment": "&38 and &39 go to &02 and &03."
                },
                {
                    "Address": 900,
                    "ByteSize": 1,
                    "Comment": "{Return with these codes if CAPS SHIFT is not being"
                },
                {
                    "Address": 901,
                    "ByteSize": 1,
                    "Comment": "used. (These are 'BRIGHT' codes.)}"
                },
                {
                    "Address": 902,
                    "ByteSize": 2,
                    "Comment": "{Subtract '2' if CAPS SHIFT is being used; giving &00"
                },
                {
                    "Address": 904,
                    "ByteSize": 1,
                    "Comment": "and &01 (as 'FLASH' codes).}"
                },
                {
                    "Address": 905,
                    "ByteSize": 3,
                    "Comment": "The base address of #ADDR:0x0260#(table 'd')."
                },
                {
                    "Address": 908,
                    "ByteSize": 2,
                    "Comment": "{Use this table directly for both digit key '9' that is"
                },
                {
                    "Address": 910,
                    "ByteSize": 2,
                    "Comment": "to give GRAPHICS, and digit key '0' that is to give",
                    "OperandType": 2
                },
                {
                    "Address": 912,
                    "ByteSize": 2,
                    "Comment": "DELETE."
                },
                {
                    "Address": 914,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 916,
                    "ByteSize": 2,
                    "Comment": "{For keys '1' to '8' make the range &80 to &87."
                },
                {
                    "Address": 918,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 920,
                    "ByteSize": 1,
                    "Comment": "{Return with a value from this range if neither shift"
                },
                {
                    "Address": 921,
                    "ByteSize": 1,
                    "Comment": "key is being pressed.}"
                },
                {
                    "Address": 922,
                    "ByteSize": 2,
                    "Comment": "{But if 'shifted' make the range &88 to &8F."
                },
                {
                    "Address": 924,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 925,
                    "ByteSize": 1,
                    "Comment": "{Return directly if neither shift key is being used."
                },
                {
                    "Address": 926,
                    "ByteSize": 1,
                    "Comment": "(Final codes &30 to &39.)}"
                },
                {
                    "Address": 927,
                    "ByteSize": 2,
                    "Comment": "{Use #ADDR:0x0260#(table 'd') if the CAPS SHIFT key is also"
                },
                {
                    "Address": 929,
                    "ByteSize": 3,
                    "Comment": "being pressed."
                },
                {
                    "Address": 932,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 934,
                    "ByteSize": 2,
                    "Comment": "Reduce the range to give &20 to &29."
                },
                {
                    "Address": 936,
                    "ByteSize": 2,
                    "Comment": "{Separate the '@' character from the others."
                },
                {
                    "Address": 938,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 940,
                    "ByteSize": 2,
                    "Comment": "The '_' character has also to be separated."
                },
                {
                    "Address": 942,
                    "ByteSize": 1,
                    "Comment": "Return now with the 'final codes' &21, &23 to &29."
                },
                {
                    "Address": 943,
                    "ByteSize": 2,
                    "Comment": "{Give the '_' character a code of &5F."
                },
                {
                    "Address": 945,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 946,
                    "ByteSize": 2,
                    "Comment": "{Give the '@' character a code of &40."
                },
                {
                    "Address": 948,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 949,
                    "ByteSize": 1,
                    "Comment": "Disable the interrupt for the duration of a 'beep'."
                },
                {
                    "Address": 950,
                    "ByteSize": 1,
                    "Comment": "Save #REG:L# temporarily."
                },
                {
                    "Address": 951,
                    "ByteSize": 2,
                    "Comment": "{Each '1' in the #REG:L# register is to count 4 T states,"
                },
                {
                    "Address": 953,
                    "ByteSize": 2,
                    "Comment": "but take INT (#REG:L#/4) and count 16 T states instead.}"
                },
                {
                    "Address": 955,
                    "ByteSize": 1,
                    "Comment": "{Go back to the original value in #REG:L# and find how"
                },
                {
                    "Address": 956,
                    "ByteSize": 2,
                    "Comment": "many were lost by taking 3-(#REG:A# mod 4)."
                },
                {
                    "Address": 958,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 959,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 961,
                    "ByteSize": 4,
                    "Comment": "The base address of the timing loop."
                },
                {
                    "Address": 965,
                    "ByteSize": 2,
                    "Comment": "Alter the length of the timing loop. Use an earlier\nstarting point for each '1' lost by taking INT\n(#REG:L#/4)."
                },
                {
                    "Address": 967,
                    "ByteSize": 3,
                    "Comment": "{Fetch the present border colour from \\#SYSVAR(BORDCR)",
                    "OperandType": 1
                },
                {
                    "Address": 970,
                    "ByteSize": 2,
                    "Comment": "and move it to bits 2, 1 and 0 of the #REG:A# register."
                },
                {
                    "Address": 972,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 973,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 974,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 975,
                    "ByteSize": 2,
                    "Comment": "Ensure the MIC output is 'off'."
                },
                {
                    "Address": 977,
                    "ByteSize": 1,
                    "Comment": "{Add 4 T states for each earlier entry point that is"
                },
                {
                    "Address": 978,
                    "ByteSize": 1,
                    "Comment": "used."
                },
                {
                    "Address": 979,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 980,
                    "ByteSize": 1,
                    "Comment": "{The values in the #REG:B# and #REG:C# registers will come"
                },
                {
                    "Address": 981,
                    "ByteSize": 1,
                    "Comment": "from the #REG:H# and #REG:L# registers - see below.}"
                },
                {
                    "Address": 982,
                    "ByteSize": 1,
                    "Comment": "{The 'timing loop', i.e. #REG:BC#*4 T states. (But note"
                },
                {
                    "Address": 983,
                    "ByteSize": 2,
                    "Comment": "that at the half-cycle point, #REG:C# will be equal to",
                    "OperandType": 2
                },
                {
                    "Address": 985,
                    "ByteSize": 2,
                    "Comment": "#REG:L#+1.)"
                },
                {
                    "Address": 987,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 988,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 991,
                    "ByteSize": 2,
                    "Comment": "Flip bit 4."
                },
                {
                    "Address": 993,
                    "ByteSize": 2,
                    "Comment": "Perform the '\\#S/OUT/' operation, leaving the border\nunchanged."
                },
                {
                    "Address": 995,
                    "ByteSize": 1,
                    "Comment": "Reset the #REG:B# register."
                },
                {
                    "Address": 996,
                    "ByteSize": 1,
                    "Comment": "Save the #REG:A# register."
                },
                {
                    "Address": 997,
                    "ByteSize": 2,
                    "Comment": "{Jump if at the half-cycle point."
                },
                {
                    "Address": 999,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 1001,
                    "ByteSize": 1,
                    "Comment": "{Jump forward if the last complete pass has been made"
                },
                {
                    "Address": 1002,
                    "ByteSize": 1,
                    "Comment": "already."
                },
                {
                    "Address": 1003,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 1005,
                    "ByteSize": 1,
                    "Comment": "Fetch the saved value."
                },
                {
                    "Address": 1006,
                    "ByteSize": 1,
                    "Comment": "Reset the #REG:C# register."
                },
                {
                    "Address": 1007,
                    "ByteSize": 1,
                    "Comment": "Decrease the pass counter."
                },
                {
                    "Address": 1008,
                    "ByteSize": 2,
                    "Comment": "Jump back to the required starting location of the loop."
                },
                {
                    "Address": 1010,
                    "ByteSize": 1,
                    "Comment": "Reset the #REG:C# register."
                },
                {
                    "Address": 1011,
                    "ByteSize": 1,
                    "Comment": "Add 16 T states as this path is shorter."
                },
                {
                    "Address": 1012,
                    "ByteSize": 2,
                    "Comment": "Jump back."
                },
                {
                    "Address": 1014,
                    "ByteSize": 1,
                    "Comment": "Enable interrupt."
                },
                {
                    "Address": 1015,
                    "ByteSize": 1,
                    "Comment": "Finally return."
                },
                {
                    "Address": 1016,
                    "ByteSize": 1,
                    "Comment": "The floating-point calculator is used to\nmanipulate the two values: t, P.",
                    "Flags": 8,
                    "OperandType": 2
                }
            ],
            "CommentBlocks": [
                {
                    "Address": 0,
                    "Comment": "48K Spectrum ROM disassembly\n \nAnnotations taken from 'The Complete Spectrum ROM Disassembly' by Dr Ian\nLogan and Dr Frank O'Hara, published by Melbourne House.\n \nCopyright 1982 Amstrad\nCopyright 1983 Dr Ian Logan & Dr Frank O'Hara\nCopyright 2013-2020 Richard Dymond\n \nThis disassembly contains fixes for the following bugs:\n* No step back\n* A step back too far\n* Anything equals SCREEN$ (x,y)\n* The 34th bit of division\nSee https://skoolkit.ca/disassemblies/rom/reference/bugs.html for full\ndescriptions of these bugs.\nTHE 'START'\n \nIt all starts here when the Spectrum is powered on.\n \nThe maskable interrupt is disabled and the #REG:DE# register pair set to hold\nthe 'top of possible RAM'."
                },
                {
                    "Address": 8,
                    "Comment": "THE 'ERROR' RESTART\n \nUsed by the routines at #ADDR:0x03F8#, #ADDR:0x053F#, #ADDR:0x0605#, #ADDR:0x0802#, #ADDR:0x0C55#, #ADDR:0x0EF4#,\n#ADDR:0x15C4#, #ADDR:0x15D4#, #ADDR:0x1601#, #ADDR:0x171E#, #ADDR:0x175D#, #ADDR:0x1B76#, #ADDR:0x1B9E#, #ADDR:0x1BD1#,\n#ADDR:0x1C22#, #ADDR:0x1C79#, #ADDR:0x1CEE#, #ADDR:0x1D03#, #ADDR:0x1DAB#, #ADDR:0x1DEC#, #ADDR:0x1E94#, #ADDR:0x1EAC#,\n#ADDR:0x1F23#, #ADDR:0x21B9#, #ADDR:0x21E1#, #ADDR:0x24B7#, #ADDR:0x27BD#, #ADDR:0x2996#, #ADDR:0x30CA#, #ADDR:0x34BC#,\n#ADDR:0x35C9#, #ADDR:0x36C4# and #ADDR:0x3713#.\n \nThe error pointer is made to point to the position of the error."
                },
                {
                    "Address": 16,
                    "Comment": "THE 'PRINT A CHARACTER' RESTART\n \nUsed by the routines at #ADDR:0x0605#, #ADDR:0x0C3B#, #ADDR:0x12A2#, #ADDR:0x17F9#, #ADDR:0x1855#, #ADDR:0x1925#,\n#ADDR:0x1FF5#, #ADDR:0x1FFC#, #ADDR:0x204E#, #ADDR:0x21E1# and #ADDR:0x2DE3#.\n \nA Code of the character to be printed"
                },
                {
                    "Address": 19,
                    "Comment": "Unused"
                },
                {
                    "Address": 24,
                    "Comment": "THE 'COLLECT CHARACTER' RESTART\n \nUsed by the routines at #ADDR:0x0605#, #ADDR:0x12A2#, #ADDR:0x17F9#, #ADDR:0x1B28#, #ADDR:0x1B6F#, #ADDR:0x1BF4#,\n#ADDR:0x1CBE#, #ADDR:0x1DEC#, #ADDR:0x1FDF#, #ADDR:0x1FFC#, #ADDR:0x204E#, #ADDR:0x2089#, #ADDR:0x21B9#, #ADDR:0x21E1#,\n#ADDR:0x2320#, #ADDR:0x2382#, #ADDR:0x24FB#, #ADDR:0x2522#, #ADDR:0x25B3#, #ADDR:0x268D#, #ADDR:0x26C9#, #ADDR:0x27BD#,\n#ADDR:0x28B2#, #ADDR:0x2996#, #ADDR:0x2A52#, #ADDR:0x2C02#, #ADDR:0x2C9B# and #ADDR:0x35DE#.\n \nThe contents of the location currently addressed by \\#SYSVAR(CH-ADD) are\nfetched. A return is made if the value represents a printable character,\notherwise \\#SYSVAR(CH-ADD) is incremented and the tests repeated.\n \nO:A Code of the character"
                },
                {
                    "Address": 28,
                    "Comment": "This entry point is used by the routine at #ADDR:0x0020#."
                },
                {
                    "Address": 32,
                    "Comment": "This routine continues into #ADDR:0x0020#.\nTHE 'COLLECT NEXT CHARACTER' RESTART\n \nUsed by the routines at #ADDR:0x0605#, #ADDR:0x17F9#, #ADDR:0x198B#, #ADDR:0x19FB#, #ADDR:0x1B28#, #ADDR:0x1B6F#,\n#ADDR:0x1C79#, #ADDR:0x1D03#, #ADDR:0x1DEC#, #ADDR:0x1E27#, #ADDR:0x1F60#, #ADDR:0x1FFC#, #ADDR:0x204E#, #ADDR:0x2070#,\n#ADDR:0x2089#, #ADDR:0x21E1#, #ADDR:0x2320#, #ADDR:0x2382#, #ADDR:0x2522#, #ADDR:0x25AF#, #ADDR:0x25E8#, #ADDR:0x2627#,\n#ADDR:0x2634#, #ADDR:0x2668#, #ADDR:0x2672#, #ADDR:0x267B#, #ADDR:0x26C9#, #ADDR:0x27BD#, #ADDR:0x28B2#, #ADDR:0x2996#,\n#ADDR:0x2A52#, #ADDR:0x2C02# and #ADDR:0x2C9B#.\n \nThe routine at #ADDR:0x0018# continues here.\n \nAs a BASIC line is interpreted, this routine is called repeatedly to step\nalong the line.\n \nO:A Code of the next character"
                },
                {
                    "Address": 37,
                    "Comment": "Unused"
                },
                {
                    "Address": 40,
                    "Comment": "THE 'CALCULATOR' RESTART\n \nUsed by the routines at #ADDR:0x03F8#, #ADDR:0x1736#, #ADDR:0x1CDE#, #ADDR:0x1CF0#, #ADDR:0x1D03#, #ADDR:0x1DAB#,\n#ADDR:0x1DDA#, #ADDR:0x2320#, #ADDR:0x2382#, #ADDR:0x247D#, #ADDR:0x25F8#, #ADDR:0x2627#, #ADDR:0x26C9#, #ADDR:0x2AFF#,\n#ADDR:0x2C9B#, #ADDR:0x2D2B#, #ADDR:0x2D3B#, #ADDR:0x2D4F#, #ADDR:0x2DA2#, #ADDR:0x2DC1#, #ADDR:0x2DE3#, #ADDR:0x353B#,\n#ADDR:0x36A0#, #ADDR:0x36AF#, #ADDR:0x36C4#, #ADDR:0x3713#, #ADDR:0x3783#, #ADDR:0x37AA#, #ADDR:0x37B5#, #ADDR:0x37DA#,\n#ADDR:0x37E2#, #ADDR:0x3833#, #ADDR:0x3843#, #ADDR:0x384A# and #ADDR:0x3851#.\n \nThe floating point calculator is entered at #ADDR:0x335B#."
                },
                {
                    "Address": 43,
                    "Comment": "Unused"
                },
                {
                    "Address": 48,
                    "Comment": "THE 'MAKE BC SPACES' RESTART\n \nUsed by the routines at #ADDR:0x0605#, #ADDR:0x08B6#, #ADDR:0x2089#, #ADDR:0x2535#, #ADDR:0x25B3#, #ADDR:0x2634#,\n#ADDR:0x2AFF#, #ADDR:0x359C#, #ADDR:0x35C9#, #ADDR:0x35DE#, #ADDR:0x361F# and #ADDR:0x3645#.\n \nThis routine creates free locations in the work space.\n \nBC Number of free locations to create\nO:DE Address of the first byte of new free space\nO:HL Address of the last byte of new free space"
                },
                {
                    "Address": 56,
                    "Comment": "THE 'MASKABLE INTERRUPT' ROUTINE\n \nThe real time clock is incremented and the keyboard scanned whenever a\nmaskable interrupt occurs."
                },
                {
                    "Address": 83,
                    "Comment": "THE 'ERROR-2' ROUTINE\n \nUsed by the routine at #ADDR:0x0008#.\n \nThe return address to the interpreter points to the 'DEFB' that signifies\nwhich error has occurred. This 'DEFB' is fetched and transferred to\n\\#SYSVAR(ERR-NR).\n \nThe machine stack is cleared before jumping forward to clear the calculator\nstack."
                },
                {
                    "Address": 85,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1F05#."
                },
                {
                    "Address": 95,
                    "Comment": "Unused"
                },
                {
                    "Address": 102,
                    "Comment": "THE 'NON-MASKABLE INTERRUPT' ROUTINE\n \nThis routine is not used in the standard Spectrum but the code allows for a\nsystem reset to occur following activation of the NMI line. The system\nvariable at 5CB0, named here \\#SYSVAR(NMIADD), has to have the value zero for\nthe reset to occur."
                },
                {
                    "Address": 116,
                    "Comment": "THE 'CH-ADD+1' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0020#, #ADDR:0x250F# and #ADDR:0x2D3B#.\n \nThe address held in \\#SYSVAR(CH-ADD) is fetched, incremented and restored. The\ncontents of the location now addressed by \\#SYSVAR(CH-ADD) are fetched. The\nentry points of #ADDR:0x0077# and #ADDR:0x0078# are used to set \\#SYSVAR(CH-ADD) for a\ntemporary period.\n \nO:A Code of the character at \\#SYSVAR(CH-ADD)+1"
                },
                {
                    "Address": 119,
                    "Comment": "This entry point is used by the routines at #ADDR:0x1DEC# and #ADDR:0x268D#."
                },
                {
                    "Address": 120,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1DEC#."
                },
                {
                    "Address": 125,
                    "Comment": "THE 'SKIP-OVER' SUBROUTINE\n \nUsed by the routine at #ADDR:0x0018#.\n \nThe value brought to the subroutine in the #REG:A# register is tested to see if\nit is printable. Various special codes lead to #REG:HL# being incremented once\nor twice, and \\#SYSVAR(CH-ADD) amended accordingly.\n \nA Character code"
                },
                {
                    "Address": 149,
                    "Comment": "THE TOKEN TABLE\n \nUsed by the routine at #ADDR:0x0C0A#.\n \nAll the tokens used by the Spectrum are expanded by reference to this table.\nThe last code of each token is 'inverted' by having its bit 7 set."
                },
                {
                    "Address": 517,
                    "Comment": "THE KEY TABLES\n \nUsed by the routines at #ADDR:0x031E# and #ADDR:0x0333#.\n \nThere are six separate key tables. The final character code obtained depends\non the particular key pressed and the 'mode' being used.\n \n \n \n(a) The main key table - L mode and CAPS SHIFT."
                },
                {
                    "Address": 556,
                    "Comment": "(b) Extended mode. Letter keys and unshifted."
                },
                {
                    "Address": 582,
                    "Comment": "(c) Extended mode. Letter keys and either shift."
                },
                {
                    "Address": 608,
                    "Comment": "(d) Control codes. Digit keys and CAPS SHIFT."
                },
                {
                    "Address": 618,
                    "Comment": "(e) Symbol code. Letter keys and symbol shift."
                },
                {
                    "Address": 644,
                    "Comment": "(f) Extended mode. Digit keys and symbol shift."
                },
                {
                    "Address": 654,
                    "Comment": "THE 'KEYBOARD SCANNING' SUBROUTINE\n \nThis very important subroutine is called by both the main keyboard subroutine\n(#ADDR:0x02BF#) and the INKEY$ routine (#ADDR:0x2634#).\n \nIn all instances the #REG:E# register is returned with a value in the range of\n&00 to &27, the value being different for each of the forty keys of the\nkeyboard, or the value &FF, for no-key.\n \nThe #REG:D# register is returned with a value that indicates which single shift\nkey is being pressed. If both shift keys are being pressed then the #REG:D# and\n#REG:E# registers are returned with the values for the CAPS SHIFT and SYMBOL\nSHIFT keys respectively.\n \nIf no key is being pressed then the #REG:DE# register pair is returned holding\n&FFFF.\n \nThe zero flag is returned reset if more than two keys are being pressed, or\nneither key of a pair of keys is a shift key.\n \nO:D Shift key pressed (&18 or &27), or &FF if no shift key pressed\nO:E Other key pressed (&00 to &27), or &FF if no other key pressed\nO:F Zero flag reset if an invalid combination of keys is pressed"
                },
                {
                    "Address": 662,
                    "Comment": "Now enter a loop. Eight passes are made with each pass having a different\ninitial key value and scanning a different line of five keys. (The first line\nis CAPS SHIFT, Z, X, C, V.)"
                },
                {
                    "Address": 688,
                    "Comment": "Four tests are now made."
                },
                {
                    "Address": 703,
                    "Comment": "THE 'KEYBOARD' SUBROUTINE\n \nUsed by the routine at #ADDR:0x0038#.\n \nThis subroutine is called on every occasion that a maskable interrupt occurs.\nIn normal operation this will happen once every 20 ms. The purpose of this\nsubroutine is to scan the keyboard and decode the key value. The code\nproduced will, if the 'repeat' status allows it, be passed to the system\nvariable \\#SYSVAR(LAST-K). When a code is put into this system variable bit 5\nof \\#SYSVAR(FLAGS) is set to show that a 'new' key has been pressed."
                },
                {
                    "Address": 707,
                    "Comment": "A double system of '\\#SYSVAR(KSTATE) system variables' (KSTATE0-KSTATE3 and\nKSTATE4-KSTATE7) is used from now on.\n \nThe two sets allow for the detection of a new key being pressed (using one\nset) whilst still within the 'repeat period' of the previous key to have been\npressed (details in the other set).\n \nA set will only become free to handle a new key if the key is held down for\nabout 1/10th. of a second, i.e. five calls to #ADDR:0x02BF#."
                },
                {
                    "Address": 721,
                    "Comment": "After considering the first set change the pointer and consider the second\nset."
                },
                {
                    "Address": 728,
                    "Comment": "Return now if the key value indicates 'no-key' or a shift key only."
                },
                {
                    "Address": 732,
                    "Comment": "A key stroke that is being repeated (held down) is now separated from a new\nkey stroke."
                },
                {
                    "Address": 745,
                    "Comment": "But a new key will not be accepted unless one of the sets of \\#SYSVAR(KSTATE)\nsystem variables is 'free'."
                },
                {
                    "Address": 753,
                    "Comment": "The new key is to be accepted. But before the system variable \\#SYSVAR(LAST-K)\ncan be filled, the \\#SYSVAR(KSTATE) system variables, of the set being used,\nhave to be initialised to handle any repeats and the key's code has to be\ndecoded."
                },
                {
                    "Address": 764,
                    "Comment": "The decoding of a 'main code' depends upon the present state of\n\\#SYSVAR(MODE), bit 3 of \\#SYSVAR(FLAGS) and the 'shift byte'."
                },
                {
                    "Address": 776,
                    "Comment": "The next three instructions are common to the handling of both 'new keys' and\n'repeat keys'."
                },
                {
                    "Address": 784,
                    "Comment": "A key will 'repeat' on the first occasion after the delay period\n(\\#SYSVAR(REPDEL) - normally 0.7s) and on subsequent occasions after the delay\nperiod (\\#SYSVAR(REPPER) - normally 0.1s)."
                },
                {
                    "Address": 798,
                    "Comment": "THE 'K-TEST' SUBROUTINE\n \nUsed by the routines at #ADDR:0x02BF# and #ADDR:0x2634#.\n \nThe key value is tested and a return made if 'no-key' or 'shift-only';\notherwise the 'main code' for that key is found.\n \nD Shift key pressed (&18 or &27), or &FF if no shift key pressed\nE Other key pressed (&00 to &27), or &FF if no other key pressed\nO:A Main code (from the #ADDR:0x0205#\\#$0205(main key table))\nO:F Carry flag reset if an invalid combination of keys is pressed"
                },
                {
                    "Address": 812,
                    "Comment": "The 'main code' is found by indexing into the main key table."
                },
                {
                    "Address": 819,
                    "Comment": "THE 'KEYBOARD DECODING' SUBROUTINE\n \nUsed by the routines at #ADDR:0x02BF# and #ADDR:0x2634#.\n \nThis subroutine is entered with the 'main code' in the #REG:E# register, the\nvalue of \\#SYSVAR(FLAGS) in the #REG:D# register, the value of \\#SYSVAR(MODE) in\nthe #REG:C# register and the 'shift byte' in the #REG:B# register.\n \nBy considering these four values and referring, as necessary, to the\n#ADDR:0x0205#(six key tables) a 'final code' is produced. This is returned in the\n#REG:A# register.\n \nB Shift key pressed (&18 or &27), or &FF if no shift key pressed\nC \\#SYSVAR(MODE)\nD \\#SYSVAR(FLAGS)\nE Main code (from the #ADDR:0x0205#\\#$0205(main key table))\nO:A Final code (from the #ADDR:0x0205#(key tables))"
                },
                {
                    "Address": 830,
                    "Comment": "Only 'graphics' mode remains and the 'final code' for letter keys in graphics\nmode is computed from the 'main code'."
                },
                {
                    "Address": 833,
                    "Comment": "Letter keys in extended mode are considered next."
                },
                {
                    "Address": 842,
                    "Comment": "Key tables 'b-f' are all served by the following look-up routine. In all\ncases a 'final code' is found and returned."
                },
                {
                    "Address": 847,
                    "Comment": "Letter keys in 'K', 'L' or 'C' modes are now considered. But first the\nspecial SYMBOL SHIFT codes have to be dealt with."
                },
                {
                    "Address": 868,
                    "Comment": "The 'final code' values for tokens are found by adding &A5 to the 'main\ncode'."
                },
                {
                    "Address": 871,
                    "Comment": "Next the digit keys, SPACE, ENTER and both shifts are considered."
                },
                {
                    "Address": 891,
                    "Comment": "The digit keys '0' to '7' in extended mode are to give either a 'paper colour\ncode' or an 'ink colour code' depending on the use of CAPS SHIFT."
                },
                {
                    "Address": 898,
                    "Comment": "The digit keys '8' and '9' are to give 'BRIGHT' and 'FLASH' codes."
                },
                {
                    "Address": 905,
                    "Comment": "The digit keys in graphics mode are to give the block graphic characters (&80\nto &8F), the GRAPHICS code (&0F) and the DELETE code (&0C)."
                },
                {
                    "Address": 925,
                    "Comment": "Finally consider the digit keys in 'K', 'L' and 'C' modes."
                },
                {
                    "Address": 934,
                    "Comment": "The codes for the various digit keys and SYMBOL SHIFT can now be found."
                },
                {
                    "Address": 949,
                    "Comment": "THE 'BEEPER' SUBROUTINE\n \nUsed by the routines at #ADDR:0x03F8#, #ADDR:0x0F2C#, #ADDR:0x107F# and #ADDR:0x111D#.\n \nThe loudspeaker is activated by having D4 low during an '\\#S/OUT/' instruction\nthat is using port &FE. When D4 is high in a similar situation the\nloudspeaker is deactivated. A 'beep' can therefore be produced by regularly\nchanging the level of D4.\n \nConsider now the note 'middle C' which has the frequency 261.63 Hz. In order\nto get this note the loudspeaker will have to be alternately activated and\ndeactivated every 1/523.26th of a second. In the Spectrum the system clock is\nset to run at 3.5 MHz. and the note of 'middle C' will require that the\nrequisite '\\#S/OUT/' instruction be executed as close as possible to every\n6689 T states. This last value, when reduced slightly for unavoidable\noverheads, represents the 'length of the timing loop' in this subroutine.\n \nThis subroutine is entered with the #REG:DE# register pair holding the value\n'f*t', where a note of given frequency 'f' is to have a duration of 't'\nseconds, and the #REG:HL# register pair holding a value equal to the number of\nT states in the 'timing loop' divided by 4, i.e. for the note 'middle C' to\nbe produced for one second #REG:DE# holds &0105 (INT(261.3*1)) and #REG:HL# holds\n&066A (derived from 6689/4-30.125).\n \nDE Number of passes to make through the sound generation loop\nHL Loop delay parameter"
                },
                {
                    "Address": 977,
                    "Comment": "Now enter the sound generation loop. #REG:DE# complete passes are made, i.e. a\npass for each cycle of the note.\n \nThe #REG:HL# register holds the 'length of the timing loop' with 16 T states\nbeing used for each '1' in the #REG:L# register and 1024 T states for each '1'\nin the #REG:H# register."
                },
                {
                    "Address": 991,
                    "Comment": "The loudspeaker is now alternately activated and deactivated."
                },
                {
                    "Address": 1001,
                    "Comment": "After a full cycle the #REG:DE# register pair is tested."
                },
                {
                    "Address": 1010,
                    "Comment": "The parameters for the second half-cycle are set up."
                },
                {
                    "Address": 1014,
                    "Comment": "Upon completion of the 'beep' the maskable interrupt has to be enabled."
                },
                {
                    "Address": 1016,
                    "Comment": "THE 'BEEP' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1AE3#(parameter table).\n \nThe subroutine is entered with two numbers on the calculator stack. The\ntopmost number (P) represents the 'pitch' of the note and the number\nunderneath it (t) represents the 'duration'."
                }
            ],
            "DataInfo": [
                {
                    "Address": 19,
                    "Comment": "Unused locations."
                },
                {
                    "Address": 37,
                    "Comment": "Unused locations."
                },
                {
                    "Address": 43,
                    "Comment": "Unused locations."
                },
                {
                    "Address": 95,
                    "Comment": "Unused locations."
                },
                {
                    "Address": 149,
                    "Comment": "?",
                    "DataType": 4
                },
                {
                    "Address": 150,
                    "ByteSize": 3,
                    "Comment": "RND",
                    "DataType": 4
                },
                {
                    "Address": 153,
                    "ByteSize": 6,
                    "Comment": "INKEY$",
                    "DataType": 4
                },
                {
                    "Address": 159,
                    "ByteSize": 2,
                    "Comment": "PI",
                    "DataType": 4
                },
                {
                    "Address": 161,
                    "ByteSize": 2,
                    "Comment": "FN",
                    "DataType": 4
                },
                {
                    "Address": 163,
                    "ByteSize": 5,
                    "Comment": "POINT",
                    "DataType": 4
                },
                {
                    "Address": 168,
                    "ByteSize": 7,
                    "Comment": "SCREEN$",
                    "DataType": 4
                },
                {
                    "Address": 175,
                    "ByteSize": 4,
                    "Comment": "ATTR",
                    "DataType": 4
                },
                {
                    "Address": 179,
                    "ByteSize": 2,
                    "Comment": "AT",
                    "DataType": 4
                },
                {
                    "Address": 181,
                    "ByteSize": 3,
                    "Comment": "TAB",
                    "DataType": 4
                },
                {
                    "Address": 184,
                    "ByteSize": 4,
                    "Comment": "VAL$",
                    "DataType": 4
                },
                {
                    "Address": 188,
                    "ByteSize": 4,
                    "Comment": "CODE",
                    "DataType": 4
                },
                {
                    "Address": 192,
                    "ByteSize": 3,
                    "Comment": "VAL",
                    "DataType": 4
                },
                {
                    "Address": 195,
                    "ByteSize": 3,
                    "Comment": "LEN",
                    "DataType": 4
                },
                {
                    "Address": 198,
                    "ByteSize": 3,
                    "Comment": "SIN",
                    "DataType": 4
                },
                {
                    "Address": 201,
                    "ByteSize": 3,
                    "Comment": "COS",
                    "DataType": 4
                },
                {
                    "Address": 204,
                    "ByteSize": 3,
                    "Comment": "TAN",
                    "DataType": 4
                },
                {
                    "Address": 207,
                    "ByteSize": 3,
                    "Comment": "ASN",
                    "DataType": 4
                },
                {
                    "Address": 210,
                    "ByteSize": 3,
                    "Comment": "ACS",
                    "DataType": 4
                },
                {
                    "Address": 213,
                    "ByteSize": 3,
                    "Comment": "ATN",
                    "DataType": 4
                },
                {
                    "Address": 216,
                    "ByteSize": 2,
                    "Comment": "LN",
                    "DataType": 4
                },
                {
                    "Address": 218,
                    "ByteSize": 3,
                    "Comment": "EXP",
                    "DataType": 4
                },
                {
                    "Address": 221,
                    "ByteSize": 3,
                    "Comment": "INT",
                    "DataType": 4
                },
                {
                    "Address": 224,
                    "ByteSize": 3,
                    "Comment": "SQR",
                    "DataType": 4
                },
                {
                    "Address": 227,
                    "ByteSize": 3,
                    "Comment": "SGN",
                    "DataType": 4
                },
                {
                    "Address": 230,
                    "ByteSize": 3,
                    "Comment": "ABS",
                    "DataType": 4
                },
                {
                    "Address": 233,
                    "ByteSize": 4,
                    "Comment": "PEEK",
                    "DataType": 4
                },
                {
                    "Address": 237,
                    "ByteSize": 2,
                    "Comment": "IN",
                    "DataType": 4
                },
                {
                    "Address": 239,
                    "ByteSize": 3,
                    "Comment": "USR",
                    "DataType": 4
                },
                {
                    "Address": 242,
                    "ByteSize": 4,
                    "Comment": "STR$",
                    "DataType": 4
                },
                {
                    "Address": 246,
                    "ByteSize": 4,
                    "Comment": "CHR$",
                    "DataType": 4
                },
                {
                    "Address": 250,
                    "ByteSize": 3,
                    "Comment": "NOT",
                    "DataType": 4
                },
                {
                    "Address": 253,
                    "ByteSize": 3,
                    "Comment": "BIN",
                    "DataType": 4
                },
                {
                    "Address": 256,
                    "ByteSize": 2,
                    "Comment": "OR",
                    "DataType": 4
                },
                {
                    "Address": 258,
                    "ByteSize": 3,
                    "Comment": "AND",
                    "DataType": 4
                },
                {
                    "Address": 261,
                    "ByteSize": 2,
                    "Comment": "<=",
                    "DataType": 4
                },
                {
                    "Address": 263,
                    "ByteSize": 2,
                    "Comment": ">=",
                    "DataType": 4
                },
                {
                    "Address": 265,
                    "ByteSize": 2,
                    "Comment": "<>",
                    "DataType": 4
                },
                {
                    "Address": 267,
                    "ByteSize": 4,
                    "Comment": "LINE",
                    "DataType": 4
                },
                {
                    "Address": 271,
                    "ByteSize": 4,
                    "Comment": "THEN",
                    "DataType": 4
                },
                {
                    "Address": 275,
                    "ByteSize": 2,
                    "Comment": "TO",
                    "DataType": 4
                },
                {
                    "Address": 277,
                    "ByteSize": 4,
                    "Comment": "STEP",
                    "DataType": 4
                },
                {
                    "Address": 281,
                    "ByteSize": 6,
                    "Comment": "DEF FN",
                    "DataType": 4
                },
                {
                    "Address": 287,
                    "ByteSize": 3,
                    "Comment": "CAT",
                    "DataType": 4
                },
                {
                    "Address": 290,
                    "ByteSize": 6,
                    "Comment": "FORMAT",
                    "DataType": 4
                },
                {
                    "Address": 296,
                    "ByteSize": 4,
                    "Comment": "MOVE",
                    "DataType": 4
                },
                {
                    "Address": 300,
                    "ByteSize": 5,
                    "Comment": "ERASE",
                    "DataType": 4
                },
                {
                    "Address": 305,
                    "ByteSize": 6,
                    "Comment": "OPEN \\#",
                    "DataType": 4
                },
                {
                    "Address": 311,
                    "ByteSize": 7,
                    "Comment": "CLOSE \\#",
                    "DataType": 4
                },
                {
                    "Address": 318,
                    "ByteSize": 5,
                    "Comment": "MERGE",
                    "DataType": 4
                },
                {
                    "Address": 323,
                    "ByteSize": 6,
                    "Comment": "VERIFY",
                    "DataType": 4
                },
                {
                    "Address": 329,
                    "ByteSize": 4,
                    "Comment": "BEEP",
                    "DataType": 4
                },
                {
                    "Address": 333,
                    "ByteSize": 6,
                    "Comment": "CIRCLE",
                    "DataType": 4
                },
                {
                    "Address": 339,
                    "ByteSize": 3,
                    "Comment": "INK",
                    "DataType": 4
                },
                {
                    "Address": 342,
                    "ByteSize": 5,
                    "Comment": "PAPER",
                    "DataType": 4
                },
                {
                    "Address": 347,
                    "ByteSize": 5,
                    "Comment": "FLASH",
                    "DataType": 4
                },
                {
                    "Address": 352,
                    "ByteSize": 6,
                    "Comment": "BRIGHT",
                    "DataType": 4
                },
                {
                    "Address": 358,
                    "ByteSize": 7,
                    "Comment": "INVERSE",
                    "DataType": 4
                },
                {
                    "Address": 365,
                    "ByteSize": 4,
                    "Comment": "OVER",
                    "DataType": 4
                },
                {
                    "Address": 369,
                    "ByteSize": 3,
                    "Comment": "OUT",
                    "DataType": 4
                },
                {
                    "Address": 372,
                    "ByteSize": 6,
                    "Comment": "LPRINT",
                    "DataType": 4
                },
                {
                    "Address": 378,
                    "ByteSize": 5,
                    "Comment": "LLIST",
                    "DataType": 4
                },
                {
                    "Address": 383,
                    "ByteSize": 4,
                    "Comment": "STOP",
                    "DataType": 4
                },
                {
                    "Address": 387,
                    "ByteSize": 4,
                    "Comment": "READ",
                    "DataType": 4
                },
                {
                    "Address": 391,
                    "ByteSize": 4,
                    "Comment": "DATA",
                    "DataType": 4
                },
                {
                    "Address": 395,
                    "ByteSize": 7,
                    "Comment": "RESTORE",
                    "DataType": 4
                },
                {
                    "Address": 402,
                    "ByteSize": 3,
                    "Comment": "NEW",
                    "DataType": 4
                },
                {
                    "Address": 405,
                    "ByteSize": 6,
                    "Comment": "BORDER",
                    "DataType": 4
                },
                {
                    "Address": 411,
                    "ByteSize": 8,
                    "Comment": "CONTINUE",
                    "DataType": 4
                },
                {
                    "Address": 419,
                    "ByteSize": 3,
                    "Comment": "DIM",
                    "DataType": 4
                },
                {
                    "Address": 422,
                    "ByteSize": 3,
                    "Comment": "REM",
                    "DataType": 4
                },
                {
                    "Address": 425,
                    "ByteSize": 3,
                    "Comment": "FOR",
                    "DataType": 4
                },
                {
                    "Address": 428,
                    "ByteSize": 5,
                    "Comment": "GO TO",
                    "DataType": 4
                },
                {
                    "Address": 433,
                    "ByteSize": 6,
                    "Comment": "GO SUB",
                    "DataType": 4
                },
                {
                    "Address": 439,
                    "ByteSize": 5,
                    "Comment": "INPUT",
                    "DataType": 4
                },
                {
                    "Address": 444,
                    "ByteSize": 4,
                    "Comment": "LOAD",
                    "DataType": 4
                },
                {
                    "Address": 448,
                    "ByteSize": 4,
                    "Comment": "LIST",
                    "DataType": 4
                },
                {
                    "Address": 452,
                    "ByteSize": 3,
                    "Comment": "LET",
                    "DataType": 4
                },
                {
                    "Address": 455,
                    "ByteSize": 5,
                    "Comment": "PAUSE",
                    "DataType": 4
                },
                {
                    "Address": 460,
                    "ByteSize": 4,
                    "Comment": "NEXT",
                    "DataType": 4
                },
                {
                    "Address": 464,
                    "ByteSize": 4,
                    "Comment": "POKE",
                    "DataType": 4
                },
                {
                    "Address": 468,
                    "ByteSize": 5,
                    "Comment": "PRINT",
                    "DataType": 4
                },
                {
                    "Address": 473,
                    "ByteSize": 4,
                    "Comment": "PLOT",
                    "DataType": 4
                },
                {
                    "Address": 477,
                    "ByteSize": 3,
                    "Comment": "RUN",
                    "DataType": 4
                },
                {
                    "Address": 480,
                    "ByteSize": 4,
                    "Comment": "SAVE",
                    "DataType": 4
                },
                {
                    "Address": 484,
                    "ByteSize": 9,
                    "Comment": "RANDOMIZE",
                    "DataType": 4
                },
                {
                    "Address": 493,
                    "ByteSize": 2,
                    "Comment": "IF",
                    "DataType": 4
                },
                {
                    "Address": 495,
                    "ByteSize": 3,
                    "Comment": "CLS",
                    "DataType": 4
                },
                {
                    "Address": 498,
                    "ByteSize": 4,
                    "Comment": "DRAW",
                    "DataType": 4
                },
                {
                    "Address": 502,
                    "ByteSize": 5,
                    "Comment": "CLEAR",
                    "DataType": 4
                },
                {
                    "Address": 507,
                    "ByteSize": 6,
                    "Comment": "RETURN",
                    "DataType": 4
                },
                {
                    "Address": 513,
                    "ByteSize": 4,
                    "Comment": "COPY",
                    "DataType": 4
                },
                {
                    "Address": 517,
                    "Comment": "B"
                },
                {
                    "Address": 518,
                    "Comment": "H"
                },
                {
                    "Address": 519,
                    "Comment": "Y"
                },
                {
                    "Address": 520,
                    "Comment": "6"
                },
                {
                    "Address": 521,
                    "Comment": "5"
                },
                {
                    "Address": 522,
                    "Comment": "T"
                },
                {
                    "Address": 523,
                    "Comment": "G"
                },
                {
                    "Address": 524,
                    "Comment": "V"
                },
                {
                    "Address": 525,
                    "Comment": "N"
                },
                {
                    "Address": 526,
                    "Comment": "J"
                },
                {
                    "Address": 527,
                    "Comment": "U"
                },
                {
                    "Address": 528,
                    "Comment": "7"
                },
                {
                    "Address": 529,
                    "Comment": "4"
                },
                {
                    "Address": 530,
                    "Comment": "R"
                },
                {
                    "Address": 531,
                    "Comment": "F"
                },
                {
                    "Address": 532,
                    "Comment": "C"
                },
                {
                    "Address": 533,
                    "Comment": "M"
                },
                {
                    "Address": 534,
                    "Comment": "K"
                },
                {
                    "Address": 535,
                    "Comment": "I"
                },
                {
                    "Address": 536,
                    "Comment": "8"
                },
                {
                    "Address": 537,
                    "Comment": "3"
                },
                {
                    "Address": 538,
                    "Comment": "E"
                },
                {
                    "Address": 539,
                    "Comment": "D"
                },
                {
                    "Address": 540,
                    "Comment": "X"
                },
                {
                    "Address": 541,
                    "Comment": "SYMBOL SHIFT"
                },
                {
                    "Address": 542,
                    "Comment": "L"
                },
                {
                    "Address": 543,
                    "Comment": "O"
                },
                {
                    "Address": 544,
                    "Comment": "9"
                },
                {
                    "Address": 545,
                    "Comment": "2"
                },
                {
                    "Address": 546,
                    "Comment": "W"
                },
                {
                    "Address": 547,
                    "Comment": "S"
                },
                {
                    "Address": 548,
                    "Comment": "Z"
                },
                {
                    "Address": 549,
                    "Comment": "SPACE"
                },
                {
                    "Address": 550,
                    "Comment": "ENTER"
                },
                {
                    "Address": 551,
                    "Comment": "P"
                },
                {
                    "Address": 552,
                    "Comment": "0"
                },
                {
                    "Address": 553,
                    "Comment": "1"
                },
                {
                    "Address": 554,
                    "Comment": "Q"
                },
                {
                    "Address": 555,
                    "Comment": "A"
                },
                {
                    "Address": 556,
                    "Comment": "READ"
                },
                {
                    "Address": 557,
                    "Comment": "BIN"
                },
                {
                    "Address": 558,
                    "Comment": "LPRINT"
                },
                {
                    "Address": 559,
                    "Comment": "DATA"
                },
                {
                    "Address": 560,
                    "Comment": "TAN"
                },
                {
                    "Address": 561,
                    "Comment": "SGN"
                },
                {
                    "Address": 562,
                    "Comment": "ABS"
                },
                {
                    "Address": 563,
                    "Comment": "SQR"
                },
                {
                    "Address": 564,
                    "Comment": "CODE"
                },
                {
                    "Address": 565,
                    "Comment": "VAL"
                },
                {
                    "Address": 566,
                    "Comment": "LEN"
                },
                {
                    "Address": 567,
                    "Comment": "USR"
                },
                {
                    "Address": 568,
                    "Comment": "PI"
                },
                {
                    "Address": 569,
                    "Comment": "INKEY$"
                },
                {
                    "Address": 570,
                    "Comment": "PEEK"
                },
                {
                    "Address": 571,
                    "Comment": "TAB"
                },
                {
                    "Address": 572,
                    "Comment": "SIN"
                },
                {
                    "Address": 573,
                    "Comment": "INT"
                },
                {
                    "Address": 574,
                    "Comment": "RESTORE"
                },
                {
                    "Address": 575,
                    "Comment": "RND"
                },
                {
                    "Address": 576,
                    "Comment": "CHR$"
                },
                {
                    "Address": 577,
                    "Comment": "LLIST"
                },
                {
                    "Address": 578,
                    "Comment": "COS"
                },
                {
                    "Address": 579,
                    "Comment": "EXP"
                },
                {
                    "Address": 580,
                    "Comment": "STR$"
                },
                {
                    "Address": 581,
                    "Comment": "LN"
                },
                {
                    "Address": 582,
                    "Comment": "~"
                },
                {
                    "Address": 583,
                    "Comment": "BRIGHT"
                },
                {
                    "Address": 584,
                    "Comment": "PAPER"
                },
                {
                    "Address": 585,
                    "Comment": "\\"
                },
                {
                    "Address": 586,
                    "Comment": "ATN"
                },
                {
                    "Address": 587,
                    "Comment": "{ {}}"
                },
                {
                    "Address": 588,
                    "Comment": "}"
                },
                {
                    "Address": 589,
                    "Comment": "CIRCLE"
                },
                {
                    "Address": 590,
                    "Comment": "IN"
                },
                {
                    "Address": 591,
                    "Comment": "VAL$"
                },
                {
                    "Address": 592,
                    "Comment": "SCREEN$"
                },
                {
                    "Address": 593,
                    "Comment": "ATTR"
                },
                {
                    "Address": 594,
                    "Comment": "INVERSE"
                },
                {
                    "Address": 595,
                    "Comment": "OVER"
                },
                {
                    "Address": 596,
                    "Comment": "OUT"
                },
                {
                    "Address": 597,
                    "Comment": "\\#CHR169"
                },
                {
                    "Address": 598,
                    "Comment": "ASN"
                },
                {
                    "Address": 599,
                    "Comment": "VERIFY"
                },
                {
                    "Address": 600,
                    "Comment": "|"
                },
                {
                    "Address": 601,
                    "Comment": "MERGE"
                },
                {
                    "Address": 602,
                    "Comment": "]"
                },
                {
                    "Address": 603,
                    "Comment": "FLASH"
                },
                {
                    "Address": 604,
                    "Comment": "ACS"
                },
                {
                    "Address": 605,
                    "Comment": "INK"
                },
                {
                    "Address": 606,
                    "Comment": "["
                },
                {
                    "Address": 607,
                    "Comment": "BEEP"
                },
                {
                    "Address": 608,
                    "Comment": "DELETE"
                },
                {
                    "Address": 609,
                    "Comment": "EDIT"
                },
                {
                    "Address": 610,
                    "Comment": "CAPS LOCK"
                },
                {
                    "Address": 611,
                    "Comment": "TRUE VIDEO"
                },
                {
                    "Address": 612,
                    "Comment": "INV. VIDEO"
                },
                {
                    "Address": 613,
                    "Comment": "Cursor left"
                },
                {
                    "Address": 614,
                    "Comment": "Cursor down"
                },
                {
                    "Address": 615,
                    "Comment": "Cursor up"
                },
                {
                    "Address": 616,
                    "Comment": "Cursor right"
                },
                {
                    "Address": 617,
                    "Comment": "GRAPHICS"
                },
                {
                    "Address": 618,
                    "Comment": "STOP"
                },
                {
                    "Address": 619,
                    "Comment": "*"
                },
                {
                    "Address": 620,
                    "Comment": "?"
                },
                {
                    "Address": 621,
                    "Comment": "STEP"
                },
                {
                    "Address": 622,
                    "Comment": ">="
                },
                {
                    "Address": 623,
                    "Comment": "TO"
                },
                {
                    "Address": 624,
                    "Comment": "THEN"
                },
                {
                    "Address": 625,
                    "Comment": "\\#power"
                },
                {
                    "Address": 626,
                    "Comment": "AT"
                },
                {
                    "Address": 627,
                    "Comment": "-"
                },
                {
                    "Address": 628,
                    "Comment": "+"
                },
                {
                    "Address": 629,
                    "Comment": "="
                },
                {
                    "Address": 630,
                    "Comment": "."
                },
                {
                    "Address": 631,
                    "Comment": ","
                },
                {
                    "Address": 632,
                    "Comment": ";"
                },
                {
                    "Address": 633,
                    "Comment": "\""
                },
                {
                    "Address": 634,
                    "Comment": "<="
                },
                {
                    "Address": 635,
                    "Comment": "<"
                },
                {
                    "Address": 636,
                    "Comment": "NOT"
                },
                {
                    "Address": 637,
                    "Comment": ">"
                },
                {
                    "Address": 638,
                    "Comment": "OR"
                },
                {
                    "Address": 639,
                    "Comment": "/"
                },
                {
                    "Address": 640,
                    "Comment": "<>"
                },
                {
                    "Address": 641,
                    "Comment": "\\#CHR163"
                },
                {
                    "Address": 642,
                    "Comment": "AND"
                },
                {
                    "Address": 643,
                    "Comment": ":"
                },
                {
                    "Address": 644,
                    "Comment": "FORMAT"
                },
                {
                    "Address": 645,
                    "Comment": "DEF FN"
                },
                {
                    "Address": 646,
                    "Comment": "FN"
                },
                {
                    "Address": 647,
                    "Comment": "LINE"
                },
                {
                    "Address": 648,
                    "Comment": "OPEN"
                },
                {
                    "Address": 649,
                    "Comment": "CLOSE"
                },
                {
                    "Address": 650,
                    "Comment": "MOVE"
                },
                {
                    "Address": 651,
                    "Comment": "ERASE"
                },
                {
                    "Address": 652,
                    "Comment": "POINT"
                },
                {
                    "Address": 653,
                    "Comment": "CAT"
                },
                {
                    "Address": 1017,
                    "Comment": "#ADDR:0x33C0#: t, P, P"
                },
                {
                    "Address": 1018,
                    "Comment": "#ADDR:0x36AF#: t, P, i (where i=INT P)"
                },
                {
                    "Address": 1019,
                    "Comment": "#ADDR:0x342D#(st_mem_0): t, P, i (mem-0 holds i)"
                },
                {
                    "Address": 1020,
                    "Comment": "#ADDR:0x300F#: t, p (where p is the fractional part\nof P)"
                },
                {
                    "Address": 1021,
                    "Comment": "{#ADDR:0x33C6#: Stack the decimal value"
                },
                {
                    "Address": 1022,
                    "ByteSize": 5,
                    "Comment": "K=0.0577622606 (which is a little below\n12*(2\\#power0.5)-1)}",
                    "DataType": 1
                }
            ],
            "LabelInfo": [
                {
                    "Address": 0,
                    "LabelType": 2,
                    "Name": "START"
                },
                {
                    "Address": 8,
                    "LabelType": 2,
                    "Name": "ERROR_1"
                },
                {
                    "Address": 16,
                    "LabelType": 2,
                    "Name": "PRINT_A_1"
                },
                {
                    "Address": 24,
                    "LabelType": 2,
                    "Name": "GET_CHAR"
                },
                {
                    "Address": 28,
                    "LabelType": 2,
                    "Name": "TEST_CHAR"
                },
                {
                    "Address": 32,
                    "LabelType": 2,
                    "Name": "NEXT_CHAR"
                },
                {
                    "Address": 40,
                    "LabelType": 2,
                    "Name": "FP_CALC"
                },
                {
                    "Address": 48,
                    "LabelType": 2,
                    "Name": "BC_SPACES"
                },
                {
                    "Address": 56,
                    "LabelType": 2,
                    "Name": "MASK_INT"
                },
                {
                    "Address": 72,
                    "LabelType": 2,
                    "Name": "KEY_INT"
                },
                {
                    "Address": 83,
                    "LabelType": 2,
                    "Name": "ERROR_2"
                },
                {
                    "Address": 85,
                    "LabelType": 2,
                    "Name": "ERROR_3"
                },
                {
                    "Address": 102,
                    "LabelType": 2,
                    "Name": "RESET"
                },
                {
                    "Address": 112,
                    "LabelType": 2,
                    "Name": "NO_RESET"
                },
                {
                    "Address": 116,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CH_ADD_1"
                },
                {
                    "Address": 119,
                    "LabelType": 2,
                    "Name": "TEMP_PTR1"
                },
                {
                    "Address": 120,
                    "LabelType": 2,
                    "Name": "TEMP_PTR2"
                },
                {
                    "Address": 125,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "SKIP_OVER"
                },
                {
                    "Address": 144,
                    "LabelType": 2,
                    "Name": "SKIPS"
                },
                {
                    "Address": 149,
                    "Global": true,
                    "LabelType": 3,
                    "Name": "TOKENS"
                },
                {
                    "Address": 517,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "KEYTABLE_A"
                },
                {
                    "Address": 556,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "KEYTABLE_B"
                },
                {
                    "Address": 582,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "KEYTABLE_C"
                },
                {
                    "Address": 608,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "KEYTABLE_D"
                },
                {
                    "Address": 618,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "KEYTABLE_E"
                },
                {
                    "Address": 644,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "KEYTABLE_F"
                },
                {
                    "Address": 654,
                    "LabelType": 2,
                    "Name": "KEY_SCAN"
                },
                {
                    "Address": 662,
                    "LabelType": 2,
                    "Name": "KEY_LINE"
                },
                {
                    "Address": 671,
                    "LabelType": 2,
                    "Name": "KEY_3KEYS"
                },
                {
                    "Address": 673,
                    "LabelType": 2,
                    "Name": "KEY_BITS"
                },
                {
                    "Address": 683,
                    "LabelType": 2,
                    "Name": "KEY_DONE"
                },
                {
                    "Address": 703,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "KEYBOARD"
                },
                {
                    "Address": 710,
                    "LabelType": 2,
                    "Name": "K_ST_LOOP"
                },
                {
                    "Address": 721,
                    "LabelType": 2,
                    "Name": "K_CH_SET"
                },
                {
                    "Address": 753,
                    "LabelType": 2,
                    "Name": "K_NEW"
                },
                {
                    "Address": 776,
                    "LabelType": 2,
                    "Name": "K_END"
                },
                {
                    "Address": 784,
                    "LabelType": 2,
                    "Name": "K_REPEAT"
                },
                {
                    "Address": 798,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "K_TEST"
                },
                {
                    "Address": 812,
                    "LabelType": 2,
                    "Name": "K_MAIN"
                },
                {
                    "Address": 819,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "K_DECODE"
                },
                {
                    "Address": 833,
                    "LabelType": 2,
                    "Name": "K_E_LET"
                },
                {
                    "Address": 842,
                    "LabelType": 2,
                    "Name": "K_LOOK_UP"
                },
                {
                    "Address": 847,
                    "LabelType": 2,
                    "Name": "K_KLC_LET"
                },
                {
                    "Address": 868,
                    "LabelType": 2,
                    "Name": "K_TOKENS"
                },
                {
                    "Address": 871,
                    "LabelType": 2,
                    "Name": "K_DIGIT"
                },
                {
                    "Address": 898,
                    "LabelType": 2,
                    "Name": "K_8_9"
                },
                {
                    "Address": 905,
                    "LabelType": 2,
                    "Name": "K_GRA_DGT"
                },
                {
                    "Address": 925,
                    "LabelType": 2,
                    "Name": "K_KLC_DGT"
                },
                {
                    "Address": 946,
                    "LabelType": 2,
                    "Name": "K_AT_CHAR"
                },
                {
                    "Address": 949,
                    "LabelType": 2,
                    "Name": "BEEPER"
                },
                {
                    "Address": 982,
                    "LabelType": 2,
                    "Name": "BE_H_L_LP"
                },
                {
                    "Address": 1010,
                    "LabelType": 2,
                    "Name": "BE_AGAIN"
                },
                {
                    "Address": 1014,
                    "LabelType": 2,
                    "Name": "BE_END"
                },
                {
                    "Address": 1016,
                    "LabelType": 2,
                    "Name": "BEEP"
                }
            ],
            "PageId": 0
        },
        {
            "CodeInfo": [
                {
                    "Address": 7,
                    "ByteSize": 3,
                    "Comment": "This is 'mem-0-1st' (\\#SYSVAR(MEMBOT))."
                },
                {
                    "Address": 10,
                    "ByteSize": 1,
                    "Comment": "Fetch the exponent of i."
                },
                {
                    "Address": 11,
                    "ByteSize": 1,
                    "Comment": "{Give an error if i is not in the integral"
                },
                {
                    "Address": 12,
                    "ByteSize": 2,
                    "Comment": "(short) form.}",
                    "OperandType": 2
                },
                {
                    "Address": 14,
                    "ByteSize": 1,
                    "Comment": "{Copy the sign byte to the #REG:C# register."
                },
                {
                    "Address": 15,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 16,
                    "ByteSize": 1,
                    "Comment": "{Copy the low-byte to the #REG:B# register, and"
                },
                {
                    "Address": 17,
                    "ByteSize": 1,
                    "Comment": "to the #REG:A# register."
                },
                {
                    "Address": 18,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 19,
                    "ByteSize": 1,
                    "Comment": "{Again give report B if i does not satisfy"
                },
                {
                    "Address": 20,
                    "ByteSize": 1,
                    "Comment": "the test: -128<=i<=+127."
                },
                {
                    "Address": 21,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 22,
                    "ByteSize": 2,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 24,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 25,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 26,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 28,
                    "ByteSize": 1,
                    "Comment": "{Fetch the low-byte and test it further."
                },
                {
                    "Address": 29,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 31,
                    "ByteSize": 3,
                    "Comment": "Accept -60<=i<=67.",
                    "OperandType": 2
                },
                {
                    "Address": 34,
                    "ByteSize": 3,
                    "Comment": "Reject -128 to -61.",
                    "OperandType": 2
                },
                {
                    "Address": 37,
                    "ByteSize": 2,
                    "Comment": "Start '6' octaves below middle C."
                },
                {
                    "Address": 39,
                    "ByteSize": 1,
                    "Comment": "{Repeatedly reduce i in order to find the"
                },
                {
                    "Address": 40,
                    "ByteSize": 2,
                    "Comment": "correct octave."
                },
                {
                    "Address": 42,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 44,
                    "ByteSize": 2,
                    "Comment": "Add back the last subtraction."
                },
                {
                    "Address": 46,
                    "ByteSize": 1,
                    "Comment": "Save the octave number."
                },
                {
                    "Address": 47,
                    "ByteSize": 3,
                    "Comment": "The base address of the '#ADDR:0x046E#(semitone\ntable)'."
                },
                {
                    "Address": 50,
                    "ByteSize": 3,
                    "Comment": "{Consider the table and pass the 'A th.'",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 53,
                    "ByteSize": 3,
                    "Comment": "value to the calculator stack. (Call it C.)}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 56,
                    "ByteSize": 1,
                    "Comment": "t, pK+1, C",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 59,
                    "ByteSize": 1,
                    "Comment": "Fetch the octave number."
                },
                {
                    "Address": 60,
                    "ByteSize": 1,
                    "Comment": "{Multiply the 'last value' by 2 to the power"
                },
                {
                    "Address": 61,
                    "ByteSize": 1,
                    "Comment": "of the octave number.}"
                },
                {
                    "Address": 62,
                    "ByteSize": 1,
                    "Comment": "t, f",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 67,
                    "ByteSize": 3,
                    "Comment": "{The value 'INT t' must be in the range &00",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 70,
                    "ByteSize": 2,
                    "Comment": "to &0A."
                },
                {
                    "Address": 72,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 74,
                    "ByteSize": 1,
                    "Comment": "t",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 91,
                    "ByteSize": 3,
                    "Comment": "{The 'timing loop' value is compressed into",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 94,
                    "ByteSize": 1,
                    "Comment": "the #REG:BC# register pair and saved.}"
                },
                {
                    "Address": 95,
                    "ByteSize": 3,
                    "Comment": "The f*t value is compressed into the #REG:BC#\nregister pair.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 98,
                    "ByteSize": 1,
                    "Comment": "Move the 'timing loop' value to the #REG:HL#\nregister pair."
                },
                {
                    "Address": 99,
                    "ByteSize": 1,
                    "Comment": "{Move the f*t value to the #REG:DE# register"
                },
                {
                    "Address": 100,
                    "ByteSize": 1,
                    "Comment": "pair.}"
                },
                {
                    "Address": 101,
                    "ByteSize": 1,
                    "Comment": "{Return if f*t has given the result of 'no"
                },
                {
                    "Address": 102,
                    "ByteSize": 1,
                    "Comment": "cycles' required."
                },
                {
                    "Address": 103,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 104,
                    "ByteSize": 1,
                    "Comment": "{Decrease the cycle number and jump to"
                },
                {
                    "Address": 105,
                    "ByteSize": 3,
                    "Comment": "#ADDR:0x03B5# (making at least one pass).}",
                    "OperandType": 2
                },
                {
                    "Address": 108,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 170,
                    "ByteSize": 3,
                    "Flags": 12,
                    "OperandType": 2
                },
                {
                    "Address": 173,
                    "ByteSize": 3,
                    "Flags": 4,
                    "OperandType": 1
                },
                {
                    "Address": 176,
                    "ByteSize": 1,
                    "Flags": 4
                },
                {
                    "Address": 177,
                    "ByteSize": 3,
                    "Flags": 4,
                    "OperandType": 2
                },
                {
                    "Address": 180,
                    "ByteSize": 1,
                    "Flags": 4
                },
                {
                    "Address": 181,
                    "ByteSize": 1,
                    "Flags": 4
                },
                {
                    "Address": 182,
                    "ByteSize": 1,
                    "Flags": 4
                },
                {
                    "Address": 183,
                    "ByteSize": 3,
                    "Flags": 12,
                    "OperandType": 2
                },
                {
                    "Address": 186,
                    "ByteSize": 1,
                    "Flags": 4
                },
                {
                    "Address": 187,
                    "ByteSize": 1,
                    "Flags": 4
                },
                {
                    "Address": 188,
                    "ByteSize": 1,
                    "Flags": 4
                },
                {
                    "Address": 189,
                    "ByteSize": 1,
                    "Flags": 4
                },
                {
                    "Address": 190,
                    "ByteSize": 1,
                    "Flags": 4
                },
                {
                    "Address": 191,
                    "ByteSize": 2,
                    "Flags": 4
                },
                {
                    "Address": 193,
                    "ByteSize": 1,
                    "Flags": 4
                },
                {
                    "Address": 194,
                    "ByteSize": 3,
                    "Comment": "{Pre-load the machine stack with the address #ADDR:0x053F#."
                },
                {
                    "Address": 197,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 198,
                    "ByteSize": 3,
                    "Comment": "This constant will give a leader of about 5 seconds for\na 'header'."
                },
                {
                    "Address": 201,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if saving a header."
                },
                {
                    "Address": 203,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 205,
                    "ByteSize": 3,
                    "Comment": "This constant will give a leader of about 2 seconds for\na program/data block."
                },
                {
                    "Address": 208,
                    "ByteSize": 1,
                    "Comment": "The flag is saved."
                },
                {
                    "Address": 209,
                    "ByteSize": 1,
                    "Comment": "{The 'length' is incremented and the 'base address'"
                },
                {
                    "Address": 210,
                    "ByteSize": 2,
                    "Comment": "reduced to allow for the flag.}"
                },
                {
                    "Address": 212,
                    "ByteSize": 1,
                    "Comment": "The maskable interrupt is disabled during the save."
                },
                {
                    "Address": 213,
                    "ByteSize": 2,
                    "Comment": "Signal 'MIC on' and border to be red."
                },
                {
                    "Address": 215,
                    "ByteSize": 1,
                    "Comment": "Give a value to #REG:B#."
                },
                {
                    "Address": 216,
                    "ByteSize": 2,
                    "Comment": "The main timing period.",
                    "OperandType": 2
                },
                {
                    "Address": 218,
                    "ByteSize": 2,
                    "Comment": "{MIC on/off, border red/cyan, on each pass."
                },
                {
                    "Address": 220,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 222,
                    "ByteSize": 2,
                    "Comment": "The main timing constant."
                },
                {
                    "Address": 224,
                    "ByteSize": 1,
                    "Comment": "Decrease the low counter."
                },
                {
                    "Address": 225,
                    "ByteSize": 2,
                    "Comment": "Jump back for another pulse.",
                    "OperandType": 2
                },
                {
                    "Address": 227,
                    "ByteSize": 1,
                    "Comment": "Allow for the longer path (reduce by 13 T states)."
                },
                {
                    "Address": 228,
                    "ByteSize": 1,
                    "Comment": "Decrease the high counter."
                },
                {
                    "Address": 229,
                    "ByteSize": 3,
                    "Comment": "Jump back for another pulse until completion of the\nleader.",
                    "OperandType": 2
                },
                {
                    "Address": 232,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 234,
                    "ByteSize": 2,
                    "Comment": "MIC off for 667 T states from '\\#S/OUT/ to \\#S/OUT/'.",
                    "OperandType": 2
                },
                {
                    "Address": 236,
                    "ByteSize": 2,
                    "Comment": "MIC on and red."
                },
                {
                    "Address": 238,
                    "ByteSize": 2,
                    "Comment": "Signal 'MIC off and cyan'."
                },
                {
                    "Address": 240,
                    "ByteSize": 2,
                    "Comment": "{MIC on for 735 T States from '\\#S/OUT/ to \\#S/OUT/'."
                },
                {
                    "Address": 242,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 244,
                    "ByteSize": 2,
                    "Comment": "Now MIC off and border cyan."
                },
                {
                    "Address": 246,
                    "ByteSize": 3,
                    "Comment": "&3B is a timing constant; &0E signals 'MIC off and\nyellow'."
                },
                {
                    "Address": 249,
                    "ByteSize": 1,
                    "Comment": "{Fetch the flag and pass it to the #REG:L# register for"
                },
                {
                    "Address": 250,
                    "ByteSize": 1,
                    "Comment": "'sending'.}"
                },
                {
                    "Address": 251,
                    "ByteSize": 3,
                    "Comment": "Jump forward into the saving loop.",
                    "OperandType": 2
                },
                {
                    "Address": 254,
                    "ByteSize": 1,
                    "Comment": "{The 'length' counter is tested and the jump taken when"
                },
                {
                    "Address": 255,
                    "ByteSize": 1,
                    "Comment": "it has reached zero."
                },
                {
                    "Address": 256,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 258,
                    "ByteSize": 3,
                    "Comment": "Fetch the next byte that is to be saved."
                },
                {
                    "Address": 261,
                    "ByteSize": 1,
                    "Comment": "Fetch the current 'parity'."
                },
                {
                    "Address": 262,
                    "ByteSize": 1,
                    "Comment": "Include the present byte."
                },
                {
                    "Address": 263,
                    "ByteSize": 1,
                    "Comment": "Restore the 'parity'. Note that on entry here the 'flag'\nvalue initialises 'parity'."
                },
                {
                    "Address": 264,
                    "ByteSize": 2,
                    "Comment": "Signal 'MIC on and blue'."
                },
                {
                    "Address": 266,
                    "ByteSize": 1,
                    "Comment": "Set the carry flag. This will act as a 'marker' for the\n8 bits of a byte."
                },
                {
                    "Address": 267,
                    "ByteSize": 3,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 270,
                    "ByteSize": 1,
                    "Comment": "Get final 'parity' value."
                },
                {
                    "Address": 271,
                    "ByteSize": 2,
                    "Comment": "Jump back.",
                    "OperandType": 2
                },
                {
                    "Address": 273,
                    "ByteSize": 1,
                    "Comment": "Come here on the second pass and fetch 'MIC off and\nyellow'."
                },
                {
                    "Address": 274,
                    "ByteSize": 2,
                    "Comment": "Set the zero flag to show 'second pass'."
                },
                {
                    "Address": 276,
                    "ByteSize": 2,
                    "Comment": "The main timing loop; always 801 T states on a second\npass.",
                    "OperandType": 2
                },
                {
                    "Address": 278,
                    "ByteSize": 2,
                    "Comment": "Jump, taking the shorter path, if saving a '0'.",
                    "OperandType": 2
                },
                {
                    "Address": 280,
                    "ByteSize": 2,
                    "Comment": "{However if saving a '1' then add 855 T states."
                },
                {
                    "Address": 282,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 284,
                    "ByteSize": 2,
                    "Comment": "On the first pass 'MIC on and blue' and on the second\npass 'MIC off and yellow'."
                },
                {
                    "Address": 286,
                    "ByteSize": 2,
                    "Comment": "Set the timing constant for the second pass."
                },
                {
                    "Address": 288,
                    "ByteSize": 2,
                    "Comment": "{Jump back at the end of the first pass; otherwise",
                    "OperandType": 2
                },
                {
                    "Address": 290,
                    "ByteSize": 1,
                    "Comment": "reclaim 13 T states.}"
                },
                {
                    "Address": 291,
                    "ByteSize": 1,
                    "Comment": "{Clear the carry flag and set #REG:A# to hold &01 (MIC on"
                },
                {
                    "Address": 292,
                    "ByteSize": 1,
                    "Comment": "and blue) before continuing into the '8 bit loop'.}"
                },
                {
                    "Address": 293,
                    "ByteSize": 2,
                    "Comment": "Move bit 7 to the carry and the 'marker' leftwards."
                },
                {
                    "Address": 295,
                    "ByteSize": 3,
                    "Comment": "Save the bit unless finished with the byte.",
                    "OperandType": 2
                },
                {
                    "Address": 298,
                    "ByteSize": 1,
                    "Comment": "Decrease the 'counter'."
                },
                {
                    "Address": 299,
                    "ByteSize": 2,
                    "Comment": "Advance the 'base address'."
                },
                {
                    "Address": 301,
                    "ByteSize": 2,
                    "Comment": "Set the timing constant for the first bit of the next\nbyte."
                },
                {
                    "Address": 303,
                    "ByteSize": 2,
                    "Comment": "{Return (to #ADDR:0x053F#) if the BREAK key is being pressed."
                },
                {
                    "Address": 305,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 307,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 308,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 309,
                    "ByteSize": 1,
                    "Comment": "{Otherwise test the 'counter' and jump back even if it"
                },
                {
                    "Address": 310,
                    "ByteSize": 1,
                    "Comment": "has reached zero (so as to send the 'parity' byte)."
                },
                {
                    "Address": 311,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 314,
                    "ByteSize": 2,
                    "Comment": "{Exit when the 'counter' reaches &FFFF. But first give a"
                },
                {
                    "Address": 316,
                    "ByteSize": 2,
                    "Comment": "short delay.",
                    "OperandType": 2
                },
                {
                    "Address": 318,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 319,
                    "ByteSize": 1,
                    "Comment": "Save the carry flag. (It is reset after a loading\nerror.)"
                },
                {
                    "Address": 320,
                    "ByteSize": 3,
                    "Comment": "{Fetch the original border colour from its system",
                    "OperandType": 1
                },
                {
                    "Address": 323,
                    "ByteSize": 2,
                    "Comment": "variable (\\#SYSVAR(BORDCR)).}"
                },
                {
                    "Address": 325,
                    "ByteSize": 1,
                    "Comment": "{Move the border colour to bits 2, 1 and 0."
                },
                {
                    "Address": 326,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 327,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 328,
                    "ByteSize": 2,
                    "Comment": "Set the border to its original colour."
                },
                {
                    "Address": 330,
                    "ByteSize": 2,
                    "Comment": "{Read the BREAK key for a last time."
                },
                {
                    "Address": 332,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 334,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 335,
                    "ByteSize": 1,
                    "Comment": "Enable the maskable interrupt."
                },
                {
                    "Address": 336,
                    "ByteSize": 2,
                    "Comment": "Jump unless a break is to be made.",
                    "OperandType": 2
                },
                {
                    "Address": 338,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 340,
                    "ByteSize": 1,
                    "Comment": "Retrieve the carry flag."
                },
                {
                    "Address": 341,
                    "ByteSize": 1,
                    "Comment": "Return to the calling routine."
                },
                {
                    "Address": 342,
                    "ByteSize": 1,
                    "Comment": "This resets the zero flag. (#REG:D# cannot hold &FF.)"
                },
                {
                    "Address": 343,
                    "ByteSize": 1,
                    "Comment": "The #REG:A# register holds &00 for a header and &FF for a\nblock of data. The carry flag is reset for verifying and\nset for loading."
                },
                {
                    "Address": 344,
                    "ByteSize": 1,
                    "Comment": "Restore #REG:D# to its original value."
                },
                {
                    "Address": 345,
                    "ByteSize": 1,
                    "Comment": "The maskable interrupt is now disabled."
                },
                {
                    "Address": 346,
                    "ByteSize": 2,
                    "Comment": "{The border is made white."
                },
                {
                    "Address": 348,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 350,
                    "ByteSize": 3,
                    "Comment": "{Preload the machine stack with the address #ADDR:0x053F#."
                },
                {
                    "Address": 353,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 354,
                    "ByteSize": 2,
                    "Comment": "Make an initial read of port '254'."
                },
                {
                    "Address": 356,
                    "ByteSize": 1,
                    "Comment": "{Rotate the byte obtained but keep only the EAR bit."
                },
                {
                    "Address": 357,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 359,
                    "ByteSize": 2,
                    "Comment": "Signal red border."
                },
                {
                    "Address": 361,
                    "ByteSize": 1,
                    "Comment": "Store the value in the #REG:C# register (&22 for 'off' and\n&02 for 'on' - the present EAR state)."
                },
                {
                    "Address": 362,
                    "ByteSize": 1,
                    "Comment": "Set the zero flag."
                },
                {
                    "Address": 363,
                    "ByteSize": 1,
                    "Comment": "Return if the BREAK key is being pressed."
                },
                {
                    "Address": 364,
                    "ByteSize": 3,
                    "Comment": "{Return with the carry flag reset if there is no 'edge'",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 367,
                    "ByteSize": 2,
                    "Comment": "within approx. 14,000 T states. But if an 'edge' is\nfound the border will go cyan.}",
                    "OperandType": 2
                },
                {
                    "Address": 369,
                    "ByteSize": 3,
                    "Comment": "{The length of this waiting period will be almost one"
                },
                {
                    "Address": 372,
                    "ByteSize": 2,
                    "Comment": "second in duration.",
                    "OperandType": 2
                },
                {
                    "Address": 374,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 375,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 376,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 377,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 379,
                    "ByteSize": 3,
                    "Comment": "{Continue only if two edges are found within the allowed",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 382,
                    "ByteSize": 2,
                    "Comment": "time period.}",
                    "OperandType": 2
                },
                {
                    "Address": 384,
                    "ByteSize": 2,
                    "Comment": "The timing constant."
                },
                {
                    "Address": 386,
                    "ByteSize": 3,
                    "Comment": "{Continue only if two edges are found within the allowed",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 389,
                    "ByteSize": 2,
                    "Comment": "time period.}",
                    "OperandType": 2
                },
                {
                    "Address": 391,
                    "ByteSize": 2,
                    "Comment": "{However the edges must have been found within about"
                },
                {
                    "Address": 393,
                    "ByteSize": 1,
                    "Comment": "3,000 T states of each other."
                },
                {
                    "Address": 394,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 396,
                    "ByteSize": 1,
                    "Comment": "{Count the pair of edges in the #REG:H# register until"
                },
                {
                    "Address": 397,
                    "ByteSize": 2,
                    "Comment": "'256' pairs have been found.}",
                    "OperandType": 2
                },
                {
                    "Address": 399,
                    "ByteSize": 2,
                    "Comment": "The timing constant."
                },
                {
                    "Address": 401,
                    "ByteSize": 3,
                    "Comment": "{Every edge is considered until two edges are found",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 404,
                    "ByteSize": 2,
                    "Comment": "close together - these will be the start and finishing",
                    "OperandType": 2
                },
                {
                    "Address": 406,
                    "ByteSize": 1,
                    "Comment": "edges of the 'off' sync pulse."
                },
                {
                    "Address": 407,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 409,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 411,
                    "ByteSize": 3,
                    "Comment": "{The finishing edge of the 'on' pulse must exist.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 414,
                    "ByteSize": 1,
                    "Comment": "(Return carry flag reset.)}"
                },
                {
                    "Address": 415,
                    "ByteSize": 1,
                    "Comment": "{The border colours from now on will be blue and yellow."
                },
                {
                    "Address": 416,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 418,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 419,
                    "ByteSize": 2,
                    "Comment": "Initialise the 'parity matching' byte to zero."
                },
                {
                    "Address": 421,
                    "ByteSize": 2,
                    "Comment": "Set the timing constant for the flag byte."
                },
                {
                    "Address": 423,
                    "ByteSize": 2,
                    "Comment": "Jump forward into the byte loading loop.",
                    "OperandType": 2
                },
                {
                    "Address": 425,
                    "ByteSize": 1,
                    "Comment": "Fetch the flags."
                },
                {
                    "Address": 426,
                    "ByteSize": 2,
                    "Comment": "Jump forward only when handling the first byte.",
                    "OperandType": 2
                },
                {
                    "Address": 428,
                    "ByteSize": 2,
                    "Comment": "Jump forward if verifying a tape.",
                    "OperandType": 2
                },
                {
                    "Address": 430,
                    "ByteSize": 3,
                    "Comment": "Make the actual load when required."
                },
                {
                    "Address": 433,
                    "ByteSize": 2,
                    "Comment": "Jump forward to load the next byte.",
                    "OperandType": 2
                },
                {
                    "Address": 435,
                    "ByteSize": 2,
                    "Comment": "Keep the carry flag in a safe place temporarily."
                },
                {
                    "Address": 437,
                    "ByteSize": 1,
                    "Comment": "{Return now if the type flag does not match the first"
                },
                {
                    "Address": 438,
                    "ByteSize": 1,
                    "Comment": "byte on the tape. (Carry flag reset.)}"
                },
                {
                    "Address": 439,
                    "ByteSize": 1,
                    "Comment": "{Restore the carry flag now."
                },
                {
                    "Address": 440,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 441,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 442,
                    "ByteSize": 1,
                    "Comment": "{Increase the counter to compensate for its 'decrease'"
                },
                {
                    "Address": 443,
                    "ByteSize": 2,
                    "Comment": "after the jump.}",
                    "OperandType": 2
                },
                {
                    "Address": 445,
                    "ByteSize": 3,
                    "Comment": "Fetch the original byte."
                },
                {
                    "Address": 448,
                    "ByteSize": 1,
                    "Comment": "Match it against the new byte."
                },
                {
                    "Address": 449,
                    "ByteSize": 1,
                    "Comment": "Return if 'no match'. (Carry flag reset.)"
                },
                {
                    "Address": 450,
                    "ByteSize": 2,
                    "Comment": "Increase the 'destination'."
                },
                {
                    "Address": 452,
                    "ByteSize": 1,
                    "Comment": "Decrease the 'counter'."
                },
                {
                    "Address": 453,
                    "ByteSize": 1,
                    "Comment": "Save the flags."
                },
                {
                    "Address": 454,
                    "ByteSize": 2,
                    "Comment": "Set the timing constant."
                },
                {
                    "Address": 456,
                    "ByteSize": 2,
                    "Comment": "Clear the 'object' register apart from a 'marker' bit."
                },
                {
                    "Address": 458,
                    "ByteSize": 3,
                    "Comment": "Find the length of the 'off' and 'on' pulses of the next\nbit.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 461,
                    "ByteSize": 1,
                    "Comment": "Return if the time period is exceeded. (Carry flag\nreset.)"
                },
                {
                    "Address": 462,
                    "ByteSize": 2,
                    "Comment": "{Compare the length against approx. 2,400 T states,"
                },
                {
                    "Address": 464,
                    "ByteSize": 1,
                    "Comment": "resetting the carry flag for a '0' and setting it for a\n'1'.}"
                },
                {
                    "Address": 465,
                    "ByteSize": 2,
                    "Comment": "Include the new bit in the #REG:L# register."
                },
                {
                    "Address": 467,
                    "ByteSize": 2,
                    "Comment": "Set the timing constant for the next bit."
                },
                {
                    "Address": 469,
                    "ByteSize": 3,
                    "Comment": "Jump back whilst there are still bits to be fetched.",
                    "OperandType": 2
                },
                {
                    "Address": 472,
                    "ByteSize": 1,
                    "Comment": "{Fetch the 'parity matching' byte and include the new"
                },
                {
                    "Address": 473,
                    "ByteSize": 1,
                    "Comment": "byte.}"
                },
                {
                    "Address": 474,
                    "ByteSize": 1,
                    "Comment": "Save it once again."
                },
                {
                    "Address": 475,
                    "ByteSize": 1,
                    "Comment": "{Make a further pass if the #REG:DE# register pair does"
                },
                {
                    "Address": 476,
                    "ByteSize": 1,
                    "Comment": "not hold zero."
                },
                {
                    "Address": 477,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 479,
                    "ByteSize": 1,
                    "Comment": "Fetch the 'parity matching' byte."
                },
                {
                    "Address": 480,
                    "ByteSize": 2,
                    "Comment": "{Return with the carry flag set if the value is zero."
                },
                {
                    "Address": 482,
                    "ByteSize": 1,
                    "Comment": "(Carry flag reset if in error.)}"
                },
                {
                    "Address": 483,
                    "ByteSize": 3,
                    "Comment": "{In effect call #ADDR:0x05E7# twice, returning in between if",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 486,
                    "ByteSize": 1,
                    "Comment": "there is an error.}"
                },
                {
                    "Address": 487,
                    "ByteSize": 2,
                    "Comment": "{Wait 358 T states before entering the sampling loop."
                },
                {
                    "Address": 489,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 490,
                    "ByteSize": 2,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 492,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 493,
                    "ByteSize": 1,
                    "Comment": "Count each pass."
                },
                {
                    "Address": 494,
                    "ByteSize": 1,
                    "Comment": "Return carry reset and zero set if 'time-up'."
                },
                {
                    "Address": 495,
                    "ByteSize": 2,
                    "Comment": "{Read from port &7FFE, i.e. BREAK and EAR."
                },
                {
                    "Address": 497,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 499,
                    "ByteSize": 1,
                    "Comment": "Shift the byte."
                },
                {
                    "Address": 500,
                    "ByteSize": 1,
                    "Comment": "Return carry reset and zero reset if BREAK was pressed."
                },
                {
                    "Address": 501,
                    "ByteSize": 1,
                    "Comment": "{Now test the byte against the 'last edge-type'; jump"
                },
                {
                    "Address": 502,
                    "ByteSize": 2,
                    "Comment": "back unless it has changed."
                },
                {
                    "Address": 504,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 506,
                    "ByteSize": 1,
                    "Comment": "{Change the 'last edge-type' and border colour."
                },
                {
                    "Address": 507,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 508,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 509,
                    "ByteSize": 2,
                    "Comment": "Keep only the border colour."
                },
                {
                    "Address": 511,
                    "ByteSize": 2,
                    "Comment": "Signal 'MIC off'."
                },
                {
                    "Address": 513,
                    "ByteSize": 2,
                    "Comment": "Change the border colour (red/cyan or blue/yellow)."
                },
                {
                    "Address": 515,
                    "ByteSize": 1,
                    "Comment": "{Signal the successful search before returning."
                },
                {
                    "Address": 516,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 517,
                    "ByteSize": 1,
                    "Comment": "Drop the address - #ADDR:0x1B52#."
                },
                {
                    "Address": 518,
                    "ByteSize": 3,
                    "Comment": "{Reduce \\#SYSVAR(T-ADDR-lo) by &E0, giving &00 for",
                    "OperandType": 1
                },
                {
                    "Address": 521,
                    "ByteSize": 2,
                    "Comment": "SAVE, &01 for LOAD, &02 for VERIFY and &03 for MERGE."
                },
                {
                    "Address": 523,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 526,
                    "ByteSize": 3,
                    "Comment": "Pass the parameters of the 'name' to the calculator\nstack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 529,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 532,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 534,
                    "ByteSize": 3,
                    "Comment": "{Allow seventeen locations for the header of a SAVE"
                },
                {
                    "Address": 537,
                    "ByteSize": 3,
                    "Comment": "(\\#SYSVAR(T-ADDR-lo)=&00) but thirty four for the other",
                    "OperandType": 1
                },
                {
                    "Address": 540,
                    "ByteSize": 1,
                    "Comment": "commands."
                },
                {
                    "Address": 541,
                    "ByteSize": 2,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 543,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 545,
                    "ByteSize": 1,
                    "Comment": "The required amount of space is made in the work\nspace.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 546,
                    "ByteSize": 1,
                    "Comment": "{Copy the start address to the #REG:IX# register pair."
                },
                {
                    "Address": 547,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 549,
                    "ByteSize": 2,
                    "Comment": "{A program name can have up to ten characters but"
                },
                {
                    "Address": 551,
                    "ByteSize": 2,
                    "Comment": "first enter eleven space characters into the prepared"
                },
                {
                    "Address": 553,
                    "ByteSize": 1,
                    "Comment": "area."
                },
                {
                    "Address": 554,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 555,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 557,
                    "ByteSize": 4,
                    "Comment": "A null name is &FF only."
                },
                {
                    "Address": 561,
                    "ByteSize": 3,
                    "Comment": "The parameters of the name are fetched and its length\nis tested.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 564,
                    "ByteSize": 3,
                    "Comment": "This is '-10'."
                },
                {
                    "Address": 567,
                    "ByteSize": 1,
                    "Comment": "{In effect jump forward if the length of the name is"
                },
                {
                    "Address": 568,
                    "ByteSize": 1,
                    "Comment": "not too long (i.e. no more than ten characters)."
                },
                {
                    "Address": 569,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 570,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 572,
                    "ByteSize": 3,
                    "Comment": "{But allow for the LOADing, VERIFYing and MERGEing of",
                    "OperandType": 1
                },
                {
                    "Address": 575,
                    "ByteSize": 1,
                    "Comment": "programs (\\#SYSVAR(T-ADDR-lo)>&00) with 'null' names or"
                },
                {
                    "Address": 576,
                    "ByteSize": 2,
                    "Comment": "extra long names.}",
                    "OperandType": 2
                },
                {
                    "Address": 578,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 580,
                    "ByteSize": 1,
                    "Comment": "{Jump forward if the name has a 'null' length."
                },
                {
                    "Address": 581,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 582,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 584,
                    "ByteSize": 3,
                    "Comment": "But truncate longer names."
                },
                {
                    "Address": 587,
                    "ByteSize": 2,
                    "Comment": "{Copy the start address to the #REG:HL# register pair."
                },
                {
                    "Address": 589,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 590,
                    "ByteSize": 1,
                    "Comment": "Step to the second location."
                },
                {
                    "Address": 591,
                    "ByteSize": 1,
                    "Comment": "{Switch the pointers over and copy the name."
                },
                {
                    "Address": 592,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 594,
                    "ByteSize": 1,
                    "Comment": "{Is the present code the token 'DATA'?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 595,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 597,
                    "ByteSize": 2,
                    "Comment": "Jump if not.",
                    "OperandType": 2
                },
                {
                    "Address": 599,
                    "ByteSize": 3,
                    "Comment": "{However it is not possible to have 'MERGE name DATA'",
                    "OperandType": 1
                },
                {
                    "Address": 602,
                    "ByteSize": 2,
                    "Comment": "(\\#SYSVAR(T-ADDR-lo)=&03)."
                },
                {
                    "Address": 604,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 607,
                    "ByteSize": 1,
                    "Comment": "Advance \\#SYSVAR(CH-ADD).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 608,
                    "ByteSize": 3,
                    "Comment": "Look in the variables area for the array.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 611,
                    "ByteSize": 2,
                    "Comment": "Set bit 7 of the array's name."
                },
                {
                    "Address": 613,
                    "ByteSize": 2,
                    "Comment": "Jump if handling an existing array.",
                    "OperandType": 2
                },
                {
                    "Address": 615,
                    "ByteSize": 3,
                    "Comment": "Signal 'using a new array'."
                },
                {
                    "Address": 618,
                    "ByteSize": 3,
                    "Comment": "{Consider the value in \\#SYSVAR(T-ADDR-lo) and give an",
                    "OperandType": 1
                },
                {
                    "Address": 621,
                    "ByteSize": 1,
                    "Comment": "error if trying to SAVE or VERIFY a new array."
                },
                {
                    "Address": 622,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 624,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 626,
                    "ByteSize": 3,
                    "Comment": "Note: \\#BUG\\#savingASimpleString(this fails to exclude\nsimple strings).",
                    "OperandType": 2
                },
                {
                    "Address": 629,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 632,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 634,
                    "ByteSize": 1,
                    "Comment": "Point to the 'low length' of the variable."
                },
                {
                    "Address": 635,
                    "ByteSize": 1,
                    "Comment": "{The low length byte goes into the work space,"
                },
                {
                    "Address": 636,
                    "ByteSize": 3,
                    "Comment": "followed by the high length byte."
                },
                {
                    "Address": 639,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 640,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 641,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 644,
                    "ByteSize": 1,
                    "Comment": "Step past the length bytes."
                },
                {
                    "Address": 645,
                    "ByteSize": 3,
                    "Comment": "Copy the array's name."
                },
                {
                    "Address": 648,
                    "ByteSize": 2,
                    "Comment": "Assume an array of numbers."
                },
                {
                    "Address": 650,
                    "ByteSize": 2,
                    "Comment": "{Jump if it is so."
                },
                {
                    "Address": 652,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 654,
                    "ByteSize": 1,
                    "Comment": "It is an array of characters."
                },
                {
                    "Address": 655,
                    "ByteSize": 3,
                    "Comment": "Save the 'type' in the first location of the header\narea."
                },
                {
                    "Address": 658,
                    "ByteSize": 1,
                    "Comment": "Save the pointer in #REG:DE#."
                },
                {
                    "Address": 659,
                    "ByteSize": 1,
                    "Comment": "{Is the next character a ')'?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 660,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 662,
                    "ByteSize": 2,
                    "Comment": "Give report C if it is not.",
                    "OperandType": 2
                },
                {
                    "Address": 664,
                    "ByteSize": 1,
                    "Comment": "Advance \\#SYSVAR(CH-ADD).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 665,
                    "ByteSize": 3,
                    "Comment": "Move on to the next statement if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 668,
                    "ByteSize": 1,
                    "Comment": "{Return the pointer to the #REG:HL# register pair before"
                },
                {
                    "Address": 669,
                    "ByteSize": 3,
                    "Comment": "jumping forward. (The pointer indicates the start of\nan existing array's contents.)}",
                    "OperandType": 2
                },
                {
                    "Address": 672,
                    "ByteSize": 2,
                    "Comment": "Is the present code the token SCREEN$?"
                },
                {
                    "Address": 674,
                    "ByteSize": 2,
                    "Comment": "Jump if not.",
                    "OperandType": 2
                },
                {
                    "Address": 676,
                    "ByteSize": 3,
                    "Comment": "{However it is not possible to have 'MERGE name",
                    "OperandType": 1
                },
                {
                    "Address": 679,
                    "ByteSize": 2,
                    "Comment": "SCREEN$' (\\#SYSVAR(T-ADDR-lo)=&03)."
                },
                {
                    "Address": 681,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 684,
                    "ByteSize": 1,
                    "Comment": "Advance \\#SYSVAR(CH-ADD).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 685,
                    "ByteSize": 3,
                    "Comment": "Move on to the next statement if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 688,
                    "ByteSize": 4,
                    "Comment": "{The display area and the attribute area occupy &1B00"
                },
                {
                    "Address": 692,
                    "ByteSize": 4,
                    "Comment": "locations and these locations start at &4000; these"
                },
                {
                    "Address": 696,
                    "ByteSize": 3,
                    "Comment": "details are passed to the header area in the work"
                },
                {
                    "Address": 699,
                    "ByteSize": 3,
                    "Comment": "space."
                },
                {
                    "Address": 702,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 705,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 707,
                    "ByteSize": 2,
                    "Comment": "Is the present code the token 'CODE'?"
                },
                {
                    "Address": 709,
                    "ByteSize": 2,
                    "Comment": "Jump if not.",
                    "OperandType": 2
                },
                {
                    "Address": 711,
                    "ByteSize": 3,
                    "Comment": "{However it is not possible to have 'MERGE name CODE'",
                    "OperandType": 1
                },
                {
                    "Address": 714,
                    "ByteSize": 2,
                    "Comment": "(\\#SYSVAR(T-ADDR-lo)=&03)."
                },
                {
                    "Address": 716,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 719,
                    "ByteSize": 1,
                    "Comment": "Advance \\#SYSVAR(CH-ADD).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 720,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if the statement has not finished.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 723,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 725,
                    "ByteSize": 3,
                    "Comment": "{However it is not possible to have 'SAVE name CODE'",
                    "OperandType": 1
                },
                {
                    "Address": 728,
                    "ByteSize": 1,
                    "Comment": "(\\#SYSVAR(T-ADDR-lo)=&00) by itself."
                },
                {
                    "Address": 729,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 732,
                    "ByteSize": 3,
                    "Comment": "Put a zero on the calculator stack - for the 'start'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 735,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 737,
                    "ByteSize": 3,
                    "Comment": "Fetch the first number.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 740,
                    "ByteSize": 1,
                    "Comment": "{Is the present character a comma?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 741,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 743,
                    "ByteSize": 2,
                    "Comment": "Jump if it is - the number was a 'starting address'.",
                    "OperandType": 2
                },
                {
                    "Address": 745,
                    "ByteSize": 3,
                    "Comment": "{However refuse 'SAVE name CODE' that does not have a",
                    "OperandType": 1
                },
                {
                    "Address": 748,
                    "ByteSize": 1,
                    "Comment": "'start' and a 'length' (\\#SYSVAR(T-ADDR-lo)=&00)."
                },
                {
                    "Address": 749,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 752,
                    "ByteSize": 3,
                    "Comment": "Put a zero on the calculator stack - for the 'length'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 755,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 757,
                    "ByteSize": 1,
                    "Comment": "Advance \\#SYSVAR(CH-ADD).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 758,
                    "ByteSize": 3,
                    "Comment": "Fetch the 'length'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 761,
                    "ByteSize": 3,
                    "Comment": "But move on to the next statement now if checking\nsyntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 764,
                    "ByteSize": 3,
                    "Comment": "{Compress the 'length' into the #REG:BC# register pair",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 767,
                    "ByteSize": 3,
                    "Comment": "and store it."
                },
                {
                    "Address": 770,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 773,
                    "ByteSize": 3,
                    "Comment": "{Compress the 'starting address' into the #REG:BC#",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 776,
                    "ByteSize": 3,
                    "Comment": "register pair and store it."
                },
                {
                    "Address": 779,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 782,
                    "ByteSize": 1,
                    "Comment": "{Transfer the 'pointer' to the #REG:HL# register pair as"
                },
                {
                    "Address": 783,
                    "ByteSize": 1,
                    "Comment": "usual.}"
                },
                {
                    "Address": 784,
                    "ByteSize": 4,
                    "Comment": "Enter the 'type' number."
                },
                {
                    "Address": 788,
                    "ByteSize": 2,
                    "Comment": "Rejoin the other pathways.",
                    "OperandType": 2
                },
                {
                    "Address": 790,
                    "ByteSize": 2,
                    "Comment": "Is the present code the token 'LINE'?"
                },
                {
                    "Address": 792,
                    "ByteSize": 2,
                    "Comment": "Jump if it is.",
                    "OperandType": 2
                },
                {
                    "Address": 794,
                    "ByteSize": 3,
                    "Comment": "Move on to the next statement if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 797,
                    "ByteSize": 4,
                    "Comment": "When there are no further parameters, &80 is entered."
                },
                {
                    "Address": 801,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 803,
                    "ByteSize": 3,
                    "Comment": "{However only allow 'SAVE name LINE number'",
                    "OperandType": 1
                },
                {
                    "Address": 806,
                    "ByteSize": 1,
                    "Comment": "(\\#SYSVAR(T-ADDR-lo)=&00)."
                },
                {
                    "Address": 807,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 810,
                    "ByteSize": 1,
                    "Comment": "Advance \\#SYSVAR(CH-ADD).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 811,
                    "ByteSize": 3,
                    "Comment": "Pass the number to the calculator stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 814,
                    "ByteSize": 3,
                    "Comment": "Move on to the next statement if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 817,
                    "ByteSize": 3,
                    "Comment": "{Compress the 'line number' into the #REG:BC# register",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 820,
                    "ByteSize": 3,
                    "Comment": "pair and store it."
                },
                {
                    "Address": 823,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 826,
                    "ByteSize": 4,
                    "Comment": "Enter the 'type' number."
                },
                {
                    "Address": 830,
                    "ByteSize": 3,
                    "Comment": "The pointer to the end of the variables area\n(\\#SYSVAR(E-LINE)).",
                    "OperandType": 1
                },
                {
                    "Address": 833,
                    "ByteSize": 4,
                    "Comment": "The pointer to the start of the BASIC program\n(\\#SYSVAR(PROG)).",
                    "OperandType": 1
                },
                {
                    "Address": 837,
                    "ByteSize": 1,
                    "Comment": "{Now perform the subtraction to find the length of the"
                },
                {
                    "Address": 838,
                    "ByteSize": 2,
                    "Comment": "'program + variables'; store the result."
                },
                {
                    "Address": 840,
                    "ByteSize": 3,
                    "Comment": " "
                },
                {
                    "Address": 843,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 846,
                    "ByteSize": 3,
                    "Comment": "{Repeat the operation but this time storing the length",
                    "OperandType": 1
                },
                {
                    "Address": 849,
                    "ByteSize": 2,
                    "Comment": "of the 'program' only (\\#SYSVAR(VARS)-\\#SYSVAR(PROG))."
                },
                {
                    "Address": 851,
                    "ByteSize": 3,
                    "Comment": " "
                },
                {
                    "Address": 854,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 857,
                    "ByteSize": 1,
                    "Comment": "Transfer the 'pointer' to the #REG:HL# register pair as\nusual."
                },
                {
                    "Address": 858,
                    "ByteSize": 3,
                    "Comment": "{Jump forward when handling a SAVE command",
                    "OperandType": 1
                },
                {
                    "Address": 861,
                    "ByteSize": 1,
                    "Comment": "(\\#SYSVAR(T-ADDR-lo)=&00)."
                },
                {
                    "Address": 862,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 865,
                    "ByteSize": 1,
                    "Comment": "Save the 'destination' pointer."
                },
                {
                    "Address": 866,
                    "ByteSize": 3,
                    "Comment": "{Form in the #REG:IX# register pair the base address of"
                },
                {
                    "Address": 869,
                    "ByteSize": 2,
                    "Comment": "the 'second header area'.}"
                },
                {
                    "Address": 871,
                    "ByteSize": 2,
                    "Comment": "Make a copy of the base address."
                },
                {
                    "Address": 873,
                    "ByteSize": 3,
                    "Comment": "LOAD seventeen bytes."
                },
                {
                    "Address": 876,
                    "ByteSize": 1,
                    "Comment": "Signal 'header'."
                },
                {
                    "Address": 877,
                    "ByteSize": 1,
                    "Comment": "Signal 'LOAD'."
                },
                {
                    "Address": 878,
                    "ByteSize": 3,
                    "Comment": "Now look for a header.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 881,
                    "ByteSize": 2,
                    "Comment": "Retrieve the base address."
                },
                {
                    "Address": 883,
                    "ByteSize": 2,
                    "Comment": "Go round the loop until successful.",
                    "OperandType": 2
                },
                {
                    "Address": 885,
                    "ByteSize": 2,
                    "Comment": "{Ensure that channel 'S' is open."
                },
                {
                    "Address": 887,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 890,
                    "ByteSize": 4,
                    "Comment": "Set the scroll counter (\\#SYSVAR(SCR-CT))."
                },
                {
                    "Address": 894,
                    "ByteSize": 2,
                    "Comment": "Signal 'names do not match'."
                },
                {
                    "Address": 896,
                    "ByteSize": 3,
                    "Comment": "{Compare the 'new' type against the 'old' type."
                },
                {
                    "Address": 899,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 902,
                    "ByteSize": 2,
                    "Comment": "Jump if the 'types' do not match.",
                    "OperandType": 2
                },
                {
                    "Address": 904,
                    "ByteSize": 2,
                    "Comment": "But if they do, signal 'ten characters are to match'."
                },
                {
                    "Address": 906,
                    "ByteSize": 2,
                    "Comment": "{Clearly the 'header' is nonsense if 'type 4 or more'."
                },
                {
                    "Address": 908,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 910,
                    "ByteSize": 3,
                    "Comment": "The base address of the #ADDR:0x09C1#(message block)."
                },
                {
                    "Address": 913,
                    "ByteSize": 1,
                    "Comment": "{Save the #REG:C# register whilst the appropriate"
                },
                {
                    "Address": 914,
                    "ByteSize": 3,
                    "Comment": "message is printed.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 917,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 918,
                    "ByteSize": 2,
                    "Comment": "{Make the #REG:DE# register pair point to the 'new name'"
                },
                {
                    "Address": 920,
                    "ByteSize": 1,
                    "Comment": "and the #REG:HL# register pair to the 'old name'."
                },
                {
                    "Address": 921,
                    "ByteSize": 3,
                    "Comment": " "
                },
                {
                    "Address": 924,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 925,
                    "ByteSize": 2,
                    "Comment": "Ten characters are to be considered."
                },
                {
                    "Address": 927,
                    "ByteSize": 1,
                    "Comment": "{Jump forward if the match is to be against an actual"
                },
                {
                    "Address": 928,
                    "ByteSize": 1,
                    "Comment": "name."
                },
                {
                    "Address": 929,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 931,
                    "ByteSize": 1,
                    "Comment": "{But if the 'old name' is 'null' then signal 'ten"
                },
                {
                    "Address": 932,
                    "ByteSize": 1,
                    "Comment": "characters already match'."
                },
                {
                    "Address": 933,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 934,
                    "ByteSize": 1,
                    "Comment": "{Consider each character of the 'new name' in turn."
                },
                {
                    "Address": 935,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 936,
                    "ByteSize": 1,
                    "Comment": "{Match it against the appropriate character of the"
                },
                {
                    "Address": 937,
                    "ByteSize": 1,
                    "Comment": "'old name'.}"
                },
                {
                    "Address": 938,
                    "ByteSize": 2,
                    "Comment": "{Do not count it if it does not does not match.",
                    "OperandType": 2
                },
                {
                    "Address": 940,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 941,
                    "ByteSize": 1,
                    "Comment": "Print the 'new' character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 942,
                    "ByteSize": 2,
                    "Comment": "Loop for ten characters.",
                    "OperandType": 2
                },
                {
                    "Address": 944,
                    "ByteSize": 2,
                    "Comment": "{Accept the name only if the counter has reached zero."
                },
                {
                    "Address": 946,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 948,
                    "ByteSize": 2,
                    "Comment": "{Follow the 'new name' with a 'carriage return'."
                },
                {
                    "Address": 950,
                    "ByteSize": 1,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 951,
                    "ByteSize": 1,
                    "Comment": "Fetch the pointer."
                },
                {
                    "Address": 952,
                    "ByteSize": 3,
                    "Comment": "{'SCREEN$' and 'CODE' are handled with VERIFY."
                },
                {
                    "Address": 955,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 957,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 959,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if using a LOAD command",
                    "OperandType": 1
                },
                {
                    "Address": 962,
                    "ByteSize": 1,
                    "Comment": "(\\#SYSVAR(T-ADDR-lo)=&01)."
                },
                {
                    "Address": 963,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 966,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if using a MERGE command; continue into"
                },
                {
                    "Address": 968,
                    "ByteSize": 3,
                    "Comment": "#ADDR:0x07CB# with a VERIFY command.}",
                    "OperandType": 2
                },
                {
                    "Address": 971,
                    "ByteSize": 1,
                    "Comment": "Save the 'pointer'."
                },
                {
                    "Address": 972,
                    "ByteSize": 3,
                    "Comment": "{Fetch the 'number of bytes' as described in the 'old'"
                },
                {
                    "Address": 975,
                    "ByteSize": 3,
                    "Comment": "header.}"
                },
                {
                    "Address": 978,
                    "ByteSize": 3,
                    "Comment": "{Fetch also the number from the 'new' header."
                },
                {
                    "Address": 981,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 984,
                    "ByteSize": 1,
                    "Comment": "{Jump forward if the 'length' is unspecified, e.g. 'LOAD"
                },
                {
                    "Address": 985,
                    "ByteSize": 1,
                    "Comment": "name CODE' only."
                },
                {
                    "Address": 986,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 988,
                    "ByteSize": 2,
                    "Comment": "{Give report R if attempting to load a larger block than"
                },
                {
                    "Address": 990,
                    "ByteSize": 2,
                    "Comment": "has been requested.}",
                    "OperandType": 2
                },
                {
                    "Address": 992,
                    "ByteSize": 2,
                    "Comment": "Accept equal 'lengths'.",
                    "OperandType": 2
                },
                {
                    "Address": 994,
                    "ByteSize": 3,
                    "Comment": "{Also give report R if trying to verify blocks that are"
                },
                {
                    "Address": 997,
                    "ByteSize": 2,
                    "Comment": "of unequal size. ('Old length' greater than 'new"
                },
                {
                    "Address": 999,
                    "ByteSize": 2,
                    "Comment": "length'.)}",
                    "OperandType": 2
                },
                {
                    "Address": 1001,
                    "ByteSize": 1,
                    "Comment": "Fetch the 'pointer', i.e. the 'start'."
                },
                {
                    "Address": 1002,
                    "ByteSize": 1,
                    "Comment": "{This 'pointer' will be used unless it is zero, in which"
                },
                {
                    "Address": 1003,
                    "ByteSize": 1,
                    "Comment": "case the 'start' found in the 'new' header will be used"
                },
                {
                    "Address": 1004,
                    "ByteSize": 2,
                    "Comment": "instead.",
                    "OperandType": 2
                },
                {
                    "Address": 1006,
                    "ByteSize": 3,
                    "Comment": " "
                },
                {
                    "Address": 1009,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 1012,
                    "ByteSize": 1,
                    "Comment": "{Move the 'pointer' to the #REG:IX# register pair."
                },
                {
                    "Address": 1013,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 1015,
                    "ByteSize": 3,
                    "Comment": "{Jump forward unless using the VERIFY command",
                    "OperandType": 1
                },
                {
                    "Address": 1018,
                    "ByteSize": 2,
                    "Comment": "(\\#SYSVAR(T-ADDR-lo)=&02), with the carry flag signalling"
                },
                {
                    "Address": 1020,
                    "ByteSize": 1,
                    "Comment": "'LOAD'."
                },
                {
                    "Address": 1021,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 1023,
                    "ByteSize": 1,
                    "Comment": "Signal 'VERIFY'."
                }
            ],
            "CommentBlocks": [
                {
                    "Address": 7,
                    "Comment": "Now perform several tests on i, the integer part of the 'pitch'."
                },
                {
                    "Address": 37,
                    "Comment": "Note: the range 70 to 127 will be rejected later on.\n \nThe correct frequency for the 'pitch' i can now be found."
                },
                {
                    "Address": 56,
                    "Comment": "Now the fractional part of the 'pitch' can be taken into consideration."
                },
                {
                    "Address": 59,
                    "Comment": "The final frequency f is found by modifying the 'last value' according to the\noctave number."
                },
                {
                    "Address": 65,
                    "Comment": "Attention is now turned to the 'duration'."
                },
                {
                    "Address": 74,
                    "Comment": "The number of complete cycles in the 'beep' is given by f*t so this value is\nnow found."
                },
                {
                    "Address": 77,
                    "Comment": "The result is left on the calculator stack whilst the length of the 'timing\nloop' required for the 'beep' is computed."
                },
                {
                    "Address": 91,
                    "Comment": "Note: the value 437500/f gives the 'half-cycle' length of the note and\nreducing it by 30.125 allows for 120.5 T states in which to actually produce\nthe note and adjust the counters etc.\n \nThe values can now be transferred to the required registers."
                },
                {
                    "Address": 95,
                    "Comment": "Note: if the timing loop value is too large then an error will occur\n(returning via #ADDR:0x0008#), thereby excluding 'pitch' values of 70 to 127."
                },
                {
                    "Address": 101,
                    "Comment": "However before making the 'beep' test the value f*t."
                },
                {
                    "Address": 108,
                    "Comment": "Report B - integer out of range."
                },
                {
                    "Address": 110,
                    "Comment": "THE 'SEMI-TONE' TABLE\n \nUsed by the routine at #ADDR:0x03F8#.\n \nThis table holds the frequencies of the twelve semi-tones in an octave."
                },
                {
                    "Address": 170,
                    "Comment": "THE 'PROGRAM NAME' SUBROUTINE (ZX81)\n \nThe following subroutine applies to the ZX81 and was not removed when the\nprogram was rewritten for the Spectrum."
                },
                {
                    "Address": 194,
                    "Comment": "THE 'SA-BYTES' SUBROUTINE\n \nUsed by the routine at #ADDR:0x0970#.\n \nThis subroutine is called to save the header information and later the actual\nprogram/data block to tape.\n \nA &00 (header block) or &FF (data block)\nDE Block length\nIX Start address"
                },
                {
                    "Address": 216,
                    "Comment": "A loop is now entered to create the pulses of the leader. Both the 'MIC on'\nand the 'MIC off' pulses are 2,168 T states in length. The colour of the\nborder changes from red to cyan with each 'edge'.\n \nNote: an 'edge' will be a transition either from 'on' to 'off', or from 'off'\nto 'on'."
                },
                {
                    "Address": 232,
                    "Comment": "A sync pulse is now sent."
                },
                {
                    "Address": 246,
                    "Comment": "The header v. program/data flag will be the first byte to be saved."
                },
                {
                    "Address": 254,
                    "Comment": "The byte saving loop is now entered. The first byte to be saved is the flag;\nthis is followed by the actual data bytes and the final byte sent is the\nparity byte that is built up by considering the values of all the earlier\nbytes."
                },
                {
                    "Address": 270,
                    "Comment": "When it is time to send the 'parity' byte then it is transferred to the #REG:L#\nregister for saving."
                },
                {
                    "Address": 273,
                    "Comment": "The following inner loop produces the actual pulses. The loop is entered at\n#ADDR:0x0514# with the type of the bit to be saved indicated by the carry flag. Two\npasses of the loop are made for each bit thereby making an 'off pulse' and an\n'on pulse'. The pulses for a reset bit are shorter by 855 T states."
                },
                {
                    "Address": 293,
                    "Comment": "The '8 bit loop' is entered initially with the whole byte in the #REG:L#\nregister and the carry flag set. However it is re-entered after each bit has\nbeen saved until the point is reached when the 'marker' passes to the carry\nflag leaving the #REG:L# register empty."
                },
                {
                    "Address": 319,
                    "Comment": "Note: a reset bit will give a 'MIC off' pulse of 855 T states followed by a\n'MIC on' pulse of 855 T states, whereas a set bit will give pulses of exactly\ntwice as long. Note also that there are no gaps either between the sync pulse\nand the first bit of the flag, or between bytes.\nTHE 'SA/LD-RET' SUBROUTINE\n \nUsed by the routines at #ADDR:0x04C2# and #ADDR:0x0556#.\n \nThis subroutine is common to both saving and loading.\n \nThe border is set to its original colour and the BREAK key tested for a last\ntime.\n \nF Carry flag reset if there was a loading error"
                },
                {
                    "Address": 338,
                    "Comment": "Report D - BREAK-CONT repeats."
                },
                {
                    "Address": 340,
                    "Comment": "Continue here."
                },
                {
                    "Address": 342,
                    "Comment": "THE 'LD-BYTES' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0605# and #ADDR:0x0802#.\n \nThis subroutine is called to load the header information and later load or\nverify an actual block of data from a tape.\n \nA &00 (header block) or &FF (data block)\nF Carry flag set if loading, reset if verifying\nDE Block length\nIX Start address\nO:F Carry flag reset if there was an error"
                },
                {
                    "Address": 363,
                    "Comment": "The first stage of reading a tape involves showing that a pulsing signal\nactually exists (i.e. 'on/off' or 'off/on' edges)."
                },
                {
                    "Address": 369,
                    "Comment": "The next stage involves waiting a while and then showing that the signal is\nstill pulsing."
                },
                {
                    "Address": 384,
                    "Comment": "Now accept only a 'leader signal'."
                },
                {
                    "Address": 399,
                    "Comment": "After the leader come the 'off' and 'on' parts of the sync pulse."
                },
                {
                    "Address": 415,
                    "Comment": "The bytes of the header or the program/data block can now be loaded or\nverified. But the first byte is the type flag."
                },
                {
                    "Address": 425,
                    "Comment": "The byte loading loop is used to fetch the bytes one at a time. The flag byte\nis first. This is followed by the data bytes and the last byte is the\n'parity' byte."
                },
                {
                    "Address": 445,
                    "Comment": "If a data block is being verified then the freshly loaded byte is tested\nagainst the original byte."
                },
                {
                    "Address": 450,
                    "Comment": "A new byte can now be collected from the tape."
                },
                {
                    "Address": 458,
                    "Comment": "The following loop is used to build up a byte in the #REG:L# register."
                },
                {
                    "Address": 472,
                    "Comment": "The 'parity matching' byte has to be updated with each new byte."
                },
                {
                    "Address": 475,
                    "Comment": "Passes round the loop are made until the 'counter' reaches zero. At that\npoint the 'parity matching' byte should be holding zero."
                },
                {
                    "Address": 483,
                    "Comment": "THE 'LD-EDGE-2' AND 'LD-EDGE-1' SUBROUTINES\n \nUsed by the routine at #ADDR:0x0556#.\n \nThese two subroutines form the most important part of the LOAD/VERIFY\noperation.\n \nThe subroutines are entered with a timing constant in the #REG:B# register, and\nthe previous border colour and 'edge-type' in the #REG:C# register.\n \nThe subroutines return with the carry flag set if the required number of\n'edges' have been found in the time allowed, and the change to the value in\nthe #REG:B# register shows just how long it took to find the 'edge(s)'.\n \nThe carry flag will be reset if there is an error. The zero flag then signals\n'BREAK pressed' by being reset, or 'time-up' by being set.\n \nThe entry point #ADDR:0x05E3# is used when the length of a complete pulse is\nrequired and #ADDR:0x05E7# is used to find the time before the next 'edge'.\n \nB Timing constant\nC Border colour (bits 0-2) and previous edge-type (bit 5)"
                },
                {
                    "Address": 487,
                    "Comment": "This entry point is used by the routine at #ADDR:0x0556#."
                },
                {
                    "Address": 493,
                    "Comment": "The sampling loop is now entered. The value in the #REG:B# register is\nincremented for each pass; 'time-up' is given when #REG:B# reaches zero."
                },
                {
                    "Address": 506,
                    "Comment": "A new 'edge' has been found within the time period allowed for the search. So\nchange the border colour and set the carry flag."
                },
                {
                    "Address": 517,
                    "Comment": "Note: the #ADDR:0x05E7# subroutine takes 465 T states, plus an additional 58 T\nstates for each unsuccessful pass around the sampling loop.\n \nFor example, therefore, when awaiting the sync pulse (see #ADDR:0x058F#) allowance\nis made for ten additional passes through the sampling loop. The search is\nthereby for the next edge to be found within, roughly, 1100 T states\n(465+10*58+overhead). This will prove successful for the sync 'off' pulse\nthat comes after the long 'leader pulses'.\nTHE 'SAVE, LOAD, VERIFY and MERGE' COMMAND ROUTINES\n \nUsed by the routine at #ADDR:0x1CDB#.\n \nThis entry point is used for all four commands. The value held in\n\\#SYSVAR(T-ADDR), however, distinguishes between the four commands. The first\npart of the following routine is concerned with the construction of the\n'header information' in the work space."
                },
                {
                    "Address": 578,
                    "Comment": "Report F - Invalid file name."
                },
                {
                    "Address": 580,
                    "Comment": "Continue to handle the name of the program."
                },
                {
                    "Address": 587,
                    "Comment": "The name is now transferred to the work space (second location onwards)."
                },
                {
                    "Address": 594,
                    "Comment": "The many different parameters, if any, that follow the command are now\nconsidered. Start by handling 'xxx \"name\" DATA'."
                },
                {
                    "Address": 624,
                    "Comment": "Report 2 - Variable not found."
                },
                {
                    "Address": 626,
                    "Comment": "Continue with the handling of an existing array."
                },
                {
                    "Address": 645,
                    "Comment": "The next part is common to both 'old' and 'new' arrays. Note: syntax path\nerror."
                },
                {
                    "Address": 658,
                    "Comment": "The last part of the statement is examined before joining the other pathways."
                },
                {
                    "Address": 672,
                    "Comment": "Now consider 'SCREEN$'."
                },
                {
                    "Address": 707,
                    "Comment": "Now consider 'CODE'."
                },
                {
                    "Address": 737,
                    "Comment": "Look for a 'starting address'."
                },
                {
                    "Address": 757,
                    "Comment": "Fetch the 'length' as it was specified."
                },
                {
                    "Address": 761,
                    "Comment": "The parameters are now stored in the header area of the work space."
                },
                {
                    "Address": 784,
                    "Comment": "'SCREEN$' and 'CODE' are both of type 3."
                },
                {
                    "Address": 790,
                    "Comment": "Now consider 'LINE' and 'no further parameters'."
                },
                {
                    "Address": 803,
                    "Comment": "Fetch the 'line number' that must follow 'LINE'."
                },
                {
                    "Address": 826,
                    "Comment": "'LINE' and 'no further parameters' are both of type 0."
                },
                {
                    "Address": 830,
                    "Comment": "The parameters that describe the program, and its variables, are found and\nstored in the header area of the work space."
                },
                {
                    "Address": 858,
                    "Comment": "In all cases the header information has now been prepared.\n \n\\#LIST\n{ The location '\\#ix+$00' holds the type number. }\n{ Locations '\\#ix+$01 to \\#ix+$0A' hold the name (&FF in '\\#ix+$01' if null). }\n{ Locations '\\#ix+$0B and \\#ix+$0C' hold the number of bytes that are to be\nfound in the 'data block'. }\n{ Locations '\\#ix+$0D to \\#ix+$10' hold a variety of parameters whose exact\ninterpretation depends on the 'type'. }\nLIST\\#\n \nThe routine continues with the first task being to separate SAVE from LOAD,\nVERIFY and MERGE."
                },
                {
                    "Address": 865,
                    "Comment": "In the case of a LOAD, VERIFY or MERGE command the first seventeen bytes of\nthe 'header area' in the work space hold the prepared information, as\ndetailed above; and it is now time to fetch a 'header' from the tape."
                },
                {
                    "Address": 871,
                    "Comment": "Now enter a loop, leaving it only when a 'header' has been LOADed."
                },
                {
                    "Address": 885,
                    "Comment": "The new 'header' is now displayed on the screen but the routine will only\nproceed if the 'new' header matches the 'old' header."
                },
                {
                    "Address": 910,
                    "Comment": "The appropriate message - 'Program: ', 'Number array: ', 'Character array: '\nor 'Bytes: ' is printed."
                },
                {
                    "Address": 918,
                    "Comment": "The 'new name' is printed and as this is done the 'old' and the 'new' names\nare compared."
                },
                {
                    "Address": 934,
                    "Comment": "A loop is entered to print the characters of the 'new name'. The name will be\naccepted if the 'counter' reaches zero, at least."
                },
                {
                    "Address": 951,
                    "Comment": "The correct header has been found and the time has come to consider the three\ncommands LOAD, VERIFY, and MERGE separately."
                },
                {
                    "Address": 971,
                    "Comment": "THE 'VERIFY' CONTROL ROUTINE\n \nUsed by the routine at #ADDR:0x0605#.\n \nThe verification process involves the loading of a block of data, a byte at a\ntime, but the bytes are not stored - only checked. This routine is also used\nto load blocks of data that have been described with 'SCREEN$' or 'CODE'.\n \nHL Block start address"
                },
                {
                    "Address": 1001,
                    "Comment": "The routine continues by considering the 'destination pointer'."
                },
                {
                    "Address": 1012,
                    "Comment": "The verify/load flag is now considered and the actual load made."
                }
            ],
            "DataInfo": [
                {
                    "Address": 3,
                    "Comment": "#ADDR:0x30CA#: t, pK"
                },
                {
                    "Address": 4,
                    "Comment": "#ADDR:0x341B#(stk_one): t, pK, 1"
                },
                {
                    "Address": 5,
                    "Comment": "#ADDR:0x3014#: t, pK+1"
                },
                {
                    "Address": 6,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 57,
                    "Comment": "#ADDR:0x30CA#: t, C(pK+1)"
                },
                {
                    "Address": 58,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 63,
                    "Comment": "#ADDR:0x342D#(st_mem_0): Copy the frequency (f) to\nmem-0"
                },
                {
                    "Address": 64,
                    "Comment": "#ADDR:0x33A1#: t"
                },
                {
                    "Address": 65,
                    "Comment": "#ADDR:0x33C0#: t, t"
                },
                {
                    "Address": 66,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 75,
                    "Comment": "#ADDR:0x340F#(get_mem_0): t, f"
                },
                {
                    "Address": 76,
                    "Comment": "#ADDR:0x30CA#: f*t"
                },
                {
                    "Address": 77,
                    "Comment": "#ADDR:0x340F#(get_mem_0): f*t, f"
                },
                {
                    "Address": 78,
                    "Comment": "{#ADDR:0x33C6#: Stack the value"
                },
                {
                    "Address": 79,
                    "ByteSize": 5,
                    "Comment": "(3.5*10\\#power6)/8=437500}",
                    "DataType": 1
                },
                {
                    "Address": 84,
                    "Comment": "#ADDR:0x343C#: f*t, 437500, f"
                },
                {
                    "Address": 85,
                    "Comment": "#ADDR:0x31AF#: f*t, 437500/f"
                },
                {
                    "Address": 86,
                    "Comment": "{#ADDR:0x33C6#: f*t, 437500/f, 30.125"
                },
                {
                    "Address": 87,
                    "ByteSize": 2,
                    "Comment": "}",
                    "DataType": 1
                },
                {
                    "Address": 89,
                    "Comment": "#ADDR:0x300F#: f*t, 437500/f-30.125"
                },
                {
                    "Address": 90,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 109,
                    "Comment": "}"
                },
                {
                    "Address": 110,
                    "ByteSize": 5,
                    "Comment": "261.63 Hz - C",
                    "DataType": 1
                },
                {
                    "Address": 115,
                    "ByteSize": 5,
                    "Comment": "277.18 Hz - C\\#",
                    "DataType": 1
                },
                {
                    "Address": 120,
                    "ByteSize": 5,
                    "Comment": "293.66 Hz - D",
                    "DataType": 1
                },
                {
                    "Address": 125,
                    "ByteSize": 5,
                    "Comment": "311.13 Hz - D\\#",
                    "DataType": 1
                },
                {
                    "Address": 130,
                    "ByteSize": 5,
                    "Comment": "329.63 Hz - E",
                    "DataType": 1
                },
                {
                    "Address": 135,
                    "ByteSize": 5,
                    "Comment": "349.23 Hz - F",
                    "DataType": 1
                },
                {
                    "Address": 140,
                    "ByteSize": 5,
                    "Comment": "369.99 Hz - F\\#",
                    "DataType": 1
                },
                {
                    "Address": 145,
                    "ByteSize": 5,
                    "Comment": "392.00 Hz - G",
                    "DataType": 1
                },
                {
                    "Address": 150,
                    "ByteSize": 5,
                    "Comment": "415.30 Hz - G\\#",
                    "DataType": 1
                },
                {
                    "Address": 155,
                    "ByteSize": 5,
                    "Comment": "440.00 Hz - A",
                    "DataType": 1
                },
                {
                    "Address": 160,
                    "ByteSize": 5,
                    "Comment": "466.16 Hz - A\\#",
                    "DataType": 1
                },
                {
                    "Address": 165,
                    "ByteSize": 5,
                    "Comment": "493.88 Hz - B",
                    "DataType": 1
                },
                {
                    "Address": 339,
                    "Comment": "}"
                },
                {
                    "Address": 579,
                    "Comment": "}"
                },
                {
                    "Address": 625,
                    "Comment": "}"
                }
            ],
            "LabelInfo": [
                {
                    "Address": 37,
                    "LabelType": 2,
                    "Name": "BE_i_OK"
                },
                {
                    "Address": 39,
                    "LabelType": 2,
                    "Name": "BE_OCTAVE"
                },
                {
                    "Address": 108,
                    "LabelType": 2,
                    "Name": "REPORT_B"
                },
                {
                    "Address": 110,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "SEMITONES"
                },
                {
                    "Address": 170,
                    "LabelType": 2,
                    "Name": "PROGNAME"
                },
                {
                    "Address": 194,
                    "LabelType": 2,
                    "Name": "SA_BYTES"
                },
                {
                    "Address": 208,
                    "LabelType": 2,
                    "Name": "SA_FLAG"
                },
                {
                    "Address": 216,
                    "LabelType": 2,
                    "Name": "SA_LEADER"
                },
                {
                    "Address": 234,
                    "LabelType": 2,
                    "Name": "SA_SYNC_1"
                },
                {
                    "Address": 242,
                    "LabelType": 2,
                    "Name": "SA_SYNC_2"
                },
                {
                    "Address": 254,
                    "LabelType": 2,
                    "Name": "SA_LOOP"
                },
                {
                    "Address": 261,
                    "LabelType": 2,
                    "Name": "SA_LOOP_P"
                },
                {
                    "Address": 263,
                    "LabelType": 2,
                    "Name": "SA_START"
                },
                {
                    "Address": 270,
                    "LabelType": 2,
                    "Name": "SA_PARITY"
                },
                {
                    "Address": 273,
                    "LabelType": 2,
                    "Name": "SA_BIT_2"
                },
                {
                    "Address": 276,
                    "LabelType": 2,
                    "Name": "SA_BIT_1"
                },
                {
                    "Address": 282,
                    "LabelType": 2,
                    "Name": "SA_SET"
                },
                {
                    "Address": 284,
                    "LabelType": 2,
                    "Name": "SA_OUT"
                },
                {
                    "Address": 293,
                    "LabelType": 2,
                    "Name": "SA_8_BITS"
                },
                {
                    "Address": 316,
                    "LabelType": 2,
                    "Name": "SA_DELAY"
                },
                {
                    "Address": 319,
                    "LabelType": 2,
                    "Name": "SA_LD_RET"
                },
                {
                    "Address": 340,
                    "LabelType": 2,
                    "Name": "SA_LD_END"
                },
                {
                    "Address": 342,
                    "LabelType": 2,
                    "Name": "LD_BYTES"
                },
                {
                    "Address": 363,
                    "LabelType": 2,
                    "Name": "LD_BREAK"
                },
                {
                    "Address": 364,
                    "LabelType": 2,
                    "Name": "LD_START"
                },
                {
                    "Address": 372,
                    "LabelType": 2,
                    "Name": "LD_WAIT"
                },
                {
                    "Address": 384,
                    "LabelType": 2,
                    "Name": "LD_LEADER"
                },
                {
                    "Address": 399,
                    "LabelType": 2,
                    "Name": "LD_SYNC"
                },
                {
                    "Address": 425,
                    "LabelType": 2,
                    "Name": "LD_LOOP"
                },
                {
                    "Address": 435,
                    "LabelType": 2,
                    "Name": "LD_FLAG"
                },
                {
                    "Address": 445,
                    "LabelType": 2,
                    "Name": "LD_VERIFY"
                },
                {
                    "Address": 450,
                    "LabelType": 2,
                    "Name": "LD_NEXT"
                },
                {
                    "Address": 452,
                    "LabelType": 2,
                    "Name": "LD_DEC"
                },
                {
                    "Address": 456,
                    "LabelType": 2,
                    "Name": "LD_MARKER"
                },
                {
                    "Address": 458,
                    "LabelType": 2,
                    "Name": "LD_8_BITS"
                },
                {
                    "Address": 483,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "LD_EDGE_2"
                },
                {
                    "Address": 487,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "LD_EDGE_1"
                },
                {
                    "Address": 489,
                    "LabelType": 2,
                    "Name": "LD_DELAY"
                },
                {
                    "Address": 493,
                    "LabelType": 2,
                    "Name": "LD_SAMPLE"
                },
                {
                    "Address": 517,
                    "LabelType": 2,
                    "Name": "SAVE_ETC"
                },
                {
                    "Address": 545,
                    "LabelType": 2,
                    "Name": "SA_SPACE"
                },
                {
                    "Address": 553,
                    "LabelType": 2,
                    "Name": "SA_BLANK"
                },
                {
                    "Address": 580,
                    "LabelType": 2,
                    "Name": "SA_NULL"
                },
                {
                    "Address": 587,
                    "LabelType": 2,
                    "Name": "SA_NAME"
                },
                {
                    "Address": 594,
                    "LabelType": 2,
                    "Name": "SA_DATA"
                },
                {
                    "Address": 626,
                    "LabelType": 2,
                    "Name": "SA_V_OLD"
                },
                {
                    "Address": 645,
                    "LabelType": 2,
                    "Name": "SA_V_NEW"
                },
                {
                    "Address": 655,
                    "LabelType": 2,
                    "Name": "SA_V_TYPE"
                },
                {
                    "Address": 658,
                    "LabelType": 2,
                    "Name": "SA_DATA_1"
                },
                {
                    "Address": 672,
                    "LabelType": 2,
                    "Name": "SA_SCR"
                },
                {
                    "Address": 707,
                    "LabelType": 2,
                    "Name": "SA_CODE"
                },
                {
                    "Address": 737,
                    "LabelType": 2,
                    "Name": "SA_CODE_1"
                },
                {
                    "Address": 752,
                    "LabelType": 2,
                    "Name": "SA_CODE_2"
                },
                {
                    "Address": 757,
                    "LabelType": 2,
                    "Name": "SA_CODE_3"
                },
                {
                    "Address": 761,
                    "LabelType": 2,
                    "Name": "SA_CODE_4"
                },
                {
                    "Address": 784,
                    "LabelType": 2,
                    "Name": "SA_TYPE_3"
                },
                {
                    "Address": 790,
                    "LabelType": 2,
                    "Name": "SA_LINE"
                },
                {
                    "Address": 803,
                    "LabelType": 2,
                    "Name": "SA_LINE_1"
                },
                {
                    "Address": 826,
                    "LabelType": 2,
                    "Name": "SA_TYPE_0"
                },
                {
                    "Address": 858,
                    "LabelType": 2,
                    "Name": "SA_ALL"
                },
                {
                    "Address": 871,
                    "LabelType": 2,
                    "Name": "LD_LOOK_H"
                },
                {
                    "Address": 906,
                    "LabelType": 2,
                    "Name": "LD_TYPE"
                },
                {
                    "Address": 934,
                    "LabelType": 2,
                    "Name": "LD_NAME"
                },
                {
                    "Address": 941,
                    "LabelType": 2,
                    "Name": "LD_CH_PR"
                },
                {
                    "Address": 971,
                    "LabelType": 2,
                    "Name": "VR_CONTRL"
                },
                {
                    "Address": 1001,
                    "LabelType": 2,
                    "Name": "VR_CONT_1"
                },
                {
                    "Address": 1012,
                    "LabelType": 2,
                    "Name": "VR_CONT_2"
                }
            ],
            "PageId": 1
        },
        {
            "CodeInfo": [
                {
                    "Address": 0,
                    "ByteSize": 2,
                    "Comment": "Signal 'accept data block only' before loading the\nblock."
                },
                {
                    "Address": 2,
                    "ByteSize": 3,
                    "Comment": "Load/verify a data block.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 5,
                    "ByteSize": 1,
                    "Comment": "Return unless an error."
                },
                {
                    "Address": 6,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 8,
                    "ByteSize": 3,
                    "Comment": "{Fetch the 'number of bytes' as given in the 'new"
                },
                {
                    "Address": 11,
                    "ByteSize": 3,
                    "Comment": "header'.}"
                },
                {
                    "Address": 14,
                    "ByteSize": 1,
                    "Comment": "Save the 'destination pointer'."
                },
                {
                    "Address": 15,
                    "ByteSize": 1,
                    "Comment": "{Jump forward unless trying to LOAD a previously"
                },
                {
                    "Address": 16,
                    "ByteSize": 1,
                    "Comment": "undeclared array."
                },
                {
                    "Address": 17,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 19,
                    "ByteSize": 1,
                    "Comment": "{Add three bytes to the length - for the name, the low"
                },
                {
                    "Address": 20,
                    "ByteSize": 1,
                    "Comment": "length and the high length of a new variable."
                },
                {
                    "Address": 21,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 22,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 23,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 25,
                    "ByteSize": 3,
                    "Comment": "{Fetch the size of the existing 'program+variables or"
                },
                {
                    "Address": 28,
                    "ByteSize": 3,
                    "Comment": "array'."
                },
                {
                    "Address": 31,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 32,
                    "ByteSize": 1,
                    "Comment": "{Jump forward if no extra room will be required"
                },
                {
                    "Address": 33,
                    "ByteSize": 2,
                    "Comment": "(taking into account the reclaiming of the presently"
                },
                {
                    "Address": 35,
                    "ByteSize": 2,
                    "Comment": "used memory).}",
                    "OperandType": 2
                },
                {
                    "Address": 37,
                    "ByteSize": 3,
                    "Comment": "{Allow an overhead of five bytes."
                },
                {
                    "Address": 40,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 41,
                    "ByteSize": 1,
                    "Comment": "{Move the result to the #REG:BC# register pair and make"
                },
                {
                    "Address": 42,
                    "ByteSize": 1,
                    "Comment": "the test."
                },
                {
                    "Address": 43,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 46,
                    "ByteSize": 1,
                    "Comment": "Fetch the 'pointer' anew."
                },
                {
                    "Address": 47,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if LOADing a BASIC program."
                },
                {
                    "Address": 50,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 51,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 53,
                    "ByteSize": 1,
                    "Comment": "{Jump forward if LOADing a new array."
                },
                {
                    "Address": 54,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 55,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 57,
                    "ByteSize": 1,
                    "Comment": "{Fetch the 'length' of the existing array by"
                },
                {
                    "Address": 58,
                    "ByteSize": 1,
                    "Comment": "collecting the length bytes from the variables area."
                },
                {
                    "Address": 59,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 60,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 61,
                    "ByteSize": 1,
                    "Comment": "Point to its old name."
                },
                {
                    "Address": 62,
                    "ByteSize": 1,
                    "Comment": "{Add three bytes to the length - one for the name and"
                },
                {
                    "Address": 63,
                    "ByteSize": 1,
                    "Comment": "two for the 'length'."
                },
                {
                    "Address": 64,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 65,
                    "ByteSize": 4,
                    "Comment": "{Save the #REG:IX# register pair temporarily (in",
                    "OperandType": 1
                },
                {
                    "Address": 69,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(X-PTR)) whilst the old array is reclaimed.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 72,
                    "ByteSize": 4,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 76,
                    "ByteSize": 3,
                    "Comment": "{Find the pointer to the end-marker of the variables",
                    "OperandType": 1
                },
                {
                    "Address": 79,
                    "ByteSize": 1,
                    "Comment": "area - the '&80-byte' (\\#SYSVAR(E-LINE)).}"
                },
                {
                    "Address": 80,
                    "ByteSize": 3,
                    "Comment": "{Fetch the 'length' of the new array."
                },
                {
                    "Address": 83,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 86,
                    "ByteSize": 1,
                    "Comment": "Save this 'length'."
                },
                {
                    "Address": 87,
                    "ByteSize": 1,
                    "Comment": "{Add three bytes - one for the name and two for the"
                },
                {
                    "Address": 88,
                    "ByteSize": 1,
                    "Comment": "'length'."
                },
                {
                    "Address": 89,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 90,
                    "ByteSize": 3,
                    "Comment": "'#REG:IX#+0E' of the old header gives the name of the\narray."
                },
                {
                    "Address": 93,
                    "ByteSize": 1,
                    "Comment": "{The name is saved whilst the appropriate amount of"
                },
                {
                    "Address": 94,
                    "ByteSize": 3,
                    "Comment": "room is made available. In effect #REG:BC# spaces before",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 97,
                    "ByteSize": 1,
                    "Comment": "the 'new &80-byte'."
                },
                {
                    "Address": 98,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 99,
                    "ByteSize": 1,
                    "Comment": "The name is entered."
                },
                {
                    "Address": 100,
                    "ByteSize": 1,
                    "Comment": "{The 'length' is fetched and its two bytes are also"
                },
                {
                    "Address": 101,
                    "ByteSize": 1,
                    "Comment": "entered."
                },
                {
                    "Address": 102,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 103,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 104,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 105,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# now points to the first location that is to be\nfilled with data from the tape."
                },
                {
                    "Address": 106,
                    "ByteSize": 1,
                    "Comment": "{This address is moved to the #REG:IX# register pair;"
                },
                {
                    "Address": 107,
                    "ByteSize": 2,
                    "Comment": "the carry flag set; 'data block' is signalled; and the"
                },
                {
                    "Address": 109,
                    "ByteSize": 1,
                    "Comment": "block LOADed."
                },
                {
                    "Address": 110,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 112,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 115,
                    "ByteSize": 1,
                    "Comment": "Save the 'destination pointer'."
                },
                {
                    "Address": 116,
                    "ByteSize": 3,
                    "Comment": "{Find the address of the end marker of the current",
                    "OperandType": 1
                },
                {
                    "Address": 119,
                    "ByteSize": 1,
                    "Comment": "variables area - the '&80-byte' (\\#SYSVAR(E-LINE)).}"
                },
                {
                    "Address": 120,
                    "ByteSize": 4,
                    "Comment": "Save #REG:IX# temporarily (in \\#SYSVAR(X-PTR)).",
                    "OperandType": 1
                },
                {
                    "Address": 124,
                    "ByteSize": 3,
                    "Comment": "{Fetch the 'length' of the new data block."
                },
                {
                    "Address": 127,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 130,
                    "ByteSize": 1,
                    "Comment": "{Keep a copy of the 'length' whilst the present"
                },
                {
                    "Address": 131,
                    "ByteSize": 3,
                    "Comment": "program and variables areas are reclaimed.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 134,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 135,
                    "ByteSize": 1,
                    "Comment": "{Save the pointer to the program area and the length"
                },
                {
                    "Address": 136,
                    "ByteSize": 1,
                    "Comment": "of the new data block.}"
                },
                {
                    "Address": 137,
                    "ByteSize": 3,
                    "Comment": "Make sufficient room available for the new program and\nits variables.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 140,
                    "ByteSize": 4,
                    "Comment": "Restore the #REG:IX# register pair from \\#SYSVAR(X-PTR).",
                    "OperandType": 1
                },
                {
                    "Address": 144,
                    "ByteSize": 1,
                    "Comment": "{The system variable \\#SYSVAR(VARS) has also to be set"
                },
                {
                    "Address": 145,
                    "ByteSize": 3,
                    "Comment": "for the new program."
                },
                {
                    "Address": 148,
                    "ByteSize": 3,
                    "Comment": " "
                },
                {
                    "Address": 151,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 152,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 155,
                    "ByteSize": 3,
                    "Comment": "{If a line number was specified then it too has to be"
                },
                {
                    "Address": 158,
                    "ByteSize": 1,
                    "Comment": "considered."
                },
                {
                    "Address": 159,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 161,
                    "ByteSize": 2,
                    "Comment": "{Jump if 'no number'; otherwise set \\#SYSVAR(NEWPPC)",
                    "OperandType": 2
                },
                {
                    "Address": 163,
                    "ByteSize": 3,
                    "Comment": "and \\#SYSVAR(NSPPC)."
                },
                {
                    "Address": 166,
                    "ByteSize": 3,
                    "Comment": " ",
                    "OperandType": 1
                },
                {
                    "Address": 169,
                    "ByteSize": 4,
                    "Comment": "}"
                },
                {
                    "Address": 173,
                    "ByteSize": 1,
                    "Comment": "Fetch the 'length'."
                },
                {
                    "Address": 174,
                    "ByteSize": 2,
                    "Comment": "Fetch the 'start'."
                },
                {
                    "Address": 176,
                    "ByteSize": 1,
                    "Comment": "Signal 'LOAD'."
                },
                {
                    "Address": 177,
                    "ByteSize": 2,
                    "Comment": "Signal 'data block' only."
                },
                {
                    "Address": 179,
                    "ByteSize": 3,
                    "Comment": "Now LOAD it.",
                    "OperandType": 2
                },
                {
                    "Address": 182,
                    "ByteSize": 3,
                    "Comment": "{Fetch the 'length' of the data block."
                },
                {
                    "Address": 185,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 188,
                    "ByteSize": 1,
                    "Comment": "Save a copy of the 'length'."
                },
                {
                    "Address": 189,
                    "ByteSize": 1,
                    "Comment": "{Now make 'length+1' locations available in the work"
                },
                {
                    "Address": 190,
                    "ByteSize": 1,
                    "Comment": "space.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 191,
                    "ByteSize": 2,
                    "Comment": "Place an end marker in the extra location."
                },
                {
                    "Address": 193,
                    "ByteSize": 1,
                    "Comment": "Move the 'start' pointer to the #REG:HL# register pair."
                },
                {
                    "Address": 194,
                    "ByteSize": 1,
                    "Comment": "Fetch the original 'length'."
                },
                {
                    "Address": 195,
                    "ByteSize": 1,
                    "Comment": "Save a copy of the 'start'."
                },
                {
                    "Address": 196,
                    "ByteSize": 1,
                    "Comment": "{Now set the #REG:IX# register pair for the actual load."
                },
                {
                    "Address": 197,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 199,
                    "ByteSize": 1,
                    "Comment": "Signal 'LOAD'."
                },
                {
                    "Address": 200,
                    "ByteSize": 2,
                    "Comment": "Signal 'data block only'."
                },
                {
                    "Address": 202,
                    "ByteSize": 3,
                    "Comment": "Load the data block.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 205,
                    "ByteSize": 1,
                    "Comment": "Fetch the 'start' of the new program."
                },
                {
                    "Address": 206,
                    "ByteSize": 4,
                    "Comment": "Initialise #REG:DE# to the 'start' of the old program\n(\\#SYSVAR(PROG)).",
                    "OperandType": 1
                },
                {
                    "Address": 210,
                    "ByteSize": 1,
                    "Comment": "{Fetch a line number and test it."
                },
                {
                    "Address": 211,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 213,
                    "ByteSize": 2,
                    "Comment": "Jump when finished with all the lines.",
                    "OperandType": 2
                },
                {
                    "Address": 215,
                    "ByteSize": 1,
                    "Comment": "{Fetch the high line number byte and compare it. Jump"
                },
                {
                    "Address": 216,
                    "ByteSize": 1,
                    "Comment": "forward if it does not match but in any case advance"
                },
                {
                    "Address": 217,
                    "ByteSize": 1,
                    "Comment": "both pointers."
                },
                {
                    "Address": 218,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 219,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 221,
                    "ByteSize": 1,
                    "Comment": "{Repeat the comparison for the low line number bytes."
                },
                {
                    "Address": 222,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 223,
                    "ByteSize": 1,
                    "Comment": "{Now retreat the pointers."
                },
                {
                    "Address": 224,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 225,
                    "ByteSize": 2,
                    "Comment": "Jump forward if the correct place has been found for a\nline of the new program.",
                    "OperandType": 2
                },
                {
                    "Address": 227,
                    "ByteSize": 1,
                    "Comment": "{Otherwise find the address of the start of the next old"
                },
                {
                    "Address": 228,
                    "ByteSize": 1,
                    "Comment": "line."
                },
                {
                    "Address": 229,
                    "ByteSize": 3,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 232,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 233,
                    "ByteSize": 2,
                    "Comment": "Go round the loop for each of the 'old lines'.",
                    "OperandType": 2
                },
                {
                    "Address": 235,
                    "ByteSize": 3,
                    "Comment": "{Enter the 'new line' and go round the outer loop again.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 238,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 240,
                    "ByteSize": 1,
                    "Comment": "{Fetch each variable name in turn and test it."
                },
                {
                    "Address": 241,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 242,
                    "ByteSize": 2,
                    "Comment": "{Return when all the variables have been considered."
                },
                {
                    "Address": 244,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 245,
                    "ByteSize": 1,
                    "Comment": "Save the current new pointer."
                },
                {
                    "Address": 246,
                    "ByteSize": 3,
                    "Comment": "Fetch \\#SYSVAR(VARS) (for the old program).",
                    "OperandType": 1
                },
                {
                    "Address": 249,
                    "ByteSize": 1,
                    "Comment": "{Fetch each variable name and test it."
                },
                {
                    "Address": 250,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 252,
                    "ByteSize": 2,
                    "Comment": "Jump forward once the end marker is found. (Make an\n'addition'.)",
                    "OperandType": 2
                },
                {
                    "Address": 254,
                    "ByteSize": 1,
                    "Comment": "Compare the names (first bytes)."
                },
                {
                    "Address": 255,
                    "ByteSize": 2,
                    "Comment": "Jump forward to consider it further, returning here if\nit proves not to match fully.",
                    "OperandType": 2
                },
                {
                    "Address": 257,
                    "ByteSize": 1,
                    "Comment": "{Save the new variable's name whilst the next 'old"
                },
                {
                    "Address": 258,
                    "ByteSize": 3,
                    "Comment": "variable' is located.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 261,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 262,
                    "ByteSize": 1,
                    "Comment": "{Restore the pointer to the #REG:DE# register pair and go"
                },
                {
                    "Address": 263,
                    "ByteSize": 2,
                    "Comment": "round the loop again.}",
                    "OperandType": 2
                },
                {
                    "Address": 265,
                    "ByteSize": 2,
                    "Comment": "Consider bits 7, 6 and 5 only."
                },
                {
                    "Address": 267,
                    "ByteSize": 2,
                    "Comment": "{Accept all the variable types except 'long named"
                },
                {
                    "Address": 269,
                    "ByteSize": 2,
                    "Comment": "variables'.}",
                    "OperandType": 2
                },
                {
                    "Address": 271,
                    "ByteSize": 1,
                    "Comment": "{Make #REG:DE# point to the first character of the 'new"
                },
                {
                    "Address": 272,
                    "ByteSize": 1,
                    "Comment": "name'.}"
                },
                {
                    "Address": 273,
                    "ByteSize": 1,
                    "Comment": "Save the pointer to the 'old name'."
                },
                {
                    "Address": 274,
                    "ByteSize": 1,
                    "Comment": "{Update both the 'old' and the 'new' pointers."
                },
                {
                    "Address": 275,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 276,
                    "ByteSize": 1,
                    "Comment": "{Compare the two letters."
                },
                {
                    "Address": 277,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 278,
                    "ByteSize": 2,
                    "Comment": "Jump forward if the match fails.",
                    "OperandType": 2
                },
                {
                    "Address": 280,
                    "ByteSize": 1,
                    "Comment": "{Go round the loop until the 'last character' is found."
                },
                {
                    "Address": 281,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 283,
                    "ByteSize": 1,
                    "Comment": "{Fetch the pointer to the start of the 'old' name and"
                },
                {
                    "Address": 284,
                    "ByteSize": 2,
                    "Comment": "jump forward - successful.}",
                    "OperandType": 2
                },
                {
                    "Address": 286,
                    "ByteSize": 1,
                    "Comment": "{Fetch the pointer and jump back - unsuccessful."
                },
                {
                    "Address": 287,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 289,
                    "ByteSize": 2,
                    "Comment": "Signal 'replace' variable."
                },
                {
                    "Address": 291,
                    "ByteSize": 1,
                    "Comment": "Fetch pointer to 'new' name."
                },
                {
                    "Address": 292,
                    "ByteSize": 1,
                    "Comment": "Switch over the registers."
                },
                {
                    "Address": 293,
                    "ByteSize": 1,
                    "Comment": "The zero flag is to be set if there is to be a\n'replacement', reset for an 'addition'."
                },
                {
                    "Address": 294,
                    "ByteSize": 1,
                    "Comment": "Signal 'handling variables'."
                },
                {
                    "Address": 295,
                    "ByteSize": 3,
                    "Comment": "Now make the entry.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 298,
                    "ByteSize": 2,
                    "Comment": "Go round the loop to consider the next new variable.",
                    "OperandType": 2
                },
                {
                    "Address": 300,
                    "ByteSize": 2,
                    "Comment": "Jump if handling an 'addition'.",
                    "OperandType": 2
                },
                {
                    "Address": 302,
                    "ByteSize": 1,
                    "Comment": "Save the flags."
                },
                {
                    "Address": 303,
                    "ByteSize": 3,
                    "Comment": "{Save the 'new' pointer (in \\#SYSVAR(X-PTR)) whilst the",
                    "OperandType": 1
                },
                {
                    "Address": 306,
                    "ByteSize": 1,
                    "Comment": "'old' line or variable is reclaimed."
                },
                {
                    "Address": 307,
                    "ByteSize": 3,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 310,
                    "ByteSize": 3,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 313,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 314,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 317,
                    "ByteSize": 1,
                    "Comment": "Restore the flags."
                },
                {
                    "Address": 318,
                    "ByteSize": 1,
                    "Comment": "Save the flags."
                },
                {
                    "Address": 319,
                    "ByteSize": 1,
                    "Comment": "Make a copy of the 'destination' pointer."
                },
                {
                    "Address": 320,
                    "ByteSize": 3,
                    "Comment": "Find the length of the 'new' variable/line.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 323,
                    "ByteSize": 3,
                    "Comment": "Save the pointer to the 'new' variable/line (in\n\\#SYSVAR(X-PTR)).",
                    "OperandType": 1
                },
                {
                    "Address": 326,
                    "ByteSize": 3,
                    "Comment": "Fetch \\#SYSVAR(PROG) - to avoid corruption.",
                    "OperandType": 1
                },
                {
                    "Address": 329,
                    "ByteSize": 1,
                    "Comment": "Save \\#SYSVAR(PROG) on the stack and fetch the 'new'\npointer."
                },
                {
                    "Address": 330,
                    "ByteSize": 1,
                    "Comment": "Save the length."
                },
                {
                    "Address": 331,
                    "ByteSize": 1,
                    "Comment": "Retrieve the flags."
                },
                {
                    "Address": 332,
                    "ByteSize": 2,
                    "Comment": "Jump forward if adding a new variable.",
                    "OperandType": 2
                },
                {
                    "Address": 334,
                    "ByteSize": 1,
                    "Comment": "A new line is added before the 'destination' location."
                },
                {
                    "Address": 335,
                    "ByteSize": 3,
                    "Comment": "Make the room for the new line.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 338,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 339,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 341,
                    "ByteSize": 3,
                    "Comment": "Make the room for the new variable.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 344,
                    "ByteSize": 1,
                    "Comment": "Point to the first new location."
                },
                {
                    "Address": 345,
                    "ByteSize": 1,
                    "Comment": "Retrieve the length."
                },
                {
                    "Address": 346,
                    "ByteSize": 1,
                    "Comment": "{Retrieve \\#SYSVAR(PROG) and store it in its correct"
                },
                {
                    "Address": 347,
                    "ByteSize": 4,
                    "Comment": "place.}",
                    "OperandType": 1
                },
                {
                    "Address": 351,
                    "ByteSize": 4,
                    "Comment": "Also fetch the 'new' pointer (from \\#SYSVAR(X-PTR)).",
                    "OperandType": 1
                },
                {
                    "Address": 355,
                    "ByteSize": 1,
                    "Comment": "{Again save the length and the 'new' pointer."
                },
                {
                    "Address": 356,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 357,
                    "ByteSize": 1,
                    "Comment": "{Switch the pointers and copy the 'new' variable/line"
                },
                {
                    "Address": 358,
                    "ByteSize": 2,
                    "Comment": "into the room made for it.}"
                },
                {
                    "Address": 360,
                    "ByteSize": 1,
                    "Comment": "Fetch the 'new' pointer."
                },
                {
                    "Address": 361,
                    "ByteSize": 1,
                    "Comment": "Fetch the length."
                },
                {
                    "Address": 362,
                    "ByteSize": 1,
                    "Comment": "Save the 'old' pointer. (Points to the location after\nthe 'added' variable/line.)"
                },
                {
                    "Address": 363,
                    "ByteSize": 3,
                    "Comment": "Remove the variable/line from the work space.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 366,
                    "ByteSize": 1,
                    "Comment": "{Return with the 'old' pointer in the #REG:DE# register"
                },
                {
                    "Address": 367,
                    "ByteSize": 1,
                    "Comment": "pair.}"
                },
                {
                    "Address": 368,
                    "ByteSize": 1,
                    "Comment": "Save the 'pointer'."
                },
                {
                    "Address": 369,
                    "ByteSize": 2,
                    "Comment": "{Ensure that channel 'K' is open."
                },
                {
                    "Address": 371,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 374,
                    "ByteSize": 1,
                    "Comment": "Signal 'first message'."
                },
                {
                    "Address": 375,
                    "ByteSize": 3,
                    "Comment": "{Print the message 'Start tape, then press any key.'"
                },
                {
                    "Address": 378,
                    "ByteSize": 3,
                    "Comment": "(see #ADDR:0x09A1#).}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 381,
                    "ByteSize": 4,
                    "Comment": "Signal 'screen will require to be cleared' (set bit 5\nof \\#SYSVAR(TV-FLAG))."
                },
                {
                    "Address": 385,
                    "ByteSize": 3,
                    "Comment": "Wait for a key to be pressed.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 388,
                    "ByteSize": 2,
                    "Comment": "Save the base address of the 'header' on the machine\nstack."
                },
                {
                    "Address": 390,
                    "ByteSize": 3,
                    "Comment": "Seventeen bytes are to be saved."
                },
                {
                    "Address": 393,
                    "ByteSize": 1,
                    "Comment": "Signal 'it is a header'."
                },
                {
                    "Address": 394,
                    "ByteSize": 3,
                    "Comment": "Send the 'header', with a leading 'type' byte and a\ntrailing 'parity' byte.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 397,
                    "ByteSize": 2,
                    "Comment": "Retrieve the pointer to the 'header'."
                },
                {
                    "Address": 399,
                    "ByteSize": 2,
                    "Comment": "{The delay is for fifty interrupts, i.e. one second."
                },
                {
                    "Address": 401,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 402,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 404,
                    "ByteSize": 3,
                    "Comment": "{Fetch the length of the data block that is to be"
                },
                {
                    "Address": 407,
                    "ByteSize": 3,
                    "Comment": "saved.}"
                },
                {
                    "Address": 410,
                    "ByteSize": 2,
                    "Comment": "Signal 'data block'."
                },
                {
                    "Address": 412,
                    "ByteSize": 2,
                    "Comment": "{Fetch the 'start of block pointer' and save the block."
                },
                {
                    "Address": 414,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 500,
                    "ByteSize": 3,
                    "Comment": "The current print position.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 503,
                    "ByteSize": 2,
                    "Comment": "{If the code represents a printable character then jump."
                },
                {
                    "Address": 505,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 508,
                    "ByteSize": 2,
                    "Comment": "{Print a question mark for codes in the range &00 to"
                },
                {
                    "Address": 510,
                    "ByteSize": 2,
                    "Comment": "&05.}",
                    "OperandType": 2
                },
                {
                    "Address": 512,
                    "ByteSize": 2,
                    "Comment": "{And also for codes &18 to &1F."
                },
                {
                    "Address": 514,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 516,
                    "ByteSize": 3,
                    "Comment": "Base of the #ADDR:0x0A11#(control character table)."
                },
                {
                    "Address": 519,
                    "ByteSize": 1,
                    "Comment": "{Move the code to the #REG:DE# register pair."
                },
                {
                    "Address": 520,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 522,
                    "ByteSize": 1,
                    "Comment": "{Index into the table and fetch the offset."
                },
                {
                    "Address": 523,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 524,
                    "ByteSize": 1,
                    "Comment": "{Add the offset and make an indirect jump to the"
                },
                {
                    "Address": 525,
                    "ByteSize": 1,
                    "Comment": "appropriate subroutine."
                },
                {
                    "Address": 526,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 547,
                    "ByteSize": 1,
                    "Comment": "Move leftwards by one column."
                },
                {
                    "Address": 548,
                    "ByteSize": 2,
                    "Comment": "{Accept the change unless up against the lefthand side."
                },
                {
                    "Address": 550,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 551,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 553,
                    "ByteSize": 4,
                    "Comment": "{If dealing with the printer (bit 1 of \\#SYSVAR(FLAGS)"
                },
                {
                    "Address": 557,
                    "ByteSize": 2,
                    "Comment": "set) jump forward.}",
                    "OperandType": 2
                },
                {
                    "Address": 559,
                    "ByteSize": 1,
                    "Comment": "Go up one line."
                },
                {
                    "Address": 560,
                    "ByteSize": 2,
                    "Comment": "Set column value."
                },
                {
                    "Address": 562,
                    "ByteSize": 2,
                    "Comment": "{Test against top line. Note: \\#BUG\\#noStepBack(this"
                },
                {
                    "Address": 564,
                    "ByteSize": 1,
                    "Comment": "ought to be &19).}"
                },
                {
                    "Address": 565,
                    "ByteSize": 2,
                    "Comment": "Accept the change unless at the top of the screen.",
                    "OperandType": 2
                },
                {
                    "Address": 567,
                    "ByteSize": 1,
                    "Comment": "Unacceptable so down a line."
                },
                {
                    "Address": 568,
                    "ByteSize": 2,
                    "Comment": "Set to lefthand column."
                },
                {
                    "Address": 570,
                    "ByteSize": 3,
                    "Comment": "Make an indirect return via #ADDR:0x0DD9# and #ADDR:0x0ADC#.",
                    "OperandType": 2
                },
                {
                    "Address": 573,
                    "ByteSize": 3,
                    "Comment": "{Fetch \\#SYSVAR(P-FLAG) and save it on the machine",
                    "OperandType": 1
                },
                {
                    "Address": 576,
                    "ByteSize": 1,
                    "Comment": "stack.}"
                },
                {
                    "Address": 577,
                    "ByteSize": 4,
                    "Comment": "Set \\#SYSVAR(P-FLAG) to OVER 1."
                },
                {
                    "Address": 581,
                    "ByteSize": 2,
                    "Comment": "A 'space'."
                },
                {
                    "Address": 583,
                    "ByteSize": 3,
                    "Comment": "Print the character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 586,
                    "ByteSize": 1,
                    "Comment": "{Fetch the old value of \\#SYSVAR(P-FLAG)."
                },
                {
                    "Address": 587,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 590,
                    "ByteSize": 1,
                    "Comment": "Finished. Note: the programmer has forgotten to exit\nvia #ADDR:0x0ADC#, which is a \\#BUG\\#noStepForward(bug)."
                },
                {
                    "Address": 591,
                    "ByteSize": 4,
                    "Comment": "{Jump if handling the printer (bit 1 of \\#SYSVAR(FLAGS)"
                },
                {
                    "Address": 595,
                    "ByteSize": 3,
                    "Comment": "set).}",
                    "OperandType": 2
                },
                {
                    "Address": 598,
                    "ByteSize": 2,
                    "Comment": "Set to lefthand column."
                },
                {
                    "Address": 600,
                    "ByteSize": 3,
                    "Comment": "Scroll if necessary.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 603,
                    "ByteSize": 1,
                    "Comment": "Now down a line."
                },
                {
                    "Address": 604,
                    "ByteSize": 3,
                    "Comment": "Make an indirect return via #ADDR:0x0DD9# and #ADDR:0x0ADC#.",
                    "OperandType": 2
                },
                {
                    "Address": 607,
                    "ByteSize": 3,
                    "Comment": "Why again?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 610,
                    "ByteSize": 1,
                    "Comment": "Current column number."
                },
                {
                    "Address": 611,
                    "ByteSize": 1,
                    "Comment": "{Move rightwards by two columns and then test."
                },
                {
                    "Address": 612,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 613,
                    "ByteSize": 2,
                    "Comment": "The #REG:A# register will be &00 or &10."
                },
                {
                    "Address": 615,
                    "ByteSize": 2,
                    "Comment": "Exit via #ADDR:0x0AC3#.",
                    "OperandType": 2
                },
                {
                    "Address": 617,
                    "ByteSize": 2,
                    "Comment": "The character '?'."
                },
                {
                    "Address": 619,
                    "ByteSize": 2,
                    "Comment": "Now print this character instead.",
                    "OperandType": 2
                },
                {
                    "Address": 621,
                    "ByteSize": 3,
                    "Comment": "{Save the first operand in \\#SYSVAR(TVDATA-hi) and"
                },
                {
                    "Address": 624,
                    "ByteSize": 3,
                    "Comment": "change the address of the 'output' routine to #ADDR:0x0A87#.",
                    "OperandType": 1
                },
                {
                    "Address": 627,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 629,
                    "ByteSize": 3,
                    "Comment": "{The character code will be saved in \\#SYSVAR(TVDATA-lo)"
                },
                {
                    "Address": 632,
                    "ByteSize": 2,
                    "Comment": "and the address of the 'output' routine changed to\n#ADDR:0x0A6D#.}",
                    "OperandType": 2
                },
                {
                    "Address": 634,
                    "ByteSize": 3,
                    "Comment": "The 'output' routine is to be changed to #ADDR:0x0A87#."
                },
                {
                    "Address": 637,
                    "ByteSize": 3,
                    "Comment": "Save the control character code in \\#SYSVAR(TVDATA-hi).",
                    "OperandType": 1
                },
                {
                    "Address": 640,
                    "ByteSize": 3,
                    "Comment": "#REG:HL# will point to the 'output' routine address\n(\\#SYSVAR(CURCHL)).",
                    "OperandType": 1
                },
                {
                    "Address": 643,
                    "ByteSize": 1,
                    "Comment": "{Enter the new 'output' routine address and thereby"
                },
                {
                    "Address": 644,
                    "ByteSize": 1,
                    "Comment": "force the next character code to be considered as an"
                },
                {
                    "Address": 645,
                    "ByteSize": 1,
                    "Comment": "operand."
                },
                {
                    "Address": 646,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 647,
                    "ByteSize": 3,
                    "Comment": "{Restore the original address for #ADDR:0x09F4#."
                },
                {
                    "Address": 650,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 653,
                    "ByteSize": 3,
                    "Comment": "Fetch the control code and the first operand from\n\\#SYSVAR(TVDATA) if there are indeed two operands.",
                    "OperandType": 1
                },
                {
                    "Address": 656,
                    "ByteSize": 1,
                    "Comment": "{The 'last' operand and the control code are moved."
                },
                {
                    "Address": 657,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 658,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if handling INK to OVER."
                },
                {
                    "Address": 660,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 663,
                    "ByteSize": 2,
                    "Comment": "Jump forward if handling TAB.",
                    "OperandType": 2
                },
                {
                    "Address": 665,
                    "ByteSize": 1,
                    "Comment": "The line number."
                },
                {
                    "Address": 666,
                    "ByteSize": 1,
                    "Comment": "The column number."
                },
                {
                    "Address": 667,
                    "ByteSize": 2,
                    "Comment": "{Reverse the column number, i.e. &00 to &1F becomes &1F"
                },
                {
                    "Address": 669,
                    "ByteSize": 1,
                    "Comment": "to &00.}"
                },
                {
                    "Address": 670,
                    "ByteSize": 2,
                    "Comment": "Must be in range.",
                    "OperandType": 2
                },
                {
                    "Address": 672,
                    "ByteSize": 2,
                    "Comment": "{Add in the offset to give #REG:C# holding &21 to &02."
                },
                {
                    "Address": 674,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 675,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if handling the printer (bit 1 of"
                },
                {
                    "Address": 679,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(FLAGS) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 681,
                    "ByteSize": 2,
                    "Comment": "{Reverse the line number, i.e. &00 to &15 becomes &16"
                },
                {
                    "Address": 683,
                    "ByteSize": 1,
                    "Comment": "to &01.}"
                },
                {
                    "Address": 684,
                    "ByteSize": 3,
                    "Comment": "If appropriate jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 687,
                    "ByteSize": 1,
                    "Comment": "{The range &16 to &01 becomes &17 to &02."
                },
                {
                    "Address": 688,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 689,
                    "ByteSize": 1,
                    "Comment": "And now &18 to &03."
                },
                {
                    "Address": 690,
                    "ByteSize": 4,
                    "Comment": "{If printing in the lower part of the screen (bit 0 of"
                },
                {
                    "Address": 694,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(TV-FLAG) set) then consider whether scrolling\nis needed.}",
                    "OperandType": 2
                },
                {
                    "Address": 697,
                    "ByteSize": 3,
                    "Comment": "{Give report 5 - Out of screen, if required"
                },
                {
                    "Address": 700,
                    "ByteSize": 3,
                    "Comment": "(\\#SYSVAR(DF-SZ)>#REG:A#).}",
                    "OperandType": 2
                },
                {
                    "Address": 703,
                    "ByteSize": 3,
                    "Comment": "Return via #ADDR:0x0DD9# and #ADDR:0x0ADC#.",
                    "OperandType": 2
                },
                {
                    "Address": 706,
                    "ByteSize": 1,
                    "Comment": "Fetch the first operand."
                },
                {
                    "Address": 707,
                    "ByteSize": 3,
                    "Comment": "The current print position.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 710,
                    "ByteSize": 1,
                    "Comment": "Add the current column value."
                },
                {
                    "Address": 711,
                    "ByteSize": 1,
                    "Comment": "{Find how many spaces, modulo 32, are required and"
                },
                {
                    "Address": 712,
                    "ByteSize": 2,
                    "Comment": "return if the result is zero."
                },
                {
                    "Address": 714,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 715,
                    "ByteSize": 1,
                    "Comment": "Use #REG:D# as the counter."
                },
                {
                    "Address": 716,
                    "ByteSize": 4,
                    "Comment": "Suppress 'leading space' (set bit 0 of \\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 720,
                    "ByteSize": 2,
                    "Comment": "{Print #REG:D# number of spaces."
                },
                {
                    "Address": 722,
                    "ByteSize": 3,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 725,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 726,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 728,
                    "ByteSize": 1,
                    "Comment": "Now finished."
                },
                {
                    "Address": 729,
                    "ByteSize": 3,
                    "Comment": "Print the character(s) and continue into #ADDR:0x0ADC#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 732,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if handling the printer (bit 1 of"
                },
                {
                    "Address": 736,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(FLAGS) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 738,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if handling the lower part of the screen"
                },
                {
                    "Address": 742,
                    "ByteSize": 2,
                    "Comment": "(bit 0 of \\#SYSVAR(TV-FLAG) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 744,
                    "ByteSize": 4,
                    "Comment": "{Save the values that relate to the main part of the",
                    "OperandType": 1
                },
                {
                    "Address": 748,
                    "ByteSize": 3,
                    "Comment": "screen at \\#SYSVAR(S-POSN) and \\#SYSVAR(DF-CC).}",
                    "OperandType": 1
                },
                {
                    "Address": 751,
                    "ByteSize": 1,
                    "Comment": "Then return."
                },
                {
                    "Address": 752,
                    "ByteSize": 4,
                    "Comment": "{Save the values that relate to the lower part of the",
                    "OperandType": 1
                },
                {
                    "Address": 756,
                    "ByteSize": 4,
                    "Comment": "screen at \\#SYSVAR(S-POSNL), \\#SYSVAR(ECHO-E) and",
                    "OperandType": 1
                },
                {
                    "Address": 760,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(DF-CCL).}",
                    "OperandType": 1
                },
                {
                    "Address": 763,
                    "ByteSize": 1,
                    "Comment": "Then return."
                },
                {
                    "Address": 764,
                    "ByteSize": 3,
                    "Comment": "{Save the values that relate to the printer buffer at"
                },
                {
                    "Address": 767,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(P-POSN) and \\#SYSVAR(PR-CC).}",
                    "OperandType": 1
                },
                {
                    "Address": 770,
                    "ByteSize": 1,
                    "Comment": "Then return."
                },
                {
                    "Address": 771,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if handling the printer (bit 1 of"
                },
                {
                    "Address": 775,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(FLAGS) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 777,
                    "ByteSize": 4,
                    "Comment": "{Fetch the values relating to the main part of the",
                    "OperandType": 1
                },
                {
                    "Address": 781,
                    "ByteSize": 3,
                    "Comment": "screen from \\#SYSVAR(S-POSN) and \\#SYSVAR(DF-CC) and",
                    "OperandType": 1
                },
                {
                    "Address": 784,
                    "ByteSize": 4,
                    "Comment": "return if this was the intention (bit 0 of"
                },
                {
                    "Address": 788,
                    "ByteSize": 1,
                    "Comment": "\\#SYSVAR(TV-FLAG) set).}"
                },
                {
                    "Address": 789,
                    "ByteSize": 4,
                    "Comment": "{Otherwise fetch the values relating to the lower part",
                    "OperandType": 1
                },
                {
                    "Address": 793,
                    "ByteSize": 3,
                    "Comment": "of the screen from \\#SYSVAR(S-POSNL) and\n\\#SYSVAR(DF-CCL).}",
                    "OperandType": 1
                },
                {
                    "Address": 796,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 797,
                    "ByteSize": 3,
                    "Comment": "{Fetch the values relating to the printer buffer from"
                },
                {
                    "Address": 800,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(P-POSN) and \\#SYSVAR(PR-CC).}",
                    "OperandType": 1
                },
                {
                    "Address": 803,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 804,
                    "ByteSize": 2,
                    "Comment": "{Jump forward with ordinary character codes."
                },
                {
                    "Address": 806,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 808,
                    "ByteSize": 2,
                    "Comment": "{Jump forward with token codes and UDG codes."
                },
                {
                    "Address": 810,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 812,
                    "ByteSize": 1,
                    "Comment": "Move the graphic code."
                },
                {
                    "Address": 813,
                    "ByteSize": 3,
                    "Comment": "Construct the graphic form.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 816,
                    "ByteSize": 3,
                    "Comment": "#REG:HL# has been disturbed so 'fetch' again.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 819,
                    "ByteSize": 3,
                    "Comment": "Make #REG:DE# point to the start of the graphic form,\ni.e. \\#SYSVAR(MEMBOT)."
                },
                {
                    "Address": 822,
                    "ByteSize": 2,
                    "Comment": "Jump forward to print the graphic character.",
                    "OperandType": 2
                },
                {
                    "Address": 824,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(MEMBOT)."
                },
                {
                    "Address": 827,
                    "ByteSize": 3,
                    "Comment": "In effect call the following subroutine twice.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 830,
                    "ByteSize": 2,
                    "Comment": "{Determine bit 0 (and later bit 2) of the graphic code."
                },
                {
                    "Address": 832,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 833,
                    "ByteSize": 2,
                    "Comment": "The #REG:A# register will hold &00 or &0F depending on\nthe value of the bit in the code."
                },
                {
                    "Address": 835,
                    "ByteSize": 1,
                    "Comment": "Save the result in #REG:C#."
                },
                {
                    "Address": 836,
                    "ByteSize": 2,
                    "Comment": "{Determine bit 1 (and later bit 3) of the graphic code."
                },
                {
                    "Address": 838,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 839,
                    "ByteSize": 2,
                    "Comment": "The #REG:A# register will hold &00 or &F0."
                },
                {
                    "Address": 841,
                    "ByteSize": 1,
                    "Comment": "The two results are combined."
                },
                {
                    "Address": 842,
                    "ByteSize": 2,
                    "Comment": "{The #REG:A# register holds half the character form and"
                },
                {
                    "Address": 844,
                    "ByteSize": 1,
                    "Comment": "has to be used four times. This is done for the upper"
                },
                {
                    "Address": 845,
                    "ByteSize": 1,
                    "Comment": "half of the character form and then the lower."
                },
                {
                    "Address": 846,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 847,
                    "ByteSize": 2,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 849,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 850,
                    "ByteSize": 2,
                    "Comment": "{Jump forward with token codes."
                },
                {
                    "Address": 852,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 854,
                    "ByteSize": 2,
                    "Comment": "UDG codes are now &00 to &0F."
                },
                {
                    "Address": 856,
                    "ByteSize": 1,
                    "Comment": "Save the current position values on the machine stack."
                },
                {
                    "Address": 857,
                    "ByteSize": 4,
                    "Comment": "{Fetch the base address of the UDG area (from",
                    "OperandType": 1
                },
                {
                    "Address": 861,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(UDG)) and jump forward.}",
                    "OperandType": 2
                },
                {
                    "Address": 863,
                    "ByteSize": 3,
                    "Comment": "{Now print the token and return via #ADDR:0x0B03#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 866,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 869,
                    "ByteSize": 1,
                    "Comment": "The current position is saved."
                },
                {
                    "Address": 870,
                    "ByteSize": 4,
                    "Comment": "The base address of the character area is fetched\n(\\#SYSVAR(CHARS)).",
                    "OperandType": 1
                },
                {
                    "Address": 874,
                    "ByteSize": 1,
                    "Comment": "The print address is saved."
                },
                {
                    "Address": 875,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(FLAGS)."
                },
                {
                    "Address": 878,
                    "ByteSize": 2,
                    "Comment": "Allow for a leading space."
                },
                {
                    "Address": 880,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if the character is not a 'space'."
                },
                {
                    "Address": 882,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 884,
                    "ByteSize": 2,
                    "Comment": "But 'suppress' if it is."
                },
                {
                    "Address": 886,
                    "ByteSize": 2,
                    "Comment": "{Now pass the character code to the #REG:HL# register"
                },
                {
                    "Address": 888,
                    "ByteSize": 1,
                    "Comment": "pair.}"
                },
                {
                    "Address": 889,
                    "ByteSize": 1,
                    "Comment": "{The character code is in effect multiplied by 8."
                },
                {
                    "Address": 890,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 891,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 892,
                    "ByteSize": 1,
                    "Comment": "The base address of the character form is found."
                },
                {
                    "Address": 893,
                    "ByteSize": 1,
                    "Comment": "{The current position is fetched and the base address"
                },
                {
                    "Address": 894,
                    "ByteSize": 1,
                    "Comment": "passed to the #REG:DE# register pair.}"
                },
                {
                    "Address": 895,
                    "ByteSize": 1,
                    "Comment": "Fetch the column number."
                },
                {
                    "Address": 896,
                    "ByteSize": 1,
                    "Comment": "Move one column rightwards."
                },
                {
                    "Address": 897,
                    "ByteSize": 2,
                    "Comment": "{Jump forward unless a new line is indicated."
                },
                {
                    "Address": 899,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 901,
                    "ByteSize": 1,
                    "Comment": "Move down one line."
                },
                {
                    "Address": 902,
                    "ByteSize": 1,
                    "Comment": "Column number is &21."
                },
                {
                    "Address": 903,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if handling the screen (bit 1 of"
                },
                {
                    "Address": 907,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(FLAGS) reset).}",
                    "OperandType": 2
                },
                {
                    "Address": 909,
                    "ByteSize": 1,
                    "Comment": "{Save the base address whilst the printer buffer is"
                },
                {
                    "Address": 910,
                    "ByteSize": 3,
                    "Comment": "emptied.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 913,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 914,
                    "ByteSize": 1,
                    "Comment": "Copy the new column number."
                },
                {
                    "Address": 915,
                    "ByteSize": 1,
                    "Comment": "{Test whether a new line is being used. If it is see if"
                },
                {
                    "Address": 916,
                    "ByteSize": 1,
                    "Comment": "the display requires to be scrolled."
                },
                {
                    "Address": 917,
                    "ByteSize": 3,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 920,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 921,
                    "ByteSize": 1,
                    "Comment": "{Save the position values and the destination address"
                },
                {
                    "Address": 922,
                    "ByteSize": 1,
                    "Comment": "on the machine stack.}"
                },
                {
                    "Address": 923,
                    "ByteSize": 3,
                    "Comment": "Fetch \\#SYSVAR(P-FLAG) and read bit 0.",
                    "OperandType": 1
                },
                {
                    "Address": 926,
                    "ByteSize": 2,
                    "Comment": "{Prepare the 'OVER mask' in the #REG:B# register, i.e."
                },
                {
                    "Address": 928,
                    "ByteSize": 1,
                    "Comment": "OVER 0=&00 and OVER 1=&FF."
                },
                {
                    "Address": 929,
                    "ByteSize": 2,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 931,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 932,
                    "ByteSize": 1,
                    "Comment": "{Read bit 2 of \\#SYSVAR(P-FLAG) and prepare the 'INVERSE"
                },
                {
                    "Address": 933,
                    "ByteSize": 1,
                    "Comment": "mask' in the #REG:C# register, i.e. INVERSE 0=&00 and"
                },
                {
                    "Address": 934,
                    "ByteSize": 1,
                    "Comment": "INVERSE 1=&FF."
                },
                {
                    "Address": 935,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 936,
                    "ByteSize": 2,
                    "Comment": "{Set the #REG:A# register to hold the 'pixel-line'"
                },
                {
                    "Address": 938,
                    "ByteSize": 1,
                    "Comment": "counter and clear the carry flag.}"
                },
                {
                    "Address": 939,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if handling the screen (bit 1 of"
                },
                {
                    "Address": 943,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(FLAGS) reset).}",
                    "OperandType": 2
                },
                {
                    "Address": 945,
                    "ByteSize": 4,
                    "Comment": "Signal 'printer buffer no longer empty' (set bit 1 of\n#ADDR:0x5C6A#(FLAGS2))."
                },
                {
                    "Address": 949,
                    "ByteSize": 1,
                    "Comment": "Set the carry flag to show that the printer is being\nused."
                },
                {
                    "Address": 950,
                    "ByteSize": 1,
                    "Comment": "Exchange the destination address with the base address\nbefore entering the loop."
                },
                {
                    "Address": 951,
                    "ByteSize": 1,
                    "Comment": "The carry flag is set when using the printer. Save this\nflag in \\#REGf'."
                },
                {
                    "Address": 952,
                    "ByteSize": 1,
                    "Comment": "Fetch the existing 'pixel-line'."
                },
                {
                    "Address": 953,
                    "ByteSize": 1,
                    "Comment": "{Use the 'OVER mask' and then '\\#S/XOR/' the result with"
                },
                {
                    "Address": 954,
                    "ByteSize": 1,
                    "Comment": "the 'pixel-line' of the character form.}"
                },
                {
                    "Address": 955,
                    "ByteSize": 1,
                    "Comment": "Finally consider the 'INVERSE mask'."
                },
                {
                    "Address": 956,
                    "ByteSize": 1,
                    "Comment": "Enter the result."
                },
                {
                    "Address": 957,
                    "ByteSize": 1,
                    "Comment": "{Fetch the printer flag and jump forward if required."
                },
                {
                    "Address": 958,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 960,
                    "ByteSize": 1,
                    "Comment": "Update the destination address."
                },
                {
                    "Address": 961,
                    "ByteSize": 1,
                    "Comment": "Update the 'pixel-line' address of the character form."
                },
                {
                    "Address": 962,
                    "ByteSize": 1,
                    "Comment": "{Decrease the counter and loop back unless it is zero."
                },
                {
                    "Address": 963,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 965,
                    "ByteSize": 1,
                    "Comment": "{Make the #REG:H# register hold a correct high-address"
                },
                {
                    "Address": 966,
                    "ByteSize": 1,
                    "Comment": "for the character area.}"
                },
                {
                    "Address": 967,
                    "ByteSize": 4,
                    "Comment": "{Set the attribute byte only if handling the screen"
                },
                {
                    "Address": 971,
                    "ByteSize": 3,
                    "Comment": "(bit 1 of \\#SYSVAR(FLAGS) reset).}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 974,
                    "ByteSize": 1,
                    "Comment": "{Restore the original destination address and the"
                },
                {
                    "Address": 975,
                    "ByteSize": 1,
                    "Comment": "position values.}"
                },
                {
                    "Address": 976,
                    "ByteSize": 1,
                    "Comment": "{Decrease the column number and increase the"
                },
                {
                    "Address": 977,
                    "ByteSize": 1,
                    "Comment": "destination address before returning."
                },
                {
                    "Address": 978,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 979,
                    "ByteSize": 1,
                    "Comment": "Save the printer flag again."
                },
                {
                    "Address": 980,
                    "ByteSize": 2,
                    "Comment": "The required increment value."
                },
                {
                    "Address": 982,
                    "ByteSize": 1,
                    "Comment": "{Add the value and pass the result back to the #REG:E#"
                },
                {
                    "Address": 983,
                    "ByteSize": 1,
                    "Comment": "register.}"
                },
                {
                    "Address": 984,
                    "ByteSize": 1,
                    "Comment": "Fetch the flag."
                },
                {
                    "Address": 985,
                    "ByteSize": 2,
                    "Comment": "Jump back into the loop.",
                    "OperandType": 2
                },
                {
                    "Address": 987,
                    "ByteSize": 1,
                    "Comment": "{The high byte of the destination address is divided by"
                },
                {
                    "Address": 988,
                    "ByteSize": 1,
                    "Comment": "eight and \\#S/AND/ed with &03 to determine which third"
                },
                {
                    "Address": 989,
                    "ByteSize": 1,
                    "Comment": "of the screen is being addressed, i.e. &00, &01 or &02."
                },
                {
                    "Address": 990,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 991,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 993,
                    "ByteSize": 2,
                    "Comment": "{The high byte for the attribute area is then formed."
                },
                {
                    "Address": 995,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 996,
                    "ByteSize": 4,
                    "Comment": "#REG:E# holds \\#SYSVAR(ATTR-T), and #REG:D# holds\n\\#SYSVAR(MASK-T).",
                    "OperandType": 1
                },
                {
                    "Address": 1000,
                    "ByteSize": 1,
                    "Comment": "The old attribute value."
                },
                {
                    "Address": 1001,
                    "ByteSize": 1,
                    "Comment": "{The values of \\#SYSVAR(MASK-T) and \\#SYSVAR(ATTR-T) are"
                },
                {
                    "Address": 1002,
                    "ByteSize": 1,
                    "Comment": "taken into account."
                },
                {
                    "Address": 1003,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 1004,
                    "ByteSize": 4,
                    "Comment": "{Jump forward unless dealing with PAPER 9 (bit 6 of"
                },
                {
                    "Address": 1008,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(P-FLAG) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 1010,
                    "ByteSize": 2,
                    "Comment": "{The old paper colour is ignored and depending on"
                },
                {
                    "Address": 1012,
                    "ByteSize": 2,
                    "Comment": "whether the ink colour is light or dark the new paper"
                },
                {
                    "Address": 1014,
                    "ByteSize": 2,
                    "Comment": "colour will be black (000) or white (111).",
                    "OperandType": 2
                },
                {
                    "Address": 1016,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 1018,
                    "ByteSize": 4,
                    "Comment": "{Jump forward unless dealing with INK 9 (bit 4 of"
                },
                {
                    "Address": 1022,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(P-FLAG) set).}",
                    "OperandType": 2
                }
            ],
            "CommentBlocks": [
                {
                    "Address": 2,
                    "Comment": "This routine continues into #ADDR:0x0802#.\nTHE 'LOAD A DATA BLOCK' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0808# and #ADDR:0x08B6#.\n \nThe routine at #ADDR:0x07CB# continues here.\n \nThis subroutine is common to all the tape loading routines. In the case of\nLOAD and VERIFY it acts as a full return from the cassette handling routines\nbut in the case of MERGE the data block has yet to be merged.\n \nA &FF\nF Carry flag set if loading, reset if verifying\nDE Block length\nIX Start address"
                },
                {
                    "Address": 6,
                    "Comment": "This entry point is used by the routine at #ADDR:0x07CB#.\n \nReport R - Tape loading error."
                },
                {
                    "Address": 8,
                    "Comment": "THE 'LOAD' CONTROL ROUTINE\n \nUsed by the routine at #ADDR:0x0605#.\n \nThis routine controls the LOADing of a BASIC program, and its variables, or\nan array.\n \nHL Destination address (\\#SYSVAR(PROG), or the address of the array, or &0000\n.  for a new array)\nIX Address of the header loaded from tape"
                },
                {
                    "Address": 25,
                    "Comment": "Consider now if there is enough room in memory for the new data block."
                },
                {
                    "Address": 37,
                    "Comment": "Make the actual test for room."
                },
                {
                    "Address": 46,
                    "Comment": "Now deal with the LOADing of arrays."
                },
                {
                    "Address": 76,
                    "Comment": "Space is now made available for the new array - at the end of the present\nvariables area."
                },
                {
                    "Address": 115,
                    "Comment": "Now deal with the LOADing of a BASIC program and its variables."
                },
                {
                    "Address": 173,
                    "Comment": "The data block can now be LOADed."
                },
                {
                    "Address": 182,
                    "Comment": "THE 'MERGE' CONTROL ROUTINE\n \nUsed by the routine at #ADDR:0x0605#.\n \nThere are three main parts to this routine.\n \n\\#LIST\n{ Load the data block into the work space. }\n{ Merge the lines of the new program into the old program. }\n{ Merge the new variables into the old variables. }\nLIST\\#\n \nStart therefore with the loading of the data block.\n \nIX Address of the header loaded from tape"
                },
                {
                    "Address": 205,
                    "Comment": "The lines of the new program are merged with the lines of the old program."
                },
                {
                    "Address": 210,
                    "Comment": "Enter a loop to deal with the lines of the new program."
                },
                {
                    "Address": 215,
                    "Comment": "Now enter an inner loop to deal with the lines of the old program."
                },
                {
                    "Address": 240,
                    "Comment": "In a similar manner the variables of the new program are merged with the\nvariables of the old program."
                },
                {
                    "Address": 249,
                    "Comment": "Now enter an inner loop to search the existing variables area."
                },
                {
                    "Address": 265,
                    "Comment": "The old and new variables match with respect to their first bytes but\nvariables with long names will need to be matched fully."
                },
                {
                    "Address": 274,
                    "Comment": "Enter a loop to compare the letters of the long names."
                },
                {
                    "Address": 289,
                    "Comment": "Come here if the match was found."
                },
                {
                    "Address": 291,
                    "Comment": "And here if not. (#REG:A# holds &80 - variable to be 'added'.)"
                },
                {
                    "Address": 300,
                    "Comment": "THE 'MERGE A LINE OR A VARIABLE' SUBROUTINE\n \nUsed by the routine at #ADDR:0x08B6#.\n \nDE Destination address of the new line/variable\nHL Address of the new line/variable to MERGE\nF Carry flag: MERGE a BASIC line (reset) or a variable (set)\nF Zero flag: add (reset) or replace (set) the line/variable\nO:DE Address of the next line/variable in the existing program\nO:HL Address of the next new line/variable to MERGE"
                },
                {
                    "Address": 318,
                    "Comment": "The new entry can now be made."
                },
                {
                    "Address": 360,
                    "Comment": "The 'new' variable/line has now to be removed from the work space."
                },
                {
                    "Address": 368,
                    "Comment": "THE 'SAVE' CONTROL ROUTINE\n \nUsed by the routine at #ADDR:0x0605#.\n \nThe operation of saving a program or a block of data is very straightforward.\n \nHL Data block start address\nIX Header start address"
                },
                {
                    "Address": 388,
                    "Comment": "Upon receipt of a keystroke the 'header' is saved."
                },
                {
                    "Address": 397,
                    "Comment": "There follows a short delay before the program/data block is saved."
                },
                {
                    "Address": 417,
                    "Comment": "THE CASSETTE MESSAGES\n \nUsed by the routines at #ADDR:0x0605# and #ADDR:0x0970#.\n \nEach message is given with the last character inverted (plus &80)."
                },
                {
                    "Address": 500,
                    "Comment": "THE 'PRINT-OUT' ROUTINES\n \nUsed by the routines at #ADDR:0x111D# and #ADDR:0x18C1#.\n \nThe address of this routine is found in the #ADDR:0x15AF#(initial channel\ninformation table).\n \nAll of the printing to the main part of the screen, the lower part of the\nscreen and the printer is handled by this set of routines.\n \nThis routine is entered with the #REG:A# register holding the code for a\ncontrol character, a printable character or a token.\n \nA Character code"
                },
                {
                    "Address": 529,
                    "Comment": "THE 'CONTROL CHARACTER' TABLE\n \nUsed by the routine at #ADDR:0x09F4#."
                },
                {
                    "Address": 547,
                    "Comment": "THE 'CURSOR LEFT' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x0A11#(control character table).\n \nB Current line number\nC Current column number"
                },
                {
                    "Address": 573,
                    "Comment": "THE 'CURSOR RIGHT' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x0A11#(control character table).\n \nThis subroutine performs an operation identical to the BASIC statement 'PRINT\nOVER 1;CHR$ 32;'.\n \nB Current line number\nC Current column number\nHL Display file address or printer buffer address"
                },
                {
                    "Address": 591,
                    "Comment": "THE 'CARRIAGE RETURN' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x0A11#(control character table).\n \nIf the printing being handled is going to the printer then a carriage return\ncharacter leads to the printer buffer being emptied. If the printing is to\nthe screen then a test for 'scroll?' is made before decreasing the line\nnumber.\n \nB Current line number"
                },
                {
                    "Address": 607,
                    "Comment": "THE 'PRINT COMMA' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x0A11#(control character table).\n \nThe current column value is manipulated and the #REG:A# register set to hold\n&00 (for TAB 0) or &10 (for TAB 16)."
                },
                {
                    "Address": 617,
                    "Comment": "THE 'PRINT A QUESTION MARK' SUBROUTINE\n \nUsed by the routine at #ADDR:0x09F4#.\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x0A11#(control character table).\n \nA question mark is printed whenever an attempt is made to print an\nunprintable code."
                },
                {
                    "Address": 621,
                    "Comment": "THE 'CONTROL CHARACTERS WITH OPERANDS' ROUTINE\n \nThe control characters from INK to OVER require a single operand whereas the\ncontrol characters AT and TAB are required to be followed by two operands.\n \nThe present routine leads to the control character code being saved in\n\\#SYSVAR(TVDATA-lo), the first operand in \\#SYSVAR(TVDATA-hi) or the #REG:A#\nregister if there is only a single operand required, and the second operand\nin the #REG:A# register.\n \nA Control character code (&10 to &17)"
                },
                {
                    "Address": 629,
                    "Comment": "The address of this entry point is derived from an offset found in the\n#ADDR:0x0A11#(control character table).\n \nEnter here when handling the characters AT and TAB."
                },
                {
                    "Address": 634,
                    "Comment": "The address of this entry point is derived from an offset found in the\n#ADDR:0x0A11#(control character table).\n \nEnter here when handling the colour items - INK to OVER."
                },
                {
                    "Address": 640,
                    "Comment": "The current 'output' routine address is changed temporarily."
                },
                {
                    "Address": 647,
                    "Comment": "Once the operands have been collected the routine continues."
                },
                {
                    "Address": 665,
                    "Comment": "Now deal with the AT control character."
                },
                {
                    "Address": 706,
                    "Comment": "And the TAB control character."
                },
                {
                    "Address": 707,
                    "Comment": "This entry point is used by the routine at #ADDR:0x0A5F#."
                },
                {
                    "Address": 729,
                    "Comment": "PRINTABLE CHARACTER CODES\n \nUsed by the routines at #ADDR:0x09F4# and #ADDR:0x0A69#.\n \nThe required character (or characters) is printed by calling #ADDR:0x0B24# followed\nby #ADDR:0x0ADC#.\n \nA Character code"
                },
                {
                    "Address": 732,
                    "Comment": "THE 'POSITION STORE' SUBROUTINE\n \nUsed by the routine at #ADDR:0x0DD9#.\n \nThe routine at #ADDR:0x0AD9# continues here.\n \nThe new position's 'line and column' values and the 'pixel' address are\nstored in the appropriate system variables.\n \nB Line number\nC Column number\nHL Display file address or printer buffer address"
                },
                {
                    "Address": 771,
                    "Comment": "THE 'POSITION FETCH' SUBROUTINE\n \nUsed by the routines at #ADDR:0x09F4#, #ADDR:0x0A5F#, #ADDR:0x0A6D# and #ADDR:0x0B24#.\n \nThe current position's parameters are fetched from the appropriate system\nvariables.\n \nO:B Line number\nO:C Column number\nO:HL Display file address or printer buffer address"
                },
                {
                    "Address": 804,
                    "Comment": "THE 'PRINT ANY CHARACTER(S)' SUBROUTINE\n \nUsed by the routine at #ADDR:0x0AD9#.\n \nOrdinary character codes, token codes and user-defined graphic codes, and\ngraphic codes are dealt with separately.\n \nA Character code\nB Line number\nC Column number\nHL Display file address or printer buffer address"
                },
                {
                    "Address": 824,
                    "Comment": "Graphic characters are constructed in an ad hoc manner in the calculator's\nmemory area, i.e. mem-0 and mem-1."
                },
                {
                    "Address": 850,
                    "Comment": "Token codes and user-defined graphic codes are now separated."
                },
                {
                    "Address": 869,
                    "Comment": "This entry point is used by the routine at #ADDR:0x0A3D#.\n \nThe required character form is identified."
                },
                {
                    "Address": 895,
                    "Comment": "The following subroutine is used to print all '8*8' bit characters. On entry\nthe #REG:DE# register pair holds the base address of the character form, the\n#REG:HL# register the destination address and the #REG:BC# register pair the\ncurrent 'line and column' values."
                },
                {
                    "Address": 921,
                    "Comment": "Now consider the present state of INVERSE and OVER."
                },
                {
                    "Address": 951,
                    "Comment": "The character can now be printed. Eight passes of the loop are made - one for\neach 'pixel-line'."
                },
                {
                    "Address": 965,
                    "Comment": "Once the character has been printed the attribute byte is to be set as\nrequired."
                },
                {
                    "Address": 979,
                    "Comment": "When the printer is being used the destination address has to be updated in\nincrements of &20."
                },
                {
                    "Address": 987,
                    "Comment": "THE 'SET ATTRIBUTE BYTE' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0B24# and #ADDR:0x22DC#.\n \nThe appropriate attribute byte is identified and fetched. The new value is\nformed by manipulating the old value, \\#SYSVAR(ATTR-T), \\#SYSVAR(MASK-T) and\n\\#SYSVAR(P-FLAG). Finally this new value is copied to the attribute area.\n \nHL Display file address"
                }
            ],
            "DataInfo": [
                {
                    "Address": 7,
                    "Comment": "}"
                },
                {
                    "Address": 417,
                    "Comment": "Initial byte is stepped\nover."
                },
                {
                    "Address": 418,
                    "ByteSize": 31,
                    "Comment": "'Start tape, then press\nany key.'",
                    "DataType": 4
                },
                {
                    "Address": 449,
                    "ByteSize": 10,
                    "Comment": "Carriage return +\n'Program: '",
                    "DataType": 4
                },
                {
                    "Address": 459,
                    "ByteSize": 15,
                    "Comment": "Carriage return +\n'Number array: '",
                    "DataType": 4
                },
                {
                    "Address": 474,
                    "ByteSize": 18,
                    "Comment": "Carriage return +\n'Character array: '",
                    "DataType": 4
                },
                {
                    "Address": 492,
                    "ByteSize": 8,
                    "Comment": "Carriage return +\n'Bytes: '",
                    "DataType": 4
                },
                {
                    "Address": 529,
                    "Comment": "&06: PRINT comma (#ADDR:0x0A5F#)"
                },
                {
                    "Address": 530,
                    "Comment": "&07: EDIT (#ADDR:0x0A69#)"
                },
                {
                    "Address": 531,
                    "Comment": "&08: Cursor left (#ADDR:0x0A23#)"
                },
                {
                    "Address": 532,
                    "Comment": "&09: Cursor right (#ADDR:0x0A3D#)"
                },
                {
                    "Address": 533,
                    "Comment": "&0A: Cursor down (#ADDR:0x0A69#)"
                },
                {
                    "Address": 534,
                    "Comment": "&0B: Cursor up (#ADDR:0x0A69#)"
                },
                {
                    "Address": 535,
                    "Comment": "&0C: DELETE (#ADDR:0x0A69#)"
                },
                {
                    "Address": 536,
                    "Comment": "&0D: ENTER (#ADDR:0x0A4F#)"
                },
                {
                    "Address": 537,
                    "Comment": "&0E: Not used (#ADDR:0x0A69#)"
                },
                {
                    "Address": 538,
                    "Comment": "&0F: Not used (#ADDR:0x0A69#)"
                },
                {
                    "Address": 539,
                    "Comment": "&10: INK control (#ADDR:0x0A7A#)"
                },
                {
                    "Address": 540,
                    "Comment": "&11: PAPER control (#ADDR:0x0A7A#)"
                },
                {
                    "Address": 541,
                    "Comment": "&12: FLASH control (#ADDR:0x0A7A#)"
                },
                {
                    "Address": 542,
                    "Comment": "&13: BRIGHT control (#ADDR:0x0A7A#)"
                },
                {
                    "Address": 543,
                    "Comment": "&14: INVERSE control (#ADDR:0x0A7A#)"
                },
                {
                    "Address": 544,
                    "Comment": "&15: OVER control (#ADDR:0x0A7A#)"
                },
                {
                    "Address": 545,
                    "Comment": "&16: AT control (#ADDR:0x0A75#)"
                },
                {
                    "Address": 546,
                    "Comment": "&17: TAB control (#ADDR:0x0A75#)"
                }
            ],
            "LabelInfo": [
                {
                    "Address": 0,
                    "LabelType": 2,
                    "Name": "VR_CONT_3"
                },
                {
                    "Address": 2,
                    "LabelType": 2,
                    "Name": "LD_BLOCK"
                },
                {
                    "Address": 6,
                    "LabelType": 2,
                    "Name": "REPORT_R"
                },
                {
                    "Address": 8,
                    "LabelType": 2,
                    "Name": "LD_CONTRL"
                },
                {
                    "Address": 25,
                    "LabelType": 2,
                    "Name": "LD_CONT_1"
                },
                {
                    "Address": 37,
                    "LabelType": 2,
                    "Name": "LD_CONT_2"
                },
                {
                    "Address": 46,
                    "LabelType": 2,
                    "Name": "LD_DATA"
                },
                {
                    "Address": 76,
                    "LabelType": 2,
                    "Name": "LD_DATA_1"
                },
                {
                    "Address": 115,
                    "LabelType": 2,
                    "Name": "LD_PROG"
                },
                {
                    "Address": 173,
                    "LabelType": 2,
                    "Name": "LD_PROG_1"
                },
                {
                    "Address": 182,
                    "LabelType": 2,
                    "Name": "ME_CONTRL"
                },
                {
                    "Address": 210,
                    "LabelType": 2,
                    "Name": "ME_NEW_LP"
                },
                {
                    "Address": 215,
                    "LabelType": 2,
                    "Name": "ME_OLD_LP"
                },
                {
                    "Address": 223,
                    "LabelType": 2,
                    "Name": "ME_OLD_L1"
                },
                {
                    "Address": 235,
                    "LabelType": 2,
                    "Name": "ME_NEW_L2"
                },
                {
                    "Address": 240,
                    "LabelType": 2,
                    "Name": "ME_VAR_LP"
                },
                {
                    "Address": 249,
                    "LabelType": 2,
                    "Name": "ME_OLD_VP"
                },
                {
                    "Address": 257,
                    "LabelType": 2,
                    "Name": "ME_OLD_V1"
                },
                {
                    "Address": 265,
                    "LabelType": 2,
                    "Name": "ME_OLD_V2"
                },
                {
                    "Address": 274,
                    "LabelType": 2,
                    "Name": "ME_OLD_V3"
                },
                {
                    "Address": 286,
                    "LabelType": 2,
                    "Name": "ME_OLD_V4"
                },
                {
                    "Address": 289,
                    "LabelType": 2,
                    "Name": "ME_VAR_L1"
                },
                {
                    "Address": 291,
                    "LabelType": 2,
                    "Name": "ME_VAR_L2"
                },
                {
                    "Address": 300,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "ME_ENTER"
                },
                {
                    "Address": 318,
                    "LabelType": 2,
                    "Name": "ME_ENT_1"
                },
                {
                    "Address": 341,
                    "LabelType": 2,
                    "Name": "ME_ENT_2"
                },
                {
                    "Address": 344,
                    "LabelType": 2,
                    "Name": "ME_ENT_3"
                },
                {
                    "Address": 368,
                    "LabelType": 2,
                    "Name": "SA_CONTRL"
                },
                {
                    "Address": 401,
                    "LabelType": 2,
                    "Name": "SA_1_SEC"
                },
                {
                    "Address": 417,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "CASSETTE"
                },
                {
                    "Address": 449,
                    "Global": true,
                    "LabelType": 3,
                    "Name": "BLOCK_HDR"
                },
                {
                    "Address": 500,
                    "LabelType": 2,
                    "Name": "PRINT_OUT"
                },
                {
                    "Address": 529,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "CTRL_CHARS"
                },
                {
                    "Address": 547,
                    "LabelType": 2,
                    "Name": "PO_BACK_1"
                },
                {
                    "Address": 568,
                    "LabelType": 2,
                    "Name": "PO_BACK_2"
                },
                {
                    "Address": 570,
                    "LabelType": 2,
                    "Name": "PO_BACK_3"
                },
                {
                    "Address": 573,
                    "LabelType": 2,
                    "Name": "PO_RIGHT"
                },
                {
                    "Address": 591,
                    "LabelType": 2,
                    "Name": "PO_ENTER"
                },
                {
                    "Address": 607,
                    "LabelType": 2,
                    "Name": "PO_COMMA"
                },
                {
                    "Address": 617,
                    "LabelType": 2,
                    "Name": "PO_QUEST"
                },
                {
                    "Address": 621,
                    "LabelType": 2,
                    "Name": "PO_TV_2"
                },
                {
                    "Address": 629,
                    "LabelType": 2,
                    "Name": "PO_2_OPER"
                },
                {
                    "Address": 634,
                    "LabelType": 2,
                    "Name": "PO_1_OPER"
                },
                {
                    "Address": 637,
                    "LabelType": 2,
                    "Name": "PO_TV_1"
                },
                {
                    "Address": 640,
                    "LabelType": 2,
                    "Name": "PO_CHANGE"
                },
                {
                    "Address": 647,
                    "LabelType": 2,
                    "Name": "PO_CONT"
                },
                {
                    "Address": 684,
                    "LabelType": 2,
                    "Name": "PO_AT_ERR"
                },
                {
                    "Address": 703,
                    "LabelType": 2,
                    "Name": "PO_AT_SET"
                },
                {
                    "Address": 706,
                    "LabelType": 2,
                    "Name": "PO_TAB"
                },
                {
                    "Address": 707,
                    "LabelType": 2,
                    "Name": "PO_FILL"
                },
                {
                    "Address": 720,
                    "LabelType": 2,
                    "Name": "PO_SPACE"
                },
                {
                    "Address": 729,
                    "LabelType": 2,
                    "Name": "PO_ABLE"
                },
                {
                    "Address": 732,
                    "LabelType": 2,
                    "Name": "PO_STORE"
                },
                {
                    "Address": 752,
                    "LabelType": 2,
                    "Name": "PO_ST_E"
                },
                {
                    "Address": 764,
                    "LabelType": 2,
                    "Name": "PO_ST_PR"
                },
                {
                    "Address": 771,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "PO_FETCH"
                },
                {
                    "Address": 797,
                    "LabelType": 2,
                    "Name": "PO_F_PR"
                },
                {
                    "Address": 804,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "PO_ANY"
                },
                {
                    "Address": 824,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "PO_GR_1"
                },
                {
                    "Address": 830,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "PO_GR_2"
                },
                {
                    "Address": 844,
                    "LabelType": 2,
                    "Name": "PO_GR_3"
                },
                {
                    "Address": 850,
                    "LabelType": 2,
                    "Name": "PO_T_UDG"
                },
                {
                    "Address": 863,
                    "LabelType": 2,
                    "Name": "PO_T"
                },
                {
                    "Address": 869,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "PO_CHAR"
                },
                {
                    "Address": 874,
                    "LabelType": 2,
                    "Name": "PO_CHAR_2"
                },
                {
                    "Address": 886,
                    "LabelType": 2,
                    "Name": "PO_CHAR_3"
                },
                {
                    "Address": 895,
                    "LabelType": 2,
                    "Name": "PR_ALL"
                },
                {
                    "Address": 915,
                    "LabelType": 2,
                    "Name": "PR_ALL_1"
                },
                {
                    "Address": 932,
                    "LabelType": 2,
                    "Name": "PR_ALL_2"
                },
                {
                    "Address": 950,
                    "LabelType": 2,
                    "Name": "PR_ALL_3"
                },
                {
                    "Address": 951,
                    "LabelType": 2,
                    "Name": "PR_ALL_4"
                },
                {
                    "Address": 961,
                    "LabelType": 2,
                    "Name": "PR_ALL_5"
                },
                {
                    "Address": 979,
                    "LabelType": 2,
                    "Name": "PR_ALL_6"
                },
                {
                    "Address": 987,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "PO_ATTR"
                },
                {
                    "Address": 1018,
                    "LabelType": 2,
                    "Name": "PO_ATTR_1"
                }
            ],
            "PageId": 2
        },
        {
            "CodeInfo": [
                {
                    "Address": 0,
                    "ByteSize": 2,
                    "Comment": "{The old ink colour is ignored and depending on whether"
                },
                {
                    "Address": 2,
                    "ByteSize": 2,
                    "Comment": "the paper colour is light or dark the new ink colour"
                },
                {
                    "Address": 4,
                    "ByteSize": 2,
                    "Comment": "will be black (000) or white (111).",
                    "OperandType": 2
                },
                {
                    "Address": 6,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 8,
                    "ByteSize": 1,
                    "Comment": "{Enter the new attribute value and return."
                },
                {
                    "Address": 9,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 10,
                    "ByteSize": 1,
                    "Comment": "{The high byte of the last entry on the machine stack"
                },
                {
                    "Address": 11,
                    "ByteSize": 2,
                    "Comment": "is made zero so as to suppress trailing spaces (see"
                },
                {
                    "Address": 13,
                    "ByteSize": 1,
                    "Comment": "below).}"
                },
                {
                    "Address": 14,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 16,
                    "ByteSize": 3,
                    "Comment": "The base address of the #ADDR:0x0095#(token table)."
                },
                {
                    "Address": 19,
                    "ByteSize": 1,
                    "Comment": "Save the code on the stack. (Range &00 to &5A, RND to\nCOPY)."
                },
                {
                    "Address": 20,
                    "ByteSize": 3,
                    "Comment": "Locate the required entry.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 23,
                    "ByteSize": 2,
                    "Comment": "Print the message/token.",
                    "OperandType": 2
                },
                {
                    "Address": 25,
                    "ByteSize": 2,
                    "Comment": "{A 'space' will be printed before the message/token if"
                },
                {
                    "Address": 27,
                    "ByteSize": 4,
                    "Comment": "required (bit 0 of \\#SYSVAR(FLAGS) reset)."
                },
                {
                    "Address": 31,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 34,
                    "ByteSize": 1,
                    "Comment": "Collect a code."
                },
                {
                    "Address": 35,
                    "ByteSize": 2,
                    "Comment": "Cancel any 'inverted bit'."
                },
                {
                    "Address": 37,
                    "ByteSize": 3,
                    "Comment": "Print the character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 40,
                    "ByteSize": 1,
                    "Comment": "Collect the code again."
                },
                {
                    "Address": 41,
                    "ByteSize": 1,
                    "Comment": "Advance the pointer."
                },
                {
                    "Address": 42,
                    "ByteSize": 1,
                    "Comment": "{The 'inverted bit' goes to the carry flag and signals"
                },
                {
                    "Address": 43,
                    "ByteSize": 2,
                    "Comment": "the end of the message/token; otherwise jump back.}",
                    "OperandType": 2
                },
                {
                    "Address": 45,
                    "ByteSize": 1,
                    "Comment": "For messages, #REG:D# holds &00; for tokens, #REG:D# holds\n&00 to &5A."
                },
                {
                    "Address": 46,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if the last character was a '$'."
                },
                {
                    "Address": 48,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 50,
                    "ByteSize": 2,
                    "Comment": "{Return if the last character was any other before 'A'."
                },
                {
                    "Address": 52,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 53,
                    "ByteSize": 1,
                    "Comment": "{Examine the value in #REG:D# and return if it indicates"
                },
                {
                    "Address": 54,
                    "ByteSize": 2,
                    "Comment": "a message, RND, INKEY$ or PI."
                },
                {
                    "Address": 56,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 57,
                    "ByteSize": 2,
                    "Comment": "All other cases will require a 'trailing space'."
                },
                {
                    "Address": 59,
                    "ByteSize": 1,
                    "Comment": "Save the #REG:DE# register pair."
                },
                {
                    "Address": 60,
                    "ByteSize": 1,
                    "Comment": "Save #REG:HL# and #REG:BC#."
                },
                {
                    "Address": 61,
                    "ByteSize": 1,
                    "Comment": "Print the single character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 62,
                    "ByteSize": 1,
                    "Comment": "Restore #REG:HL# and #REG:BC#."
                },
                {
                    "Address": 63,
                    "ByteSize": 1,
                    "Comment": "Restore #REG:DE#."
                },
                {
                    "Address": 64,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 65,
                    "ByteSize": 1,
                    "Comment": "Save the 'entry number'."
                },
                {
                    "Address": 66,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# now holds the base address."
                },
                {
                    "Address": 67,
                    "ByteSize": 1,
                    "Comment": "Compensate for the '\\#S/DEC A/' below."
                },
                {
                    "Address": 68,
                    "ByteSize": 2,
                    "Comment": "{Wait for an 'inverted character'."
                },
                {
                    "Address": 70,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 71,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 73,
                    "ByteSize": 1,
                    "Comment": "{Count through the entries until the correct one is"
                },
                {
                    "Address": 74,
                    "ByteSize": 2,
                    "Comment": "found.}",
                    "OperandType": 2
                },
                {
                    "Address": 76,
                    "ByteSize": 1,
                    "Comment": "#REG:DE# points to the initial character."
                },
                {
                    "Address": 77,
                    "ByteSize": 1,
                    "Comment": "{Fetch the 'entry number' and return with carry set for"
                },
                {
                    "Address": 78,
                    "ByteSize": 2,
                    "Comment": "the first thirty two entries."
                },
                {
                    "Address": 80,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 81,
                    "ByteSize": 1,
                    "Comment": "{However if the initial character is a letter then a"
                },
                {
                    "Address": 82,
                    "ByteSize": 2,
                    "Comment": "leading space may be needed."
                },
                {
                    "Address": 84,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 85,
                    "ByteSize": 4,
                    "Comment": "{Return immediately if the printer is being used (bit 1"
                },
                {
                    "Address": 89,
                    "ByteSize": 1,
                    "Comment": "of \\#SYSVAR(FLAGS) set).}"
                },
                {
                    "Address": 90,
                    "ByteSize": 3,
                    "Comment": "{Pre-load the machine stack with the address of"
                },
                {
                    "Address": 93,
                    "ByteSize": 1,
                    "Comment": "#ADDR:0x0DD9#.}"
                },
                {
                    "Address": 94,
                    "ByteSize": 1,
                    "Comment": "Transfer the line number."
                },
                {
                    "Address": 95,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if considering 'INPUT ... AT ...' (bit 0"
                },
                {
                    "Address": 99,
                    "ByteSize": 3,
                    "Comment": "of \\#SYSVAR(TV-FLAG) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 102,
                    "ByteSize": 3,
                    "Comment": "{Return, via #ADDR:0x0DD9#, if the line number is greater"
                },
                {
                    "Address": 105,
                    "ByteSize": 2,
                    "Comment": "than the value of \\#SYSVAR(DF-SZ); give report 5 if it",
                    "OperandType": 2
                },
                {
                    "Address": 107,
                    "ByteSize": 1,
                    "Comment": "is less; otherwise continue.}"
                },
                {
                    "Address": 108,
                    "ByteSize": 4,
                    "Comment": "{Jump forward unless dealing with an 'automatic"
                },
                {
                    "Address": 112,
                    "ByteSize": 2,
                    "Comment": "listing' (bit 4 of \\#SYSVAR(TV-FLAG) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 114,
                    "ByteSize": 3,
                    "Comment": "Fetch the line counter from \\#SYSVAR(BREG)."
                },
                {
                    "Address": 117,
                    "ByteSize": 1,
                    "Comment": "Decrease this counter."
                },
                {
                    "Address": 118,
                    "ByteSize": 2,
                    "Comment": "Jump forward if the listing is to be scrolled.",
                    "OperandType": 2
                },
                {
                    "Address": 120,
                    "ByteSize": 2,
                    "Comment": "{Otherwise open channel 'K', restore the stack pointer,"
                },
                {
                    "Address": 122,
                    "ByteSize": 3,
                    "Comment": "flag that the automatic listing has finished (reset bit",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 125,
                    "ByteSize": 4,
                    "Comment": "4 of \\#SYSVAR(TV-FLAG)) and return via #ADDR:0x0DD9#.",
                    "OperandType": 1
                },
                {
                    "Address": 129,
                    "ByteSize": 4,
                    "Comment": " "
                },
                {
                    "Address": 133,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 134,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 136,
                    "ByteSize": 3,
                    "Comment": "{Decrease the scroll counter (\\#SYSVAR(SCR-CT)) and"
                },
                {
                    "Address": 139,
                    "ByteSize": 2,
                    "Comment": "proceed to give the prompt only if it becomes zero.}",
                    "OperandType": 2
                },
                {
                    "Address": 141,
                    "ByteSize": 2,
                    "Comment": "{The scroll counter (\\#SYSVAR(SCR-CT)) is reset."
                },
                {
                    "Address": 143,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 144,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 147,
                    "ByteSize": 3,
                    "Comment": "{The current values of \\#SYSVAR(ATTR-T) and",
                    "OperandType": 1
                },
                {
                    "Address": 150,
                    "ByteSize": 1,
                    "Comment": "\\#SYSVAR(MASK-T) are saved.}"
                },
                {
                    "Address": 151,
                    "ByteSize": 3,
                    "Comment": "{The current value of \\#SYSVAR(P-FLAG) is saved.",
                    "OperandType": 1
                },
                {
                    "Address": 154,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 155,
                    "ByteSize": 2,
                    "Comment": "{Channel 'K' is opened."
                },
                {
                    "Address": 157,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 160,
                    "ByteSize": 1,
                    "Comment": "{The message 'scroll?' is message '0'. This message is"
                },
                {
                    "Address": 161,
                    "ByteSize": 3,
                    "Comment": "now printed."
                },
                {
                    "Address": 164,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 167,
                    "ByteSize": 4,
                    "Comment": "Signal 'clear the lower screen after a keystroke' (set\nbit 5 of \\#SYSVAR(TV-FLAG))."
                },
                {
                    "Address": 171,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(FLAGS)."
                },
                {
                    "Address": 174,
                    "ByteSize": 2,
                    "Comment": "Signal 'L mode'."
                },
                {
                    "Address": 176,
                    "ByteSize": 2,
                    "Comment": "Signal 'no key yet'."
                },
                {
                    "Address": 178,
                    "ByteSize": 1,
                    "Comment": "Note: #REG:DE# \\#BUG\\#scrollingTokens(should be pushed\nalso)."
                },
                {
                    "Address": 179,
                    "ByteSize": 3,
                    "Comment": "Fetch a single key code.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 182,
                    "ByteSize": 1,
                    "Comment": "Restore the registers."
                },
                {
                    "Address": 183,
                    "ByteSize": 2,
                    "Comment": "{There is a jump forward to #ADDR:0x0D00# - 'BREAK - CONT"
                },
                {
                    "Address": 185,
                    "ByteSize": 2,
                    "Comment": "repeats' - if the keystroke was 'BREAK', 'STOP', 'N' or",
                    "OperandType": 2
                },
                {
                    "Address": 187,
                    "ByteSize": 2,
                    "Comment": "'n'; otherwise accept the keystroke as indicating the"
                },
                {
                    "Address": 189,
                    "ByteSize": 2,
                    "Comment": "need to scroll the display.",
                    "OperandType": 2
                },
                {
                    "Address": 191,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 193,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 195,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 197,
                    "ByteSize": 2,
                    "Comment": "{Open channel 'S'."
                },
                {
                    "Address": 199,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 202,
                    "ByteSize": 1,
                    "Comment": "{Restore the value of \\#SYSVAR(P-FLAG)."
                },
                {
                    "Address": 203,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 206,
                    "ByteSize": 1,
                    "Comment": "{Restore the values of \\#SYSVAR(ATTR-T) and"
                },
                {
                    "Address": 207,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(MASK-T).}",
                    "OperandType": 1
                },
                {
                    "Address": 210,
                    "ByteSize": 3,
                    "Comment": "The whole display is scrolled.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 213,
                    "ByteSize": 3,
                    "Comment": "{The line (\\#SYSVAR(DF-SZ)) and column numbers for the"
                },
                {
                    "Address": 216,
                    "ByteSize": 1,
                    "Comment": "start of the line above the lower part of the display"
                },
                {
                    "Address": 217,
                    "ByteSize": 2,
                    "Comment": "are found and saved."
                },
                {
                    "Address": 219,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 220,
                    "ByteSize": 3,
                    "Comment": "{The corresponding attribute byte for this character",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 223,
                    "ByteSize": 1,
                    "Comment": "area is then found. The #REG:HL# register pair holds the"
                },
                {
                    "Address": 224,
                    "ByteSize": 1,
                    "Comment": "address of the byte."
                },
                {
                    "Address": 225,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 226,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 227,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 229,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 231,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 232,
                    "ByteSize": 3,
                    "Comment": "#REG:DE# points to the first attribute byte of the bottom\nline."
                },
                {
                    "Address": 235,
                    "ByteSize": 1,
                    "Comment": "The value is fetched."
                },
                {
                    "Address": 236,
                    "ByteSize": 1,
                    "Comment": "The 'lower part' value."
                },
                {
                    "Address": 237,
                    "ByteSize": 2,
                    "Comment": "There are thirty two bytes."
                },
                {
                    "Address": 239,
                    "ByteSize": 1,
                    "Comment": "Exchange the pointers."
                },
                {
                    "Address": 240,
                    "ByteSize": 1,
                    "Comment": "{Make the first exchange and then proceed to use the"
                },
                {
                    "Address": 241,
                    "ByteSize": 1,
                    "Comment": "same values for the thirty two attribute bytes of the"
                },
                {
                    "Address": 242,
                    "ByteSize": 1,
                    "Comment": "two lines being handled."
                },
                {
                    "Address": 243,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 244,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 246,
                    "ByteSize": 1,
                    "Comment": "{The line and column numbers of the bottom line of the"
                },
                {
                    "Address": 247,
                    "ByteSize": 1,
                    "Comment": "'upper part' are fetched before returning.}"
                },
                {
                    "Address": 256,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 258,
                    "ByteSize": 2,
                    "Comment": "{The 'out of screen' error is given if the lower part"
                },
                {
                    "Address": 260,
                    "ByteSize": 2,
                    "Comment": "is going to be 'too large' (see \\#SYSVAR(DF-SZ)) and a",
                    "OperandType": 2
                },
                {
                    "Address": 262,
                    "ByteSize": 3,
                    "Comment": "return made if scrolling is unnecessary."
                },
                {
                    "Address": 265,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 267,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 268,
                    "ByteSize": 2,
                    "Comment": "The #REG:A# register will now hold 'the number of scrolls\nto be made'."
                },
                {
                    "Address": 270,
                    "ByteSize": 1,
                    "Comment": "The line and column numbers are now saved."
                },
                {
                    "Address": 271,
                    "ByteSize": 1,
                    "Comment": "{The 'scroll number', \\#SYSVAR(ATTR-T), \\#SYSVAR(MASK-T)"
                },
                {
                    "Address": 272,
                    "ByteSize": 3,
                    "Comment": "and \\#SYSVAR(P-FLAG) are all saved.",
                    "OperandType": 1
                },
                {
                    "Address": 275,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 276,
                    "ByteSize": 3,
                    "Comment": " ",
                    "OperandType": 1
                },
                {
                    "Address": 279,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 280,
                    "ByteSize": 3,
                    "Comment": "The 'permanent' colour items are to be used.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 283,
                    "ByteSize": 1,
                    "Comment": "The 'scroll number' is fetched."
                },
                {
                    "Address": 284,
                    "ByteSize": 1,
                    "Comment": "Save the 'number'."
                },
                {
                    "Address": 285,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(DF-SZ)."
                },
                {
                    "Address": 288,
                    "ByteSize": 1,
                    "Comment": "{The value in \\#SYSVAR(DF-SZ) is incremented; the #REG:B#"
                },
                {
                    "Address": 289,
                    "ByteSize": 1,
                    "Comment": "register set to hold the former value and the #REG:A#"
                },
                {
                    "Address": 290,
                    "ByteSize": 1,
                    "Comment": "register the new value."
                },
                {
                    "Address": 291,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 292,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(S-POSN-hi)."
                },
                {
                    "Address": 295,
                    "ByteSize": 1,
                    "Comment": "{The jump is taken if only the lower part of the"
                },
                {
                    "Address": 296,
                    "ByteSize": 2,
                    "Comment": "display is to be scrolled (#REG:B#=old \\#SYSVAR(DF-SZ)).}",
                    "OperandType": 2
                },
                {
                    "Address": 298,
                    "ByteSize": 1,
                    "Comment": "{Otherwise \\#SYSVAR(S-POSN-hi) is incremented and the"
                },
                {
                    "Address": 299,
                    "ByteSize": 2,
                    "Comment": "whole display scrolled (#REG:B#=&18).}"
                },
                {
                    "Address": 301,
                    "ByteSize": 3,
                    "Comment": "Scroll #REG:B# lines.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 304,
                    "ByteSize": 1,
                    "Comment": "{Fetch and decrement the 'scroll number'."
                },
                {
                    "Address": 305,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 306,
                    "ByteSize": 2,
                    "Comment": "Jump back until finished.",
                    "OperandType": 2
                },
                {
                    "Address": 308,
                    "ByteSize": 1,
                    "Comment": "{Restore the value of \\#SYSVAR(P-FLAG)."
                },
                {
                    "Address": 309,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 312,
                    "ByteSize": 1,
                    "Comment": "{Restore the values of \\#SYSVAR(ATTR-T) and"
                },
                {
                    "Address": 313,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(MASK-T).}",
                    "OperandType": 1
                },
                {
                    "Address": 316,
                    "ByteSize": 4,
                    "Comment": "{In case \\#SYSVAR(S-POSN) has been changed #ADDR:0x0DD9# is",
                    "OperandType": 1
                },
                {
                    "Address": 320,
                    "ByteSize": 4,
                    "Comment": "called to give a matching value to \\#SYSVAR(DF-CC)"
                },
                {
                    "Address": 324,
                    "ByteSize": 3,
                    "Comment": "(after resetting bit 0 of \\#SYSVAR(TV-FLAG)).}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 327,
                    "ByteSize": 4,
                    "Comment": "{Set bit 0 of \\#SYSVAR(TV-FLAG) to indicate that the"
                },
                {
                    "Address": 331,
                    "ByteSize": 1,
                    "Comment": "lower screen is being handled, fetch the line and"
                },
                {
                    "Address": 332,
                    "ByteSize": 1,
                    "Comment": "column numbers, and then return.}"
                },
                {
                    "Address": 333,
                    "ByteSize": 1,
                    "Comment": "#REG:A# is set to hold &00."
                },
                {
                    "Address": 334,
                    "ByteSize": 3,
                    "Comment": "The current values of \\#SYSVAR(ATTR-P) and\n\\#SYSVAR(MASK-P) are fetched.",
                    "OperandType": 1
                },
                {
                    "Address": 337,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if handing the main part of the screen"
                },
                {
                    "Address": 341,
                    "ByteSize": 2,
                    "Comment": "(bit 0 of \\#SYSVAR(TV-FLAG) reset).}",
                    "OperandType": 2
                },
                {
                    "Address": 343,
                    "ByteSize": 1,
                    "Comment": "{Otherwise use &00 and the value in \\#SYSVAR(BORDCR)"
                },
                {
                    "Address": 344,
                    "ByteSize": 3,
                    "Comment": "instead.}"
                },
                {
                    "Address": 347,
                    "ByteSize": 3,
                    "Comment": "Now set \\#SYSVAR(ATTR-T) and \\#SYSVAR(MASK-T).",
                    "OperandType": 1
                },
                {
                    "Address": 350,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(P-FLAG)."
                },
                {
                    "Address": 353,
                    "ByteSize": 2,
                    "Comment": "Jump forward if dealing with the lower part of the\nscreen (#REG:A#=&00).",
                    "OperandType": 2
                },
                {
                    "Address": 355,
                    "ByteSize": 1,
                    "Comment": "{Otherwise fetch the value of \\#SYSVAR(P-FLAG) and move"
                },
                {
                    "Address": 356,
                    "ByteSize": 1,
                    "Comment": "the odd bits to the even bits.}"
                },
                {
                    "Address": 357,
                    "ByteSize": 1,
                    "Comment": "{Proceed to copy the even bits of #REG:A# to"
                },
                {
                    "Address": 358,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(P-FLAG)."
                },
                {
                    "Address": 360,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 361,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 362,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 363,
                    "ByteSize": 3,
                    "Comment": "The whole of the display is 'cleared'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 366,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(TV-FLAG)."
                },
                {
                    "Address": 369,
                    "ByteSize": 2,
                    "Comment": "Signal 'do not clear the lower screen after\nkeystroke'."
                },
                {
                    "Address": 371,
                    "ByteSize": 2,
                    "Comment": "Signal 'lower part'."
                },
                {
                    "Address": 373,
                    "ByteSize": 3,
                    "Comment": "Use the permanent values, i.e. \\#SYSVAR(ATTR-T) is\ncopied from \\#SYSVAR(BORDCR).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 376,
                    "ByteSize": 3,
                    "Comment": "{The lower part of the screen is now 'cleared' with"
                },
                {
                    "Address": 379,
                    "ByteSize": 3,
                    "Comment": "these values (#REG:B#=\\#SYSVAR(DF-SZ)).}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 382,
                    "ByteSize": 3,
                    "Comment": "Attribute byte at start of line 22."
                },
                {
                    "Address": 385,
                    "ByteSize": 3,
                    "Comment": "Fetch \\#SYSVAR(ATTR-P).",
                    "OperandType": 1
                },
                {
                    "Address": 388,
                    "ByteSize": 1,
                    "Comment": "The line counter."
                },
                {
                    "Address": 389,
                    "ByteSize": 2,
                    "Comment": "Jump forward into the loop.",
                    "OperandType": 2
                },
                {
                    "Address": 391,
                    "ByteSize": 2,
                    "Comment": "&20 characters per line."
                },
                {
                    "Address": 393,
                    "ByteSize": 1,
                    "Comment": "{Go back along the line setting the attribute bytes."
                },
                {
                    "Address": 394,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 395,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 396,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 398,
                    "ByteSize": 2,
                    "Comment": "Loop back until finished.",
                    "OperandType": 2
                },
                {
                    "Address": 400,
                    "ByteSize": 4,
                    "Comment": "It will be two lines in size (\\#SYSVAR(DF-SZ))."
                },
                {
                    "Address": 404,
                    "ByteSize": 2,
                    "Comment": "{Open channel 'K'."
                },
                {
                    "Address": 406,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 409,
                    "ByteSize": 3,
                    "Comment": "{Fetch the address of the current channel",
                    "OperandType": 1
                },
                {
                    "Address": 412,
                    "ByteSize": 3,
                    "Comment": "(\\#SYSVAR(CURCHL)) and make the output address #ADDR:0x09F4#"
                },
                {
                    "Address": 415,
                    "ByteSize": 1,
                    "Comment": "and the input address #ADDR:0x10A8#."
                },
                {
                    "Address": 416,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 417,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 418,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 419,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 420,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 423,
                    "ByteSize": 1,
                    "Comment": "{First the output address then the input address."
                },
                {
                    "Address": 424,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 426,
                    "ByteSize": 3,
                    "Comment": "As the lower part of the display is being handled the\n'lower print line' will be line 23."
                },
                {
                    "Address": 429,
                    "ByteSize": 2,
                    "Comment": "Return via #ADDR:0x0DD9#.",
                    "OperandType": 2
                },
                {
                    "Address": 431,
                    "ByteSize": 3,
                    "Comment": "{The system variable \\#SYSVAR(COORDS) is reset to zero."
                },
                {
                    "Address": 434,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 437,
                    "ByteSize": 4,
                    "Comment": "Signal 'the screen is clear' (reset bit 0 of\n#ADDR:0x5C6A#(FLAGS2))."
                },
                {
                    "Address": 441,
                    "ByteSize": 3,
                    "Comment": "Perform the 'house keeping' tasks.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 444,
                    "ByteSize": 2,
                    "Comment": "{Open channel 'S'."
                },
                {
                    "Address": 446,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 449,
                    "ByteSize": 3,
                    "Comment": "Use the 'permanent' values.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 452,
                    "ByteSize": 2,
                    "Comment": "{Now 'clear' the 24 lines of the display."
                },
                {
                    "Address": 454,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 457,
                    "ByteSize": 3,
                    "Comment": "{Ensure that the current output address (at",
                    "OperandType": 1
                },
                {
                    "Address": 460,
                    "ByteSize": 3,
                    "Comment": "(\\#SYSVAR(CURCHL))) is #ADDR:0x09F4#."
                },
                {
                    "Address": 463,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 464,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 465,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 466,
                    "ByteSize": 4,
                    "Comment": "Reset the scroll counter (\\#SYSVAR(SCR-CT))."
                },
                {
                    "Address": 470,
                    "ByteSize": 3,
                    "Comment": "As the upper part of the display is being handled the\n'upper print line' will be line 0."
                },
                {
                    "Address": 473,
                    "ByteSize": 3,
                    "Comment": "The start of the printer buffer."
                },
                {
                    "Address": 476,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if handling the printer buffer (bit 1 of"
                },
                {
                    "Address": 480,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(FLAGS) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 482,
                    "ByteSize": 1,
                    "Comment": "Transfer the line number."
                },
                {
                    "Address": 483,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if handling the main part of the display"
                },
                {
                    "Address": 487,
                    "ByteSize": 2,
                    "Comment": "(bit 0 of \\#SYSVAR(TV-FLAG) reset).}",
                    "OperandType": 2
                },
                {
                    "Address": 489,
                    "ByteSize": 3,
                    "Comment": "{The top line of the lower part of the display is"
                },
                {
                    "Address": 492,
                    "ByteSize": 2,
                    "Comment": "called 'line &18' and this has to be converted (see\n\\#SYSVAR(DF-SZ)).}"
                },
                {
                    "Address": 494,
                    "ByteSize": 1,
                    "Comment": "The line and column numbers are saved."
                },
                {
                    "Address": 495,
                    "ByteSize": 1,
                    "Comment": "The line number is moved."
                },
                {
                    "Address": 496,
                    "ByteSize": 3,
                    "Comment": "The address for the start of the line is formed in\n#REG:HL#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 499,
                    "ByteSize": 1,
                    "Comment": "The line and column numbers are fetched back."
                },
                {
                    "Address": 500,
                    "ByteSize": 2,
                    "Comment": "{The column number is now reversed and transferred to"
                },
                {
                    "Address": 502,
                    "ByteSize": 1,
                    "Comment": "the #REG:DE# register pair."
                },
                {
                    "Address": 503,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 504,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 506,
                    "ByteSize": 1,
                    "Comment": "{The required address is now formed, and the address"
                },
                {
                    "Address": 507,
                    "ByteSize": 3,
                    "Comment": "and the line and column numbers are stored by jumping\nto #ADDR:0x0ADC#.}",
                    "OperandType": 2
                },
                {
                    "Address": 510,
                    "ByteSize": 2,
                    "Comment": "The entry point after 'scroll?'"
                },
                {
                    "Address": 512,
                    "ByteSize": 3,
                    "Comment": "Find the starting address of the line.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 515,
                    "ByteSize": 2,
                    "Comment": "There are eight pixel lines to a complete line."
                },
                {
                    "Address": 517,
                    "ByteSize": 1,
                    "Comment": "Save both counters."
                },
                {
                    "Address": 518,
                    "ByteSize": 1,
                    "Comment": "Save the starting address."
                },
                {
                    "Address": 519,
                    "ByteSize": 1,
                    "Comment": "{Jump forward unless dealing at the present moment with"
                },
                {
                    "Address": 520,
                    "ByteSize": 2,
                    "Comment": "a 'third' of the display."
                },
                {
                    "Address": 522,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 523,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 525,
                    "ByteSize": 1,
                    "Comment": "{The result of this manipulation is to leave #REG:HL#"
                },
                {
                    "Address": 526,
                    "ByteSize": 3,
                    "Comment": "unchanged and #REG:DE# pointing to the required"
                },
                {
                    "Address": 529,
                    "ByteSize": 1,
                    "Comment": "destination."
                },
                {
                    "Address": 530,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 531,
                    "ByteSize": 3,
                    "Comment": "There are &20 characters."
                },
                {
                    "Address": 534,
                    "ByteSize": 1,
                    "Comment": "Decrease the counter as one line is being dealt with."
                },
                {
                    "Address": 535,
                    "ByteSize": 2,
                    "Comment": "Now move the thirty two bytes."
                },
                {
                    "Address": 537,
                    "ByteSize": 1,
                    "Comment": "{Again #REG:DE# is made to point to the required"
                },
                {
                    "Address": 538,
                    "ByteSize": 3,
                    "Comment": "destination, this time only thirty two locations away."
                },
                {
                    "Address": 541,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 542,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 543,
                    "ByteSize": 1,
                    "Comment": "Save the line number in #REG:B#."
                },
                {
                    "Address": 544,
                    "ByteSize": 2,
                    "Comment": "{Now find how many characters there are remaining in the"
                },
                {
                    "Address": 546,
                    "ByteSize": 1,
                    "Comment": "'third'."
                },
                {
                    "Address": 547,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 548,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 549,
                    "ByteSize": 1,
                    "Comment": "Pass the 'character total' to the #REG:C# register."
                },
                {
                    "Address": 550,
                    "ByteSize": 1,
                    "Comment": "Fetch the line number."
                },
                {
                    "Address": 551,
                    "ByteSize": 2,
                    "Comment": "{#REG:BC# holds the 'character total' and a pixel line"
                },
                {
                    "Address": 553,
                    "ByteSize": 2,
                    "Comment": "from each of the characters is 'scrolled'.}"
                },
                {
                    "Address": 555,
                    "ByteSize": 2,
                    "Comment": "Now prepare to increment the address to jump across a\n'third' boundary."
                },
                {
                    "Address": 557,
                    "ByteSize": 1,
                    "Comment": "Increase #REG:HL# by &0700."
                },
                {
                    "Address": 558,
                    "ByteSize": 2,
                    "Comment": "{Jump back if there are any 'thirds' left to consider."
                },
                {
                    "Address": 560,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 562,
                    "ByteSize": 1,
                    "Comment": "Fetch the original address."
                },
                {
                    "Address": 563,
                    "ByteSize": 1,
                    "Comment": "Address the next pixel line."
                },
                {
                    "Address": 564,
                    "ByteSize": 1,
                    "Comment": "Fetch the counters."
                },
                {
                    "Address": 565,
                    "ByteSize": 1,
                    "Comment": "{Decrease the pixel line counter and jump back unless"
                },
                {
                    "Address": 566,
                    "ByteSize": 2,
                    "Comment": "eight lines have been moved.}",
                    "OperandType": 2
                },
                {
                    "Address": 568,
                    "ByteSize": 3,
                    "Comment": "The required address in the attribute area and the\nnumber of characters in #REG:B# lines are found.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 571,
                    "ByteSize": 3,
                    "Comment": "{The displacement for all the attribute bytes is thirty"
                },
                {
                    "Address": 574,
                    "ByteSize": 1,
                    "Comment": "two locations away."
                },
                {
                    "Address": 575,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 576,
                    "ByteSize": 2,
                    "Comment": "The attribute bytes are 'scrolled'."
                },
                {
                    "Address": 578,
                    "ByteSize": 2,
                    "Comment": "The #REG:B# register is loaded with &01 and #ADDR:0x0E44# is\nentered."
                },
                {
                    "Address": 580,
                    "ByteSize": 1,
                    "Comment": "The line number is saved for the duration of the\nsubroutine."
                },
                {
                    "Address": 581,
                    "ByteSize": 3,
                    "Comment": "The starting address for the line is formed in #REG:HL#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 584,
                    "ByteSize": 2,
                    "Comment": "Again there are eight pixel lines to be considered."
                },
                {
                    "Address": 586,
                    "ByteSize": 1,
                    "Comment": "Save the line number and the pixel line counter."
                },
                {
                    "Address": 587,
                    "ByteSize": 1,
                    "Comment": "Save the address."
                },
                {
                    "Address": 588,
                    "ByteSize": 1,
                    "Comment": "Save the line number in #REG:A#."
                },
                {
                    "Address": 589,
                    "ByteSize": 2,
                    "Comment": "{Find how many characters are involved in '#REG:B# mod 8'"
                },
                {
                    "Address": 591,
                    "ByteSize": 1,
                    "Comment": "lines. Pass the result to the #REG:C# register. (#REG:C#"
                },
                {
                    "Address": 592,
                    "ByteSize": 1,
                    "Comment": "will hold &00, i.e. 256, for a 'third'.)"
                },
                {
                    "Address": 593,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 594,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 595,
                    "ByteSize": 1,
                    "Comment": "Fetch the line number."
                },
                {
                    "Address": 596,
                    "ByteSize": 2,
                    "Comment": "{Make the #REG:BC# register pair hold one less than the"
                },
                {
                    "Address": 598,
                    "ByteSize": 1,
                    "Comment": "number of characters.}"
                },
                {
                    "Address": 599,
                    "ByteSize": 1,
                    "Comment": "{Make #REG:DE# point to the first character."
                },
                {
                    "Address": 600,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 601,
                    "ByteSize": 2,
                    "Comment": "Clear the pixel-byte of the first character."
                },
                {
                    "Address": 603,
                    "ByteSize": 1,
                    "Comment": "{Make #REG:DE# point to the second character and then"
                },
                {
                    "Address": 604,
                    "ByteSize": 2,
                    "Comment": "clear the pixel-bytes of all the other characters.}"
                },
                {
                    "Address": 606,
                    "ByteSize": 3,
                    "Comment": "{For each 'third' of the display #REG:HL# has to be"
                },
                {
                    "Address": 609,
                    "ByteSize": 1,
                    "Comment": "increased by &0701.}"
                },
                {
                    "Address": 610,
                    "ByteSize": 1,
                    "Comment": "Now decrease the line number."
                },
                {
                    "Address": 611,
                    "ByteSize": 2,
                    "Comment": "{Discard any extra lines and pass the 'third' count to"
                },
                {
                    "Address": 613,
                    "ByteSize": 1,
                    "Comment": "#REG:B#.}"
                },
                {
                    "Address": 614,
                    "ByteSize": 2,
                    "Comment": "Jump back if there are still 'thirds' to be dealt with.",
                    "OperandType": 2
                },
                {
                    "Address": 616,
                    "ByteSize": 1,
                    "Comment": "{Update the address for each pixel line."
                },
                {
                    "Address": 617,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 618,
                    "ByteSize": 1,
                    "Comment": "Fetch the counters."
                },
                {
                    "Address": 619,
                    "ByteSize": 1,
                    "Comment": "{Decrease the pixel line counter and jump back unless"
                },
                {
                    "Address": 620,
                    "ByteSize": 2,
                    "Comment": "finished.}",
                    "OperandType": 2
                },
                {
                    "Address": 622,
                    "ByteSize": 3,
                    "Comment": "The address of the first attribute byte and the number\nof bytes are found.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 625,
                    "ByteSize": 1,
                    "Comment": "{#REG:HL# will point to the first attribute byte and"
                },
                {
                    "Address": 626,
                    "ByteSize": 1,
                    "Comment": "#REG:DE# the second."
                },
                {
                    "Address": 627,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 628,
                    "ByteSize": 3,
                    "Comment": "Fetch the value in \\#SYSVAR(ATTR-P).",
                    "OperandType": 1
                },
                {
                    "Address": 631,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if handling the main part of the screen"
                },
                {
                    "Address": 635,
                    "ByteSize": 2,
                    "Comment": "(bit 0 of \\#SYSVAR(TV-FLAG) reset).}",
                    "OperandType": 2
                },
                {
                    "Address": 637,
                    "ByteSize": 3,
                    "Comment": "Otherwise use \\#SYSVAR(BORDCR) instead.",
                    "OperandType": 1
                },
                {
                    "Address": 640,
                    "ByteSize": 1,
                    "Comment": "Set the attribute byte."
                },
                {
                    "Address": 641,
                    "ByteSize": 1,
                    "Comment": "One byte has been done."
                },
                {
                    "Address": 642,
                    "ByteSize": 2,
                    "Comment": "Now copy the value to all the attribute bytes."
                },
                {
                    "Address": 644,
                    "ByteSize": 1,
                    "Comment": "Restore the line number."
                },
                {
                    "Address": 645,
                    "ByteSize": 2,
                    "Comment": "{Set the column number to the lefthand column and"
                },
                {
                    "Address": 647,
                    "ByteSize": 1,
                    "Comment": "return.}"
                },
                {
                    "Address": 648,
                    "ByteSize": 1,
                    "Comment": "Fetch the high byte."
                },
                {
                    "Address": 649,
                    "ByteSize": 1,
                    "Comment": "{Multiply this value by thirty two."
                },
                {
                    "Address": 650,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 651,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 652,
                    "ByteSize": 1,
                    "Comment": "Go back to the 'eight' line."
                },
                {
                    "Address": 653,
                    "ByteSize": 2,
                    "Comment": "Address the attribute area."
                },
                {
                    "Address": 655,
                    "ByteSize": 1,
                    "Comment": "{Restore to the high byte and transfer the address to"
                },
                {
                    "Address": 656,
                    "ByteSize": 1,
                    "Comment": "#REG:DE#.}"
                },
                {
                    "Address": 657,
                    "ByteSize": 1,
                    "Comment": "This is always zero."
                },
                {
                    "Address": 658,
                    "ByteSize": 1,
                    "Comment": "The line number."
                },
                {
                    "Address": 659,
                    "ByteSize": 1,
                    "Comment": "{Multiply by thirty two."
                },
                {
                    "Address": 660,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 661,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 662,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 663,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 664,
                    "ByteSize": 1,
                    "Comment": "{Move the result to the #REG:BC# register pair before"
                },
                {
                    "Address": 665,
                    "ByteSize": 1,
                    "Comment": "returning."
                },
                {
                    "Address": 666,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 667,
                    "ByteSize": 2,
                    "Comment": "{The line number has to be reversed."
                },
                {
                    "Address": 669,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 670,
                    "ByteSize": 1,
                    "Comment": "The result is saved in #REG:D#."
                },
                {
                    "Address": 671,
                    "ByteSize": 1,
                    "Comment": "{In effect '(#REG:A# mod 8)*32'. In a 'third' of the"
                },
                {
                    "Address": 672,
                    "ByteSize": 1,
                    "Comment": "display the low byte for the first line is &00, for the"
                },
                {
                    "Address": 673,
                    "ByteSize": 1,
                    "Comment": "second line &20, etc."
                },
                {
                    "Address": 674,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 676,
                    "ByteSize": 1,
                    "Comment": "The low byte goes into #REG:L#."
                },
                {
                    "Address": 677,
                    "ByteSize": 1,
                    "Comment": "The true line number is fetched."
                },
                {
                    "Address": 678,
                    "ByteSize": 2,
                    "Comment": "{In effect '64+8*INT (#REG:A#/8)'. For the upper 'third'"
                },
                {
                    "Address": 680,
                    "ByteSize": 2,
                    "Comment": "of the display the high byte is &40, for the middle\n'third' &48, and for the lower 'third' &50.}"
                },
                {
                    "Address": 682,
                    "ByteSize": 1,
                    "Comment": "The high byte goes to #REG:H#."
                },
                {
                    "Address": 683,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 684,
                    "ByteSize": 1,
                    "Comment": "The maskable interrupt is disabled during COPY."
                },
                {
                    "Address": 685,
                    "ByteSize": 2,
                    "Comment": "The 176 lines."
                },
                {
                    "Address": 687,
                    "ByteSize": 3,
                    "Comment": "The base address of the display."
                },
                {
                    "Address": 690,
                    "ByteSize": 1,
                    "Comment": "{Save the base address and the number of the line."
                },
                {
                    "Address": 691,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 692,
                    "ByteSize": 3,
                    "Comment": "It is called 176 times.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 695,
                    "ByteSize": 1,
                    "Comment": "{Fetch the line number and the base address."
                },
                {
                    "Address": 696,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 697,
                    "ByteSize": 1,
                    "Comment": "The base address is updated by 256 locations for each\nline of pixels."
                },
                {
                    "Address": 698,
                    "ByteSize": 1,
                    "Comment": "{Jump forward and hence round the loop again directly"
                },
                {
                    "Address": 699,
                    "ByteSize": 2,
                    "Comment": "for the eight pixel lines of a character line."
                },
                {
                    "Address": 701,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 703,
                    "ByteSize": 1,
                    "Comment": "Fetch the low byte."
                },
                {
                    "Address": 704,
                    "ByteSize": 2,
                    "Comment": "Update it by &20 bytes."
                },
                {
                    "Address": 706,
                    "ByteSize": 1,
                    "Comment": "The carry flag will be reset when 'within thirds' of the\ndisplay."
                },
                {
                    "Address": 707,
                    "ByteSize": 1,
                    "Comment": "Change the carry flag."
                },
                {
                    "Address": 708,
                    "ByteSize": 1,
                    "Comment": "{The #REG:A# register will hold &F8 when within a 'third'"
                },
                {
                    "Address": 709,
                    "ByteSize": 2,
                    "Comment": "but &00 when a new 'third' is reached.}"
                },
                {
                    "Address": 711,
                    "ByteSize": 1,
                    "Comment": "{The high byte of the address is now updated."
                },
                {
                    "Address": 712,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 713,
                    "ByteSize": 2,
                    "Comment": "Jump back until 176 lines have been printed.",
                    "OperandType": 2
                },
                {
                    "Address": 715,
                    "ByteSize": 2,
                    "Comment": "Jump forward to the end routine.",
                    "OperandType": 2
                },
                {
                    "Address": 717,
                    "ByteSize": 1,
                    "Comment": "Disable the maskable interrupt."
                },
                {
                    "Address": 718,
                    "ByteSize": 3,
                    "Comment": "The base address of the printer buffer."
                },
                {
                    "Address": 721,
                    "ByteSize": 2,
                    "Comment": "There are eight pixel lines."
                },
                {
                    "Address": 723,
                    "ByteSize": 1,
                    "Comment": "Save the line number."
                },
                {
                    "Address": 724,
                    "ByteSize": 3,
                    "Comment": "Print the line.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 727,
                    "ByteSize": 1,
                    "Comment": "Fetch the line number."
                },
                {
                    "Address": 728,
                    "ByteSize": 2,
                    "Comment": "Jump back until 8 lines have been printed.",
                    "OperandType": 2
                },
                {
                    "Address": 730,
                    "ByteSize": 2,
                    "Comment": "{Stop the printer motor."
                },
                {
                    "Address": 732,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 734,
                    "ByteSize": 1,
                    "Comment": "Enable the maskable interrupt and continue into #ADDR:0x0EDF#."
                },
                {
                    "Address": 735,
                    "ByteSize": 3,
                    "Comment": "The base address of the printer buffer."
                },
                {
                    "Address": 738,
                    "ByteSize": 3,
                    "Comment": "Reset the printer 'column' at \\#SYSVAR(PR-CC)."
                },
                {
                    "Address": 741,
                    "ByteSize": 1,
                    "Comment": "Clear the #REG:A# register."
                },
                {
                    "Address": 742,
                    "ByteSize": 1,
                    "Comment": "Also clear the #REG:B# register (in effect #REG:B# holds\n256)."
                },
                {
                    "Address": 743,
                    "ByteSize": 1,
                    "Comment": "{The 256 bytes of the printer buffer are all cleared in"
                },
                {
                    "Address": 744,
                    "ByteSize": 1,
                    "Comment": "turn."
                },
                {
                    "Address": 745,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 747,
                    "ByteSize": 4,
                    "Comment": "Signal 'the buffer is empty' (reset bit 1 of\n#ADDR:0x5C6A#(FLAGS2))."
                },
                {
                    "Address": 751,
                    "ByteSize": 2,
                    "Comment": "{Set the printer position and return via #ADDR:0x0DD9# and"
                },
                {
                    "Address": 753,
                    "ByteSize": 3,
                    "Comment": "#ADDR:0x0ADC#.}",
                    "OperandType": 2
                },
                {
                    "Address": 756,
                    "ByteSize": 1,
                    "Comment": "Copy the pixel-line number."
                },
                {
                    "Address": 757,
                    "ByteSize": 2,
                    "Comment": "{The #REG:A# register will hold &00 until the last two"
                },
                {
                    "Address": 759,
                    "ByteSize": 1,
                    "Comment": "lines are being handled."
                },
                {
                    "Address": 760,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 762,
                    "ByteSize": 2,
                    "Comment": "Slow the motor for the last two pixel lines only."
                },
                {
                    "Address": 764,
                    "ByteSize": 1,
                    "Comment": "The #REG:D# register will hold either &00 or &02."
                },
                {
                    "Address": 765,
                    "ByteSize": 3,
                    "Comment": "{Jump forward unless the BREAK key is being pressed.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 768,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 770,
                    "ByteSize": 2,
                    "Comment": "{But if it is then stop the motor, enable the maskable"
                },
                {
                    "Address": 772,
                    "ByteSize": 2,
                    "Comment": "interrupt, clear the printer buffer and exit via the"
                },
                {
                    "Address": 774,
                    "ByteSize": 1,
                    "Comment": "error handling routine - 'BREAK-CONT repeats'."
                },
                {
                    "Address": 775,
                    "ByteSize": 3,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 778,
                    "ByteSize": 1,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 780,
                    "ByteSize": 2,
                    "Comment": "{Fetch the status of the printer."
                },
                {
                    "Address": 782,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 783,
                    "ByteSize": 1,
                    "Comment": "Make an immediate return if the printer is not present."
                },
                {
                    "Address": 784,
                    "ByteSize": 2,
                    "Comment": "Wait for the stylus.",
                    "OperandType": 2
                },
                {
                    "Address": 786,
                    "ByteSize": 2,
                    "Comment": "There are thirty two bytes."
                },
                {
                    "Address": 788,
                    "ByteSize": 1,
                    "Comment": "Fetch a byte."
                },
                {
                    "Address": 789,
                    "ByteSize": 1,
                    "Comment": "Update the pointer."
                },
                {
                    "Address": 790,
                    "ByteSize": 2,
                    "Comment": "Eight bits per byte."
                },
                {
                    "Address": 792,
                    "ByteSize": 2,
                    "Comment": "Move #REG:D# left."
                },
                {
                    "Address": 794,
                    "ByteSize": 2,
                    "Comment": "Move each bit into the carry."
                },
                {
                    "Address": 796,
                    "ByteSize": 2,
                    "Comment": "Move #REG:D# back again, picking up the carry from #REG:E#."
                },
                {
                    "Address": 798,
                    "ByteSize": 2,
                    "Comment": "{Again fetch the status of the printer and wait for the"
                },
                {
                    "Address": 800,
                    "ByteSize": 1,
                    "Comment": "signal from the encoder."
                },
                {
                    "Address": 801,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 803,
                    "ByteSize": 1,
                    "Comment": "{Now go ahead and pass the 'bit' to the printer. Note:"
                },
                {
                    "Address": 804,
                    "ByteSize": 2,
                    "Comment": "bit 2 low starts the motor, bit 1 high slows the motor,\nand bit 7 is high for the actual 'printing'.}"
                },
                {
                    "Address": 806,
                    "ByteSize": 2,
                    "Comment": "'Print' each bit.",
                    "OperandType": 2
                },
                {
                    "Address": 808,
                    "ByteSize": 1,
                    "Comment": "Decrease the byte counter."
                },
                {
                    "Address": 809,
                    "ByteSize": 2,
                    "Comment": "{Jump back whilst there are still bytes; otherwise",
                    "OperandType": 2
                },
                {
                    "Address": 811,
                    "ByteSize": 1,
                    "Comment": "return.}"
                },
                {
                    "Address": 812,
                    "ByteSize": 3,
                    "Comment": "{The current value of \\#SYSVAR(ERR-SP) is saved on the",
                    "OperandType": 1
                },
                {
                    "Address": 815,
                    "ByteSize": 1,
                    "Comment": "machine stack.}"
                },
                {
                    "Address": 816,
                    "ByteSize": 3,
                    "Comment": "This is #ADDR:0x107F#."
                },
                {
                    "Address": 819,
                    "ByteSize": 1,
                    "Comment": "{Any event that leads to the error handling routine"
                },
                {
                    "Address": 820,
                    "ByteSize": 4,
                    "Comment": "(see \\#SYSVAR(ERR-SP)) being used will come back to\n#ADDR:0x107F#.}",
                    "OperandType": 1
                },
                {
                    "Address": 824,
                    "ByteSize": 3,
                    "Comment": "Return once a key has been pressed.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 827,
                    "ByteSize": 1,
                    "Comment": "Save the code temporarily."
                },
                {
                    "Address": 828,
                    "ByteSize": 2,
                    "Comment": "{Fetch the duration of the keyboard click"
                },
                {
                    "Address": 830,
                    "ByteSize": 3,
                    "Comment": "(\\#SYSVAR(PIP)).}"
                },
                {
                    "Address": 833,
                    "ByteSize": 3,
                    "Comment": "And the pitch."
                },
                {
                    "Address": 836,
                    "ByteSize": 3,
                    "Comment": "Now make the 'pip'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 839,
                    "ByteSize": 1,
                    "Comment": "Restore the code."
                },
                {
                    "Address": 840,
                    "ByteSize": 3,
                    "Comment": "{Pre-load the machine stack with the address of"
                },
                {
                    "Address": 843,
                    "ByteSize": 1,
                    "Comment": "#ADDR:0x0F38#.}"
                },
                {
                    "Address": 844,
                    "ByteSize": 2,
                    "Comment": "{Accept all character codes, graphic codes and tokens."
                },
                {
                    "Address": 846,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 848,
                    "ByteSize": 2,
                    "Comment": "{Also accept ','."
                },
                {
                    "Address": 850,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 852,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if the code represents an editing key."
                },
                {
                    "Address": 854,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 856,
                    "ByteSize": 3,
                    "Comment": "INK and PAPER will require two locations."
                },
                {
                    "Address": 859,
                    "ByteSize": 1,
                    "Comment": "Copy the code to #REG:D#."
                },
                {
                    "Address": 860,
                    "ByteSize": 2,
                    "Comment": "{Jump forward with INK and PAPER."
                },
                {
                    "Address": 862,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 864,
                    "ByteSize": 1,
                    "Comment": "Three locations required."
                },
                {
                    "Address": 865,
                    "ByteSize": 4,
                    "Comment": "{Jump forward unless dealing with 'INPUT LINE...' (bit"
                },
                {
                    "Address": 869,
                    "ByteSize": 3,
                    "Comment": "7 of \\#SYSVAR(FLAGX) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 872,
                    "ByteSize": 3,
                    "Comment": "{Get the second code and put it in #REG:E#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 875,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 876,
                    "ByteSize": 3,
                    "Comment": "Get another code.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 879,
                    "ByteSize": 1,
                    "Comment": "Save the previous codes."
                },
                {
                    "Address": 880,
                    "ByteSize": 3,
                    "Comment": "Fetch \\#SYSVAR(K-CUR).",
                    "OperandType": 1
                },
                {
                    "Address": 883,
                    "ByteSize": 4,
                    "Comment": "Signal 'K mode' (reset bit 0 of \\#SYSVAR(MODE))."
                },
                {
                    "Address": 887,
                    "ByteSize": 3,
                    "Comment": "Make two or three spaces.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 890,
                    "ByteSize": 1,
                    "Comment": "Restore the previous codes."
                },
                {
                    "Address": 891,
                    "ByteSize": 1,
                    "Comment": "Point to the first location."
                },
                {
                    "Address": 892,
                    "ByteSize": 1,
                    "Comment": "Enter first code."
                },
                {
                    "Address": 893,
                    "ByteSize": 1,
                    "Comment": "{Then enter the second code which will be overwritten"
                },
                {
                    "Address": 894,
                    "ByteSize": 1,
                    "Comment": "if there are only two codes - i.e. with INK and PAPER.}"
                },
                {
                    "Address": 895,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 897,
                    "ByteSize": 4,
                    "Comment": "Signal 'K mode' (reset bit 0 of \\#SYSVAR(MODE))."
                },
                {
                    "Address": 901,
                    "ByteSize": 3,
                    "Comment": "Fetch the cursor position (\\#SYSVAR(K-CUR)).",
                    "OperandType": 1
                },
                {
                    "Address": 904,
                    "ByteSize": 3,
                    "Comment": "Make a single space.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 907,
                    "ByteSize": 1,
                    "Comment": "{Enter the code into the space and set \\#SYSVAR(K-CUR)"
                },
                {
                    "Address": 908,
                    "ByteSize": 1,
                    "Comment": "to signal that the cursor is to occur at the location"
                },
                {
                    "Address": 909,
                    "ByteSize": 4,
                    "Comment": "after. Then return indirectly to #ADDR:0x0F38#.",
                    "OperandType": 1
                },
                {
                    "Address": 913,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 914,
                    "ByteSize": 1,
                    "Comment": "{The code is transferred to the #REG:DE# register pair."
                },
                {
                    "Address": 915,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 917,
                    "ByteSize": 3,
                    "Comment": "The base address of the #ADDR:0x0FA0#(editing keys table)."
                },
                {
                    "Address": 920,
                    "ByteSize": 1,
                    "Comment": "{The entry is addressed and then fetched into #REG:E#."
                },
                {
                    "Address": 921,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 922,
                    "ByteSize": 1,
                    "Comment": "{The address of the handling routine is saved on the"
                },
                {
                    "Address": 923,
                    "ByteSize": 1,
                    "Comment": "machine stack.}"
                },
                {
                    "Address": 924,
                    "ByteSize": 3,
                    "Comment": "{The #REG:HL# register pair is set to \\#SYSVAR(K-CUR) and",
                    "OperandType": 1
                },
                {
                    "Address": 927,
                    "ByteSize": 1,
                    "Comment": "an indirect jump made to the required routine.}"
                },
                {
                    "Address": 937,
                    "ByteSize": 3,
                    "Comment": "Fetch the current line number (\\#SYSVAR(E-PPC)).",
                    "OperandType": 1
                },
                {
                    "Address": 940,
                    "ByteSize": 4,
                    "Comment": "{But jump forward if in 'INPUT mode' (bit 5 of"
                },
                {
                    "Address": 944,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(FLAGX) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 947,
                    "ByteSize": 3,
                    "Comment": "{Find the address of the start of the current line and",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 950,
                    "ByteSize": 3,
                    "Comment": "hence its number.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 953,
                    "ByteSize": 1,
                    "Comment": "{If the line number returned is zero then simply clear"
                },
                {
                    "Address": 954,
                    "ByteSize": 1,
                    "Comment": "the editing area."
                },
                {
                    "Address": 955,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 958,
                    "ByteSize": 1,
                    "Comment": "Save the address of the line."
                },
                {
                    "Address": 959,
                    "ByteSize": 1,
                    "Comment": "{Move on to collect the length of the line."
                },
                {
                    "Address": 960,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 961,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 962,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 963,
                    "ByteSize": 3,
                    "Comment": "{Add &0A to the length and test that there is"
                },
                {
                    "Address": 966,
                    "ByteSize": 1,
                    "Comment": "sufficient room for a copy of the line."
                },
                {
                    "Address": 967,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 968,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 969,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 972,
                    "ByteSize": 3,
                    "Comment": "Now clear the editing area.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 975,
                    "ByteSize": 3,
                    "Comment": "{Fetch the current channel address (\\#SYSVAR(CURCHL))",
                    "OperandType": 1
                },
                {
                    "Address": 978,
                    "ByteSize": 1,
                    "Comment": "and exchange it for the address of the line.}"
                },
                {
                    "Address": 979,
                    "ByteSize": 1,
                    "Comment": "Save it temporarily."
                },
                {
                    "Address": 980,
                    "ByteSize": 2,
                    "Comment": "{Open channel 'R' so that the line will be copied to"
                },
                {
                    "Address": 982,
                    "ByteSize": 3,
                    "Comment": "the editing area.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 985,
                    "ByteSize": 1,
                    "Comment": "Fetch the address of the line."
                },
                {
                    "Address": 986,
                    "ByteSize": 1,
                    "Comment": "Go to before the line."
                },
                {
                    "Address": 987,
                    "ByteSize": 3,
                    "Comment": "Decrement the current line number (\\#SYSVAR(E-PPC)) so\nas to avoid printing the cursor."
                },
                {
                    "Address": 990,
                    "ByteSize": 3,
                    "Comment": "Print the BASIC line.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 993,
                    "ByteSize": 3,
                    "Comment": "Increment the current line number (\\#SYSVAR(E-PPC)).\nNote: the decrementing of the line number\n\\#BUG\\#curseTheCursor(does not always stop the cursor\nfrom being printed)."
                },
                {
                    "Address": 996,
                    "ByteSize": 3,
                    "Comment": "{Fetch the start of the line in the editing area",
                    "OperandType": 1
                },
                {
                    "Address": 999,
                    "ByteSize": 1,
                    "Comment": "(\\#SYSVAR(E-LINE)) and step past the line number and the"
                },
                {
                    "Address": 1000,
                    "ByteSize": 1,
                    "Comment": "length to find the address for \\#SYSVAR(K-CUR)."
                },
                {
                    "Address": 1001,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 1002,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 1003,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 1006,
                    "ByteSize": 1,
                    "Comment": "{Fetch the former channel address and set the"
                },
                {
                    "Address": 1007,
                    "ByteSize": 3,
                    "Comment": "appropriate flags before returning to #ADDR:0x0F38#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1010,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 1011,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if in 'INPUT mode' (bit 5 of"
                },
                {
                    "Address": 1015,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(FLAGX) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 1017,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(E-PPC)."
                },
                {
                    "Address": 1020,
                    "ByteSize": 3,
                    "Comment": "{The next line number is found and a new automatic",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1023,
                    "ByteSize": 2,
                    "Comment": "listing produced.}",
                    "OperandType": 2
                }
            ],
            "CommentBlocks": [
                {
                    "Address": 10,
                    "Comment": "THE 'MESSAGE PRINTING' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0605#, #ADDR:0x0970#, #ADDR:0x0C55#, #ADDR:0x11B7# and #ADDR:0x12A2#.\n \nThis subroutine is used to print messages and tokens.\n \nA Message table entry number\nDE Message table address (#ADDR:0x09A1#, #ADDR:0x09C1#-1, #ADDR:0x0CF8#, #ADDR:0x1391#, #ADDR:0x1537#-1 or\n.  #ADDR:0x1539#-1)"
                },
                {
                    "Address": 16,
                    "Comment": "This entry point is used by the routine at #ADDR:0x0B24#.\n \nEnter here when expanding token codes."
                },
                {
                    "Address": 20,
                    "Comment": "The table is searched and the correct entry printed."
                },
                {
                    "Address": 34,
                    "Comment": "The characters of the message/token are printed in turn."
                },
                {
                    "Address": 45,
                    "Comment": "Now consider whether a 'trailing space' is required."
                },
                {
                    "Address": 59,
                    "Comment": "This routine continues into #ADDR:0x0C3B#.\nTHE 'PO-SAVE' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0A6D# and #ADDR:0x0C0A#.\n \nThe routine at #ADDR:0x0C0A# continues here.\n \nThis subroutine allows for characters to be printed 'recursively'. The\nappropriate registers are saved whilst #ADDR:0x0010# is called.\n \nA Character code"
                },
                {
                    "Address": 65,
                    "Comment": "THE 'TABLE SEARCH' SUBROUTINE\n \nUsed by the routine at #ADDR:0x0C0A#.\n \nA Message table entry number\nDE Message table start address\nO:DE Address of the first character of message number #REG:A#\nO:F Carry flag: suppress (set) or allow (reset) a leading space"
                },
                {
                    "Address": 85,
                    "Comment": "THE 'TEST FOR SCROLL' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0A4F#, #ADDR:0x0A6D# and #ADDR:0x0B24#.\n \nThis subroutine is called whenever there might be the need to scroll the\ndisplay. This occurs on three occasions:\n \n\\#LIST\n{ when handling a 'carriage return' character }\n{ when using AT in an INPUT line }\n{ when the current line is full and the next line has to be used }\nLIST\\#\n \nB Current line number"
                },
                {
                    "Address": 134,
                    "Comment": "This entry point is used by the routine at #ADDR:0x0A6D#.\n \nReport 5 - Out of screen."
                },
                {
                    "Address": 136,
                    "Comment": "Now consider if the prompt 'scroll?' is required."
                },
                {
                    "Address": 141,
                    "Comment": "Proceed to give the prompt message."
                },
                {
                    "Address": 210,
                    "Comment": "The display is now scrolled."
                },
                {
                    "Address": 232,
                    "Comment": "The line in question will have 'lower part' attribute values and the new line\nat the bottom of the display may have '\\#SYSVAR(ATTR-P)' values so the\nattribute values are exchanged."
                },
                {
                    "Address": 248,
                    "Comment": "The 'scroll?' message."
                },
                {
                    "Address": 256,
                    "Comment": "Report D - BREAK - CONT repeats."
                },
                {
                    "Address": 258,
                    "Comment": "The lower part of the display is handled as follows:"
                },
                {
                    "Address": 284,
                    "Comment": "The lower part of the screen is now scrolled #REG:A# number of times."
                },
                {
                    "Address": 333,
                    "Comment": "THE 'TEMPORARY COLOUR ITEMS' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0C55#, #ADDR:0x0D6B#, #ADDR:0x0DAF#, #ADDR:0x111D#, #ADDR:0x1642#, #ADDR:0x1C96#,\n#ADDR:0x1CBE#, #ADDR:0x1FC9#, #ADDR:0x22DC# and #ADDR:0x2382#.\n \nThis is a most important subroutine. It is used whenever the 'permanent'\ndetails are required to be copied to the 'temporary' system variables. First\n\\#SYSVAR(ATTR-T) and \\#SYSVAR(MASK-T) are considered."
                },
                {
                    "Address": 350,
                    "Comment": "Next \\#SYSVAR(P-FLAG) is considered."
                },
                {
                    "Address": 363,
                    "Comment": "THE 'CLS' COMMAND ROUTINE\n \nUsed by the routines at #ADDR:0x11B7# and #ADDR:0x1EAC#.\n \nThe address of this routine is found in the #ADDR:0x1ABE#(parameter table).\n \nIn the first instance the whole of the display is 'cleared' - the 'pixels'\nare all reset and the attribute bytes are set to equal the value in\n\\#SYSVAR(ATTR-P) - then the lower part of the display is reformed."
                },
                {
                    "Address": 366,
                    "Comment": "This entry point is used by the routines at #ADDR:0x10A8#, #ADDR:0x12A2# and #ADDR:0x2089#."
                },
                {
                    "Address": 382,
                    "Comment": "With the exception of the attribute bytes for lines 22 and 23 the attribute\nbytes for the lines in the lower part of the display will need to be made\nequal to \\#SYSVAR(ATTR-P)."
                },
                {
                    "Address": 400,
                    "Comment": "The size of the lower part of the display can now be fixed."
                },
                {
                    "Address": 404,
                    "Comment": "This entry point is used by the routine at #ADDR:0x0DAF#.\n \nIt now remains for the following 'house keeping' tasks to be performed."
                },
                {
                    "Address": 431,
                    "Comment": "THE 'CLEARING THE WHOLE DISPLAY AREA' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0D6B#, #ADDR:0x12A2# and #ADDR:0x1795#."
                },
                {
                    "Address": 473,
                    "Comment": "This routine continues into #ADDR:0x0DD9#.\nTHE 'CL-SET' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0A23#, #ADDR:0x0A4F#, #ADDR:0x0A6D#, #ADDR:0x0C55#, #ADDR:0x0D6B#, #ADDR:0x0EDF#,\n#ADDR:0x111D# and #ADDR:0x2089#.\n \nThe routine at #ADDR:0x0DAF# continues here.\n \nThis subroutine is entered with the #REG:BC# register pair holding the line and\ncolumn numbers of a character area, or the #REG:C# register holding the column\nnumber within the printer buffer. The appropriate address of the first\ncharacter bit is then found. The subroutine returns via #ADDR:0x0ADC# so as to\nstore all the values in the required system variables.\n \nB Line number\nC Column number"
                },
                {
                    "Address": 510,
                    "Comment": "THE 'SCROLLING' SUBROUTINE\n \nUsed by the routine at #ADDR:0x0C55#.\n \nThe number of lines of the display that are to be scrolled has to be held on\nentry to the main subroutine in the #REG:B# register."
                },
                {
                    "Address": 512,
                    "Comment": "This entry point is used by the routine at #ADDR:0x0C55#.\n \nThe main entry point - from above and when scrolling for INPUT...AT."
                },
                {
                    "Address": 517,
                    "Comment": "Now enter the main scrolling loop. The #REG:B# register holds the number of the\ntop line to be scrolled, the #REG:HL# register pair the starting address in the\ndisplay area of this line and the #REG:C# register the pixel line counter."
                },
                {
                    "Address": 525,
                    "Comment": "The pixel lines of the top lines of the 'thirds' of the display have to be\nmoved across the 2K boundaries. (Each 'third' is 2K.)"
                },
                {
                    "Address": 537,
                    "Comment": "The pixel lines within the 'thirds' can now be scrolled. The #REG:A# register\nholds, on the first pass, &01 to &07, &09 to &0F, or &11 to &17."
                },
                {
                    "Address": 562,
                    "Comment": "Now find if the loop has been used eight times - once for each pixel line."
                },
                {
                    "Address": 568,
                    "Comment": "Next the attribute bytes are scrolled. Note that the #REG:B# register still\nholds the number of lines to be scrolled and the #REG:C# register holds zero."
                },
                {
                    "Address": 578,
                    "Comment": "It remains now to clear the bottom line of the display."
                },
                {
                    "Address": 580,
                    "Comment": "THE 'CLEAR LINES' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0D6B#, #ADDR:0x0DAF# and #ADDR:0x1795#.\n \nThe routine at #ADDR:0x0DFE# continues here.\n \nThis subroutine will clear the bottom #REG:B# lines of the display.\n \nB Number of lines to clear"
                },
                {
                    "Address": 586,
                    "Comment": "Now enter a loop to clear all the pixel lines."
                },
                {
                    "Address": 616,
                    "Comment": "Now find if the loop has been used eight times."
                },
                {
                    "Address": 622,
                    "Comment": "Next the attribute bytes are set as required. The value in \\#SYSVAR(ATTR-P)\nwill be used when handling the main part of the display and the value in\n\\#SYSVAR(BORDCR) when handling the lower part."
                },
                {
                    "Address": 648,
                    "Comment": "THE 'CL-ATTR' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0DFE# and #ADDR:0x0E44#.\n \nThis subroutine has two separate functions.\n \n\\#LIST\n{ For a given display area address the appropriate attribute address is\nreturned in the #REG:DE# register pair. Note that the value on entry points to\nthe 'ninth' line of a character. }\n{ For a given line number, in the #REG:B# register, the number of character\nareas in the display from the start of that line onwards is returned in the\n#REG:BC# register pair. }\nLIST\\#\n \nB Line number\nC &00\nHL Display file address\nO:BC Number of spaces from the given line number (#REG:B#) downwards\nO:DE Corresponding attribute file address"
                },
                {
                    "Address": 667,
                    "Comment": "THE 'CL-ADDR' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0C55#, #ADDR:0x0DD9#, #ADDR:0x0DFE# and #ADDR:0x0E44#.\n \nFor a given line number, in the #REG:B# register, the appropriate display file\naddress is formed in the #REG:HL# register pair.\n \nB Line number\nO:HL Display file address"
                },
                {
                    "Address": 684,
                    "Comment": "THE 'COPY' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1AD6#(parameter table).\n \nThe one hundred and seventy six pixel lines of the display are dealt with one\nby one."
                },
                {
                    "Address": 690,
                    "Comment": "The following loop is now entered."
                },
                {
                    "Address": 703,
                    "Comment": "For each new line of characters the base address has to be updated."
                },
                {
                    "Address": 717,
                    "Comment": "THE 'COPY-BUFF' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0A4F#, #ADDR:0x0B24# and #ADDR:0x12A2#.\n \nThis subroutine is called whenever the printer buffer is to have its contents\npassed to the printer."
                },
                {
                    "Address": 730,
                    "Comment": "This entry point is used by the routine at #ADDR:0x0EAC#."
                },
                {
                    "Address": 735,
                    "Comment": "THE 'CLEAR PRINTER BUFFER' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0EF4# and #ADDR:0x11B7#.\n \nThe printer buffer is cleared by calling this subroutine."
                },
                {
                    "Address": 756,
                    "Comment": "THE 'COPY-LINE' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0EAC# and #ADDR:0x0ECD#.\n \nThe subroutine is entered with the #REG:HL# register pair holding the base\naddress of the thirty two bytes that form the pixel-line and the #REG:B#\nregister holding the pixel-line number.\n \nB Pixel line number (&01 to &B0)\nHL Display file address or printer buffer address"
                },
                {
                    "Address": 765,
                    "Comment": "There are three tests to be made before doing any 'printing'."
                },
                {
                    "Address": 788,
                    "Comment": "Now enter a loop to handle these bytes."
                },
                {
                    "Address": 812,
                    "Comment": "THE 'EDITOR' ROUTINES\n \nUsed by the routines at #ADDR:0x12A2# and #ADDR:0x2089#.\n \nThe editor is called on two occasions:\n \n\\#LIST\n{ From the #ADDR:0x12A2#(main execution routine) so that the user can enter a BASIC\nline into the system. }\n{ From the #ADDR:0x2089#(INPUT command routine). }\nLIST\\#\n \nFirst the 'error stack pointer' is saved and an alternative address provided."
                },
                {
                    "Address": 816,
                    "Comment": "This entry point is used by the routine at #ADDR:0x107F#."
                },
                {
                    "Address": 824,
                    "Comment": "A loop is now entered to handle each keystroke."
                },
                {
                    "Address": 844,
                    "Comment": "Now analyse the code obtained."
                },
                {
                    "Address": 856,
                    "Comment": "The control keys - INK to TAB - are now considered."
                },
                {
                    "Address": 864,
                    "Comment": "AT and TAB would be handled as follows:"
                },
                {
                    "Address": 876,
                    "Comment": "The other bytes for the control characters are now fetched."
                },
                {
                    "Address": 897,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1076#.\n \nThe address of this entry point is found in the #ADDR:0x15AF#(initial channel\ninformation table).\n \nThe following subroutine actually adds a code to the current EDIT or INPUT\nline."
                },
                {
                    "Address": 914,
                    "Comment": "The editing keys are dealt with as follows:"
                },
                {
                    "Address": 928,
                    "Comment": "THE 'EDITING KEYS' TABLE\n \nUsed by the routine at #ADDR:0x0F2C#."
                },
                {
                    "Address": 937,
                    "Comment": "THE 'EDIT KEY' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x0FA0#(editing keys table).\n \nWhen in 'editing mode' pressing the EDIT key will bring down the 'current\nBASIC line'. However in 'INPUT mode' the action of the EDIT key is to clear\nthe current reply and allow a fresh one."
                },
                {
                    "Address": 1011,
                    "Comment": "THE 'CURSOR DOWN EDITING' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x0FA0#(editing keys table)."
                }
            ],
            "DataInfo": [
                {
                    "Address": 135,
                    "Comment": "}"
                },
                {
                    "Address": 248,
                    "Comment": "Initial marker - stepped over."
                },
                {
                    "Address": 249,
                    "ByteSize": 6,
                    "Comment": " ",
                    "DataType": 4
                },
                {
                    "Address": 255,
                    "Comment": "The '?' is inverted.",
                    "DataType": 4
                },
                {
                    "Address": 257,
                    "Comment": "}"
                },
                {
                    "Address": 779,
                    "Comment": "}"
                },
                {
                    "Address": 928,
                    "Comment": "EDIT (#ADDR:0x0FA9#)"
                },
                {
                    "Address": 929,
                    "Comment": "Cursor left (#ADDR:0x1007#)"
                },
                {
                    "Address": 930,
                    "Comment": "Cursor right (#ADDR:0x100C#)"
                },
                {
                    "Address": 931,
                    "Comment": "Cursor down (#ADDR:0x0FF3#)"
                },
                {
                    "Address": 932,
                    "Comment": "Cursor up (#ADDR:0x1059#)"
                },
                {
                    "Address": 933,
                    "Comment": "DELETE (#ADDR:0x1015#)"
                },
                {
                    "Address": 934,
                    "Comment": "ENTER (#ADDR:0x1024#)"
                },
                {
                    "Address": 935,
                    "Comment": "SYMBOL SHIFT (#ADDR:0x1076#)"
                },
                {
                    "Address": 936,
                    "Comment": "GRAPHICS (#ADDR:0x107C#)"
                }
            ],
            "LabelInfo": [
                {
                    "Address": 8,
                    "LabelType": 2,
                    "Name": "PO_ATTR_2"
                },
                {
                    "Address": 10,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "PO_MSG"
                },
                {
                    "Address": 16,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "PO_TOKENS"
                },
                {
                    "Address": 20,
                    "LabelType": 2,
                    "Name": "PO_TABLE"
                },
                {
                    "Address": 34,
                    "LabelType": 2,
                    "Name": "PO_EACH"
                },
                {
                    "Address": 53,
                    "LabelType": 2,
                    "Name": "PO_TR_SP"
                },
                {
                    "Address": 59,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "PO_SAVE"
                },
                {
                    "Address": 65,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "PO_SEARCH"
                },
                {
                    "Address": 68,
                    "LabelType": 2,
                    "Name": "PO_STEP"
                },
                {
                    "Address": 85,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "PO_SCR"
                },
                {
                    "Address": 134,
                    "LabelType": 2,
                    "Name": "REPORT_5"
                },
                {
                    "Address": 136,
                    "LabelType": 2,
                    "Name": "PO_SCR_2"
                },
                {
                    "Address": 210,
                    "LabelType": 2,
                    "Name": "PO_SCR_3"
                },
                {
                    "Address": 240,
                    "LabelType": 2,
                    "Name": "PO_SCR_3A"
                },
                {
                    "Address": 248,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "SCROLL"
                },
                {
                    "Address": 256,
                    "LabelType": 2,
                    "Name": "REPORT_D"
                },
                {
                    "Address": 258,
                    "LabelType": 2,
                    "Name": "PO_SCR_4"
                },
                {
                    "Address": 284,
                    "LabelType": 2,
                    "Name": "PO_SCR_4A"
                },
                {
                    "Address": 301,
                    "LabelType": 2,
                    "Name": "PO_SCR_4B"
                },
                {
                    "Address": 333,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "TEMPS"
                },
                {
                    "Address": 347,
                    "LabelType": 2,
                    "Name": "TEMPS_1"
                },
                {
                    "Address": 357,
                    "LabelType": 2,
                    "Name": "TEMPS_2"
                },
                {
                    "Address": 363,
                    "LabelType": 2,
                    "Name": "CLS"
                },
                {
                    "Address": 366,
                    "LabelType": 2,
                    "Name": "CLS_LOWER"
                },
                {
                    "Address": 391,
                    "LabelType": 2,
                    "Name": "CLS_1"
                },
                {
                    "Address": 393,
                    "LabelType": 2,
                    "Name": "CLS_2"
                },
                {
                    "Address": 398,
                    "LabelType": 2,
                    "Name": "CLS_3"
                },
                {
                    "Address": 404,
                    "LabelType": 2,
                    "Name": "CL_CHAN"
                },
                {
                    "Address": 416,
                    "LabelType": 2,
                    "Name": "CL_CHAN_A"
                },
                {
                    "Address": 431,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CL_ALL"
                },
                {
                    "Address": 473,
                    "LabelType": 2,
                    "Name": "CL_SET"
                },
                {
                    "Address": 494,
                    "LabelType": 2,
                    "Name": "CL_SET_1"
                },
                {
                    "Address": 500,
                    "LabelType": 2,
                    "Name": "CL_SET_2"
                },
                {
                    "Address": 510,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CL_SC_ALL"
                },
                {
                    "Address": 512,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CL_SCROLL"
                },
                {
                    "Address": 517,
                    "LabelType": 2,
                    "Name": "CL_SCR_1"
                },
                {
                    "Address": 525,
                    "LabelType": 2,
                    "Name": "CL_SCR_2"
                },
                {
                    "Address": 537,
                    "LabelType": 2,
                    "Name": "CL_SCR_3"
                },
                {
                    "Address": 580,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CL_LINE"
                },
                {
                    "Address": 586,
                    "LabelType": 2,
                    "Name": "CL_LINE_1"
                },
                {
                    "Address": 589,
                    "LabelType": 2,
                    "Name": "CL_LINE_2"
                },
                {
                    "Address": 640,
                    "LabelType": 2,
                    "Name": "CL_LINE_3"
                },
                {
                    "Address": 648,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CL_ATTR"
                },
                {
                    "Address": 667,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CL_ADDR"
                },
                {
                    "Address": 684,
                    "LabelType": 2,
                    "Name": "COPY"
                },
                {
                    "Address": 690,
                    "LabelType": 2,
                    "Name": "COPY_1"
                },
                {
                    "Address": 713,
                    "LabelType": 2,
                    "Name": "COPY_2"
                },
                {
                    "Address": 717,
                    "LabelType": 2,
                    "Name": "COPY_BUFF"
                },
                {
                    "Address": 723,
                    "LabelType": 2,
                    "Name": "COPY_3"
                },
                {
                    "Address": 730,
                    "LabelType": 2,
                    "Name": "COPY_END"
                },
                {
                    "Address": 735,
                    "LabelType": 2,
                    "Name": "CLEAR_PRB"
                },
                {
                    "Address": 743,
                    "LabelType": 2,
                    "Name": "PRB_BYTES"
                },
                {
                    "Address": 756,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "COPY_LINE"
                },
                {
                    "Address": 765,
                    "LabelType": 2,
                    "Name": "COPY_L_1"
                },
                {
                    "Address": 780,
                    "LabelType": 2,
                    "Name": "COPY_L_2"
                },
                {
                    "Address": 788,
                    "LabelType": 2,
                    "Name": "COPY_L_3"
                },
                {
                    "Address": 792,
                    "LabelType": 2,
                    "Name": "COPY_L_4"
                },
                {
                    "Address": 798,
                    "LabelType": 2,
                    "Name": "COPY_L_5"
                },
                {
                    "Address": 812,
                    "LabelType": 2,
                    "Name": "EDITOR"
                },
                {
                    "Address": 816,
                    "LabelType": 2,
                    "Name": "ED_AGAIN"
                },
                {
                    "Address": 824,
                    "LabelType": 2,
                    "Name": "ED_LOOP"
                },
                {
                    "Address": 876,
                    "LabelType": 2,
                    "Name": "ED_CONTR"
                },
                {
                    "Address": 897,
                    "LabelType": 2,
                    "Name": "ADD_CHAR"
                },
                {
                    "Address": 907,
                    "LabelType": 2,
                    "Name": "ADD_CH_1"
                },
                {
                    "Address": 914,
                    "LabelType": 2,
                    "Name": "ED_KEYS"
                },
                {
                    "Address": 928,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "EDITKEYS"
                },
                {
                    "Address": 937,
                    "LabelType": 2,
                    "Name": "ED_EDIT"
                },
                {
                    "Address": 1011,
                    "LabelType": 2,
                    "Name": "ED_DOWN"
                }
            ],
            "PageId": 3
        },
        {
            "CodeInfo": [
                {
                    "Address": 1,
                    "ByteSize": 4,
                    "Comment": "'STOP in INPUT' report (\\#SYSVAR(ERR-NR))."
                },
                {
                    "Address": 5,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 7,
                    "ByteSize": 3,
                    "Comment": "The cursor is moved.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 10,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 12,
                    "ByteSize": 1,
                    "Comment": "{The current character is tested and if it is 'carriage"
                },
                {
                    "Address": 13,
                    "ByteSize": 2,
                    "Comment": "return' then return."
                },
                {
                    "Address": 15,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 16,
                    "ByteSize": 1,
                    "Comment": "Otherwise make the cursor come after the character."
                },
                {
                    "Address": 17,
                    "ByteSize": 3,
                    "Comment": "Set the system variable \\#SYSVAR(K-CUR).",
                    "OperandType": 1
                },
                {
                    "Address": 20,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 21,
                    "ByteSize": 3,
                    "Comment": "Move the cursor leftwards.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 24,
                    "ByteSize": 3,
                    "Comment": "{Reclaim the current character."
                },
                {
                    "Address": 27,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 30,
                    "ByteSize": 3,
                    "Comment": "{The next two codes from the key-input routine are",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 33,
                    "ByteSize": 3,
                    "Comment": "ignored.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 36,
                    "ByteSize": 1,
                    "Comment": "{The addresses of #ADDR:0x0F38# and #ADDR:0x107F# are discarded."
                },
                {
                    "Address": 37,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 38,
                    "ByteSize": 1,
                    "Comment": "{The old value of \\#SYSVAR(ERR-SP) is restored."
                },
                {
                    "Address": 39,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 42,
                    "ByteSize": 4,
                    "Comment": "{Now return if there were no errors (\\#SYSVAR(ERR-NR) is"
                },
                {
                    "Address": 46,
                    "ByteSize": 1,
                    "Comment": "&FF).}"
                },
                {
                    "Address": 47,
                    "ByteSize": 1,
                    "Comment": "{Otherwise make an indirect jump to the error routine."
                },
                {
                    "Address": 48,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 49,
                    "ByteSize": 1,
                    "Comment": "{#REG:DE# will hold either \\#SYSVAR(E-LINE) (for editing)"
                },
                {
                    "Address": 50,
                    "ByteSize": 3,
                    "Comment": "or \\#SYSVAR(WORKSP) (for INPUTing).}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 53,
                    "ByteSize": 2,
                    "Comment": "{The carry flag will become set if the cursor is already"
                },
                {
                    "Address": 55,
                    "ByteSize": 1,
                    "Comment": "to be at the start of the line.}"
                },
                {
                    "Address": 56,
                    "ByteSize": 1,
                    "Comment": "Correct for the subtraction."
                },
                {
                    "Address": 57,
                    "ByteSize": 1,
                    "Comment": "Drop the return address."
                },
                {
                    "Address": 58,
                    "ByteSize": 1,
                    "Comment": "Return via #ADDR:0x0F38# if the carry flag is set."
                },
                {
                    "Address": 59,
                    "ByteSize": 1,
                    "Comment": "Restore the return address."
                },
                {
                    "Address": 60,
                    "ByteSize": 1,
                    "Comment": "{Move the current address of the cursor to #REG:BC#."
                },
                {
                    "Address": 61,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 62,
                    "ByteSize": 1,
                    "Comment": "{#REG:HL# will point to the character in the line after"
                },
                {
                    "Address": 63,
                    "ByteSize": 1,
                    "Comment": "that addressed by #REG:DE#."
                },
                {
                    "Address": 64,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 65,
                    "ByteSize": 1,
                    "Comment": "Fetch a character code."
                },
                {
                    "Address": 66,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if the code does not represent INK to TAB."
                },
                {
                    "Address": 68,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 70,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 72,
                    "ByteSize": 1,
                    "Comment": "Allow for one parameter."
                },
                {
                    "Address": 73,
                    "ByteSize": 1,
                    "Comment": "Fetch the code anew."
                },
                {
                    "Address": 74,
                    "ByteSize": 2,
                    "Comment": "Carry is reset for TAB."
                },
                {
                    "Address": 76,
                    "ByteSize": 2,
                    "Comment": "Note: this splits off AT and TAB but AT and TAB in this\nform are not implemented anyway so it makes no\ndifference."
                },
                {
                    "Address": 78,
                    "ByteSize": 2,
                    "Comment": "{Jump forward unless dealing with AT and TAB which would",
                    "OperandType": 2
                },
                {
                    "Address": 80,
                    "ByteSize": 1,
                    "Comment": "have two parameters, if used.}"
                },
                {
                    "Address": 81,
                    "ByteSize": 1,
                    "Comment": "Prepare for true subtraction."
                },
                {
                    "Address": 82,
                    "ByteSize": 2,
                    "Comment": "{The carry flag will be reset when the 'updated pointer'"
                },
                {
                    "Address": 84,
                    "ByteSize": 1,
                    "Comment": "reaches \\#SYSVAR(K-CUR).}"
                },
                {
                    "Address": 85,
                    "ByteSize": 1,
                    "Comment": "{For the next loop use the 'updated pointer', but if"
                },
                {
                    "Address": 86,
                    "ByteSize": 2,
                    "Comment": "exiting use the 'present pointer' for \\#SYSVAR(K-CUR).",
                    "OperandType": 2
                },
                {
                    "Address": 88,
                    "ByteSize": 1,
                    "Comment": "Note: it is the control character that is deleted when\nusing DELETE.}"
                },
                {
                    "Address": 89,
                    "ByteSize": 4,
                    "Comment": "{Return if in 'INPUT mode' (bit 5 of \\#SYSVAR(FLAGX)"
                },
                {
                    "Address": 93,
                    "ByteSize": 1,
                    "Comment": "set).}"
                },
                {
                    "Address": 94,
                    "ByteSize": 3,
                    "Comment": "{Fetch the current line number (\\#SYSVAR(E-PPC)) and its",
                    "OperandType": 1
                },
                {
                    "Address": 97,
                    "ByteSize": 3,
                    "Comment": "start address.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 100,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# now points to the previous line."
                },
                {
                    "Address": 101,
                    "ByteSize": 3,
                    "Comment": "This line's number is fetched.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 104,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(E-PPC-hi)."
                },
                {
                    "Address": 107,
                    "ByteSize": 3,
                    "Comment": "The line number is stored.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 110,
                    "ByteSize": 3,
                    "Comment": "{A new automatic listing is now produced and channel",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 113,
                    "ByteSize": 2,
                    "Comment": "'K' re-opened before returning to #ADDR:0x0F38#."
                },
                {
                    "Address": 115,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 118,
                    "ByteSize": 4,
                    "Comment": "{Jump back unless dealing with INPUT LINE (bit 7 of"
                },
                {
                    "Address": 122,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(FLAGX) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 124,
                    "ByteSize": 3,
                    "Comment": "Jump back.",
                    "OperandType": 2
                },
                {
                    "Address": 127,
                    "ByteSize": 4,
                    "Comment": "{Jump back if using other than channel 'K' (bit 4 of"
                },
                {
                    "Address": 131,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x5C6A#(FLAGS2) reset).}",
                    "OperandType": 2
                },
                {
                    "Address": 133,
                    "ByteSize": 4,
                    "Comment": "{Cancel the error number (\\#SYSVAR(ERR-NR)) and give a"
                },
                {
                    "Address": 137,
                    "ByteSize": 2,
                    "Comment": "'rasp' (see \\#SYSVAR(RASP)) before going around the"
                },
                {
                    "Address": 139,
                    "ByteSize": 3,
                    "Comment": "editor again."
                },
                {
                    "Address": 142,
                    "ByteSize": 3,
                    "Comment": " "
                },
                {
                    "Address": 145,
                    "ByteSize": 3,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 148,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 151,
                    "ByteSize": 1,
                    "Comment": "Save the pointer to the space."
                },
                {
                    "Address": 152,
                    "ByteSize": 3,
                    "Comment": "{#REG:DE# will point to the first character and #REG:HL#",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 155,
                    "ByteSize": 1,
                    "Comment": "the last.}"
                },
                {
                    "Address": 156,
                    "ByteSize": 3,
                    "Comment": "The correct amount is now reclaimed.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 159,
                    "ByteSize": 3,
                    "Comment": "{The system variables \\#SYSVAR(K-CUR) and \\#SYSVAR(MODE)",
                    "OperandType": 1
                },
                {
                    "Address": 162,
                    "ByteSize": 4,
                    "Comment": "('K mode') are initialised before fetching the pointer"
                },
                {
                    "Address": 166,
                    "ByteSize": 1,
                    "Comment": "and returning."
                },
                {
                    "Address": 167,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 168,
                    "ByteSize": 4,
                    "Comment": "{Copy the edit-line or the INPUT-line to the screen if"
                },
                {
                    "Address": 172,
                    "ByteSize": 3,
                    "Comment": "the mode has changed (bit 3 of \\#SYSVAR(TV-FLAG) set).}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 175,
                    "ByteSize": 1,
                    "Comment": "{Return with both carry and zero flags reset if no new"
                },
                {
                    "Address": 176,
                    "ByteSize": 4,
                    "Comment": "key has been pressed (bit 5 of \\#SYSVAR(FLAGS) reset)."
                },
                {
                    "Address": 180,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 181,
                    "ByteSize": 3,
                    "Comment": "{Otherwise fetch the code (\\#SYSVAR(LAST-K)) and signal",
                    "OperandType": 1
                },
                {
                    "Address": 184,
                    "ByteSize": 4,
                    "Comment": "that it has been taken (reset bit 5 of \\#SYSVAR(FLAGS)).\n}"
                },
                {
                    "Address": 188,
                    "ByteSize": 1,
                    "Comment": "Save the code temporarily."
                },
                {
                    "Address": 189,
                    "ByteSize": 4,
                    "Comment": "{Clear the lower part of the display if necessary (bit"
                },
                {
                    "Address": 193,
                    "ByteSize": 3,
                    "Comment": "5 of \\#SYSVAR(TV-FLAG) set), e.g. after 'scroll?'.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 196,
                    "ByteSize": 1,
                    "Comment": "Fetch the code."
                },
                {
                    "Address": 197,
                    "ByteSize": 2,
                    "Comment": "{Accept all characters and token codes."
                },
                {
                    "Address": 199,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 201,
                    "ByteSize": 2,
                    "Comment": "{Jump forward with most of the control character codes."
                },
                {
                    "Address": 203,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 205,
                    "ByteSize": 2,
                    "Comment": "{Jump forward with the 'mode' codes and the CAPS LOCK"
                },
                {
                    "Address": 207,
                    "ByteSize": 2,
                    "Comment": "code.}",
                    "OperandType": 2
                },
                {
                    "Address": 209,
                    "ByteSize": 1,
                    "Comment": "Save the code."
                },
                {
                    "Address": 210,
                    "ByteSize": 2,
                    "Comment": "Keep only bit 0."
                },
                {
                    "Address": 212,
                    "ByteSize": 1,
                    "Comment": "#REG:C# holds &00 (=OFF) or &01 (=ON)."
                },
                {
                    "Address": 213,
                    "ByteSize": 1,
                    "Comment": "Fetch the code."
                },
                {
                    "Address": 214,
                    "ByteSize": 1,
                    "Comment": "Rotate it once (losing bit 0)."
                },
                {
                    "Address": 215,
                    "ByteSize": 2,
                    "Comment": "{Increase it by &12 giving &12 for FLASH, &13 for"
                },
                {
                    "Address": 217,
                    "ByteSize": 2,
                    "Comment": "BRIGHT, and &14 for INVERSE.}",
                    "OperandType": 2
                },
                {
                    "Address": 219,
                    "ByteSize": 2,
                    "Comment": "Jump forward with 'mode' codes.",
                    "OperandType": 2
                },
                {
                    "Address": 221,
                    "ByteSize": 3,
                    "Comment": "This is #ADDR:0x5C6A#(FLAGS2)."
                },
                {
                    "Address": 224,
                    "ByteSize": 2,
                    "Comment": "{Flip bit 3 of #ADDR:0x5C6A#(FLAGS2). This is the CAPS LOCK"
                },
                {
                    "Address": 226,
                    "ByteSize": 1,
                    "Comment": "flag."
                },
                {
                    "Address": 227,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 228,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 230,
                    "ByteSize": 2,
                    "Comment": "{Check the lower limit."
                },
                {
                    "Address": 232,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 233,
                    "ByteSize": 2,
                    "Comment": "Reduce the range."
                },
                {
                    "Address": 235,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(MODE)."
                },
                {
                    "Address": 238,
                    "ByteSize": 1,
                    "Comment": "Has it been changed?"
                },
                {
                    "Address": 239,
                    "ByteSize": 1,
                    "Comment": "Enter the new 'mode' code."
                },
                {
                    "Address": 240,
                    "ByteSize": 2,
                    "Comment": "{Jump if it has changed; otherwise make it 'L mode'.",
                    "OperandType": 2
                },
                {
                    "Address": 242,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 244,
                    "ByteSize": 4,
                    "Comment": "Signal 'the mode might have changed' (set bit 3 of\n\\#SYSVAR(TV-FLAG))."
                },
                {
                    "Address": 248,
                    "ByteSize": 1,
                    "Comment": "{Reset the carry flag and return."
                },
                {
                    "Address": 249,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 250,
                    "ByteSize": 1,
                    "Comment": "Save the code."
                },
                {
                    "Address": 251,
                    "ByteSize": 2,
                    "Comment": "{Make the #REG:C# register hold the parameter (&00 to"
                },
                {
                    "Address": 253,
                    "ByteSize": 1,
                    "Comment": "&07).}"
                },
                {
                    "Address": 254,
                    "ByteSize": 2,
                    "Comment": "#REG:A# now holds the INK code."
                },
                {
                    "Address": 256,
                    "ByteSize": 2,
                    "Comment": "{But if the code was an 'unshifted' code then make"
                },
                {
                    "Address": 258,
                    "ByteSize": 2,
                    "Comment": "#REG:A# hold the PAPER code.",
                    "OperandType": 2
                },
                {
                    "Address": 260,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 261,
                    "ByteSize": 3,
                    "Comment": "Save the parameter at \\#SYSVAR(K-DATA)."
                },
                {
                    "Address": 264,
                    "ByteSize": 3,
                    "Comment": "This is #ADDR:0x110D#."
                },
                {
                    "Address": 267,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 269,
                    "ByteSize": 3,
                    "Comment": "Fetch the parameter (\\#SYSVAR(K-DATA)).",
                    "OperandType": 1
                },
                {
                    "Address": 272,
                    "ByteSize": 3,
                    "Comment": "This is #ADDR:0x10A8#."
                },
                {
                    "Address": 275,
                    "ByteSize": 3,
                    "Comment": "{Fetch the channel address (\\#SYSVAR(CHANS)).",
                    "OperandType": 1
                },
                {
                    "Address": 278,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 279,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 280,
                    "ByteSize": 1,
                    "Comment": "{Now set the input address."
                },
                {
                    "Address": 281,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 282,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 283,
                    "ByteSize": 1,
                    "Comment": "{Show a code has been found and return."
                },
                {
                    "Address": 284,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 285,
                    "ByteSize": 3,
                    "Comment": "Use the permanent colours.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 288,
                    "ByteSize": 4,
                    "Comment": "{Signal that the 'mode is to be considered unchanged'"
                },
                {
                    "Address": 292,
                    "ByteSize": 4,
                    "Comment": "(reset bit 3 of \\#SYSVAR(TV-FLAG)) and the 'lower\nscreen does not need clearing' (reset bit 5).}"
                },
                {
                    "Address": 296,
                    "ByteSize": 3,
                    "Comment": "{Save the current value of \\#SYSVAR(S-POSNL).",
                    "OperandType": 1
                },
                {
                    "Address": 299,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 300,
                    "ByteSize": 3,
                    "Comment": "{Keep the current value of \\#SYSVAR(ERR-SP).",
                    "OperandType": 1
                },
                {
                    "Address": 303,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 304,
                    "ByteSize": 3,
                    "Comment": "This is #ADDR:0x1167#."
                },
                {
                    "Address": 307,
                    "ByteSize": 1,
                    "Comment": "{Push this address on to the machine stack to make"
                },
                {
                    "Address": 308,
                    "ByteSize": 4,
                    "Comment": "#ADDR:0x1167# the entry point following an error (see\n\\#SYSVAR(ERR-SP)).}",
                    "OperandType": 1
                },
                {
                    "Address": 312,
                    "ByteSize": 3,
                    "Comment": "{Push the value of \\#SYSVAR(ECHO-E) on to the stack.",
                    "OperandType": 1
                },
                {
                    "Address": 315,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 316,
                    "ByteSize": 1,
                    "Comment": "{Make #REG:HL# point to the start of the space and"
                },
                {
                    "Address": 317,
                    "ByteSize": 3,
                    "Comment": "#REG:DE# the end.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 320,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 321,
                    "ByteSize": 3,
                    "Comment": "Now print the line.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 324,
                    "ByteSize": 1,
                    "Comment": "{Exchange the pointers and print the cursor."
                },
                {
                    "Address": 325,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 328,
                    "ByteSize": 3,
                    "Comment": "{Next fetch the current value of \\#SYSVAR(S-POSNL) and",
                    "OperandType": 1
                },
                {
                    "Address": 331,
                    "ByteSize": 1,
                    "Comment": "exchange it with \\#SYSVAR(ECHO-E).}"
                },
                {
                    "Address": 332,
                    "ByteSize": 1,
                    "Comment": "Pass \\#SYSVAR(ECHO-E) to #REG:DE#."
                },
                {
                    "Address": 333,
                    "ByteSize": 3,
                    "Comment": "Again fetch the permanent colours.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 336,
                    "ByteSize": 3,
                    "Comment": "{Fetch the current line number from \\#SYSVAR(S-POSNL)",
                    "OperandType": 1
                },
                {
                    "Address": 339,
                    "ByteSize": 1,
                    "Comment": "and subtract the old line number.}"
                },
                {
                    "Address": 340,
                    "ByteSize": 2,
                    "Comment": "Jump forward if no 'blanking' of lines required.",
                    "OperandType": 2
                },
                {
                    "Address": 342,
                    "ByteSize": 2,
                    "Comment": "Jump forward if not on the same line.",
                    "OperandType": 2
                },
                {
                    "Address": 344,
                    "ByteSize": 1,
                    "Comment": "{Fetch the old column number and subtract the new"
                },
                {
                    "Address": 345,
                    "ByteSize": 3,
                    "Comment": "column number (at \\#SYSVAR(S-POSNL)).}"
                },
                {
                    "Address": 348,
                    "ByteSize": 2,
                    "Comment": "Jump if no spaces required.",
                    "OperandType": 2
                },
                {
                    "Address": 350,
                    "ByteSize": 2,
                    "Comment": "A 'space'."
                },
                {
                    "Address": 352,
                    "ByteSize": 1,
                    "Comment": "Save the old values."
                },
                {
                    "Address": 353,
                    "ByteSize": 3,
                    "Comment": "Print it.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 356,
                    "ByteSize": 1,
                    "Comment": "Fetch the old values."
                },
                {
                    "Address": 357,
                    "ByteSize": 2,
                    "Comment": "Back again.",
                    "OperandType": 2
                },
                {
                    "Address": 359,
                    "ByteSize": 2,
                    "Comment": "{Give out a 'rasp' (see \\#SYSVAR(RASP))."
                },
                {
                    "Address": 361,
                    "ByteSize": 3,
                    "Comment": " "
                },
                {
                    "Address": 364,
                    "ByteSize": 3,
                    "Comment": " "
                },
                {
                    "Address": 367,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 370,
                    "ByteSize": 4,
                    "Comment": "Cancel the error number (\\#SYSVAR(ERR-NR))."
                },
                {
                    "Address": 374,
                    "ByteSize": 4,
                    "Comment": "{Fetch the current value of \\#SYSVAR(S-POSNL) and jump",
                    "OperandType": 1
                },
                {
                    "Address": 378,
                    "ByteSize": 2,
                    "Comment": "forward.}",
                    "OperandType": 2
                },
                {
                    "Address": 380,
                    "ByteSize": 1,
                    "Comment": "The new position value."
                },
                {
                    "Address": 381,
                    "ByteSize": 1,
                    "Comment": "The 'error address'."
                },
                {
                    "Address": 382,
                    "ByteSize": 1,
                    "Comment": "{The old value of \\#SYSVAR(ERR-SP) is restored."
                },
                {
                    "Address": 383,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 386,
                    "ByteSize": 1,
                    "Comment": "Fetch the old value of \\#SYSVAR(S-POSNL)."
                },
                {
                    "Address": 387,
                    "ByteSize": 1,
                    "Comment": "Save the new position values."
                },
                {
                    "Address": 388,
                    "ByteSize": 3,
                    "Comment": "Set the system variables.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 391,
                    "ByteSize": 1,
                    "Comment": "{The old value of \\#SYSVAR(S-POSNL) goes into"
                },
                {
                    "Address": 392,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(ECHO-E).}",
                    "OperandType": 1
                },
                {
                    "Address": 395,
                    "ByteSize": 4,
                    "Comment": "{\\#SYSVAR(X-PTR) is cleared in a suitable manner and"
                },
                {
                    "Address": 399,
                    "ByteSize": 1,
                    "Comment": "the return made.}"
                },
                {
                    "Address": 400,
                    "ByteSize": 3,
                    "Comment": "{Point to the last location of the editing area",
                    "OperandType": 1
                },
                {
                    "Address": 403,
                    "ByteSize": 1,
                    "Comment": "(\\#SYSVAR(WORKSP)-1).}"
                },
                {
                    "Address": 404,
                    "ByteSize": 1,
                    "Comment": "Clear the carry flag."
                },
                {
                    "Address": 405,
                    "ByteSize": 4,
                    "Comment": "{Point to the start of the editing area",
                    "OperandType": 1
                },
                {
                    "Address": 409,
                    "ByteSize": 4,
                    "Comment": "(\\#SYSVAR(E-LINE)) and return if in 'editing mode' (bit"
                },
                {
                    "Address": 413,
                    "ByteSize": 1,
                    "Comment": "5 of \\#SYSVAR(FLAGX) reset).}"
                },
                {
                    "Address": 414,
                    "ByteSize": 4,
                    "Comment": "Otherwise point #REG:DE# at the start of the work space\n(\\#SYSVAR(WORKSP)).",
                    "OperandType": 1
                },
                {
                    "Address": 418,
                    "ByteSize": 1,
                    "Comment": "Return if now intended."
                },
                {
                    "Address": 419,
                    "ByteSize": 3,
                    "Comment": "{Fetch \\#SYSVAR(STKBOT) and then return.",
                    "OperandType": 1
                },
                {
                    "Address": 422,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 423,
                    "ByteSize": 1,
                    "Comment": "Each character in turn is examined."
                },
                {
                    "Address": 424,
                    "ByteSize": 2,
                    "Comment": "Is it a number marker?"
                },
                {
                    "Address": 426,
                    "ByteSize": 3,
                    "Comment": "It will occupy six locations."
                },
                {
                    "Address": 429,
                    "ByteSize": 3,
                    "Comment": "Reclaim the floating point number.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 432,
                    "ByteSize": 1,
                    "Comment": "Fetch the code again."
                },
                {
                    "Address": 433,
                    "ByteSize": 1,
                    "Comment": "Update the pointer."
                },
                {
                    "Address": 434,
                    "ByteSize": 2,
                    "Comment": "Is it a carriage return?"
                },
                {
                    "Address": 436,
                    "ByteSize": 2,
                    "Comment": "{Back if not. But make a simple return if it is.",
                    "OperandType": 2
                },
                {
                    "Address": 438,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 439,
                    "ByteSize": 1,
                    "Comment": "Disable the maskable interrupt."
                },
                {
                    "Address": 440,
                    "ByteSize": 2,
                    "Comment": "The NEW flag."
                },
                {
                    "Address": 442,
                    "ByteSize": 4,
                    "Comment": "The existing value of \\#SYSVAR(RAMTOP) is preserved.",
                    "OperandType": 1
                },
                {
                    "Address": 446,
                    "ByteSize": 1,
                    "Comment": "{Load the alternate registers with the following"
                },
                {
                    "Address": 447,
                    "ByteSize": 4,
                    "Comment": "system variables (\\#SYSVAR(P-RAMT), \\#SYSVAR(RASP),",
                    "OperandType": 1
                },
                {
                    "Address": 451,
                    "ByteSize": 4,
                    "Comment": "\\#SYSVAR(PIP), \\#SYSVAR(UDG)). All of which will also be",
                    "OperandType": 1
                },
                {
                    "Address": 455,
                    "ByteSize": 3,
                    "Comment": "preserved.",
                    "OperandType": 1
                },
                {
                    "Address": 458,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 459,
                    "ByteSize": 1,
                    "Comment": "Save the flag for later."
                },
                {
                    "Address": 460,
                    "ByteSize": 2,
                    "Comment": "{Make the border white in colour."
                },
                {
                    "Address": 462,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 464,
                    "ByteSize": 2,
                    "Comment": "{Set the I register to hold the value of &3F."
                },
                {
                    "Address": 466,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 468,
                    "ByteSize": 1,
                    "Comment": "{Wait 24 T states."
                },
                {
                    "Address": 469,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 470,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 471,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 472,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 473,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 474,
                    "ByteSize": 1,
                    "Comment": "{Transfer the value in #REG:DE# (#ADDR:0x0000#=&FFFF,"
                },
                {
                    "Address": 475,
                    "ByteSize": 1,
                    "Comment": "#ADDR:0x11B7#=\\#SYSVAR(RAMTOP)).}"
                },
                {
                    "Address": 476,
                    "ByteSize": 2,
                    "Comment": "{Enter the value of &02 into every location above"
                },
                {
                    "Address": 478,
                    "ByteSize": 1,
                    "Comment": "&3FFF."
                },
                {
                    "Address": 479,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 480,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 482,
                    "ByteSize": 1,
                    "Comment": "Prepare for true subtraction."
                },
                {
                    "Address": 483,
                    "ByteSize": 2,
                    "Comment": "{The carry flag will become reset when the top is"
                },
                {
                    "Address": 485,
                    "ByteSize": 1,
                    "Comment": "reached.}"
                },
                {
                    "Address": 486,
                    "ByteSize": 1,
                    "Comment": "Update the pointer."
                },
                {
                    "Address": 487,
                    "ByteSize": 2,
                    "Comment": "Jump when at top.",
                    "OperandType": 2
                },
                {
                    "Address": 489,
                    "ByteSize": 1,
                    "Comment": "&02 goes to &01."
                },
                {
                    "Address": 490,
                    "ByteSize": 2,
                    "Comment": "But if zero then RAM is faulty. Use current #REG:HL# as\ntop.",
                    "OperandType": 2
                },
                {
                    "Address": 492,
                    "ByteSize": 1,
                    "Comment": "&01 goes to &00."
                },
                {
                    "Address": 493,
                    "ByteSize": 2,
                    "Comment": "Step to the next test unless it fails.",
                    "OperandType": 2
                },
                {
                    "Address": 495,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# points to the last actual location in working\norder."
                },
                {
                    "Address": 496,
                    "ByteSize": 1,
                    "Comment": "{Restore \\#SYSVAR(P-RAMT), \\#SYSVAR(RASP), \\#SYSVAR(PIP)"
                },
                {
                    "Address": 497,
                    "ByteSize": 4,
                    "Comment": "and \\#SYSVAR(UDG).",
                    "OperandType": 1
                },
                {
                    "Address": 501,
                    "ByteSize": 4,
                    "Comment": " ",
                    "OperandType": 1
                },
                {
                    "Address": 505,
                    "ByteSize": 3,
                    "Comment": " ",
                    "OperandType": 1
                },
                {
                    "Address": 508,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 509,
                    "ByteSize": 1,
                    "Comment": "Test the #ADDR:0x0000#/#ADDR:0x11B7# flag."
                },
                {
                    "Address": 510,
                    "ByteSize": 2,
                    "Comment": "Jump forward if coming from the #ADDR:0x11B7# command\nroutine.",
                    "OperandType": 2
                },
                {
                    "Address": 512,
                    "ByteSize": 3,
                    "Comment": "Top of physical RAM (\\#SYSVAR(P-RAMT)).",
                    "OperandType": 1
                },
                {
                    "Address": 515,
                    "ByteSize": 3,
                    "Comment": "Last byte of 'U' in character set."
                },
                {
                    "Address": 518,
                    "ByteSize": 3,
                    "Comment": "There are this number of bytes in twenty one letters."
                },
                {
                    "Address": 521,
                    "ByteSize": 1,
                    "Comment": "Switch the pointers."
                },
                {
                    "Address": 522,
                    "ByteSize": 2,
                    "Comment": "Now copy the character forms of the letters 'A' to\n'U'."
                },
                {
                    "Address": 524,
                    "ByteSize": 1,
                    "Comment": "Switch the pointers back."
                },
                {
                    "Address": 525,
                    "ByteSize": 1,
                    "Comment": "Point to the first byte."
                },
                {
                    "Address": 526,
                    "ByteSize": 3,
                    "Comment": "Now set \\#SYSVAR(UDG).",
                    "OperandType": 1
                },
                {
                    "Address": 529,
                    "ByteSize": 1,
                    "Comment": "Down one location."
                },
                {
                    "Address": 530,
                    "ByteSize": 3,
                    "Comment": "{Set the system variables \\#SYSVAR(RASP) and"
                },
                {
                    "Address": 533,
                    "ByteSize": 4,
                    "Comment": "\\#SYSVAR(PIP).}",
                    "OperandType": 1
                },
                {
                    "Address": 537,
                    "ByteSize": 3,
                    "Comment": "Set \\#SYSVAR(RAMTOP).",
                    "OperandType": 1
                },
                {
                    "Address": 540,
                    "ByteSize": 3,
                    "Comment": "{Initialise the system variable \\#SYSVAR(CHARS)."
                },
                {
                    "Address": 543,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 546,
                    "ByteSize": 3,
                    "Comment": "{The top location (\\#SYSVAR(RAMTOP)) is made to hold",
                    "OperandType": 1
                },
                {
                    "Address": 549,
                    "ByteSize": 2,
                    "Comment": "&3E.}"
                },
                {
                    "Address": 551,
                    "ByteSize": 1,
                    "Comment": "The next location is left holding zero."
                },
                {
                    "Address": 552,
                    "ByteSize": 1,
                    "Comment": "These two locations represent the 'last entry'."
                },
                {
                    "Address": 553,
                    "ByteSize": 1,
                    "Comment": "{Step down two locations to find the correct value for"
                },
                {
                    "Address": 554,
                    "ByteSize": 1,
                    "Comment": "\\#SYSVAR(ERR-SP)."
                },
                {
                    "Address": 555,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 558,
                    "ByteSize": 2,
                    "Comment": "Interrupt mode 1 is used."
                },
                {
                    "Address": 560,
                    "ByteSize": 4,
                    "Comment": "#REG:IY# holds +\\#SYSVAR(ERR-NR) always."
                },
                {
                    "Address": 564,
                    "ByteSize": 1,
                    "Comment": "The maskable interrupt can now be enabled. The\nreal-time clock will be updated and the keyboard\nscanned every 1/50th of a second."
                },
                {
                    "Address": 565,
                    "ByteSize": 3,
                    "Comment": "{The system variable \\#SYSVAR(CHANS) is set to the base"
                },
                {
                    "Address": 568,
                    "ByteSize": 3,
                    "Comment": "address of the #ADDR:0x5CB6#(channel information area).}",
                    "OperandType": 1
                },
                {
                    "Address": 571,
                    "ByteSize": 3,
                    "Comment": "{The initial channel data is moved from the table"
                },
                {
                    "Address": 574,
                    "ByteSize": 3,
                    "Comment": "(#ADDR:0x15AF#) to the channel information area."
                },
                {
                    "Address": 577,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 578,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 580,
                    "ByteSize": 1,
                    "Comment": "{The system variable \\#SYSVAR(DATADD) is made to point"
                },
                {
                    "Address": 581,
                    "ByteSize": 1,
                    "Comment": "to the last location of the channel data."
                },
                {
                    "Address": 582,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 585,
                    "ByteSize": 1,
                    "Comment": "{And \\#SYSVAR(PROG) and \\#SYSVAR(VARS) to the the"
                },
                {
                    "Address": 586,
                    "ByteSize": 3,
                    "Comment": "location after that.",
                    "OperandType": 1
                },
                {
                    "Address": 589,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 592,
                    "ByteSize": 2,
                    "Comment": "The end-marker of the variables area."
                },
                {
                    "Address": 594,
                    "ByteSize": 1,
                    "Comment": "{Move on one location to find the value for"
                },
                {
                    "Address": 595,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(E-LINE).}",
                    "OperandType": 1
                },
                {
                    "Address": 598,
                    "ByteSize": 2,
                    "Comment": "{Make the edit-line be a single 'carriage return'"
                },
                {
                    "Address": 600,
                    "ByteSize": 1,
                    "Comment": "character.}"
                },
                {
                    "Address": 601,
                    "ByteSize": 2,
                    "Comment": "Now enter an end marker."
                },
                {
                    "Address": 603,
                    "ByteSize": 1,
                    "Comment": "{Move on one location to find the value for"
                },
                {
                    "Address": 604,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(WORKSP), \\#SYSVAR(STKBOT) and \\#SYSVAR(STKEND).",
                    "OperandType": 1
                },
                {
                    "Address": 607,
                    "ByteSize": 3,
                    "Comment": " ",
                    "OperandType": 1
                },
                {
                    "Address": 610,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 613,
                    "ByteSize": 2,
                    "Comment": "{Initialise the colour system variables"
                },
                {
                    "Address": 615,
                    "ByteSize": 3,
                    "Comment": "(\\#SYSVAR(ATTR-P), \\#SYSVAR(ATTR-T), \\#SYSVAR(BORDCR)) to",
                    "OperandType": 1
                },
                {
                    "Address": 618,
                    "ByteSize": 3,
                    "Comment": "FLASH 0, BRIGHT 0, PAPER 7, INK 0, BORDER 7.",
                    "OperandType": 1
                },
                {
                    "Address": 621,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 624,
                    "ByteSize": 3,
                    "Comment": "{Initialise the system variables \\#SYSVAR(REPDEL) and"
                },
                {
                    "Address": 627,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(REPPER).}",
                    "OperandType": 1
                },
                {
                    "Address": 630,
                    "ByteSize": 3,
                    "Comment": "Make #ADDR:0x5C00#(KSTATE0) hold &FF."
                },
                {
                    "Address": 633,
                    "ByteSize": 3,
                    "Comment": "Make #ADDR:0x5C04#(KSTATE4) hold &FF."
                },
                {
                    "Address": 636,
                    "ByteSize": 3,
                    "Comment": "{Next move the #ADDR:0x15C6#(initial stream data) from its"
                },
                {
                    "Address": 639,
                    "ByteSize": 3,
                    "Comment": "table to the #ADDR:0x5C10#(streams area)."
                },
                {
                    "Address": 642,
                    "ByteSize": 3,
                    "Comment": " "
                },
                {
                    "Address": 645,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 647,
                    "ByteSize": 4,
                    "Comment": "{Signal 'printer in use' (set bit 1 of \\#SYSVAR(FLAGS))"
                },
                {
                    "Address": 651,
                    "ByteSize": 3,
                    "Comment": "and clear the printer buffer.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 654,
                    "ByteSize": 4,
                    "Comment": "{Set the size of the lower part of the display"
                },
                {
                    "Address": 658,
                    "ByteSize": 3,
                    "Comment": "(\\#SYSVAR(DF-SZ)) and clear the whole display.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 661,
                    "ByteSize": 1,
                    "Comment": "{Now print the message '\\#CHR169 1982 Sinclair Research"
                },
                {
                    "Address": 662,
                    "ByteSize": 3,
                    "Comment": "Ltd' on the bottom line."
                },
                {
                    "Address": 665,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 668,
                    "ByteSize": 4,
                    "Comment": "Signal 'the lower part will required to be cleared'\n(set bit 5 of \\#SYSVAR(TV-FLAG))."
                },
                {
                    "Address": 672,
                    "ByteSize": 2,
                    "Comment": "Jump forward into the main execution loop.",
                    "OperandType": 2
                },
                {
                    "Address": 674,
                    "ByteSize": 4,
                    "Comment": "The lower part of the screen is to be two lines in\nsize (see \\#SYSVAR(DF-SZ))."
                },
                {
                    "Address": 678,
                    "ByteSize": 3,
                    "Comment": "Produce an automatic listing.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 681,
                    "ByteSize": 3,
                    "Comment": "All the areas from \\#SYSVAR(E-LINE) onwards are given\ntheir minimum configurations.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 684,
                    "ByteSize": 2,
                    "Comment": "{Channel 'K' is opened before calling the #ADDR:0x0F2C#."
                },
                {
                    "Address": 686,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 689,
                    "ByteSize": 3,
                    "Comment": "The #ADDR:0x0F2C# is called to allow the user to build up a\nBASIC line.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 692,
                    "ByteSize": 3,
                    "Comment": "The current line is scanned for correct syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 695,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if the syntax is correct"
                },
                {
                    "Address": 699,
                    "ByteSize": 2,
                    "Comment": "(\\#SYSVAR(ERR-NR) is &FF).}",
                    "OperandType": 2
                },
                {
                    "Address": 701,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if other than channel 'K' is being used"
                },
                {
                    "Address": 705,
                    "ByteSize": 2,
                    "Comment": "(bit 4 of #ADDR:0x5C6A#(FLAGS2) is set).}",
                    "OperandType": 2
                },
                {
                    "Address": 707,
                    "ByteSize": 3,
                    "Comment": "Point to the start of the line with the error\n(\\#SYSVAR(E-LINE)).",
                    "OperandType": 1
                },
                {
                    "Address": 710,
                    "ByteSize": 3,
                    "Comment": "Remove the floating-point forms from this line.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 713,
                    "ByteSize": 4,
                    "Comment": "{Reset \\#SYSVAR(ERR-NR) and jump back to #ADDR:0x12AC#"
                },
                {
                    "Address": 717,
                    "ByteSize": 2,
                    "Comment": "leaving the listing unchanged.}",
                    "OperandType": 2
                },
                {
                    "Address": 719,
                    "ByteSize": 3,
                    "Comment": "Point to the start of the line (\\#SYSVAR(E-LINE)).",
                    "OperandType": 1
                },
                {
                    "Address": 722,
                    "ByteSize": 3,
                    "Comment": "Set \\#SYSVAR(CH-ADD) to the start also.",
                    "OperandType": 1
                },
                {
                    "Address": 725,
                    "ByteSize": 3,
                    "Comment": "Fetch any line number into #REG:BC#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 728,
                    "ByteSize": 1,
                    "Comment": "{Is the line number a valid one?"
                },
                {
                    "Address": 729,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 730,
                    "ByteSize": 3,
                    "Comment": "Jump if it is so, and add the new line to the existing\nprogram.",
                    "OperandType": 2
                },
                {
                    "Address": 733,
                    "ByteSize": 1,
                    "Comment": "{Fetch the first character of the line and see if the",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 734,
                    "ByteSize": 2,
                    "Comment": "line is 'carriage return only'.}"
                },
                {
                    "Address": 736,
                    "ByteSize": 2,
                    "Comment": "If it is then jump back.",
                    "OperandType": 2
                },
                {
                    "Address": 738,
                    "ByteSize": 4,
                    "Comment": "{Clear the whole display unless the flag (bit 0 of"
                },
                {
                    "Address": 742,
                    "ByteSize": 3,
                    "Comment": "#ADDR:0x5C6A#(FLAGS2)) says it is unnecessary.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 745,
                    "ByteSize": 3,
                    "Comment": "Clear the lower part anyway.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 748,
                    "ByteSize": 2,
                    "Comment": "{Set the appropriate value for the scroll counter"
                },
                {
                    "Address": 750,
                    "ByteSize": 3,
                    "Comment": "(\\#SYSVAR(SCR-CT)) by subtracting the second byte of"
                },
                {
                    "Address": 753,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(S-POSN) from &19).}",
                    "OperandType": 1
                },
                {
                    "Address": 756,
                    "ByteSize": 4,
                    "Comment": "Signal 'line execution' (set bit 7 of \\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 760,
                    "ByteSize": 4,
                    "Comment": "Ensure \\#SYSVAR(ERR-NR) is correct."
                },
                {
                    "Address": 764,
                    "ByteSize": 4,
                    "Comment": "Deal with the first statement in the line (set\n\\#SYSVAR(NSPPC) to &01)."
                },
                {
                    "Address": 768,
                    "ByteSize": 3,
                    "Comment": "Now the line is interpreted. Note: the address #ADDR:0x1303#\ngoes on to the machine stack and is addressed by\n\\#SYSVAR(ERR-SP).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 771,
                    "ByteSize": 1,
                    "Comment": "The maskable interrupt must be enabled."
                },
                {
                    "Address": 772,
                    "ByteSize": 4,
                    "Comment": "Signal 'ready for a new key' (reset bit 5 of\n\\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 776,
                    "ByteSize": 4,
                    "Comment": "{Empty the printer buffer if it has been used (bit 1"
                },
                {
                    "Address": 780,
                    "ByteSize": 3,
                    "Comment": "of #ADDR:0x5C6A#(FLAGS2) set).}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 783,
                    "ByteSize": 3,
                    "Comment": "{Fetch the error number (\\#SYSVAR(ERR-NR)) and",
                    "OperandType": 1
                },
                {
                    "Address": 786,
                    "ByteSize": 1,
                    "Comment": "increment it.}"
                },
                {
                    "Address": 787,
                    "ByteSize": 1,
                    "Comment": "Save the new value."
                },
                {
                    "Address": 788,
                    "ByteSize": 3,
                    "Comment": "{The system variables \\#SYSVAR(FLAGX),"
                },
                {
                    "Address": 791,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(X-PTR-hi) and \\#SYSVAR(DEFADD) are all set to"
                },
                {
                    "Address": 794,
                    "ByteSize": 3,
                    "Comment": "zero."
                },
                {
                    "Address": 797,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 800,
                    "ByteSize": 3,
                    "Comment": "{Ensure that stream &00 points to channel 'K' (see"
                },
                {
                    "Address": 803,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(STRMS)).}",
                    "OperandType": 1
                },
                {
                    "Address": 806,
                    "ByteSize": 3,
                    "Comment": "Clear all the work areas and the calculator stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 809,
                    "ByteSize": 4,
                    "Comment": "Signal 'editing mode' (reset bit 5 of \\#SYSVAR(FLAGX))."
                },
                {
                    "Address": 813,
                    "ByteSize": 3,
                    "Comment": "Clear the lower screen.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 816,
                    "ByteSize": 4,
                    "Comment": "Signal 'the lower screen will require clearing' (set\nbit 5 of \\#SYSVAR(TV-FLAG))."
                },
                {
                    "Address": 820,
                    "ByteSize": 1,
                    "Comment": "Fetch the report value."
                },
                {
                    "Address": 821,
                    "ByteSize": 1,
                    "Comment": "Make a copy in #REG:B#."
                },
                {
                    "Address": 822,
                    "ByteSize": 2,
                    "Comment": "{Jump forward with report numbers '0 to 9'."
                },
                {
                    "Address": 824,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 826,
                    "ByteSize": 2,
                    "Comment": "Add the ASCII letter offset value."
                },
                {
                    "Address": 828,
                    "ByteSize": 3,
                    "Comment": "{Print the report code and follow it with a 'space'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 831,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 833,
                    "ByteSize": 1,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 834,
                    "ByteSize": 1,
                    "Comment": "Fetch the report value (used to identify the required\nreport message)."
                },
                {
                    "Address": 835,
                    "ByteSize": 3,
                    "Comment": "{Print the message."
                },
                {
                    "Address": 838,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 841,
                    "ByteSize": 1,
                    "Comment": "{Follow it by a 'comma' and a 'space'."
                },
                {
                    "Address": 842,
                    "ByteSize": 3,
                    "Comment": " "
                },
                {
                    "Address": 845,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 848,
                    "ByteSize": 4,
                    "Comment": "{Now fetch the current line number (\\#SYSVAR(PPC)) and",
                    "OperandType": 1
                },
                {
                    "Address": 852,
                    "ByteSize": 3,
                    "Comment": "print it as well.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 855,
                    "ByteSize": 2,
                    "Comment": "{Follow it by a ':'."
                },
                {
                    "Address": 857,
                    "ByteSize": 1,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 858,
                    "ByteSize": 3,
                    "Comment": "{Fetch the current statement number (\\#SYSVAR(SUBPPC))"
                },
                {
                    "Address": 861,
                    "ByteSize": 2,
                    "Comment": "into the #REG:BC# register pair and print it."
                },
                {
                    "Address": 863,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 866,
                    "ByteSize": 3,
                    "Comment": "Clear the editing area.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 869,
                    "ByteSize": 3,
                    "Comment": "Fetch the error number (\\#SYSVAR(ERR-NR)) again.",
                    "OperandType": 1
                },
                {
                    "Address": 872,
                    "ByteSize": 1,
                    "Comment": "Increment it as usual."
                },
                {
                    "Address": 873,
                    "ByteSize": 2,
                    "Comment": "If the program was completed successfully there cannot\nbe any 'CONTinuing' so jump.",
                    "OperandType": 2
                },
                {
                    "Address": 875,
                    "ByteSize": 2,
                    "Comment": "{If the program halted with 'STOP statement' or 'BREAK"
                },
                {
                    "Address": 877,
                    "ByteSize": 2,
                    "Comment": "into program' CONTinuing will be from the next",
                    "OperandType": 2
                },
                {
                    "Address": 879,
                    "ByteSize": 2,
                    "Comment": "statement; otherwise \\#SYSVAR(SUBPPC) is unchanged."
                },
                {
                    "Address": 881,
                    "ByteSize": 2,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 883,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 886,
                    "ByteSize": 3,
                    "Comment": "{The system variables \\#SYSVAR(OLDPPC) and"
                },
                {
                    "Address": 889,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(OSPCC) have now to be made to hold the\nCONTinuing line and statement numbers.}"
                },
                {
                    "Address": 892,
                    "ByteSize": 3,
                    "Comment": "{The values used will be those in \\#SYSVAR(PPC) and"
                },
                {
                    "Address": 895,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(SUBPPC) unless \\#SYSVAR(NSPPC) indicates that"
                },
                {
                    "Address": 897,
                    "ByteSize": 2,
                    "Comment": "the 'break' occurred before a 'jump' (i.e. after a GO",
                    "OperandType": 2
                },
                {
                    "Address": 899,
                    "ByteSize": 1,
                    "Comment": "TO statement etc.)."
                },
                {
                    "Address": 900,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 902,
                    "ByteSize": 4,
                    "Comment": "\\#SYSVAR(NSPPC) is reset to indicate 'no jump'."
                },
                {
                    "Address": 906,
                    "ByteSize": 4,
                    "Comment": "'K mode' is selected (reset bit 3 of \\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 910,
                    "ByteSize": 3,
                    "Comment": "And finally the jump back is made but no program\nlisting will appear until requested.",
                    "OperandType": 2
                }
            ],
            "CommentBlocks": [
                {
                    "Address": 7,
                    "Comment": "THE 'CURSOR LEFT EDITING' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x0FA0#(editing keys table).\n \nHL Address of the cursor (\\#SYSVAR(K-CUR))"
                },
                {
                    "Address": 12,
                    "Comment": "THE 'CURSOR RIGHT EDITING' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x0FA0#(editing keys table).\n \nHL Address of the cursor (\\#SYSVAR(K-CUR))"
                },
                {
                    "Address": 17,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1007#."
                },
                {
                    "Address": 21,
                    "Comment": "THE 'DELETE EDITING' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x0FA0#(editing keys table).\n \nHL Address of the cursor (\\#SYSVAR(K-CUR))"
                },
                {
                    "Address": 30,
                    "Comment": "THE 'ED-IGNORE' SUBROUTINE\n \nUsed by the routine at #ADDR:0x0F2C#."
                },
                {
                    "Address": 36,
                    "Comment": "This routine continues into #ADDR:0x1024#.\nTHE 'ENTER EDITING' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0FF3# and #ADDR:0x1076#.\n \nThe routine at #ADDR:0x101E# continues here.\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x0FA0#(editing keys table)."
                },
                {
                    "Address": 38,
                    "Comment": "This entry point is used by the routine at #ADDR:0x107F#."
                },
                {
                    "Address": 49,
                    "Comment": "THE 'ED-EDGE' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1007# and #ADDR:0x1015#.\n \nThe address of the cursor is in the #REG:HL# register pair and will be\ndecremented unless the cursor is already at the start of the line. Care is\ntaken not to put the cursor between control characters and their parameters.\n \nHL Address of the cursor (\\#SYSVAR(K-CUR))\nO:HL New address of the cursor"
                },
                {
                    "Address": 62,
                    "Comment": "Now enter a loop to check that control characters are not split from their\nparameters."
                },
                {
                    "Address": 89,
                    "Comment": "THE 'CURSOR UP EDITING' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x0FA0#(editing keys table)."
                },
                {
                    "Address": 110,
                    "Comment": "This entry point is used by the routine at #ADDR:0x0FF3#."
                },
                {
                    "Address": 118,
                    "Comment": "THE 'ED-SYMBOL' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x0FA0#(editing keys table).\n \nA Code of the last key pressed\n \nIf SYMBOL and GRAPHICS codes were used they would be handled as follows:"
                },
                {
                    "Address": 124,
                    "Comment": "The address of this entry point is derived from an offset found in the\n#ADDR:0x0FA0#(editing keys table)."
                },
                {
                    "Address": 127,
                    "Comment": "THE 'ED-ERROR' SUBROUTINE\n \nUsed by the routine at #ADDR:0x0F2C#.\n \nCome here when there has been some kind of error."
                },
                {
                    "Address": 151,
                    "Comment": "THE 'CLEAR-SP' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0FA9# and #ADDR:0x12A2#.\n \nThe editing area or the work space is cleared as directed."
                },
                {
                    "Address": 168,
                    "Comment": "THE 'KEYBOARD INPUT' SUBROUTINE\n \nThe address of this routine is found in the #ADDR:0x15AF#(initial channel\ninformation table).\n \nThis important subroutine returns the code of the last key to have been\npressed, but note that CAPS LOCK, the changing of the mode and the colour\ncontrol parameters are handled within the subroutine.\n \nO:A Code of the last key pressed\nO:F Carry flag set if a key was pressed"
                },
                {
                    "Address": 209,
                    "Comment": "Now deal with the FLASH, BRIGHT and INVERSE codes."
                },
                {
                    "Address": 219,
                    "Comment": "The CAPS LOCK code and the mode codes are dealt with 'locally'."
                },
                {
                    "Address": 250,
                    "Comment": "The control key codes (apart from FLASH, BRIGHT and INVERSE) are manipulated."
                },
                {
                    "Address": 261,
                    "Comment": "The parameter is saved in \\#SYSVAR(K-DATA) and the channel address changed\nfrom #ADDR:0x10A8# to #ADDR:0x110D#."
                },
                {
                    "Address": 269,
                    "Comment": "Note: on the first pass entering at #ADDR:0x10A8# the #REG:A# register is returned\nholding a 'control code' and then on the next pass, entering at #ADDR:0x110D#, it\nis the parameter that is returned."
                },
                {
                    "Address": 275,
                    "Comment": "Now set the input address in the first channel area."
                },
                {
                    "Address": 283,
                    "Comment": "Finally exit with the required code in the #REG:A# register."
                },
                {
                    "Address": 285,
                    "Comment": "THE 'LOWER SCREEN COPYING' SUBROUTINE\n \nUsed by the routines at #ADDR:0x10A8# and #ADDR:0x2089#.\n \nThis subroutine is called whenever the line in the editing area or the INPUT\narea is to be printed in the lower part of the screen."
                },
                {
                    "Address": 336,
                    "Comment": "The remainder of any line that has been started is now completed with spaces\nprinted with the 'permanent' PAPER colour."
                },
                {
                    "Address": 359,
                    "Comment": "New deal with any errors."
                },
                {
                    "Address": 380,
                    "Comment": "The normal exit upon completion of the copying over of the edit or the INPUT\nline."
                },
                {
                    "Address": 382,
                    "Comment": "But come here after an error."
                },
                {
                    "Address": 400,
                    "Comment": "THE 'SET-HL' AND 'SET-DE' SUBROUTINES\n \nUsed by the routine at #ADDR:0x1097#.\n \nThese subroutines return with #REG:DE# pointing to the first location and\n#REG:HL# to the last location of either the editing area or the work space.\n \nO:DE Address of the first byte of the editing area or work space\nO:HL Address of the last byte of the editing area or work space"
                },
                {
                    "Address": 405,
                    "Comment": "This entry point is used by the routines at #ADDR:0x1031# and #ADDR:0x111D# with the\ncarry flag set."
                },
                {
                    "Address": 423,
                    "Comment": "THE 'REMOVE-FP' SUBROUTINE\n \nUsed by the routines at #ADDR:0x12A2# and #ADDR:0x2089#.\n \nThis subroutine removes the hidden floating-point forms in a BASIC line.\n \nHL \\#SYSVAR(E-LINE) or \\#SYSVAR(WORKSP)"
                },
                {
                    "Address": 439,
                    "Comment": "THE 'NEW' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1AA8#(parameter table)."
                },
                {
                    "Address": 459,
                    "Comment": "This entry point is used by the routine at #ADDR:0x0000#.\n \nThe main entry point."
                },
                {
                    "Address": 474,
                    "Comment": "Now the memory is checked."
                },
                {
                    "Address": 496,
                    "Comment": "Next restore the 'preserved' system variables. (Meaningless when coming from\n#ADDR:0x0000#.)"
                },
                {
                    "Address": 512,
                    "Comment": "Overwrite the system variables when coming from #ADDR:0x0000# and initialise the\nuser-defined graphics area."
                },
                {
                    "Address": 537,
                    "Comment": "The remainder of the routine is common to both the #ADDR:0x0000# and the #ADDR:0x11B7#\noperations."
                },
                {
                    "Address": 546,
                    "Comment": "Next the machine stack is set up."
                },
                {
                    "Address": 558,
                    "Comment": "The initialisation routine continues with:"
                },
                {
                    "Address": 674,
                    "Comment": "THE 'MAIN EXECUTION' LOOP\n \nUsed by the routine at #ADDR:0x155D#.\n \nThe main loop controls the 'editing mode', the execution of direct commands\nand the production of reports."
                },
                {
                    "Address": 681,
                    "Comment": "This entry point is used by the routine at #ADDR:0x11B7#."
                },
                {
                    "Address": 719,
                    "Comment": "The 'edit-line' has passed syntax and the three types of line that are\npossible have to be distinguished from each other."
                },
                {
                    "Address": 738,
                    "Comment": "The 'edit-line' must start with a direct BASIC command so this line becomes\nthe first line to be interpreted."
                },
                {
                    "Address": 771,
                    "Comment": "After the line has been interpreted and all the actions consequential to it\nhave been completed a return is made to #ADDR:0x1303#, so that a report can be\nmade."
                },
                {
                    "Address": 787,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1555#."
                },
                {
                    "Address": 913,
                    "Comment": "THE REPORT MESSAGES\n \nUsed by the routine at #ADDR:0x12A2#.\n \nEach message is given with the last character inverted (plus &80)."
                }
            ],
            "DataInfo": [
                {
                    "Address": 0,
                    "DataType": 11,
                    "InstructionAddressRef": 268369920
                },
                {
                    "Address": 913,
                    "Comment": "Initial byte is stepped over."
                },
                {
                    "Address": 914,
                    "ByteSize": 2,
                    "Comment": "0 OK",
                    "DataType": 4
                },
                {
                    "Address": 916,
                    "ByteSize": 16,
                    "Comment": "1 NEXT without FOR",
                    "DataType": 4
                },
                {
                    "Address": 932,
                    "ByteSize": 18,
                    "Comment": "2 Variable not found",
                    "DataType": 4
                },
                {
                    "Address": 950,
                    "ByteSize": 15,
                    "Comment": "3 Subscript wrong",
                    "DataType": 4
                },
                {
                    "Address": 965,
                    "ByteSize": 13,
                    "Comment": "4 Out of memory",
                    "DataType": 4
                },
                {
                    "Address": 978,
                    "ByteSize": 13,
                    "Comment": "5 Out of screen",
                    "DataType": 4
                },
                {
                    "Address": 991,
                    "ByteSize": 14,
                    "Comment": "6 Number too big",
                    "DataType": 4
                },
                {
                    "Address": 1005,
                    "ByteSize": 20,
                    "Comment": "7 RETURN without GOSUB",
                    "DataType": 4
                }
            ],
            "LabelInfo": [
                {
                    "Address": 1,
                    "LabelType": 2,
                    "Name": "ED_STOP"
                },
                {
                    "Address": 7,
                    "LabelType": 2,
                    "Name": "ED_LEFT"
                },
                {
                    "Address": 12,
                    "LabelType": 2,
                    "Name": "ED_RIGHT"
                },
                {
                    "Address": 17,
                    "LabelType": 2,
                    "Name": "ED_CUR"
                },
                {
                    "Address": 21,
                    "LabelType": 2,
                    "Name": "ED_DELETE"
                },
                {
                    "Address": 30,
                    "LabelType": 2,
                    "Name": "ED_IGNORE"
                },
                {
                    "Address": 36,
                    "LabelType": 2,
                    "Name": "ED_ENTER"
                },
                {
                    "Address": 38,
                    "LabelType": 2,
                    "Name": "ED_END"
                },
                {
                    "Address": 49,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "ED_EDGE"
                },
                {
                    "Address": 62,
                    "LabelType": 2,
                    "Name": "ED_EDGE_1"
                },
                {
                    "Address": 81,
                    "LabelType": 2,
                    "Name": "ED_EDGE_2"
                },
                {
                    "Address": 89,
                    "LabelType": 2,
                    "Name": "ED_UP"
                },
                {
                    "Address": 110,
                    "LabelType": 2,
                    "Name": "ED_LIST"
                },
                {
                    "Address": 118,
                    "LabelType": 2,
                    "Name": "ED_SYMBOL"
                },
                {
                    "Address": 124,
                    "LabelType": 2,
                    "Name": "ED_GRAPH"
                },
                {
                    "Address": 127,
                    "LabelType": 2,
                    "Name": "ED_ERROR"
                },
                {
                    "Address": 151,
                    "LabelType": 2,
                    "Name": "CLEAR_SP"
                },
                {
                    "Address": 168,
                    "LabelType": 2,
                    "Name": "KEY_INPUT"
                },
                {
                    "Address": 219,
                    "LabelType": 2,
                    "Name": "KEY_M_CL"
                },
                {
                    "Address": 230,
                    "LabelType": 2,
                    "Name": "KEY_MODE"
                },
                {
                    "Address": 244,
                    "LabelType": 2,
                    "Name": "KEY_FLAG"
                },
                {
                    "Address": 250,
                    "LabelType": 2,
                    "Name": "KEY_CONTR"
                },
                {
                    "Address": 261,
                    "LabelType": 2,
                    "Name": "KEY_DATA"
                },
                {
                    "Address": 269,
                    "LabelType": 2,
                    "Name": "KEY_NEXT"
                },
                {
                    "Address": 275,
                    "LabelType": 2,
                    "Name": "KEY_CHAN"
                },
                {
                    "Address": 283,
                    "LabelType": 2,
                    "Name": "KEY_DONE_2"
                },
                {
                    "Address": 285,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "ED_COPY"
                },
                {
                    "Address": 336,
                    "LabelType": 2,
                    "Name": "ED_BLANK"
                },
                {
                    "Address": 350,
                    "LabelType": 2,
                    "Name": "ED_SPACES"
                },
                {
                    "Address": 359,
                    "LabelType": 2,
                    "Name": "ED_FULL"
                },
                {
                    "Address": 380,
                    "LabelType": 2,
                    "Name": "ED_C_DONE"
                },
                {
                    "Address": 382,
                    "LabelType": 2,
                    "Name": "ED_C_END"
                },
                {
                    "Address": 400,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "SET_HL"
                },
                {
                    "Address": 405,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "SET_DE"
                },
                {
                    "Address": 423,
                    "LabelType": 2,
                    "Name": "REMOVE_FP"
                },
                {
                    "Address": 439,
                    "LabelType": 2,
                    "Name": "NEW"
                },
                {
                    "Address": 459,
                    "LabelType": 2,
                    "Name": "START_NEW"
                },
                {
                    "Address": 476,
                    "LabelType": 2,
                    "Name": "RAM_FILL"
                },
                {
                    "Address": 482,
                    "LabelType": 2,
                    "Name": "RAM_READ"
                },
                {
                    "Address": 495,
                    "LabelType": 2,
                    "Name": "RAM_DONE"
                },
                {
                    "Address": 537,
                    "LabelType": 2,
                    "Name": "RAM_SET"
                },
                {
                    "Address": 674,
                    "LabelType": 2,
                    "Name": "MAIN_EXEC"
                },
                {
                    "Address": 681,
                    "LabelType": 2,
                    "Name": "MAIN_1"
                },
                {
                    "Address": 684,
                    "LabelType": 2,
                    "Name": "MAIN_2"
                },
                {
                    "Address": 719,
                    "LabelType": 2,
                    "Name": "MAIN_3"
                },
                {
                    "Address": 771,
                    "LabelType": 2,
                    "Name": "MAIN_4"
                },
                {
                    "Address": 787,
                    "LabelType": 2,
                    "Name": "MAIN_G"
                },
                {
                    "Address": 828,
                    "LabelType": 2,
                    "Name": "MAIN_5"
                },
                {
                    "Address": 883,
                    "LabelType": 2,
                    "Name": "MAIN_6"
                },
                {
                    "Address": 886,
                    "LabelType": 2,
                    "Name": "MAIN_7"
                },
                {
                    "Address": 900,
                    "LabelType": 2,
                    "Name": "MAIN_8"
                },
                {
                    "Address": 902,
                    "LabelType": 2,
                    "Name": "MAIN_9"
                },
                {
                    "Address": 913,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "REPORTS"
                }
            ],
            "PageId": 4
        },
        {
            "CodeInfo": [
                {
                    "Address": 341,
                    "ByteSize": 2,
                    "Comment": "'G' has the code &10 plus &37."
                },
                {
                    "Address": 343,
                    "ByteSize": 3,
                    "Comment": "Clear #REG:BC#."
                },
                {
                    "Address": 346,
                    "ByteSize": 3,
                    "Comment": "Jump back to give the report.",
                    "OperandType": 2
                },
                {
                    "Address": 349,
                    "ByteSize": 4,
                    "Comment": "Make the new line number the 'current line'\n(\\#SYSVAR(E-PPC)).",
                    "OperandType": 1
                },
                {
                    "Address": 353,
                    "ByteSize": 3,
                    "Comment": "{Fetch \\#SYSVAR(CH-ADD) and save the address in #REG:DE#.",
                    "OperandType": 1
                },
                {
                    "Address": 356,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 357,
                    "ByteSize": 3,
                    "Comment": "{Push the address of #ADDR:0x1555# on to the machine stack."
                },
                {
                    "Address": 360,
                    "ByteSize": 1,
                    "Comment": "\\#SYSVAR(ERR-SP) will now point to #ADDR:0x1555#.}"
                },
                {
                    "Address": 361,
                    "ByteSize": 3,
                    "Comment": "Fetch \\#SYSVAR(WORKSP).",
                    "OperandType": 1
                },
                {
                    "Address": 364,
                    "ByteSize": 1,
                    "Comment": "{Find the length of the line from after the line number"
                },
                {
                    "Address": 365,
                    "ByteSize": 2,
                    "Comment": "to the 'carriage return' character inclusively.}"
                },
                {
                    "Address": 367,
                    "ByteSize": 1,
                    "Comment": "Save the length."
                },
                {
                    "Address": 368,
                    "ByteSize": 1,
                    "Comment": "{Move the line number to the #REG:HL# register pair."
                },
                {
                    "Address": 369,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 370,
                    "ByteSize": 3,
                    "Comment": "Is there an existing line with this number?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 373,
                    "ByteSize": 2,
                    "Comment": "Jump if there was not.",
                    "OperandType": 2
                },
                {
                    "Address": 375,
                    "ByteSize": 3,
                    "Comment": "{Find the length of the 'old' line and reclaim it.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 378,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 381,
                    "ByteSize": 1,
                    "Comment": "{Fetch the length of the 'new' line and jump forward if"
                },
                {
                    "Address": 382,
                    "ByteSize": 1,
                    "Comment": "it is only a 'line number and a carriage return'."
                },
                {
                    "Address": 383,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 384,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 385,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 387,
                    "ByteSize": 1,
                    "Comment": "Save the length."
                },
                {
                    "Address": 388,
                    "ByteSize": 1,
                    "Comment": "{Four extra locations will be needed, i.e. two for the"
                },
                {
                    "Address": 389,
                    "ByteSize": 1,
                    "Comment": "number and two for the length."
                },
                {
                    "Address": 390,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 391,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 392,
                    "ByteSize": 1,
                    "Comment": "Make #REG:HL# point to the location before the\n'destination'."
                },
                {
                    "Address": 393,
                    "ByteSize": 4,
                    "Comment": "{Save the current value of \\#SYSVAR(PROG) to avoid",
                    "OperandType": 1
                },
                {
                    "Address": 397,
                    "ByteSize": 1,
                    "Comment": "corruption when adding a first line.}"
                },
                {
                    "Address": 398,
                    "ByteSize": 3,
                    "Comment": "Space for the new line is created.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 401,
                    "ByteSize": 1,
                    "Comment": "{The old value of \\#SYSVAR(PROG) is fetched and restored."
                },
                {
                    "Address": 402,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 405,
                    "ByteSize": 1,
                    "Comment": "{A copy of the line length (without parameters) is"
                },
                {
                    "Address": 406,
                    "ByteSize": 1,
                    "Comment": "taken.}"
                },
                {
                    "Address": 407,
                    "ByteSize": 1,
                    "Comment": "{Make #REG:DE# point to the end location of the new area"
                },
                {
                    "Address": 408,
                    "ByteSize": 3,
                    "Comment": "and #REG:HL# to the 'carriage return' character of the new",
                    "OperandType": 1
                },
                {
                    "Address": 411,
                    "ByteSize": 1,
                    "Comment": "line in the editing area (\\#SYSVAR(WORKSP)-2)."
                },
                {
                    "Address": 412,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 413,
                    "ByteSize": 2,
                    "Comment": "Now copy over the line."
                },
                {
                    "Address": 415,
                    "ByteSize": 3,
                    "Comment": "Fetch the line's number (#ADDR:0x5C49#(E_PPC)).",
                    "OperandType": 1
                },
                {
                    "Address": 418,
                    "ByteSize": 1,
                    "Comment": "Destination into #REG:HL# and number into #REG:DE#."
                },
                {
                    "Address": 419,
                    "ByteSize": 1,
                    "Comment": "Fetch the new line's length."
                },
                {
                    "Address": 420,
                    "ByteSize": 1,
                    "Comment": "{The high length byte."
                },
                {
                    "Address": 421,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 422,
                    "ByteSize": 1,
                    "Comment": "{The low length byte."
                },
                {
                    "Address": 423,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 424,
                    "ByteSize": 1,
                    "Comment": "{The low line number byte."
                },
                {
                    "Address": 425,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 426,
                    "ByteSize": 1,
                    "Comment": "The high line number byte."
                },
                {
                    "Address": 427,
                    "ByteSize": 1,
                    "Comment": "Drop the address of #ADDR:0x1555#."
                },
                {
                    "Address": 428,
                    "ByteSize": 3,
                    "Comment": "Jump back and this time do produce an automatic listing.",
                    "OperandType": 2
                },
                {
                    "Address": 452,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 468,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if the flag (bit 5 of \\#SYSVAR(TV-FLAG))"
                },
                {
                    "Address": 472,
                    "ByteSize": 2,
                    "Comment": "indicates the lower screen does not require clearing.}",
                    "OperandType": 2
                },
                {
                    "Address": 474,
                    "ByteSize": 4,
                    "Comment": "Otherwise signal 'consider the mode as having changed'\n(set bit 3 of \\#SYSVAR(TV-FLAG))."
                },
                {
                    "Address": 478,
                    "ByteSize": 3,
                    "Comment": "Call the input subroutine indirectly via #ADDR:0x15E6#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 481,
                    "ByteSize": 1,
                    "Comment": "Return with acceptable codes."
                },
                {
                    "Address": 482,
                    "ByteSize": 2,
                    "Comment": "Both the carry flag and the zero flag are reset if 'no\nkey is being pressed'; otherwise signal an error.",
                    "OperandType": 2
                },
                {
                    "Address": 484,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 486,
                    "ByteSize": 1,
                    "Comment": "{Save the registers."
                },
                {
                    "Address": 487,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 488,
                    "ByteSize": 3,
                    "Comment": "Fetch the base address for the current channel\ninformation (\\#SYSVAR(CURCHL)).",
                    "OperandType": 1
                },
                {
                    "Address": 491,
                    "ByteSize": 1,
                    "Comment": "{Step past the output address."
                },
                {
                    "Address": 492,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 493,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 495,
                    "ByteSize": 2,
                    "Comment": "{Increase the value in the #REG:A# register by &30."
                },
                {
                    "Address": 497,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 498,
                    "ByteSize": 1,
                    "Comment": "{Save the registers."
                },
                {
                    "Address": 499,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 500,
                    "ByteSize": 3,
                    "Comment": "Fetch the base address for the current channel\n(\\#SYSVAR(CURCHL)). This will point to an output address.",
                    "OperandType": 1
                },
                {
                    "Address": 503,
                    "ByteSize": 1,
                    "Comment": "Fetch the low byte."
                },
                {
                    "Address": 504,
                    "ByteSize": 1,
                    "Comment": "{Fetch the high byte."
                },
                {
                    "Address": 505,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 506,
                    "ByteSize": 1,
                    "Comment": "Move the address to the #REG:HL# register pair."
                },
                {
                    "Address": 507,
                    "ByteSize": 3,
                    "Comment": "Call the actual subroutine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 510,
                    "ByteSize": 1,
                    "Comment": "{Restore the registers."
                },
                {
                    "Address": 511,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 512,
                    "ByteSize": 1,
                    "Comment": "Return will be from here unless an error occurred."
                },
                {
                    "Address": 513,
                    "ByteSize": 1,
                    "Comment": "{The value in the #REG:A# register is doubled and then"
                },
                {
                    "Address": 514,
                    "ByteSize": 2,
                    "Comment": "increased by &16.}"
                },
                {
                    "Address": 516,
                    "ByteSize": 1,
                    "Comment": "The result is moved to #REG:L#."
                },
                {
                    "Address": 517,
                    "ByteSize": 2,
                    "Comment": "The address #ADDR:0x5C16# is the base address for stream &00."
                },
                {
                    "Address": 519,
                    "ByteSize": 1,
                    "Comment": "{Fetch the first two bytes of the required stream's"
                },
                {
                    "Address": 520,
                    "ByteSize": 1,
                    "Comment": "data."
                },
                {
                    "Address": 521,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 522,
                    "ByteSize": 1,
                    "Comment": "{Give an error if both bytes are zero; otherwise jump"
                },
                {
                    "Address": 523,
                    "ByteSize": 1,
                    "Comment": "forward."
                },
                {
                    "Address": 524,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 526,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 528,
                    "ByteSize": 1,
                    "Comment": "Reduce the stream data."
                },
                {
                    "Address": 529,
                    "ByteSize": 3,
                    "Comment": "The base address of the whole channel information area\n(\\#SYSVAR(CHANS)).",
                    "OperandType": 1
                },
                {
                    "Address": 532,
                    "ByteSize": 1,
                    "Comment": "Form the required address in this area."
                },
                {
                    "Address": 533,
                    "ByteSize": 3,
                    "Comment": "The #REG:HL# register pair holds the base address for a\nparticular channel; set \\#SYSVAR(CURCHL) accordingly.",
                    "OperandType": 1
                },
                {
                    "Address": 536,
                    "ByteSize": 4,
                    "Comment": "Signal 'using other than channel 'K'' (reset bit 4 of\n#ADDR:0x5C6A#(FLAGS2))."
                },
                {
                    "Address": 540,
                    "ByteSize": 1,
                    "Comment": "{Step past the output and the input addresses and make"
                },
                {
                    "Address": 541,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# point to the channel code."
                },
                {
                    "Address": 542,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 543,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 544,
                    "ByteSize": 1,
                    "Comment": "Fetch the code."
                },
                {
                    "Address": 545,
                    "ByteSize": 3,
                    "Comment": "The base address of the #ADDR:0x162D#(channel code look-up\ntable)."
                },
                {
                    "Address": 548,
                    "ByteSize": 3,
                    "Comment": "{Index into this table and locate the required offset,",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 551,
                    "ByteSize": 1,
                    "Comment": "but return if there is not a matching channel code.}"
                },
                {
                    "Address": 552,
                    "ByteSize": 2,
                    "Comment": "{Pass the offset to the #REG:DE# register pair."
                },
                {
                    "Address": 554,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 555,
                    "ByteSize": 1,
                    "Comment": "Point #REG:HL# at the appropriate flag setting routine."
                },
                {
                    "Address": 556,
                    "ByteSize": 1,
                    "Comment": "Jump to the routine."
                },
                {
                    "Address": 564,
                    "ByteSize": 4,
                    "Comment": "Signal 'using lower screen' (set bit 0 of\n\\#SYSVAR(TV-FLAG))."
                },
                {
                    "Address": 568,
                    "ByteSize": 4,
                    "Comment": "Signal 'ready for a key' (reset bit 5 of\n\\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 572,
                    "ByteSize": 4,
                    "Comment": "Signal 'using channel 'K'' (set bit 4 of\n#ADDR:0x5C6A#(FLAGS2))."
                },
                {
                    "Address": 576,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 578,
                    "ByteSize": 4,
                    "Comment": "Signal 'using main screen' (reset bit 0 of\n\\#SYSVAR(TV-FLAG))."
                },
                {
                    "Address": 582,
                    "ByteSize": 4,
                    "Comment": "Signal 'printer not being used' (reset bit 1 of\n\\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 586,
                    "ByteSize": 3,
                    "Comment": "Exit via #ADDR:0x0D4D# so as to set the colour system\nvariables.",
                    "OperandType": 2
                },
                {
                    "Address": 589,
                    "ByteSize": 4,
                    "Comment": "Signal 'printer in use' (set bit 1 of \\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 593,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 594,
                    "ByteSize": 3,
                    "Comment": "Just the single extra location is required."
                },
                {
                    "Address": 597,
                    "ByteSize": 1,
                    "Comment": "Save the pointer."
                },
                {
                    "Address": 598,
                    "ByteSize": 3,
                    "Comment": "Make sure that there is sufficient memory available for\nthe task being undertaken.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 601,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer."
                },
                {
                    "Address": 602,
                    "ByteSize": 3,
                    "Comment": "Alter all the pointers before making the 'room'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 605,
                    "ByteSize": 3,
                    "Comment": "Make #REG:HL# hold the new \\#SYSVAR(STKEND).",
                    "OperandType": 1
                },
                {
                    "Address": 608,
                    "ByteSize": 1,
                    "Comment": "Switch 'old' and 'new'."
                },
                {
                    "Address": 609,
                    "ByteSize": 2,
                    "Comment": "{Now make the 'room' and return."
                },
                {
                    "Address": 611,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 612,
                    "ByteSize": 1,
                    "Comment": "These registers are saved."
                },
                {
                    "Address": 613,
                    "ByteSize": 1,
                    "Comment": "Copy the address of the 'position'."
                },
                {
                    "Address": 614,
                    "ByteSize": 3,
                    "Comment": "{This is \\#SYSVAR(VARS), the first of the fourteen system"
                },
                {
                    "Address": 617,
                    "ByteSize": 2,
                    "Comment": "pointers.}"
                },
                {
                    "Address": 619,
                    "ByteSize": 1,
                    "Comment": "{Fetch the two bytes of the current pointer."
                },
                {
                    "Address": 620,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 621,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 622,
                    "ByteSize": 1,
                    "Comment": "Exchange the system variable with the address of the\n'position'."
                },
                {
                    "Address": 623,
                    "ByteSize": 1,
                    "Comment": "{The carry flag will become set if the system variable's"
                },
                {
                    "Address": 624,
                    "ByteSize": 2,
                    "Comment": "address is to be updated."
                },
                {
                    "Address": 626,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 627,
                    "ByteSize": 1,
                    "Comment": "Restore the 'position'."
                },
                {
                    "Address": 628,
                    "ByteSize": 2,
                    "Comment": "Jump forward if the pointer is to be left; otherwise\nchange it.",
                    "OperandType": 2
                },
                {
                    "Address": 630,
                    "ByteSize": 1,
                    "Comment": "Save the old value."
                },
                {
                    "Address": 631,
                    "ByteSize": 1,
                    "Comment": "{Now add the value in #REG:BC# to the old value."
                },
                {
                    "Address": 632,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 633,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 634,
                    "ByteSize": 1,
                    "Comment": "{Enter the new value into the system variable - high"
                },
                {
                    "Address": 635,
                    "ByteSize": 1,
                    "Comment": "byte before low byte."
                },
                {
                    "Address": 636,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 637,
                    "ByteSize": 1,
                    "Comment": "Point again to the high byte."
                },
                {
                    "Address": 638,
                    "ByteSize": 1,
                    "Comment": "Fetch the old value."
                },
                {
                    "Address": 639,
                    "ByteSize": 1,
                    "Comment": "{Point to the next system variable and jump back until"
                },
                {
                    "Address": 640,
                    "ByteSize": 1,
                    "Comment": "all fourteen have been considered."
                },
                {
                    "Address": 641,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 643,
                    "ByteSize": 1,
                    "Comment": "{Put the old value of \\#SYSVAR(STKEND) in #REG:HL# and"
                },
                {
                    "Address": 644,
                    "ByteSize": 1,
                    "Comment": "restore the other registers."
                },
                {
                    "Address": 645,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 646,
                    "ByteSize": 1,
                    "Comment": "{Now find the difference between the old value of"
                },
                {
                    "Address": 647,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(STKEND) and the 'position'.}"
                },
                {
                    "Address": 649,
                    "ByteSize": 1,
                    "Comment": "{Transfer the result to #REG:BC# and add 1 for the"
                },
                {
                    "Address": 650,
                    "ByteSize": 1,
                    "Comment": "inclusive byte."
                },
                {
                    "Address": 651,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 652,
                    "ByteSize": 1,
                    "Comment": "{Reform the old value of \\#SYSVAR(STKEND) and pass it to"
                },
                {
                    "Address": 653,
                    "ByteSize": 1,
                    "Comment": "#REG:DE# before returning."
                },
                {
                    "Address": 654,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 657,
                    "ByteSize": 1,
                    "Comment": "Consider the other pointer."
                },
                {
                    "Address": 658,
                    "ByteSize": 3,
                    "Comment": "Use line number zero."
                },
                {
                    "Address": 661,
                    "ByteSize": 1,
                    "Comment": "{Fetch the high byte and test it."
                },
                {
                    "Address": 662,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 664,
                    "ByteSize": 2,
                    "Comment": "Jump if not suitable.",
                    "OperandType": 2
                },
                {
                    "Address": 666,
                    "ByteSize": 1,
                    "Comment": "{Fetch the high byte and low byte and return."
                },
                {
                    "Address": 667,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 668,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 669,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 670,
                    "ByteSize": 3,
                    "Comment": "{Fetch the current value of \\#SYSVAR(STKBOT) and",
                    "OperandType": 1
                },
                {
                    "Address": 673,
                    "ByteSize": 1,
                    "Comment": "decrement it to get the last location of the work space.\n}"
                },
                {
                    "Address": 674,
                    "ByteSize": 3,
                    "Comment": "Now make '#REG:BC# spaces'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 677,
                    "ByteSize": 1,
                    "Comment": "{Point to the first new space and then the second."
                },
                {
                    "Address": 678,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 679,
                    "ByteSize": 1,
                    "Comment": "{Fetch the old value of \\#SYSVAR(WORKSP) and restore it."
                },
                {
                    "Address": 680,
                    "ByteSize": 4,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 684,
                    "ByteSize": 1,
                    "Comment": "Restore #REG:BC# - number of spaces."
                },
                {
                    "Address": 685,
                    "ByteSize": 1,
                    "Comment": "Switch the pointers."
                },
                {
                    "Address": 686,
                    "ByteSize": 1,
                    "Comment": "Make #REG:HL# point to the first of the displaced bytes."
                },
                {
                    "Address": 687,
                    "ByteSize": 1,
                    "Comment": "Now return."
                },
                {
                    "Address": 688,
                    "ByteSize": 3,
                    "Comment": "Fetch \\#SYSVAR(E-LINE).",
                    "OperandType": 1
                },
                {
                    "Address": 691,
                    "ByteSize": 2,
                    "Comment": "{Make the editing area hold only the 'carriage return'"
                },
                {
                    "Address": 693,
                    "ByteSize": 3,
                    "Comment": "character and the end marker, and set \\#SYSVAR(K-CUR)",
                    "OperandType": 1
                },
                {
                    "Address": 696,
                    "ByteSize": 1,
                    "Comment": "accordingly"
                },
                {
                    "Address": 697,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 699,
                    "ByteSize": 1,
                    "Comment": "{Reset \\#SYSVAR(WORKSP) and move on to clear the work"
                },
                {
                    "Address": 700,
                    "ByteSize": 3,
                    "Comment": "space.}",
                    "OperandType": 1
                },
                {
                    "Address": 703,
                    "ByteSize": 3,
                    "Comment": "Fetch the start address of the work space\n\\#SYSVAR(WORKSP).",
                    "OperandType": 1
                },
                {
                    "Address": 706,
                    "ByteSize": 3,
                    "Comment": "Clear the work space by setting \\#SYSVAR(STKBOT) equal to\n\\#SYSVAR(WORKSP).",
                    "OperandType": 1
                },
                {
                    "Address": 709,
                    "ByteSize": 3,
                    "Comment": "Fetch \\#SYSVAR(STKBOT).",
                    "OperandType": 1
                },
                {
                    "Address": 712,
                    "ByteSize": 3,
                    "Comment": "Clear the stack by setting \\#SYSVAR(STKEND) equal to\n\\#SYSVAR(STKBOT).",
                    "OperandType": 1
                },
                {
                    "Address": 715,
                    "ByteSize": 1,
                    "Comment": "Save \\#SYSVAR(STKEND)."
                },
                {
                    "Address": 716,
                    "ByteSize": 3,
                    "Comment": "The base of the memory area (\\#SYSVAR(MEMBOT))."
                },
                {
                    "Address": 719,
                    "ByteSize": 3,
                    "Comment": "Set \\#SYSVAR(MEM) to this address.",
                    "OperandType": 1
                },
                {
                    "Address": 722,
                    "ByteSize": 1,
                    "Comment": "{Restore \\#SYSVAR(STKEND) to the #REG:HL# register pair"
                },
                {
                    "Address": 723,
                    "ByteSize": 1,
                    "Comment": "before returning.}"
                },
                {
                    "Address": 724,
                    "ByteSize": 4,
                    "Comment": "Fetch \\#SYSVAR(E-LINE).",
                    "Flags": 4,
                    "OperandType": 1
                },
                {
                    "Address": 728,
                    "ByteSize": 3,
                    "Comment": "Reclaim the memory.",
                    "Flags": 4,
                    "OperandType": 2
                },
                {
                    "Address": 731,
                    "ByteSize": 1,
                    "Comment": "Move on to consider the next pair of entries."
                },
                {
                    "Address": 732,
                    "ByteSize": 1,
                    "Comment": "{Fetch the first of a pair of entries but return if it"
                },
                {
                    "Address": 733,
                    "ByteSize": 1,
                    "Comment": "is zero - the end marker."
                },
                {
                    "Address": 734,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 735,
                    "ByteSize": 1,
                    "Comment": "Compare it to the supplied code."
                },
                {
                    "Address": 736,
                    "ByteSize": 1,
                    "Comment": "Point to the second entry."
                },
                {
                    "Address": 737,
                    "ByteSize": 2,
                    "Comment": "Jump back if the correct entry has not been found.",
                    "OperandType": 2
                },
                {
                    "Address": 739,
                    "ByteSize": 1,
                    "Comment": "The carry flag is set upon a successful search."
                },
                {
                    "Address": 740,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 741,
                    "ByteSize": 3,
                    "Comment": "The existing data for the stream is fetched.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 744,
                    "ByteSize": 3,
                    "Comment": "Check the code in that stream's channel.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 747,
                    "ByteSize": 3,
                    "Comment": "Prepare to make the stream's data zero."
                },
                {
                    "Address": 750,
                    "ByteSize": 3,
                    "Comment": "{Prepare to identify the use of streams &00 to &03."
                },
                {
                    "Address": 753,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 754,
                    "ByteSize": 1,
                    "Comment": "The carry flag will be set with streams &04 to &0F."
                },
                {
                    "Address": 755,
                    "ByteSize": 2,
                    "Comment": "{Jump forward with these streams; otherwise find the",
                    "OperandType": 2
                },
                {
                    "Address": 757,
                    "ByteSize": 3,
                    "Comment": "correct entry in the #ADDR:0x15C6#(initial stream data table)."
                },
                {
                    "Address": 760,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 761,
                    "ByteSize": 1,
                    "Comment": "{Fetch the initial data for streams &00 to &03."
                },
                {
                    "Address": 762,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 763,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 764,
                    "ByteSize": 1,
                    "Comment": "{Now enter the data: either zero and zero, or the"
                },
                {
                    "Address": 765,
                    "ByteSize": 1,
                    "Comment": "initial values."
                },
                {
                    "Address": 766,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 767,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 768,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 769,
                    "ByteSize": 1,
                    "Comment": "Save the address of the stream's data."
                },
                {
                    "Address": 770,
                    "ByteSize": 3,
                    "Comment": "{Fetch the base address of the channel information area",
                    "OperandType": 1
                },
                {
                    "Address": 773,
                    "ByteSize": 1,
                    "Comment": "(\\#SYSVAR(CHANS)) and find the channel data for the\nstream being closed.}"
                },
                {
                    "Address": 774,
                    "ByteSize": 1,
                    "Comment": "{Step past the subroutine addresses and pick up the code"
                },
                {
                    "Address": 775,
                    "ByteSize": 1,
                    "Comment": "for that channel."
                },
                {
                    "Address": 776,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 777,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 778,
                    "ByteSize": 1,
                    "Comment": "Save the pointer."
                },
                {
                    "Address": 779,
                    "ByteSize": 3,
                    "Comment": "The base address of the #ADDR:0x1716#(CLOSE stream look-up\ntable)."
                },
                {
                    "Address": 782,
                    "ByteSize": 3,
                    "Comment": "Index into this table and locate the required offset.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 785,
                    "ByteSize": 1,
                    "Comment": "{Pass the offset to the #REG:BC# register pair."
                },
                {
                    "Address": 786,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 788,
                    "ByteSize": 1,
                    "Comment": "{Jump to the appropriate routine."
                },
                {
                    "Address": 789,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 796,
                    "ByteSize": 1,
                    "Comment": "{Fetch the channel information pointer and return."
                },
                {
                    "Address": 797,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 798,
                    "ByteSize": 3,
                    "Comment": "The given stream number is taken off the calculator\nstack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 801,
                    "ByteSize": 2,
                    "Comment": "{Give an error if the stream number is greater than &0F."
                },
                {
                    "Address": 803,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 805,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 807,
                    "ByteSize": 2,
                    "Comment": "Range now &03 to &12."
                },
                {
                    "Address": 809,
                    "ByteSize": 1,
                    "Comment": "And now &06 to &24."
                },
                {
                    "Address": 810,
                    "ByteSize": 3,
                    "Comment": "The base address of the #ADDR:0x5C10#(stream data area)."
                },
                {
                    "Address": 813,
                    "ByteSize": 1,
                    "Comment": "{Move the stream code to the #REG:BC# register pair."
                },
                {
                    "Address": 814,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 816,
                    "ByteSize": 1,
                    "Comment": "{Index into the data area and fetch the the two data"
                },
                {
                    "Address": 817,
                    "ByteSize": 1,
                    "Comment": "bytes into the #REG:BC# register pair."
                },
                {
                    "Address": 818,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 819,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 820,
                    "ByteSize": 1,
                    "Comment": "{Make the pointer address the first of the data bytes"
                },
                {
                    "Address": 821,
                    "ByteSize": 1,
                    "Comment": "before returning.}"
                },
                {
                    "Address": 822,
                    "ByteSize": 1,
                    "Comment": "Use the calculator to exchange the stream number and the\nchannel code.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 825,
                    "ByteSize": 3,
                    "Comment": "Fetch the data for the stream.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 828,
                    "ByteSize": 1,
                    "Comment": "{Jump forward if both bytes of the data are zero, i.e."
                },
                {
                    "Address": 829,
                    "ByteSize": 1,
                    "Comment": "the stream was in a closed state."
                },
                {
                    "Address": 830,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 832,
                    "ByteSize": 1,
                    "Comment": "Save #REG:HL#."
                },
                {
                    "Address": 833,
                    "ByteSize": 3,
                    "Comment": "{Fetch \\#SYSVAR(CHANS) - the base address of the channel",
                    "OperandType": 1
                },
                {
                    "Address": 836,
                    "ByteSize": 1,
                    "Comment": "information and find the code of the channel associated"
                },
                {
                    "Address": 837,
                    "ByteSize": 1,
                    "Comment": "with the stream being OPENed."
                },
                {
                    "Address": 838,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 839,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 840,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 841,
                    "ByteSize": 1,
                    "Comment": "Return #REG:HL#."
                },
                {
                    "Address": 842,
                    "ByteSize": 2,
                    "Comment": "{The code fetched from the channel information area must"
                },
                {
                    "Address": 844,
                    "ByteSize": 2,
                    "Comment": "be 'K', 'S' or 'P'; give an error if it is not.",
                    "OperandType": 2
                },
                {
                    "Address": 846,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 848,
                    "ByteSize": 2,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 850,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 852,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 854,
                    "ByteSize": 3,
                    "Comment": "Collect the appropriate data in #REG:DE#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 857,
                    "ByteSize": 1,
                    "Comment": "{Enter the data into the two bytes in the stream"
                },
                {
                    "Address": 858,
                    "ByteSize": 1,
                    "Comment": "information area."
                },
                {
                    "Address": 859,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 860,
                    "ByteSize": 1,
                    "Comment": "Finally return."
                },
                {
                    "Address": 861,
                    "ByteSize": 1,
                    "Comment": "Save #REG:HL#."
                },
                {
                    "Address": 862,
                    "ByteSize": 3,
                    "Comment": "Fetch the parameters of the channel code.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 865,
                    "ByteSize": 1,
                    "Comment": "{Give an error if the expression supplied is a null"
                },
                {
                    "Address": 866,
                    "ByteSize": 1,
                    "Comment": "expression, e.g. OPEN \\#5,\"\"."
                },
                {
                    "Address": 867,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 869,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 871,
                    "ByteSize": 1,
                    "Comment": "The length of the expression is saved."
                },
                {
                    "Address": 872,
                    "ByteSize": 1,
                    "Comment": "Fetch the first character."
                },
                {
                    "Address": 873,
                    "ByteSize": 2,
                    "Comment": "Convert lower case codes to upper case ones."
                },
                {
                    "Address": 875,
                    "ByteSize": 1,
                    "Comment": "Move code to the #REG:C# register."
                },
                {
                    "Address": 876,
                    "ByteSize": 3,
                    "Comment": "The base address of the #ADDR:0x177A#(OPEN stream look-up\ntable)."
                },
                {
                    "Address": 879,
                    "ByteSize": 3,
                    "Comment": "Index into this table and locate the required offset.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 882,
                    "ByteSize": 2,
                    "Comment": "Jump back if not found.",
                    "OperandType": 2
                },
                {
                    "Address": 884,
                    "ByteSize": 1,
                    "Comment": "{Pass the offset to the #REG:BC# register pair."
                },
                {
                    "Address": 885,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 887,
                    "ByteSize": 1,
                    "Comment": "Make #REG:HL# point to the start of the appropriate\nsubroutine."
                },
                {
                    "Address": 888,
                    "ByteSize": 1,
                    "Comment": "{Fetch the length of the expression before jumping to"
                },
                {
                    "Address": 889,
                    "ByteSize": 1,
                    "Comment": "the subroutine.}"
                },
                {
                    "Address": 897,
                    "ByteSize": 2,
                    "Comment": "The data bytes will be &01 and &00."
                },
                {
                    "Address": 899,
                    "ByteSize": 2,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 901,
                    "ByteSize": 2,
                    "Comment": "The data bytes will be &06 and &00."
                },
                {
                    "Address": 903,
                    "ByteSize": 2,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 905,
                    "ByteSize": 2,
                    "Comment": "The data bytes will be &10 and &00."
                },
                {
                    "Address": 907,
                    "ByteSize": 1,
                    "Comment": "{Decrease the length of the expression and give an error"
                },
                {
                    "Address": 908,
                    "ByteSize": 1,
                    "Comment": "if it was not a single character."
                },
                {
                    "Address": 909,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 910,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 912,
                    "ByteSize": 1,
                    "Comment": "{Otherwise clear the #REG:D# register, fetch #REG:HL# and"
                },
                {
                    "Address": 913,
                    "ByteSize": 1,
                    "Comment": "return."
                },
                {
                    "Address": 914,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 915,
                    "ByteSize": 2,
                    "Comment": "Give this report.",
                    "OperandType": 2
                },
                {
                    "Address": 917,
                    "ByteSize": 4,
                    "Comment": "The stack pointer is saved at \\#SYSVAR(LIST-SP)\nallowing the machine stack to be reset when the\nlisting is finished (see #ADDR:0x0C55#).",
                    "OperandType": 1
                },
                {
                    "Address": 921,
                    "ByteSize": 4,
                    "Comment": "Signal 'automatic listing in the main screen' (set bit\n4 of \\#SYSVAR(TV-FLAG) and reset all other bits)."
                },
                {
                    "Address": 925,
                    "ByteSize": 3,
                    "Comment": "Clear this part of the screen.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 928,
                    "ByteSize": 4,
                    "Comment": "Switch to the editing area (set bit 0 of\n\\#SYSVAR(TV-FLAG))."
                },
                {
                    "Address": 932,
                    "ByteSize": 3,
                    "Comment": "{Now clear the the lower part of the screen as well"
                },
                {
                    "Address": 935,
                    "ByteSize": 3,
                    "Comment": "(see \\#SYSVAR(DF-SZ)).}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 938,
                    "ByteSize": 4,
                    "Comment": "Then switch back (reset bit 0 of \\#SYSVAR(TV-FLAG))."
                },
                {
                    "Address": 942,
                    "ByteSize": 4,
                    "Comment": "Signal 'screen is clear' (set bit 0 of\n#ADDR:0x5C6A#(FLAGS2))."
                },
                {
                    "Address": 946,
                    "ByteSize": 3,
                    "Comment": "{Now fetch the the 'current' line number",
                    "OperandType": 1
                },
                {
                    "Address": 949,
                    "ByteSize": 4,
                    "Comment": "(\\#SYSVAR(E-PPC)) and the 'automatic' line number\n(\\#SYSVAR(S-TOP)).}",
                    "OperandType": 1
                },
                {
                    "Address": 953,
                    "ByteSize": 1,
                    "Comment": "{If the 'current' number is less than the 'automatic'"
                },
                {
                    "Address": 954,
                    "ByteSize": 2,
                    "Comment": "number then jump forward to update the 'automatic'"
                },
                {
                    "Address": 956,
                    "ByteSize": 1,
                    "Comment": "number."
                },
                {
                    "Address": 957,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 959,
                    "ByteSize": 1,
                    "Comment": "Save the 'automatic' number."
                },
                {
                    "Address": 960,
                    "ByteSize": 3,
                    "Comment": "{Find the address of the start of the 'current' line",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 963,
                    "ByteSize": 3,
                    "Comment": "and produce an address roughly a 'screen before it'"
                },
                {
                    "Address": 966,
                    "ByteSize": 1,
                    "Comment": "(negated)."
                },
                {
                    "Address": 967,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 969,
                    "ByteSize": 1,
                    "Comment": "{Save the 'result' on the machine stack whilst the"
                },
                {
                    "Address": 970,
                    "ByteSize": 3,
                    "Comment": "'automatic' line address is also found (in #REG:HL#).}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 973,
                    "ByteSize": 1,
                    "Comment": "The 'result' goes to the #REG:BC# register pair."
                },
                {
                    "Address": 974,
                    "ByteSize": 1,
                    "Comment": "Save the 'result'."
                },
                {
                    "Address": 975,
                    "ByteSize": 3,
                    "Comment": "Find the address of the start of the line after the\npresent 'automatic' line (in #REG:DE#).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 978,
                    "ByteSize": 1,
                    "Comment": "Restore the 'result'."
                },
                {
                    "Address": 979,
                    "ByteSize": 1,
                    "Comment": "{Perform the computation and jump forward if finished."
                },
                {
                    "Address": 980,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 982,
                    "ByteSize": 1,
                    "Comment": "{Move the next line's address to the #REG:HL# register"
                },
                {
                    "Address": 983,
                    "ByteSize": 1,
                    "Comment": "pair and collect its line number."
                },
                {
                    "Address": 984,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 985,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 986,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 987,
                    "ByteSize": 4,
                    "Comment": "{Now \\#SYSVAR(S-TOP) can be updated and the test",
                    "OperandType": 1
                },
                {
                    "Address": 991,
                    "ByteSize": 2,
                    "Comment": "repeated with the new line.}",
                    "OperandType": 2
                },
                {
                    "Address": 993,
                    "ByteSize": 3,
                    "Comment": "When \\#SYSVAR(E-PPC) is less than \\#SYSVAR(S-TOP).",
                    "OperandType": 1
                },
                {
                    "Address": 996,
                    "ByteSize": 3,
                    "Comment": "{Fetch the top line's number (\\#SYSVAR(S-TOP)) and",
                    "OperandType": 1
                },
                {
                    "Address": 999,
                    "ByteSize": 3,
                    "Comment": "hence its address.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1002,
                    "ByteSize": 2,
                    "Comment": "{If the line cannot be found use #REG:DE# instead.",
                    "OperandType": 2
                },
                {
                    "Address": 1004,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 1005,
                    "ByteSize": 3,
                    "Comment": "The listing is produced.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1008,
                    "ByteSize": 4,
                    "Comment": "{The return will be to here unless scrolling was"
                },
                {
                    "Address": 1012,
                    "ByteSize": 1,
                    "Comment": "needed to show the current line; reset bit 4 of\n\\#SYSVAR(TV-FLAG) before returning.}"
                },
                {
                    "Address": 1013,
                    "ByteSize": 2,
                    "Comment": "Use stream &03."
                },
                {
                    "Address": 1015,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 1017,
                    "ByteSize": 2,
                    "Comment": "Use stream &02."
                },
                {
                    "Address": 1019,
                    "ByteSize": 4,
                    "Comment": "Signal 'an ordinary listing in the main part of the\nscreen' (reset bit 4 of \\#SYSVAR(TV-FLAG) and all other\nbits)."
                },
                {
                    "Address": 1023,
                    "ByteSize": 3,
                    "Comment": "{Open the channel unless checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                }
            ],
            "CommentBlocks": [
                {
                    "Address": 313,
                    "Comment": "THE COPYRIGHT MESSAGE\n \nUsed by the routine at #ADDR:0x11B7#."
                },
                {
                    "Address": 341,
                    "Comment": "Report G - No room for line\n \nUsed by the routine at #ADDR:0x155D#."
                },
                {
                    "Address": 349,
                    "Comment": "THE 'MAIN-ADD' SUBROUTINE\n \nUsed by the routine at #ADDR:0x12A2#.\n \nThis subroutine allows for a new BASIC line to be added to the existing BASIC\nprogram in the program area. If a line has both an old and a new version then\nthe old one is 'reclaimed'. A new line that consists of only a line number\ndoes not go into the program area.\n \nBC BASIC line number"
                },
                {
                    "Address": 431,
                    "Comment": "THE 'INITIAL CHANNEL INFORMATION'\n \nUsed by the routine at #ADDR:0x11B7#, which copies the information from here to\n\\#SYSVAR(CHINFO).\n \nInitially there are four channels - 'K', 'S', 'R', and 'P' - for\ncommunicating with the 'keyboard', 'screen', 'work space' and 'printer'. For\neach channel the output routine address comes before the input routine\naddress and the channel's code."
                },
                {
                    "Address": 452,
                    "Comment": "Report J - Invalid I/O device\n \nThe address of this routine is found in the #ADDR:0x15AF#(initial channel\ninformation table)."
                },
                {
                    "Address": 454,
                    "Comment": "THE 'INITIAL STREAM DATA'\n \nUsed by the routines at #ADDR:0x11B7# and #ADDR:0x16E5#.\n \nInitially there are seven streams - &FD to &03."
                },
                {
                    "Address": 468,
                    "Comment": "THE 'WAIT-KEY' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0970#, #ADDR:0x0C55#, #ADDR:0x0F2C# and #ADDR:0x101E#.\n \nThis subroutine is the controlling subroutine for calling the current input\nsubroutine."
                },
                {
                    "Address": 484,
                    "Comment": "Report 8 - End of file."
                },
                {
                    "Address": 486,
                    "Comment": "THE 'INPUT-AD' SUBROUTINE\n \nUsed by the routines at #ADDR:0x15D4# and #ADDR:0x3645#.\n \nThe registers are saved and #REG:HL# made to point to the input address."
                },
                {
                    "Address": 495,
                    "Comment": "THE 'MAIN PRINTING' SUBROUTINE\n \nUsed by the routines at #ADDR:0x12A2#, #ADDR:0x1925#, #ADDR:0x1A1B# and #ADDR:0x2DE3#.\n \nA Value from &00 to &09 (for digits) or &11 to &22 (for the letters A-R)"
                },
                {
                    "Address": 498,
                    "Comment": "This entry point is used by the routine at #ADDR:0x0010# with #REG:A# holding the\ncode of the character to be printed."
                },
                {
                    "Address": 503,
                    "Comment": "This entry point is used by the routine at #ADDR:0x15E6# with #REG:A# holding the\ncode of the character to be printed.\n \nNow call the actual subroutine. #REG:HL# points to the output or the input\naddress as directed."
                },
                {
                    "Address": 513,
                    "Comment": "THE 'CHAN-OPEN' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0605#, #ADDR:0x0970#, #ADDR:0x0C55#, #ADDR:0x0D6B#, #ADDR:0x0DAF#, #ADDR:0x0FA9#,\n#ADDR:0x1059#, #ADDR:0x12A2#, #ADDR:0x17F9#, #ADDR:0x1FC9#, #ADDR:0x2070#, #ADDR:0x2089#, #ADDR:0x361F# and #ADDR:0x3645#.\n \nThis subroutine is called with the #REG:A# register holding a valid stream\nnumber - normally &FD to &03. Then depending on the stream data a particular\nchannel will be made the current channel.\n \nA Stream number"
                },
                {
                    "Address": 526,
                    "Comment": "This entry point is used by the routine at #ADDR:0x2070#.\n \nReport O - Invalid stream."
                },
                {
                    "Address": 528,
                    "Comment": "Using the stream data now find the base address of the channel information\nassociated with that stream."
                },
                {
                    "Address": 533,
                    "Comment": "This routine continues into #ADDR:0x1615#.\nTHE 'CHAN-FLAG' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0FA9#, #ADDR:0x361F# and #ADDR:0x3645#.\n \nThe routine at #ADDR:0x1601# continues here.\n \nThe appropriate flags for the different channels are set by this subroutine.\n \nHL Base address of the channel (see \\#SYSVAR(CHINFO))"
                },
                {
                    "Address": 556,
                    "Comment": "This entry point is used by the routine at #ADDR:0x15EF#."
                },
                {
                    "Address": 557,
                    "Comment": "THE 'CHANNEL CODE LOOK-UP' TABLE\n \nUsed by the routine at #ADDR:0x1615#."
                },
                {
                    "Address": 564,
                    "Comment": "THE 'CHANNEL 'K' FLAG' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x162D#(channel code lookup table)."
                },
                {
                    "Address": 578,
                    "Comment": "THE 'CHANNEL 'S' FLAG' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x162D#(channel code lookup table)."
                },
                {
                    "Address": 582,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1634#."
                },
                {
                    "Address": 589,
                    "Comment": "THE 'CHANNEL 'P' FLAG' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x162D#(channel code lookup table)."
                },
                {
                    "Address": 594,
                    "Comment": "THE 'MAKE-ROOM' SUBROUTINE\n \nUsed by the routine at #ADDR:0x0F2C#.\n \nThis is a very important subroutine. It is called on many occasions to 'open\nup' an area. In all cases the #REG:HL# register pair points to the location\nafter the place where 'room' is required and the #REG:BC# register pair holds\nthe length of the 'room' needed.\n \nHL Address at which to create the new space\nO:DE Address of the last byte of the new space\nO:HL Address of the byte before the start of the new space\n \nWhen a single space only is required then the subroutine is entered here."
                },
                {
                    "Address": 597,
                    "Comment": "This entry point is used by the routines at #ADDR:0x0808#, #ADDR:0x092C#, #ADDR:0x0F2C#,\n#ADDR:0x155D#, #ADDR:0x169E#, #ADDR:0x1D03#, #ADDR:0x1F60#, #ADDR:0x268D#, #ADDR:0x2AFF# and #ADDR:0x2C02# with #REG:BC#\nholding the size of the space to create."
                },
                {
                    "Address": 612,
                    "Comment": "Note: this subroutine returns with the #REG:HL# register pair pointing to the\nlocation before the new 'room' and the #REG:DE# register pair pointing to the\nlast of the new locations. The new 'room' therefore has the description\n'(#REG:HL#)+1' to '(#REG:DE#)' inclusive.\n \nHowever as the 'new locations' still retain their 'old values' it is also\npossible to consider the new 'room' as having been made after the original\nlocation '(#REG:HL#)' and it thereby has the description '(#REG:HL#)+2' to\n'(#REG:DE#)+1'.\n \nIn fact the programmer appears to have a preference for the 'second\ndescription' and this can be confusing.\nTHE 'POINTERS' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1652# and #ADDR:0x19E5#.\n \nWhenever an area has to be 'made' or 'reclaimed' the system variables that\naddress locations beyond the 'position' of the change have to be amended as\nrequired. On entry the #REG:BC# register pair holds the number of bytes\ninvolved and the #REG:HL# register pair addresses the location before the\n'position'.\n \nBC Size of the area being created (positive) or reclaimed (negative)\nHL Base address of the area being created or reclaimed"
                },
                {
                    "Address": 619,
                    "Comment": "A loop is now entered to consider each pointer in turn. Only those pointers\nthat point beyond the 'position' are changed."
                },
                {
                    "Address": 643,
                    "Comment": "Now find the size of the block to be moved."
                },
                {
                    "Address": 655,
                    "Comment": "THE 'COLLECT A LINE NUMBER' SUBROUTINE\n \nOn entry the #REG:HL# register pair points to the location under consideration.\nIf the location holds a value that constitutes a suitable high byte for a\nline number then the line number is returned in #REG:DE#. However if this is\nnot so then the location addressed by #REG:DE# is tried instead; and should\nthis also be unsuccessful line number zero is returned.\n \nHL Address of the first byte of the BASIC line number to test\nDE Address of the first byte of the previous BASIC line number\nO:DE The line number, or zero if none was found"
                },
                {
                    "Address": 661,
                    "Comment": "The main entry point is here, and is used by the routines at #ADDR:0x0FA9#, #ADDR:0x1059#\nand #ADDR:0x190F#."
                },
                {
                    "Address": 670,
                    "Comment": "THE 'RESERVE' SUBROUTINE\n \nUsed by the routine at #ADDR:0x0030#.\n \nOn entry here the last value on the machine stack is \\#SYSVAR(WORKSP) and the\nvalue above it is the number of spaces that are to be 'reserved'.\n \nThis subroutine always makes 'room' between the existing work space and the\ncalculator stack.\n \nBC Number of spaces to reserve\nO:DE Address of the first byte of the new space\nO:HL Address of the last byte of the new space"
                },
                {
                    "Address": 688,
                    "Comment": "Note: it can also be considered that the subroutine returns with the #REG:DE#\nregister pair pointing to a 'first extra byte' and the #REG:HL# register pair\npointing to a 'last extra byte', these extra bytes having been added after\nthe original '(#REG:HL#)+1' location.\nTHE 'SET-MIN' SUBROUTINE\n \nUsed by the routine at #ADDR:0x12A2#.\n \nThis subroutine resets the editing area and the areas after it to their\nminimum sizes. In effect it 'clears' the areas."
                },
                {
                    "Address": 703,
                    "Comment": "This entry point is used by the routines at #ADDR:0x1B28# and #ADDR:0x2089#.\n \nEntering here will 'clear' the work space and the calculator stack."
                },
                {
                    "Address": 709,
                    "Comment": "This entry point is used by the routines at #ADDR:0x0053# and #ADDR:0x19FB#.\n \nEntering here will 'clear' only the calculator stack."
                },
                {
                    "Address": 715,
                    "Comment": "In all cases make \\#SYSVAR(MEM) address the calculator's memory area."
                },
                {
                    "Address": 724,
                    "Comment": "THE 'RECLAIM THE EDIT-LINE' SUBROUTINE\n \nThis routine is not used."
                },
                {
                    "Address": 731,
                    "Comment": "THE 'INDEXER' SUBROUTINE\n \nThis subroutine is used on several occasions to look through tables.\n \nC Code to look for\nHL Base address of the table\nO:HL Address of the second byte of the required table entry (if found)\nO:F Carry flag is set if the code is found"
                },
                {
                    "Address": 732,
                    "Comment": "The main entry point is here and is used by the routines at #ADDR:0x1615#, #ADDR:0x1701#,\n#ADDR:0x175D#, #ADDR:0x24FB# and #ADDR:0x26C9#."
                },
                {
                    "Address": 741,
                    "Comment": "THE 'CLOSE \\#' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1B02#(parameter table).\n \nThis command allows the user to close streams. However for streams &00 to &03\nthe 'initial' stream data is restored and these streams cannot therefore be\nclosed."
                },
                {
                    "Address": 769,
                    "Comment": "THE 'CLOSE-2' SUBROUTINE\n \nUsed by the routine at #ADDR:0x16E5#.\n \nThe code of the channel associated with the stream being closed has to be\n'K', 'S', or 'P'.\n \nBC Offset from the stream data table (\\#SYSVAR(STRMS))\nHL Address of the offset in the stream data table"
                },
                {
                    "Address": 790,
                    "Comment": "THE 'CLOSE STREAM LOOK-UP' TABLE\n \nUsed by the routine at #ADDR:0x1701#."
                },
                {
                    "Address": 796,
                    "Comment": "Note: there is no end marker at the end of this table, which is a\n\\#BUG\\#dontCloseTheStreams(bug).\nTHE 'CLOSE STREAM' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x1716#(close stream lookup table).\n \nO:HL Address of the offset in the stream data table (see \\#SYSVAR(STRMS))"
                },
                {
                    "Address": 798,
                    "Comment": "THE 'STREAM DATA' SUBROUTINE\n \nUsed by the routines at #ADDR:0x16E5# and #ADDR:0x1736#.\n \nThis subroutine returns in the #REG:BC# register pair the stream data for a\ngiven stream.\n \nO:BC Offset from the stream data table (\\#SYSVAR(STRMS))\nO:HL Address of the offset in the stream data table"
                },
                {
                    "Address": 805,
                    "Comment": "This entry point is used by the routines at #ADDR:0x1736# and #ADDR:0x1793#.\n \nReport O - Invalid stream."
                },
                {
                    "Address": 807,
                    "Comment": "Continue with valid stream numbers."
                },
                {
                    "Address": 822,
                    "Comment": "THE 'OPEN \\#' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1AFC#(parameter table).\n \nThis command allows the user to OPEN streams. A channel code must be supplied\nand it must be 'K', 'k', 'S', 's', 'P', or 'p'.\n \nNote that no attempt is made to give streams &00 to &03 their initial data."
                },
                {
                    "Address": 861,
                    "Comment": "THE 'OPEN-2' SUBROUTINE\n \nUsed by the routine at #ADDR:0x1736#.\n \nThe appropriate stream data bytes for the channel that is associated with the\nstream being opened are found."
                },
                {
                    "Address": 869,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1789#.\n \nReport F - Invalid file name."
                },
                {
                    "Address": 871,
                    "Comment": "Continue if no error occurred."
                },
                {
                    "Address": 890,
                    "Comment": "THE 'OPEN STREAM LOOK-UP' TABLE\n \nUsed by the routine at #ADDR:0x175D#."
                },
                {
                    "Address": 897,
                    "Comment": "THE 'OPEN-K' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x177A#(open stream lookup table).\n \nBC Length of the expression specifying the channel code"
                },
                {
                    "Address": 901,
                    "Comment": "THE 'OPEN-S' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x177A#(open stream lookup table).\n \nBC Length of the expression specifying the channel code"
                },
                {
                    "Address": 905,
                    "Comment": "THE 'OPEN-P' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x177A#(open stream lookup table).\n \nBC Length of the expression specifying the channel code"
                },
                {
                    "Address": 907,
                    "Comment": "This entry point is used by the routines at #ADDR:0x1781# and #ADDR:0x1785#."
                },
                {
                    "Address": 915,
                    "Comment": "THE 'CAT, ERASE, FORMAT and MOVE' COMMAND ROUTINES\n \nThe address of this routine is found in the #ADDR:0x1B06#(parameter table).\n \nIn the standard Spectrum system the use of these commands leads to the\nproduction of report O - Invalid stream."
                },
                {
                    "Address": 917,
                    "Comment": "THE 'LIST and LLIST' COMMAND ROUTINES\n \nThe routines in this part of the 16K program are used to produce listings of\nthe current BASIC program. Each line has to have its line number evaluated,\nits tokens expanded and the appropriate cursors positioned.\n \nThe entry point #ADDR:0x1795# is used by both #ADDR:0x12A2# and #ADDR:0x1059# to produce a\nsingle page of the listing."
                },
                {
                    "Address": 959,
                    "Comment": "The 'automatic' number has now to be altered to give a listing with the\n'current' line appearing near the bottom of the screen."
                },
                {
                    "Address": 974,
                    "Comment": "A loop is now entered. The 'automatic' line number is increased on each pass\nuntil it is likely that the 'current' line will show on a listing."
                },
                {
                    "Address": 993,
                    "Comment": "Now the 'automatic' listing can be made."
                },
                {
                    "Address": 1013,
                    "Comment": "THE 'LLIST' ENTRY POINT\n \nThe address of this routine is found in the #ADDR:0x1ADC#(parameter table).\n \nThe printer channel will need to be opened."
                },
                {
                    "Address": 1017,
                    "Comment": "THE 'LIST' ENTRY POINT\n \nThe address of this routine is found in the #ADDR:0x1AAE#(parameter table).\n \nThe 'main screen' channel will need to be opened."
                },
                {
                    "Address": 1019,
                    "Comment": "This entry point is used by the routine at #ADDR:0x17F5#."
                }
            ],
            "DataInfo": [
                {
                    "Address": 1,
                    "ByteSize": 11,
                    "Comment": "8 End of file",
                    "DataType": 4
                },
                {
                    "Address": 12,
                    "ByteSize": 14,
                    "Comment": "9 STOP statement",
                    "DataType": 4
                },
                {
                    "Address": 26,
                    "ByteSize": 16,
                    "Comment": "A Invalid argument",
                    "DataType": 4
                },
                {
                    "Address": 42,
                    "ByteSize": 20,
                    "Comment": "B Integer out of range",
                    "DataType": 4
                },
                {
                    "Address": 62,
                    "ByteSize": 17,
                    "Comment": "C Nonsense in BASIC",
                    "DataType": 4
                },
                {
                    "Address": 79,
                    "ByteSize": 20,
                    "Comment": "D BREAK - CONT repeats",
                    "DataType": 4
                },
                {
                    "Address": 99,
                    "ByteSize": 11,
                    "Comment": "E Out of DATA",
                    "DataType": 4
                },
                {
                    "Address": 110,
                    "ByteSize": 17,
                    "Comment": "F Invalid file name",
                    "DataType": 4
                },
                {
                    "Address": 127,
                    "ByteSize": 16,
                    "Comment": "G No room for line",
                    "DataType": 4
                },
                {
                    "Address": 143,
                    "ByteSize": 13,
                    "Comment": "H STOP in INPUT",
                    "DataType": 4
                },
                {
                    "Address": 156,
                    "ByteSize": 16,
                    "Comment": "I FOR without NEXT",
                    "DataType": 4
                },
                {
                    "Address": 172,
                    "ByteSize": 18,
                    "Comment": "J Invalid I/O device",
                    "DataType": 4
                },
                {
                    "Address": 190,
                    "ByteSize": 14,
                    "Comment": "K Invalid colour",
                    "DataType": 4
                },
                {
                    "Address": 204,
                    "ByteSize": 18,
                    "Comment": "L BREAK into program",
                    "DataType": 4
                },
                {
                    "Address": 222,
                    "ByteSize": 14,
                    "Comment": "M RAMTOP no good",
                    "DataType": 4
                },
                {
                    "Address": 236,
                    "ByteSize": 14,
                    "Comment": "N Statement lost",
                    "DataType": 4
                },
                {
                    "Address": 250,
                    "ByteSize": 14,
                    "Comment": "O Invalid stream",
                    "DataType": 4
                },
                {
                    "Address": 264,
                    "ByteSize": 14,
                    "Comment": "P FN without DEF",
                    "DataType": 4
                },
                {
                    "Address": 278,
                    "ByteSize": 15,
                    "Comment": "Q Parameter error",
                    "DataType": 4
                },
                {
                    "Address": 293,
                    "ByteSize": 18,
                    "Comment": "R Tape loading error",
                    "DataType": 4
                },
                {
                    "Address": 311,
                    "ByteSize": 2,
                    "Comment": "', '",
                    "DataType": 4
                },
                {
                    "Address": 313,
                    "ByteSize": 28,
                    "Comment": "\\#CHR169 1982 Sinclair\nResearch Ltd",
                    "DataType": 4
                },
                {
                    "Address": 431,
                    "ByteSize": 2,
                    "Comment": "{Keyboard.",
                    "DataType": 2
                },
                {
                    "Address": 433,
                    "ByteSize": 2,
                    "Comment": " ",
                    "DataType": 2
                },
                {
                    "Address": 435,
                    "Comment": "}"
                },
                {
                    "Address": 436,
                    "ByteSize": 2,
                    "Comment": "{Screen.",
                    "DataType": 2
                },
                {
                    "Address": 438,
                    "ByteSize": 2,
                    "Comment": " ",
                    "DataType": 2
                },
                {
                    "Address": 440,
                    "Comment": "}"
                },
                {
                    "Address": 441,
                    "ByteSize": 2,
                    "Comment": "{Work space.",
                    "DataType": 2
                },
                {
                    "Address": 443,
                    "ByteSize": 2,
                    "Comment": " ",
                    "DataType": 2
                },
                {
                    "Address": 445,
                    "Comment": "}"
                },
                {
                    "Address": 446,
                    "ByteSize": 2,
                    "Comment": "{Printer.",
                    "DataType": 2
                },
                {
                    "Address": 448,
                    "ByteSize": 2,
                    "Comment": " ",
                    "DataType": 2
                },
                {
                    "Address": 450,
                    "Comment": "}"
                },
                {
                    "Address": 451,
                    "Comment": "End marker."
                },
                {
                    "Address": 453,
                    "Comment": "}"
                },
                {
                    "Address": 454,
                    "ByteSize": 2,
                    "Comment": "&FD: Leads to channel 'K' (keyboard)",
                    "DataType": 2
                },
                {
                    "Address": 456,
                    "ByteSize": 2,
                    "Comment": "&FE: Leads to channel 'S' (screen)",
                    "DataType": 2
                },
                {
                    "Address": 458,
                    "ByteSize": 2,
                    "Comment": "&FF: Leads to channel 'R' (work space)",
                    "DataType": 2
                },
                {
                    "Address": 460,
                    "ByteSize": 2,
                    "Comment": "&00: Leads to channel 'K' (keyboard)",
                    "DataType": 2
                },
                {
                    "Address": 462,
                    "ByteSize": 2,
                    "Comment": "&01: Leads to channel 'K' (keyboard)",
                    "DataType": 2
                },
                {
                    "Address": 464,
                    "ByteSize": 2,
                    "Comment": "&02: Leads to channel 'S' (screen)",
                    "DataType": 2
                },
                {
                    "Address": 466,
                    "ByteSize": 2,
                    "Comment": "&03: Leads to channel 'P' (printer)",
                    "DataType": 2
                },
                {
                    "Address": 485,
                    "Comment": "}"
                },
                {
                    "Address": 527,
                    "Comment": "}"
                },
                {
                    "Address": 557,
                    "ByteSize": 2,
                    "Comment": "Channel 'K', offset &06 (#ADDR:0x1634#).",
                    "DataType": 1
                },
                {
                    "Address": 559,
                    "ByteSize": 2,
                    "Comment": "Channel 'S', offset &12 (#ADDR:0x1642#).",
                    "DataType": 1
                },
                {
                    "Address": 561,
                    "ByteSize": 2,
                    "Comment": "Channel 'P', offset &1B (#ADDR:0x164D#).",
                    "DataType": 1
                },
                {
                    "Address": 563,
                    "Comment": "End marker."
                },
                {
                    "Address": 655,
                    "ByteSize": 2,
                    "Comment": "Line number zero.",
                    "DataType": 1
                },
                {
                    "Address": 790,
                    "ByteSize": 2,
                    "Comment": "Channel 'K', offset &05 (#ADDR:0x171C#)",
                    "DataType": 1
                },
                {
                    "Address": 792,
                    "ByteSize": 2,
                    "Comment": "Channel 'S', offset &03 (#ADDR:0x171C#)",
                    "DataType": 1
                },
                {
                    "Address": 794,
                    "ByteSize": 2,
                    "Comment": "Channel 'P', offset &01 (#ADDR:0x171C#)",
                    "DataType": 1
                },
                {
                    "Address": 806,
                    "Comment": "}"
                },
                {
                    "Address": 823,
                    "Comment": "#ADDR:0x343C#"
                },
                {
                    "Address": 824,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 870,
                    "Comment": "}"
                },
                {
                    "Address": 890,
                    "ByteSize": 2,
                    "Comment": "Channel 'K', offset &06 (#ADDR:0x1781#)",
                    "DataType": 1
                },
                {
                    "Address": 892,
                    "ByteSize": 2,
                    "Comment": "Channel 'S', offset &08 (#ADDR:0x1785#)",
                    "DataType": 1
                },
                {
                    "Address": 894,
                    "ByteSize": 2,
                    "Comment": "Channel 'P', offset &0A (#ADDR:0x1789#)",
                    "DataType": 1
                },
                {
                    "Address": 896,
                    "Comment": "End marker."
                }
            ],
            "LabelInfo": [
                {
                    "Address": 311,
                    "Global": true,
                    "LabelType": 3,
                    "Name": "COMMA_SPC"
                },
                {
                    "Address": 313,
                    "Global": true,
                    "LabelType": 3,
                    "Name": "COPYRIGHT"
                },
                {
                    "Address": 341,
                    "LabelType": 2,
                    "Name": "REPORT_G"
                },
                {
                    "Address": 349,
                    "LabelType": 2,
                    "Name": "MAIN_ADD"
                },
                {
                    "Address": 381,
                    "LabelType": 2,
                    "Name": "MAIN_ADD1"
                },
                {
                    "Address": 427,
                    "LabelType": 2,
                    "Name": "MAIN_ADD2"
                },
                {
                    "Address": 431,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "CHANINFO"
                },
                {
                    "Address": 452,
                    "LabelType": 2,
                    "Name": "REPORT_J"
                },
                {
                    "Address": 454,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "STRMDATA"
                },
                {
                    "Address": 468,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "WAIT_KEY"
                },
                {
                    "Address": 478,
                    "LabelType": 2,
                    "Name": "WAIT_KEY1"
                },
                {
                    "Address": 486,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "INPUT_AD"
                },
                {
                    "Address": 495,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "OUT_CODE"
                },
                {
                    "Address": 498,
                    "LabelType": 2,
                    "Name": "PRINT_A_2"
                },
                {
                    "Address": 503,
                    "LabelType": 2,
                    "Name": "CALL_SUB"
                },
                {
                    "Address": 513,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CHAN_OPEN"
                },
                {
                    "Address": 526,
                    "LabelType": 2,
                    "Name": "REPORT_O"
                },
                {
                    "Address": 528,
                    "LabelType": 2,
                    "Name": "CHAN_OP_1"
                },
                {
                    "Address": 533,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CHAN_FLAG"
                },
                {
                    "Address": 556,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CALL_JUMP"
                },
                {
                    "Address": 557,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "CHANCODE"
                },
                {
                    "Address": 564,
                    "LabelType": 2,
                    "Name": "CHAN_K"
                },
                {
                    "Address": 578,
                    "LabelType": 2,
                    "Name": "CHAN_S"
                },
                {
                    "Address": 582,
                    "LabelType": 2,
                    "Name": "CHAN_S_1"
                },
                {
                    "Address": 589,
                    "LabelType": 2,
                    "Name": "CHAN_P"
                },
                {
                    "Address": 594,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "ONE_SPACE"
                },
                {
                    "Address": 597,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "MAKE_ROOM"
                },
                {
                    "Address": 612,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "POINTERS"
                },
                {
                    "Address": 619,
                    "LabelType": 2,
                    "Name": "PTR_NEXT"
                },
                {
                    "Address": 639,
                    "LabelType": 2,
                    "Name": "PTR_DONE"
                },
                {
                    "Address": 655,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "LINE_ZERO"
                },
                {
                    "Address": 657,
                    "LabelType": 2,
                    "Name": "LINE_NO_A"
                },
                {
                    "Address": 661,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "LINE_NO"
                },
                {
                    "Address": 670,
                    "LabelType": 2,
                    "Name": "RESERVE"
                },
                {
                    "Address": 688,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "SET_MIN"
                },
                {
                    "Address": 703,
                    "LabelType": 2,
                    "Name": "SET_WORK"
                },
                {
                    "Address": 709,
                    "LabelType": 2,
                    "Name": "SET_STK"
                },
                {
                    "Address": 724,
                    "LabelType": 2,
                    "Name": "REC_EDIT"
                },
                {
                    "Address": 731,
                    "LabelType": 2,
                    "Name": "INDEXER_1"
                },
                {
                    "Address": 732,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "INDEXER"
                },
                {
                    "Address": 741,
                    "LabelType": 2,
                    "Name": "CLOSE"
                },
                {
                    "Address": 764,
                    "LabelType": 2,
                    "Name": "CLOSE_1"
                },
                {
                    "Address": 769,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CLOSE_2"
                },
                {
                    "Address": 790,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "CLOSESTRM"
                },
                {
                    "Address": 796,
                    "LabelType": 2,
                    "Name": "CLOSE_STR"
                },
                {
                    "Address": 798,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "STR_DATA"
                },
                {
                    "Address": 805,
                    "LabelType": 2,
                    "Name": "REPORT_O_2"
                },
                {
                    "Address": 807,
                    "LabelType": 2,
                    "Name": "STR_DATA1"
                },
                {
                    "Address": 822,
                    "LabelType": 2,
                    "Name": "OPEN"
                },
                {
                    "Address": 854,
                    "LabelType": 2,
                    "Name": "OPEN_1"
                },
                {
                    "Address": 861,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "OPEN_2"
                },
                {
                    "Address": 869,
                    "LabelType": 2,
                    "Name": "REPORT_F"
                },
                {
                    "Address": 871,
                    "LabelType": 2,
                    "Name": "OPEN_3"
                },
                {
                    "Address": 890,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "OPENSTRM"
                },
                {
                    "Address": 897,
                    "LabelType": 2,
                    "Name": "OPEN_K"
                },
                {
                    "Address": 901,
                    "LabelType": 2,
                    "Name": "OPEN_S"
                },
                {
                    "Address": 905,
                    "LabelType": 2,
                    "Name": "OPEN_P"
                },
                {
                    "Address": 907,
                    "LabelType": 2,
                    "Name": "OPEN_END"
                },
                {
                    "Address": 915,
                    "LabelType": 2,
                    "Name": "CAT_ETC"
                },
                {
                    "Address": 917,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "AUTO_LIST"
                },
                {
                    "Address": 974,
                    "LabelType": 2,
                    "Name": "AUTO_L_1"
                },
                {
                    "Address": 993,
                    "LabelType": 2,
                    "Name": "AUTO_L_2"
                },
                {
                    "Address": 996,
                    "LabelType": 2,
                    "Name": "AUTO_L_3"
                },
                {
                    "Address": 1005,
                    "LabelType": 2,
                    "Name": "AUTO_L_4"
                },
                {
                    "Address": 1013,
                    "LabelType": 2,
                    "Name": "LLIST"
                },
                {
                    "Address": 1017,
                    "LabelType": 2,
                    "Name": "LIST"
                },
                {
                    "Address": 1019,
                    "LabelType": 2,
                    "Name": "LIST_1"
                }
            ],
            "PageId": 5
        },
        {
            "CodeInfo": [
                {
                    "Address": 2,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 5,
                    "ByteSize": 1,
                    "Comment": "{With the present character in the #REG:A# register see",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 6,
                    "ByteSize": 3,
                    "Comment": "if the stream is to be changed.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 9,
                    "ByteSize": 2,
                    "Comment": "Jump forward if unchanged.",
                    "OperandType": 2
                },
                {
                    "Address": 11,
                    "ByteSize": 1,
                    "Comment": "{Is the present character a ';'?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 12,
                    "ByteSize": 2,
                    "Comment": "          ; }"
                },
                {
                    "Address": 14,
                    "ByteSize": 2,
                    "Comment": "Jump if it is.",
                    "OperandType": 2
                },
                {
                    "Address": 16,
                    "ByteSize": 2,
                    "Comment": "Is it a ','?"
                },
                {
                    "Address": 18,
                    "ByteSize": 2,
                    "Comment": "Jump if it is not.",
                    "OperandType": 2
                },
                {
                    "Address": 20,
                    "ByteSize": 1,
                    "Comment": "{A numeric expression must follow, e.g. LIST \\#5,20.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 21,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 24,
                    "ByteSize": 2,
                    "Comment": "Jump forward with it.",
                    "OperandType": 2
                },
                {
                    "Address": 26,
                    "ByteSize": 3,
                    "Comment": "{Otherwise use zero and also jump forward.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 29,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 31,
                    "ByteSize": 3,
                    "Comment": "Fetch any line or use zero if none supplied.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 34,
                    "ByteSize": 3,
                    "Comment": "If checking the syntax of the edit-line move on to the\nnext statement.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 37,
                    "ByteSize": 3,
                    "Comment": "Line number to #REG:BC#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 40,
                    "ByteSize": 1,
                    "Comment": "High byte to #REG:A#."
                },
                {
                    "Address": 41,
                    "ByteSize": 2,
                    "Comment": "{Limit the high byte to the correct range and pass the"
                },
                {
                    "Address": 43,
                    "ByteSize": 1,
                    "Comment": "whole line number to #REG:HL#."
                },
                {
                    "Address": 44,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 45,
                    "ByteSize": 3,
                    "Comment": "{Set \\#SYSVAR(E-PPC) and find the address of the start",
                    "OperandType": 1
                },
                {
                    "Address": 48,
                    "ByteSize": 3,
                    "Comment": "of this line or the first line after it if the actual\nline does not exist.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 51,
                    "ByteSize": 2,
                    "Comment": "Flag 'before the current line'."
                },
                {
                    "Address": 53,
                    "ByteSize": 3,
                    "Comment": "Print the whole of a BASIC line.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 56,
                    "ByteSize": 1,
                    "Comment": "This will be a 'carriage return'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 57,
                    "ByteSize": 4,
                    "Comment": "{Jump back unless dealing with an automatic listing"
                },
                {
                    "Address": 61,
                    "ByteSize": 2,
                    "Comment": "(bit 4 of \\#SYSVAR(TV-FLAG) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 63,
                    "ByteSize": 3,
                    "Comment": "{Also jump back if there is still part of the main",
                    "OperandType": 1
                },
                {
                    "Address": 66,
                    "ByteSize": 3,
                    "Comment": "screen that can be used (\\#SYSVAR(DF-SZ) <>"
                },
                {
                    "Address": 69,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(S-POSN-hi)).}",
                    "OperandType": 2
                },
                {
                    "Address": 71,
                    "ByteSize": 1,
                    "Comment": "{A return can be made at this point if the screen is"
                },
                {
                    "Address": 72,
                    "ByteSize": 1,
                    "Comment": "full and the current line has been printed\n(#REG:E#=&00).}"
                },
                {
                    "Address": 73,
                    "ByteSize": 1,
                    "Comment": "{However if the current line is missing from the"
                },
                {
                    "Address": 74,
                    "ByteSize": 1,
                    "Comment": "listing then \\#SYSVAR(S-TOP) has to be updated and a"
                },
                {
                    "Address": 75,
                    "ByteSize": 3,
                    "Comment": "further line printed (using scrolling)."
                },
                {
                    "Address": 78,
                    "ByteSize": 3,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 81,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 82,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 83,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 85,
                    "ByteSize": 4,
                    "Comment": "{Fetch the 'current' line number from \\#SYSVAR(E-PPC)",
                    "OperandType": 1
                },
                {
                    "Address": 89,
                    "ByteSize": 3,
                    "Comment": "and compare it.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 92,
                    "ByteSize": 2,
                    "Comment": "Pre-load the #REG:D# register with the current line\ncursor."
                },
                {
                    "Address": 94,
                    "ByteSize": 2,
                    "Comment": "Jump forward if printing the 'current' line.",
                    "OperandType": 2
                },
                {
                    "Address": 96,
                    "ByteSize": 3,
                    "Comment": "{Load the #REG:D# register with zero (it is not the"
                },
                {
                    "Address": 99,
                    "ByteSize": 2,
                    "Comment": "cursor) and set #REG:E# to hold &01 if the line is before\nthe 'current' line and &00 if after. (The carry flag\ncomes from #ADDR:0x1980#.)}"
                },
                {
                    "Address": 101,
                    "ByteSize": 3,
                    "Comment": "Save the line marker in \\#SYSVAR(BREG)."
                },
                {
                    "Address": 104,
                    "ByteSize": 1,
                    "Comment": "{Fetch the high byte of the line number and make a full"
                },
                {
                    "Address": 105,
                    "ByteSize": 2,
                    "Comment": "return if the listing has been finished."
                },
                {
                    "Address": 107,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 108,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 109,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 110,
                    "ByteSize": 3,
                    "Comment": "The line number can now be printed - with leading\nspaces.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 113,
                    "ByteSize": 1,
                    "Comment": "{Move the pointer on to address the first command code"
                },
                {
                    "Address": 114,
                    "ByteSize": 1,
                    "Comment": "in the line."
                },
                {
                    "Address": 115,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 116,
                    "ByteSize": 4,
                    "Comment": "Signal 'leading space allowed' (reset bit 0 of\n\\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 120,
                    "ByteSize": 1,
                    "Comment": "{Fetch the cursor code and jump forward unless the"
                },
                {
                    "Address": 121,
                    "ByteSize": 1,
                    "Comment": "cursor is to be printed."
                },
                {
                    "Address": 122,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 124,
                    "ByteSize": 1,
                    "Comment": "So print the cursor now.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 125,
                    "ByteSize": 4,
                    "Comment": "Signal 'no leading space now' (set bit 0 of\n\\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 129,
                    "ByteSize": 1,
                    "Comment": "Save the registers."
                },
                {
                    "Address": 130,
                    "ByteSize": 1,
                    "Comment": "Move the pointer to #REG:DE#."
                },
                {
                    "Address": 131,
                    "ByteSize": 4,
                    "Comment": "Signal 'not in quotes' (reset bit 2 of\n#ADDR:0x5C6A#(FLAGS2))."
                },
                {
                    "Address": 135,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(FLAGS)."
                },
                {
                    "Address": 138,
                    "ByteSize": 2,
                    "Comment": "Signal 'print in K-mode'."
                },
                {
                    "Address": 140,
                    "ByteSize": 4,
                    "Comment": "{Jump forward unless in INPUT mode (bit 5 of"
                },
                {
                    "Address": 144,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(FLAGX) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 146,
                    "ByteSize": 2,
                    "Comment": "Signal 'print in L-mode'."
                },
                {
                    "Address": 148,
                    "ByteSize": 3,
                    "Comment": "{Fetch the syntax error pointer (\\#SYSVAR(X-PTR)) and",
                    "OperandType": 1
                },
                {
                    "Address": 151,
                    "ByteSize": 1,
                    "Comment": "jump forward unless it is time to print the error"
                },
                {
                    "Address": 152,
                    "ByteSize": 2,
                    "Comment": "marker."
                },
                {
                    "Address": 154,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 156,
                    "ByteSize": 2,
                    "Comment": "{Print the error marker now. It is a flashing '?'."
                },
                {
                    "Address": 158,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 161,
                    "ByteSize": 3,
                    "Comment": "Consider whether to print the cursor.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 164,
                    "ByteSize": 1,
                    "Comment": "Move the pointer to #REG:HL# now."
                },
                {
                    "Address": 165,
                    "ByteSize": 1,
                    "Comment": "Fetch each character in turn."
                },
                {
                    "Address": 166,
                    "ByteSize": 3,
                    "Comment": "If the character is a 'number marker' then the hidden\nfloating-point form is not to be printed.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 169,
                    "ByteSize": 1,
                    "Comment": "Update the pointer for the next pass."
                },
                {
                    "Address": 170,
                    "ByteSize": 2,
                    "Comment": "Is the character a 'carriage return'?"
                },
                {
                    "Address": 172,
                    "ByteSize": 2,
                    "Comment": "Jump if it is.",
                    "OperandType": 2
                },
                {
                    "Address": 174,
                    "ByteSize": 1,
                    "Comment": "Switch the pointer to #REG:DE#."
                },
                {
                    "Address": 175,
                    "ByteSize": 3,
                    "Comment": "Print the character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 178,
                    "ByteSize": 2,
                    "Comment": "Go around the loop for at least one further pass.",
                    "OperandType": 2
                },
                {
                    "Address": 180,
                    "ByteSize": 1,
                    "Comment": "{Restore the #REG:DE# register pair and return."
                },
                {
                    "Address": 181,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 182,
                    "ByteSize": 2,
                    "Comment": "Is the character a 'number marker'?"
                },
                {
                    "Address": 184,
                    "ByteSize": 1,
                    "Comment": "Return if not."
                },
                {
                    "Address": 185,
                    "ByteSize": 1,
                    "Comment": "{Advance the pointer six times so as to step past the"
                },
                {
                    "Address": 186,
                    "ByteSize": 1,
                    "Comment": "'number marker' and the five locations holding the"
                },
                {
                    "Address": 187,
                    "ByteSize": 1,
                    "Comment": "floating-point form."
                },
                {
                    "Address": 188,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 189,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 190,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 191,
                    "ByteSize": 1,
                    "Comment": "{Fetch the current code before returning."
                },
                {
                    "Address": 192,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 193,
                    "ByteSize": 1,
                    "Comment": "Switch to the alternate registers."
                },
                {
                    "Address": 194,
                    "ByteSize": 3,
                    "Comment": "{Save the values of \\#SYSVAR(ATTR-T) and \\#SYSVAR(MASK-T)",
                    "OperandType": 1
                },
                {
                    "Address": 197,
                    "ByteSize": 1,
                    "Comment": "on the machine stack.}"
                },
                {
                    "Address": 198,
                    "ByteSize": 2,
                    "Comment": "{Ensure that FLASH is active."
                },
                {
                    "Address": 200,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 202,
                    "ByteSize": 3,
                    "Comment": "Use these modified values for \\#SYSVAR(ATTR-T) and\n\\#SYSVAR(MASK-T).",
                    "OperandType": 1
                },
                {
                    "Address": 205,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(P-FLAG)."
                },
                {
                    "Address": 208,
                    "ByteSize": 1,
                    "Comment": "{Save \\#SYSVAR(P-FLAG) also on the machine stack."
                },
                {
                    "Address": 209,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 210,
                    "ByteSize": 2,
                    "Comment": "Ensure INVERSE 0, OVER 0, and not PAPER 9 nor INK 9."
                },
                {
                    "Address": 212,
                    "ByteSize": 3,
                    "Comment": "The character is printed.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 215,
                    "ByteSize": 1,
                    "Comment": "{The former value of \\#SYSVAR(P-FLAG) is restored."
                },
                {
                    "Address": 216,
                    "ByteSize": 3,
                    "Comment": "}"
                },
                {
                    "Address": 219,
                    "ByteSize": 1,
                    "Comment": "{The former values of \\#SYSVAR(ATTR-T) and"
                },
                {
                    "Address": 220,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(MASK-T) are also restored before returning.",
                    "OperandType": 1
                },
                {
                    "Address": 223,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 224,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 225,
                    "ByteSize": 3,
                    "Comment": "{Fetch the address of the cursor (\\#SYSVAR(K-CUR)) but",
                    "OperandType": 1
                },
                {
                    "Address": 228,
                    "ByteSize": 1,
                    "Comment": "return if the correct place is not being considered."
                },
                {
                    "Address": 229,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 231,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 232,
                    "ByteSize": 3,
                    "Comment": "{The current value of \\#SYSVAR(MODE) is fetched and",
                    "OperandType": 1
                },
                {
                    "Address": 235,
                    "ByteSize": 2,
                    "Comment": "doubled.}"
                },
                {
                    "Address": 237,
                    "ByteSize": 2,
                    "Comment": "Jump forward unless dealing with Extended mode or\nGraphics.",
                    "OperandType": 2
                },
                {
                    "Address": 239,
                    "ByteSize": 2,
                    "Comment": "Add the appropriate offset to give 'E' or 'G'."
                },
                {
                    "Address": 241,
                    "ByteSize": 2,
                    "Comment": "Jump forward to print it.",
                    "OperandType": 2
                },
                {
                    "Address": 243,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(FLAGS)."
                },
                {
                    "Address": 246,
                    "ByteSize": 2,
                    "Comment": "Signal 'K-mode'."
                },
                {
                    "Address": 248,
                    "ByteSize": 2,
                    "Comment": "The character 'K'."
                },
                {
                    "Address": 250,
                    "ByteSize": 2,
                    "Comment": "{Jump forward to print 'K' if 'the printing is to be in"
                },
                {
                    "Address": 252,
                    "ByteSize": 2,
                    "Comment": "K-mode'.}",
                    "OperandType": 2
                },
                {
                    "Address": 254,
                    "ByteSize": 2,
                    "Comment": "The 'printing is to be in L-mode' so signal 'L-MODE'."
                },
                {
                    "Address": 256,
                    "ByteSize": 1,
                    "Comment": "Form the character 'L'."
                },
                {
                    "Address": 257,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if not in 'C-mode' (bit 3 of"
                },
                {
                    "Address": 261,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x5C6A#(FLAGS2) reset).}",
                    "OperandType": 2
                },
                {
                    "Address": 263,
                    "ByteSize": 2,
                    "Comment": "The character 'C'."
                },
                {
                    "Address": 265,
                    "ByteSize": 1,
                    "Comment": "{Save the #REG:DE# register pair whilst the cursor is"
                },
                {
                    "Address": 266,
                    "ByteSize": 3,
                    "Comment": "printed - FLASHing.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 269,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 270,
                    "ByteSize": 1,
                    "Comment": "Return once it has been done."
                },
                {
                    "Address": 271,
                    "ByteSize": 1,
                    "Comment": "{The line number held by the system variable is"
                },
                {
                    "Address": 272,
                    "ByteSize": 1,
                    "Comment": "collected."
                },
                {
                    "Address": 273,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 274,
                    "ByteSize": 1,
                    "Comment": "The pointer is saved."
                },
                {
                    "Address": 275,
                    "ByteSize": 1,
                    "Comment": "{The line number is moved to the #REG:HL# register pair"
                },
                {
                    "Address": 276,
                    "ByteSize": 1,
                    "Comment": "and incremented.}"
                },
                {
                    "Address": 277,
                    "ByteSize": 3,
                    "Comment": "The address of the start of this line is found, or the\nnext line if the actual line number is not being used.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 280,
                    "ByteSize": 3,
                    "Comment": "The number of that line is fetched.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 283,
                    "ByteSize": 1,
                    "Comment": "The pointer to the system variable is restored."
                },
                {
                    "Address": 284,
                    "ByteSize": 4,
                    "Comment": "{Return if in 'INPUT mode' (bit 5 of \\#SYSVAR(FLAGX)"
                },
                {
                    "Address": 288,
                    "ByteSize": 1,
                    "Comment": "set).}"
                },
                {
                    "Address": 289,
                    "ByteSize": 1,
                    "Comment": "{Otherwise proceed to enter the line number into the"
                },
                {
                    "Address": 290,
                    "ByteSize": 1,
                    "Comment": "two locations of the system variable."
                },
                {
                    "Address": 291,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 292,
                    "ByteSize": 1,
                    "Comment": "Return when it has been done."
                },
                {
                    "Address": 293,
                    "ByteSize": 1,
                    "Comment": "The #REG:A# register will hold &20 for a space or &FF for\nno-space."
                },
                {
                    "Address": 294,
                    "ByteSize": 1,
                    "Comment": "{Test the value and return if there is not to be a"
                },
                {
                    "Address": 295,
                    "ByteSize": 1,
                    "Comment": "space.}"
                },
                {
                    "Address": 296,
                    "ByteSize": 2,
                    "Comment": "Jump forward to print a space.",
                    "OperandType": 2
                },
                {
                    "Address": 298,
                    "ByteSize": 1,
                    "Comment": "Clear the #REG:A# register."
                },
                {
                    "Address": 299,
                    "ByteSize": 1,
                    "Comment": "The 'trial subtraction'."
                },
                {
                    "Address": 300,
                    "ByteSize": 1,
                    "Comment": "Count each 'trial'."
                },
                {
                    "Address": 301,
                    "ByteSize": 2,
                    "Comment": "Jump back until exhausted.",
                    "OperandType": 2
                },
                {
                    "Address": 303,
                    "ByteSize": 2,
                    "Comment": "{Restore last 'subtraction' and discount it."
                },
                {
                    "Address": 305,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 306,
                    "ByteSize": 2,
                    "Comment": "If no 'subtractions' were possible jump back to see if\na space is to be printed.",
                    "OperandType": 2
                },
                {
                    "Address": 308,
                    "ByteSize": 3,
                    "Comment": "Otherwise print the digit.",
                    "OperandType": 2
                },
                {
                    "Address": 311,
                    "ByteSize": 3,
                    "Comment": "Return carry reset if handling a digit code.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 314,
                    "ByteSize": 2,
                    "Comment": "Jump forward to print the digit.",
                    "OperandType": 2
                },
                {
                    "Address": 316,
                    "ByteSize": 2,
                    "Comment": "{Also print the control characters and 'space'."
                },
                {
                    "Address": 318,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 320,
                    "ByteSize": 4,
                    "Comment": "Signal 'print in K-mode' (reset bit 2 of\n\\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 324,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if dealing with the token 'THEN'."
                },
                {
                    "Address": 326,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 328,
                    "ByteSize": 2,
                    "Comment": "{Jump forward unless dealing with ':'."
                },
                {
                    "Address": 330,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 332,
                    "ByteSize": 4,
                    "Comment": "{Jump forward to print the ':' if in 'INPUT mode' (bit"
                },
                {
                    "Address": 336,
                    "ByteSize": 2,
                    "Comment": "5 of \\#SYSVAR(FLAGX) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 338,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if the ':' is 'not in quotes' (bit 2 of"
                },
                {
                    "Address": 342,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x5C6A#(FLAGS2) reset), i.e. an inter-statement marker.\n}",
                    "OperandType": 2
                },
                {
                    "Address": 344,
                    "ByteSize": 2,
                    "Comment": "The ':' is inside quotes and can now be printed.",
                    "OperandType": 2
                },
                {
                    "Address": 346,
                    "ByteSize": 2,
                    "Comment": "{Accept for printing all characters except '\"'."
                },
                {
                    "Address": 348,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 350,
                    "ByteSize": 1,
                    "Comment": "Save the character code whilst changing the 'quote\nmode'."
                },
                {
                    "Address": 351,
                    "ByteSize": 3,
                    "Comment": "{Fetch #ADDR:0x5C6A#(FLAGS2) and flip bit 2.",
                    "OperandType": 1
                },
                {
                    "Address": 354,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 356,
                    "ByteSize": 3,
                    "Comment": "{Enter the amended value into #ADDR:0x5C6A#(FLAGS2) and",
                    "OperandType": 1
                },
                {
                    "Address": 359,
                    "ByteSize": 1,
                    "Comment": "restore the character code.}"
                },
                {
                    "Address": 360,
                    "ByteSize": 4,
                    "Comment": "Signal 'the next character is to be printed in L-mode'\n(set bit 2 of \\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 364,
                    "ByteSize": 1,
                    "Comment": "{The present character is printed before returning.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 365,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 366,
                    "ByteSize": 1,
                    "Comment": "Save the given line number."
                },
                {
                    "Address": 367,
                    "ByteSize": 3,
                    "Comment": "{Fetch the system variable \\#SYSVAR(PROG) and transfer",
                    "OperandType": 1
                },
                {
                    "Address": 370,
                    "ByteSize": 1,
                    "Comment": "the address to the #REG:DE# register pair."
                },
                {
                    "Address": 371,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 372,
                    "ByteSize": 1,
                    "Comment": "The given line number."
                },
                {
                    "Address": 373,
                    "ByteSize": 3,
                    "Comment": "Compare the given line number against the addressed line\nnumber",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 376,
                    "ByteSize": 1,
                    "Comment": "{Return if carry reset; otherwise address the next"
                },
                {
                    "Address": 377,
                    "ByteSize": 1,
                    "Comment": "line's number."
                },
                {
                    "Address": 378,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 381,
                    "ByteSize": 1,
                    "Comment": "{Switch the pointers and jump back to consider the next"
                },
                {
                    "Address": 382,
                    "ByteSize": 2,
                    "Comment": "line of the program.}",
                    "OperandType": 2
                },
                {
                    "Address": 384,
                    "ByteSize": 1,
                    "Comment": "{Fetch the high byte of the addressed line number and"
                },
                {
                    "Address": 385,
                    "ByteSize": 1,
                    "Comment": "compare it.}"
                },
                {
                    "Address": 386,
                    "ByteSize": 1,
                    "Comment": "Return if they do not match."
                },
                {
                    "Address": 387,
                    "ByteSize": 1,
                    "Comment": "{Next compare the low bytes."
                },
                {
                    "Address": 388,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 389,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 390,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 391,
                    "ByteSize": 1,
                    "Comment": "Return with the carry flag set if the addressed line\nnumber has yet to reach the given line number."
                },
                {
                    "Address": 392,
                    "ByteSize": 1,
                    "Flags": 4
                },
                {
                    "Address": 393,
                    "ByteSize": 1,
                    "Flags": 4
                },
                {
                    "Address": 394,
                    "ByteSize": 1,
                    "Flags": 4
                },
                {
                    "Address": 395,
                    "ByteSize": 3,
                    "Comment": "Set \\#SYSVAR(CH-ADD) to the current byte.",
                    "OperandType": 1
                },
                {
                    "Address": 398,
                    "ByteSize": 2,
                    "Comment": "Set a 'quotes off' flag."
                },
                {
                    "Address": 400,
                    "ByteSize": 1,
                    "Comment": "{Decrease #REG:D# and return if the required statement has"
                },
                {
                    "Address": 401,
                    "ByteSize": 1,
                    "Comment": "been found.}"
                },
                {
                    "Address": 402,
                    "ByteSize": 1,
                    "Comment": "{Fetch the next character code and jump if it does not",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 403,
                    "ByteSize": 1,
                    "Comment": "match the given token code."
                },
                {
                    "Address": 404,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 406,
                    "ByteSize": 1,
                    "Comment": "{But should it match then return with the carry and the"
                },
                {
                    "Address": 407,
                    "ByteSize": 1,
                    "Comment": "zero flags both reset.}"
                },
                {
                    "Address": 408,
                    "ByteSize": 1,
                    "Comment": "{Update the pointer and fetch the new code."
                },
                {
                    "Address": 409,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 410,
                    "ByteSize": 3,
                    "Comment": "Step over any number.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 413,
                    "ByteSize": 3,
                    "Comment": "Update \\#SYSVAR(CH-ADD).",
                    "OperandType": 1
                },
                {
                    "Address": 416,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if the character is not a '\"'."
                },
                {
                    "Address": 418,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 420,
                    "ByteSize": 1,
                    "Comment": "Otherwise set the 'quotes flag'."
                },
                {
                    "Address": 421,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if the character is a ':'."
                },
                {
                    "Address": 423,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 425,
                    "ByteSize": 2,
                    "Comment": "{Jump forward unless the code is the token 'THEN'."
                },
                {
                    "Address": 427,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 429,
                    "ByteSize": 2,
                    "Comment": "{Read the 'quotes flag' and jump back at the end of each"
                },
                {
                    "Address": 431,
                    "ByteSize": 2,
                    "Comment": "statement (including after 'THEN').}",
                    "OperandType": 2
                },
                {
                    "Address": 433,
                    "ByteSize": 2,
                    "Comment": "{Jump back unless at the end of a BASIC line."
                },
                {
                    "Address": 435,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 437,
                    "ByteSize": 1,
                    "Comment": "{Decrease the statement counter and set the carry flag"
                },
                {
                    "Address": 438,
                    "ByteSize": 1,
                    "Comment": "before returning."
                },
                {
                    "Address": 439,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 440,
                    "ByteSize": 1,
                    "Comment": "Save the address of the current line or variable."
                },
                {
                    "Address": 441,
                    "ByteSize": 1,
                    "Comment": "Fetch the first byte."
                },
                {
                    "Address": 442,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if searching for a 'next line'."
                },
                {
                    "Address": 444,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 446,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if searching for the next string or array"
                },
                {
                    "Address": 448,
                    "ByteSize": 2,
                    "Comment": "variable.}",
                    "OperandType": 2
                },
                {
                    "Address": 450,
                    "ByteSize": 1,
                    "Comment": "{Jump forward with simple numeric and FOR-NEXT"
                },
                {
                    "Address": 451,
                    "ByteSize": 3,
                    "Comment": "variables.}",
                    "OperandType": 2
                },
                {
                    "Address": 454,
                    "ByteSize": 1,
                    "Comment": "Long name numeric variables only."
                },
                {
                    "Address": 455,
                    "ByteSize": 3,
                    "Comment": "{A numeric variable will occupy five locations but a"
                },
                {
                    "Address": 458,
                    "ByteSize": 2,
                    "Comment": "FOR-NEXT control variable will need eighteen locations.",
                    "OperandType": 2
                },
                {
                    "Address": 460,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 462,
                    "ByteSize": 1,
                    "Comment": "The carry flag becomes reset for long named variables\nonly, until the final character of the long name is\nreached."
                },
                {
                    "Address": 463,
                    "ByteSize": 1,
                    "Comment": "{Increment the pointer and fetch the new code."
                },
                {
                    "Address": 464,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 465,
                    "ByteSize": 2,
                    "Comment": "Jump back unless the previous code was the last code of\nthe variable's name.",
                    "OperandType": 2
                },
                {
                    "Address": 467,
                    "ByteSize": 2,
                    "Comment": "Now jump forward (#REG:BC#=&0005 or &0012).",
                    "OperandType": 2
                },
                {
                    "Address": 469,
                    "ByteSize": 1,
                    "Comment": "Step past the low byte of the line number."
                },
                {
                    "Address": 470,
                    "ByteSize": 1,
                    "Comment": "Now point to the low byte of the length."
                },
                {
                    "Address": 471,
                    "ByteSize": 1,
                    "Comment": "{Fetch the length into the #REG:BC# register pair."
                },
                {
                    "Address": 472,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 473,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 474,
                    "ByteSize": 1,
                    "Comment": "Allow for the inclusive byte."
                },
                {
                    "Address": 475,
                    "ByteSize": 1,
                    "Comment": "Point to the first byte of the 'next' line or variable."
                },
                {
                    "Address": 476,
                    "ByteSize": 1,
                    "Comment": "Fetch the address of the previous one and continue into\n#ADDR:0x19DD#."
                },
                {
                    "Address": 477,
                    "ByteSize": 1,
                    "Comment": "Prepare for a true subtraction."
                },
                {
                    "Address": 478,
                    "ByteSize": 2,
                    "Comment": "{Find the length from one 'start' to the next and pass"
                },
                {
                    "Address": 480,
                    "ByteSize": 1,
                    "Comment": "it to the #REG:BC# register pair."
                },
                {
                    "Address": 481,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 482,
                    "ByteSize": 1,
                    "Comment": "{Reform the address and exchange them before returning."
                },
                {
                    "Address": 483,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 484,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 485,
                    "ByteSize": 3,
                    "Comment": "Use the 'difference' subroutine to develop the\nappropriate values.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 488,
                    "ByteSize": 1,
                    "Comment": "Save the number of bytes to be reclaimed."
                },
                {
                    "Address": 489,
                    "ByteSize": 1,
                    "Comment": "{All the system variable pointers above the area have to"
                },
                {
                    "Address": 490,
                    "ByteSize": 1,
                    "Comment": "be reduced by #REG:BC#, so this number is 2's complemented"
                },
                {
                    "Address": 491,
                    "ByteSize": 1,
                    "Comment": "before the pointers are altered."
                },
                {
                    "Address": 492,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 493,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 494,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 495,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 496,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 499,
                    "ByteSize": 1,
                    "Comment": "{Return the 'first location' address to the #REG:DE#"
                },
                {
                    "Address": 500,
                    "ByteSize": 1,
                    "Comment": "register pair and form the address of the first location"
                },
                {
                    "Address": 501,
                    "ByteSize": 1,
                    "Comment": "to the left.}"
                },
                {
                    "Address": 502,
                    "ByteSize": 1,
                    "Comment": "{Save the 'first location' whilst the actual reclamation"
                },
                {
                    "Address": 503,
                    "ByteSize": 2,
                    "Comment": "occurs."
                },
                {
                    "Address": 505,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 506,
                    "ByteSize": 1,
                    "Comment": "Now return."
                },
                {
                    "Address": 507,
                    "ByteSize": 3,
                    "Comment": "Pick up the pointer to the edit-line (\\#SYSVAR(E-LINE)).",
                    "OperandType": 1
                },
                {
                    "Address": 510,
                    "ByteSize": 1,
                    "Comment": "{Set \\#SYSVAR(CH-ADD) to point to the location before any"
                },
                {
                    "Address": 511,
                    "ByteSize": 3,
                    "Comment": "number.}",
                    "OperandType": 1
                },
                {
                    "Address": 514,
                    "ByteSize": 1,
                    "Comment": "Pass the first code to the #REG:A# register.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 515,
                    "ByteSize": 3,
                    "Comment": "{However before considering the code make the"
                },
                {
                    "Address": 518,
                    "ByteSize": 3,
                    "Comment": "calculator's memory area a temporary calculator stack\narea (by setting \\#SYSVAR(STKEND) equal to\n\\#SYSVAR(MEMBOT)).}",
                    "OperandType": 1
                },
                {
                    "Address": 521,
                    "ByteSize": 3,
                    "Comment": "Now read the digits of the line number. Return zero if\nno number exists.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 524,
                    "ByteSize": 3,
                    "Comment": "Compress the line number into the #REG:BC# register pair.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 527,
                    "ByteSize": 2,
                    "Comment": "Jump forward if the number exceeds 65,536.",
                    "OperandType": 2
                },
                {
                    "Address": 529,
                    "ByteSize": 3,
                    "Comment": "{Otherwise test it against 10,000."
                },
                {
                    "Address": 532,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 533,
                    "ByteSize": 3,
                    "Comment": "Give report C if over 9,999.",
                    "OperandType": 2
                },
                {
                    "Address": 536,
                    "ByteSize": 3,
                    "Comment": "Return via #ADDR:0x16C5# that restores the calculator stack to\nits rightful place.",
                    "OperandType": 2
                },
                {
                    "Address": 539,
                    "ByteSize": 1,
                    "Comment": "{Save the other registers throughout the subroutine."
                },
                {
                    "Address": 540,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 541,
                    "ByteSize": 1,
                    "Comment": "Clear the #REG:A# register."
                },
                {
                    "Address": 542,
                    "ByteSize": 2,
                    "Comment": "{Jump forward to print a zero rather than '-2' when"
                },
                {
                    "Address": 544,
                    "ByteSize": 2,
                    "Comment": "reporting on the edit-line.}",
                    "OperandType": 2
                },
                {
                    "Address": 546,
                    "ByteSize": 1,
                    "Comment": "{Move the number to the #REG:HL# register pair."
                },
                {
                    "Address": 547,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 548,
                    "ByteSize": 2,
                    "Comment": "Flag 'no leading spaces'."
                },
                {
                    "Address": 550,
                    "ByteSize": 2,
                    "Comment": "Jump forward to print the number.",
                    "OperandType": 2
                },
                {
                    "Address": 552,
                    "ByteSize": 1,
                    "Comment": "Save the #REG:DE# register pair."
                },
                {
                    "Address": 553,
                    "ByteSize": 1,
                    "Comment": "{Fetch the number into the #REG:DE# register pair and save"
                },
                {
                    "Address": 554,
                    "ByteSize": 1,
                    "Comment": "the pointer (updated)."
                },
                {
                    "Address": 555,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 556,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 557,
                    "ByteSize": 1,
                    "Comment": "{Move the number to the #REG:HL# register pair and flag"
                },
                {
                    "Address": 558,
                    "ByteSize": 2,
                    "Comment": "'leading spaces are to be printed'.}"
                },
                {
                    "Address": 560,
                    "ByteSize": 3,
                    "Comment": "This is '-1,000'."
                },
                {
                    "Address": 563,
                    "ByteSize": 3,
                    "Comment": "Print a first digit.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 566,
                    "ByteSize": 3,
                    "Comment": "This is '-100'."
                },
                {
                    "Address": 569,
                    "ByteSize": 3,
                    "Comment": "Print the second digit.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 572,
                    "ByteSize": 2,
                    "Comment": "This is '-10'."
                },
                {
                    "Address": 574,
                    "ByteSize": 3,
                    "Comment": "Print the third digit.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 577,
                    "ByteSize": 1,
                    "Comment": "Move any remaining part of the number to the #REG:A#\nregister."
                },
                {
                    "Address": 578,
                    "ByteSize": 3,
                    "Comment": "Print the digit.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 581,
                    "ByteSize": 1,
                    "Comment": "{Restore the registers before returning."
                },
                {
                    "Address": 582,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 583,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 791,
                    "ByteSize": 4,
                    "Comment": "Signal 'syntax checking' (reset bit 7 of\n\\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 795,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(CH-ADD) is made to point to the first code\nafter any line number.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 798,
                    "ByteSize": 1,
                    "Comment": "{The system variable \\#SYSVAR(SUBPPC) is initialised to"
                },
                {
                    "Address": 799,
                    "ByteSize": 3,
                    "Comment": "&00 and \\#SYSVAR(ERR-NR) to &FF.",
                    "OperandType": 1
                },
                {
                    "Address": 802,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 803,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 806,
                    "ByteSize": 2,
                    "Comment": "Jump forward to consider the first statement of the\nline.",
                    "OperandType": 2
                },
                {
                    "Address": 808,
                    "ByteSize": 1,
                    "Comment": "Advance \\#SYSVAR(CH-ADD) along the line.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 809,
                    "ByteSize": 3,
                    "Comment": "The work space is cleared.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 812,
                    "ByteSize": 3,
                    "Comment": "Increase \\#SYSVAR(SUBPPC) on each passage around the\nloop."
                },
                {
                    "Address": 815,
                    "ByteSize": 3,
                    "Comment": "But only '127' statements are allowed in a single line.",
                    "OperandType": 2
                },
                {
                    "Address": 818,
                    "ByteSize": 1,
                    "Comment": "Fetch a character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 819,
                    "ByteSize": 2,
                    "Comment": "Clear the #REG:B# register for later."
                },
                {
                    "Address": 821,
                    "ByteSize": 2,
                    "Comment": "Is the character a 'carriage return'?"
                },
                {
                    "Address": 823,
                    "ByteSize": 2,
                    "Comment": "Jump if it is.",
                    "OperandType": 2
                },
                {
                    "Address": 825,
                    "ByteSize": 2,
                    "Comment": "{Go around the loop again if it is a ':'."
                },
                {
                    "Address": 827,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 829,
                    "ByteSize": 3,
                    "Comment": "{Pre-load the machine stack with the return address"
                },
                {
                    "Address": 832,
                    "ByteSize": 1,
                    "Comment": "#ADDR:0x1B76#.}"
                },
                {
                    "Address": 833,
                    "ByteSize": 1,
                    "Comment": "{Save the command temporarily in the #REG:C# register"
                },
                {
                    "Address": 834,
                    "ByteSize": 1,
                    "Comment": "whilst \\#SYSVAR(CH-ADD) is advanced again.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 835,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 836,
                    "ByteSize": 2,
                    "Comment": "Reduce the command's code by &CE, giving the range &00\nto &31 for the fifty commands."
                },
                {
                    "Address": 838,
                    "ByteSize": 3,
                    "Comment": "Give the appropriate error if not a command code.",
                    "OperandType": 2
                },
                {
                    "Address": 841,
                    "ByteSize": 1,
                    "Comment": "Move the command code to the #REG:BC# register pair (#REG:B#\nholds &00)."
                },
                {
                    "Address": 842,
                    "ByteSize": 3,
                    "Comment": "The base address of the #ADDR:0x1A48#(syntax offset table)."
                },
                {
                    "Address": 845,
                    "ByteSize": 1,
                    "Comment": "{The required offset is passed to the #REG:C# register and"
                },
                {
                    "Address": 846,
                    "ByteSize": 1,
                    "Comment": "used to compute the base address for the command's"
                },
                {
                    "Address": 847,
                    "ByteSize": 1,
                    "Comment": "entries in the #ADDR:0x1A7A#(parameter table).}"
                },
                {
                    "Address": 848,
                    "ByteSize": 2,
                    "Comment": "Jump forward into the scanning loop with this address.",
                    "OperandType": 2
                },
                {
                    "Address": 850,
                    "ByteSize": 3,
                    "Comment": "The temporary pointer to the entries in the\n#ADDR:0x1A7A#(parameter table) (\\#SYSVAR(T-ADDR)).",
                    "OperandType": 1
                },
                {
                    "Address": 853,
                    "ByteSize": 1,
                    "Comment": "Fetch each entry in turn."
                },
                {
                    "Address": 854,
                    "ByteSize": 1,
                    "Comment": "{Update the pointer to the entries (\\#SYSVAR(T-ADDR)) for"
                },
                {
                    "Address": 855,
                    "ByteSize": 3,
                    "Comment": "the next pass.}",
                    "OperandType": 1
                },
                {
                    "Address": 858,
                    "ByteSize": 3,
                    "Comment": "{Pre-load the machine stack with the return address"
                },
                {
                    "Address": 861,
                    "ByteSize": 1,
                    "Comment": "#ADDR:0x1B52#.}"
                },
                {
                    "Address": 862,
                    "ByteSize": 1,
                    "Comment": "Copy the entry to the #REG:C# register for later."
                },
                {
                    "Address": 863,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if the entry is a 'separator'."
                },
                {
                    "Address": 865,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 867,
                    "ByteSize": 3,
                    "Comment": "The base address of the #ADDR:0x1C01#(command class table)."
                },
                {
                    "Address": 870,
                    "ByteSize": 2,
                    "Comment": "{Clear the #REG:B# register and index into the table."
                },
                {
                    "Address": 872,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 873,
                    "ByteSize": 1,
                    "Comment": "{Fetch the offset and compute the starting address of"
                },
                {
                    "Address": 874,
                    "ByteSize": 1,
                    "Comment": "the required command class routine.}"
                },
                {
                    "Address": 875,
                    "ByteSize": 1,
                    "Comment": "Push the address on to the machine stack."
                },
                {
                    "Address": 876,
                    "ByteSize": 1,
                    "Comment": "{Before making an indirect jump to the command class",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 877,
                    "ByteSize": 1,
                    "Comment": "routine pass the command code to the #REG:A# register and"
                },
                {
                    "Address": 878,
                    "ByteSize": 1,
                    "Comment": "set the #REG:B# register to &FF.}"
                },
                {
                    "Address": 879,
                    "ByteSize": 1,
                    "Comment": "{The current character is fetched and compared to the",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 880,
                    "ByteSize": 1,
                    "Comment": "entry in the parameter table.}"
                },
                {
                    "Address": 881,
                    "ByteSize": 3,
                    "Comment": "Give the error report if there is not a match.",
                    "OperandType": 2
                },
                {
                    "Address": 884,
                    "ByteSize": 1,
                    "Comment": "{Step past a correct character and return.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 885,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 886,
                    "ByteSize": 3,
                    "Comment": "The BREAK key is tested after every statement.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 889,
                    "ByteSize": 2,
                    "Comment": "Jump forward unless it has been pressed.",
                    "OperandType": 2
                },
                {
                    "Address": 891,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 893,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if there is not a 'jump' to be made"
                },
                {
                    "Address": 897,
                    "ByteSize": 2,
                    "Comment": "(\\#SYSVAR(NSPPC) is &FF).}",
                    "OperandType": 2
                },
                {
                    "Address": 899,
                    "ByteSize": 3,
                    "Comment": "{Fetch the 'new line' number (\\#SYSVAR(NEWPPC)) and jump",
                    "OperandType": 1
                },
                {
                    "Address": 902,
                    "ByteSize": 2,
                    "Comment": "forward unless dealing with a further statement in the"
                },
                {
                    "Address": 904,
                    "ByteSize": 2,
                    "Comment": "editing area.}",
                    "OperandType": 2
                },
                {
                    "Address": 906,
                    "ByteSize": 3,
                    "Comment": "{A line in the editing area is considered as line '-2';"
                },
                {
                    "Address": 909,
                    "ByteSize": 3,
                    "Comment": "set \\#SYSVAR(PPC) accordingly}",
                    "OperandType": 1
                },
                {
                    "Address": 912,
                    "ByteSize": 3,
                    "Comment": "{Make #REG:HL# point to the end marker of the editing area",
                    "OperandType": 1
                },
                {
                    "Address": 915,
                    "ByteSize": 1,
                    "Comment": "(\\#SYSVAR(WORKSP)-1) and #REG:DE# to the location before"
                },
                {
                    "Address": 916,
                    "ByteSize": 4,
                    "Comment": "the start of that area (\\#SYSVAR(E-LINE)-1).",
                    "OperandType": 1
                },
                {
                    "Address": 920,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 921,
                    "ByteSize": 3,
                    "Comment": "{Fetch the number of the next statement to be handled",
                    "OperandType": 1
                },
                {
                    "Address": 924,
                    "ByteSize": 2,
                    "Comment": "(\\#SYSVAR(NSPPC)) before jumping forward.}",
                    "OperandType": 2
                },
                {
                    "Address": 926,
                    "ByteSize": 3,
                    "Comment": "The starting address of the line, or the 'first line\nafter' is found.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 929,
                    "ByteSize": 3,
                    "Comment": "Collect the statement number (\\#SYSVAR(NSPPC)).",
                    "OperandType": 1
                },
                {
                    "Address": 932,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if the required line was found; otherwise",
                    "OperandType": 2
                },
                {
                    "Address": 934,
                    "ByteSize": 1,
                    "Comment": "check the validity of the statement number - must be"
                },
                {
                    "Address": 935,
                    "ByteSize": 2,
                    "Comment": "zero.}",
                    "OperandType": 2
                },
                {
                    "Address": 937,
                    "ByteSize": 1,
                    "Comment": "{Also check that the 'first line after' is not after the"
                },
                {
                    "Address": 938,
                    "ByteSize": 1,
                    "Comment": "actual 'end of program'."
                },
                {
                    "Address": 939,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 941,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 942,
                    "ByteSize": 2,
                    "Comment": "Jump forward with valid addresses; otherwise signal the\nerror 'OK'.",
                    "OperandType": 2
                },
                {
                    "Address": 944,
                    "ByteSize": 1,
                    "Comment": "{Use the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 946,
                    "ByteSize": 1,
                    "Comment": "Drop the address - #ADDR:0x1B76#."
                },
                {
                    "Address": 947,
                    "ByteSize": 3,
                    "Comment": "{Return if syntax is being checked; otherwise fetch the",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 950,
                    "ByteSize": 1,
                    "Comment": "address in \\#SYSVAR(NXTLIN)."
                },
                {
                    "Address": 951,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 954,
                    "ByteSize": 2,
                    "Comment": "{Return also if the address is after the end of the"
                },
                {
                    "Address": 956,
                    "ByteSize": 1,
                    "Comment": "program - the 'run' is finished."
                },
                {
                    "Address": 957,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 958,
                    "ByteSize": 1,
                    "Comment": "Signal 'statement zero' before proceeding."
                },
                {
                    "Address": 959,
                    "ByteSize": 2,
                    "Comment": "{Statement zero becomes statement '1'."
                },
                {
                    "Address": 961,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 963,
                    "ByteSize": 1,
                    "Comment": "{The line number of the line to be used is collected and"
                },
                {
                    "Address": 964,
                    "ByteSize": 1,
                    "Comment": "passed to \\#SYSVAR(PPC)."
                },
                {
                    "Address": 965,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 966,
                    "ByteSize": 4,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 970,
                    "ByteSize": 1,
                    "Comment": "{Now find the 'length' of the line."
                },
                {
                    "Address": 971,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 972,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 973,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 974,
                    "ByteSize": 1,
                    "Comment": "Switch over the values."
                },
                {
                    "Address": 975,
                    "ByteSize": 1,
                    "Comment": "{Form the address of the start of the line after in"
                },
                {
                    "Address": 976,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# and the location before the 'next' line's first\ncharacter in #REG:DE#.}"
                },
                {
                    "Address": 977,
                    "ByteSize": 3,
                    "Comment": "Set \\#SYSVAR(NXTLIN) for use once the current line has\nbeen completed.",
                    "OperandType": 1
                },
                {
                    "Address": 980,
                    "ByteSize": 1,
                    "Comment": "{As usual \\#SYSVAR(CH-ADD) points to the location"
                },
                {
                    "Address": 981,
                    "ByteSize": 3,
                    "Comment": "before the first character to be considered.}",
                    "OperandType": 1
                },
                {
                    "Address": 984,
                    "ByteSize": 1,
                    "Comment": "The statement number is fetched."
                },
                {
                    "Address": 985,
                    "ByteSize": 2,
                    "Comment": "The #REG:E# register is cleared in case #ADDR:0x198B# is used."
                },
                {
                    "Address": 987,
                    "ByteSize": 4,
                    "Comment": "Signal 'no jump' by setting \\#SYSVAR(NSPPC) to &FF."
                },
                {
                    "Address": 991,
                    "ByteSize": 1,
                    "Comment": "{The statement number minus one goes into"
                },
                {
                    "Address": 992,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(SUBPPC).}"
                },
                {
                    "Address": 995,
                    "ByteSize": 3,
                    "Comment": "A first statement can now be considered.",
                    "OperandType": 2
                },
                {
                    "Address": 998,
                    "ByteSize": 1,
                    "Comment": "{However for later statements the 'starting address'"
                },
                {
                    "Address": 999,
                    "ByteSize": 3,
                    "Comment": "has to be found.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1002,
                    "ByteSize": 2,
                    "Comment": "Jump forward unless the statement does not exist.",
                    "OperandType": 2
                },
                {
                    "Address": 1004,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1006,
                    "ByteSize": 3,
                    "Comment": "{Do not proceed unless checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1009,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 1010,
                    "ByteSize": 1,
                    "Comment": "{Drop the addresses of #ADDR:0x1B52# and #ADDR:0x1B76# before"
                },
                {
                    "Address": 1011,
                    "ByteSize": 1,
                    "Comment": "continuing into #ADDR:0x1BF4#.}"
                },
                {
                    "Address": 1012,
                    "ByteSize": 1,
                    "Comment": "Fetch the present character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1013,
                    "ByteSize": 2,
                    "Comment": "{Consider the 'next line' if it is a 'carriage return'."
                },
                {
                    "Address": 1015,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 1017,
                    "ByteSize": 2,
                    "Comment": "{Consider the 'next statement' if it is a ':'."
                },
                {
                    "Address": 1019,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 1022,
                    "ByteSize": 3,
                    "Comment": "Otherwise there has been a syntax error.",
                    "OperandType": 2
                }
            ],
            "CommentBlocks": [
                {
                    "Address": 31,
                    "Comment": "Come here if the stream was unaltered."
                },
                {
                    "Address": 51,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1795#."
                },
                {
                    "Address": 53,
                    "Comment": "Now the controlling loop for printing a series of lines is entered."
                },
                {
                    "Address": 85,
                    "Comment": "THE 'PRINT A WHOLE BASIC LINE' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0FA9# and #ADDR:0x17F9#.\n \nThe #REG:HL# register pair points to the start of the line - the location\nholding the high byte of the line number.\n \nBefore the line number is printed it is tested to determine whether it comes\nbefore the 'current' line, is the 'current' line, or comes after.\n \nHL Address of the start of the BASIC line"
                },
                {
                    "Address": 125,
                    "Comment": "This entry point is used by the routine at #ADDR:0x111D#."
                },
                {
                    "Address": 148,
                    "Comment": "Now enter a loop to print all the codes in the rest of the BASIC line -\njumping over floating-point forms as necessary."
                },
                {
                    "Address": 180,
                    "Comment": "The line has now been printed."
                },
                {
                    "Address": 182,
                    "Comment": "THE 'NUMBER' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1855# and #ADDR:0x198B#.\n \nIf the #REG:A# register holds the 'number marker' then the #REG:HL# register pair\nis advanced past the floating-point form.\n \nA Character code from a BASIC line\nHL Address of that character\nO:A Next character code from the line (if the current one is a number marker)\nO:HL Address of that character"
                },
                {
                    "Address": 193,
                    "Comment": "THE 'PRINT A FLASHING CHARACTER' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1855# and #ADDR:0x18E1#.\n \nThe 'error cursor' and the 'mode cursors' are printed using this subroutine.\n \nA Character code ('C', 'E', 'G', 'K', 'L' or '?')"
                },
                {
                    "Address": 225,
                    "Comment": "THE 'PRINT THE CURSOR' SUBROUTINE\n \nUsed by the routines at #ADDR:0x111D# and #ADDR:0x1855#.\n \nA return is made if it is not the correct place to print the cursor but if it\nis then 'C', 'E', 'G', 'K' or 'L' will be printed.\n \nDE Address of the current position in the edit line or INPUT line"
                },
                {
                    "Address": 271,
                    "Comment": "Note: it is the action of considering which cursor-letter is to be printed\nthat determines the mode - 'K', 'L' or 'C'.\nTHE 'LN-FETCH' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0FF3# and #ADDR:0x17F9#.\n \nThis subroutine is entered with the #REG:HL# register pair addressing a system\nvariable - \\#SYSVAR(S-TOP) or \\#SYSVAR(E-PPC).\n \nThe subroutine returns with the system variable holding the line number of\nthe following line.\n \nHL \\#SYSVAR(S-TOP) or \\#SYSVAR(E-PPC)"
                },
                {
                    "Address": 284,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1059#."
                },
                {
                    "Address": 293,
                    "Comment": "THE 'PRINTING CHARACTERS IN A BASIC LINE' SUBROUTINE\n \nAll of the character/token codes in a BASIC line are printed by repeatedly\ncalling this subroutine."
                },
                {
                    "Address": 298,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1A1B# to print a line number\nthat may (#REG:E#=&20) or may not (#REG:E#=&FF) require leading spaces."
                },
                {
                    "Address": 299,
                    "Comment": "The #REG:HL# register pair holds the line number and the #REG:BC# register the\nvalue for 'repeated subtraction' (-1000, -100 or -10)."
                },
                {
                    "Address": 311,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1855# to print a character or\ntoken."
                },
                {
                    "Address": 366,
                    "Comment": "Note: it is the consequence of the tests on the present character that\ndetermines whether the next character is to be printed in 'K' or 'L' mode.\n \nAlso note how the program does not cater for ':' in REM statements.\nTHE 'LINE-ADDR' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0FA9#, #ADDR:0x1059#, #ADDR:0x155D#, #ADDR:0x1795#, #ADDR:0x17F9#, #ADDR:0x190F#,\n#ADDR:0x1B9E# and #ADDR:0x1E42#.\n \nFor a given line number, in the #REG:HL# register pair, this subroutine returns\nthe starting address of that line or the 'first line after', in the #REG:HL#\nregister pair, and the start of the previous line in the #REG:DE# register\npair.\n \nIf the line number is being used the zero flag will be set. However if the\n'first line after' is substituted then the zero flag is returned reset.\n \nHL Target line number\nO:DE Start address of the line before the target\nO:HL Start address of the target line (if found) or the first line after\nO:F Zero flag set if the target line was found"
                },
                {
                    "Address": 372,
                    "Comment": "Now enter a loop to test the line number of each line of the program against\nthe given line number until the line number is matched or exceeded."
                },
                {
                    "Address": 384,
                    "Comment": "THE 'COMPARE LINE NUMBERS' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1855# and #ADDR:0x196E#.\n \nThe given line number in the #REG:BC# register pair is matched against the\naddressed line number.\n \nBC First line number\nHL Address of the second line number\nO:F Zero flag set if the line numbers match\nO:F Carry flag set if the first line number is greater than the second"
                },
                {
                    "Address": 392,
                    "Comment": "Unused"
                },
                {
                    "Address": 395,
                    "Comment": "THE 'FIND EACH STATEMENT' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1BD1#, #ADDR:0x1D86#, #ADDR:0x1E39# and #ADDR:0x27BD#.\n \nThis subroutine has two distinct functions.\n \n\\#LIST\n{ It can be used to find the #REG:D#th statement in a BASIC line - returning\nwith the #REG:HL# register pair addressing the location before the start of the\nstatement and the zero flag set. }\n{ Also the subroutine can be used to find a statement, if any, that starts\nwith a given token code (in the #REG:E# register). }\nLIST\\#\n \nD Statement number to look for (or &00 if looking for a token code)\nE Token code to look for (or &00 if looking for a statement)\nHL Address of the next character to consider\nO:HL Address of the token code or first character in the statement (if found)\nO:F Carry flag reset if the token code is found\nO:F Zero flag set if the statement is found"
                },
                {
                    "Address": 400,
                    "Comment": "Enter a loop to handle each statement in the BASIC line."
                },
                {
                    "Address": 408,
                    "Comment": "Now enter another loop to consider the individual characters in the line to\nfind where the statement ends."
                },
                {
                    "Address": 440,
                    "Comment": "THE 'NEXT-ONE' SUBROUTINE\n \nUsed by the routines at #ADDR:0x08B6#, #ADDR:0x092C#, #ADDR:0x155D#, #ADDR:0x1795#, #ADDR:0x196E#, #ADDR:0x28B2#\nand #ADDR:0x2C02#.\n \nThis subroutine can be used to find the 'next line' in the program area or\nthe 'next variable' in the variables area. The subroutine caters for the six\ndifferent types of variable that are used in the Spectrum system.\n \nHL Start address of the current line or variable\nO:BC Length of the current line or variable\nO:DE Start address of the next line or variable\nO:HL Start address of the current line or variable (as on entry)"
                },
                {
                    "Address": 475,
                    "Comment": "In all cases the address of the 'next' line or variable is found."
                },
                {
                    "Address": 477,
                    "Comment": "THE 'DIFFERENCE' SUBROUTINE\n \nUsed by the routine at #ADDR:0x19E5#.\n \nThe routine at #ADDR:0x19B8# continues here.\n \nThe 'length' between two 'starts' is formed in the #REG:BC# register pair. The\npointers are reformed but returned exchanged.\n \nDE First address\nHL Second address\nO:BC #REG:HL#-#REG:DE#\nO:DE Second address (as in #REG:HL# on entry)\nO:HL First address (as in #REG:DE# on entry)"
                },
                {
                    "Address": 485,
                    "Comment": "THE 'RECLAIMING' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0808#, #ADDR:0x1097#, #ADDR:0x16D4# and #ADDR:0x1EAC#.\n \nThe main entry point is used when the address of the first location to be\nreclaimed is in the #REG:DE# register pair and the address of the first\nlocation to be left alone is in the #REG:HL# register pair. The entry point\n#ADDR:0x19E8# is used when the #REG:HL# register pair points to the first location to\nbe reclaimed and the #REG:BC# register pair holds the number of bytes that are\nto be reclaimed.\n \nDE Start address of the area to reclaim\nHL One past the end address of the area to reclaim\nO:HL Start address of the area reclaimed (as #REG:DE# on entry)"
                },
                {
                    "Address": 488,
                    "Comment": "This entry point is used by the routines at #ADDR:0x0808#, #ADDR:0x092C#, #ADDR:0x1015#,\n#ADDR:0x11A7#, #ADDR:0x155D#, #ADDR:0x2AFF# and #ADDR:0x2C02#."
                },
                {
                    "Address": 507,
                    "Comment": "THE 'E-LINE-NO' SUBROUTINE\n \nUsed by the routines at #ADDR:0x12A2# and #ADDR:0x1B17#.\n \nThis subroutine is used to read the line number of the line in the editing\narea. If there is no line number, i.e. a direct BASIC line, then the line\nnumber is considered to be zero.\n \nO:BC Number of the line in the editing area (or &0000 if none)"
                },
                {
                    "Address": 539,
                    "Comment": "THE 'REPORT AND LINE NUMBER PRINTING' SUBROUTINE\n \nThe entry point #ADDR:0x1A1B#, used by the routines at #ADDR:0x12A2# and #ADDR:0x2DE3#, will\nlead to the number in the #REG:BC# register pair being printed. Any value over\n9,999 will not however be printed correctly.\n \nBC Number to print"
                },
                {
                    "Address": 552,
                    "Comment": "The entry point #ADDR:0x1A28#, used by the routine at #ADDR:0x1855#, will lead to the\nnumber indirectly addressed by the #REG:HL# register pair being printed. This\ntime any necessary leading spaces will appear. Again the limit of correctly\nprinted numbers is 9,999."
                },
                {
                    "Address": 560,
                    "Comment": "Now the integer form of the number in the #REG:HL# register pair is printed."
                },
                {
                    "Address": 584,
                    "Comment": "THE SYNTAX TABLES\n \nUsed by the routine at #ADDR:0x1B28#.\n \ni. The offset table.\n \nThere is an offset value for each of the fifty BASIC commands."
                },
                {
                    "Address": 634,
                    "Comment": "ii. The parameter table.\n \nFor each of the fifty BASIC commands there are up to eight entries in the\nparameter table. These entries comprise command class details, required\nseparators and, where appropriate, command routine addresses."
                },
                {
                    "Address": 791,
                    "Comment": "Note: the requirements for the different command classes are as follows:\n \n\\#LIST\n{ #ADDR:0x1C10# - No further operands. }\n{ #ADDR:0x1C1F# - Used in LET. A variable is required. }\n{ #ADDR:0x1C4E# - Used in LET. An expression, numeric or string, must follow. }\n{ #ADDR:0x1C0D# - A numeric expression may follow. Zero to be used in case of\ndefault. }\n{ #ADDR:0x1C6C# - A single character variable must follow. }\n{ #ADDR:0x1C11# - A set of items may be given. }\n{ #ADDR:0x1C82# - A numeric expression must follow. }\n{ #ADDR:0x1C96# - Handles colour items. }\n{ #ADDR:0x1C7A# - Two numeric expressions, separated by a comma, must follow. }\n{ #ADDR:0x1CBE# - As for CLASS_08 but colour items may precede the expressions. }\n{ #ADDR:0x1C8C# - A string expression must follow. }\n{ #ADDR:0x1CDB# - Handles cassette routines. }\nLIST\\#\nTHE 'MAIN PARSER' OF THE BASIC INTERPRETER\n \nUsed by the routine at #ADDR:0x12A2#.\n \nThe parsing routine of the BASIC interpreter is entered here when syntax is\nbeing checked, and at #ADDR:0x1B8A# when a BASIC program of one or more statements\nis to be executed.\n \nEach statement is considered in turn and the system variable \\#SYSVAR(CH-ADD)\nis used to point to each code of the statement as it occurs in the program\narea or the editing area."
                },
                {
                    "Address": 808,
                    "Comment": "THE STATEMENT LOOP\n \nUsed by the routines at #ADDR:0x1BD1# and #ADDR:0x1BF4#.\n \nEach statement is considered in turn until the end of the line is reached."
                },
                {
                    "Address": 809,
                    "Comment": "This entry point is used by the routines at #ADDR:0x1B17# and #ADDR:0x1CF0#."
                },
                {
                    "Address": 829,
                    "Comment": "A statement has been identified so, first, its initial command is considered."
                },
                {
                    "Address": 850,
                    "Comment": "Each of the command class routines applicable to the present command is\nexecuted in turn. Any required separators are also considered."
                },
                {
                    "Address": 879,
                    "Comment": "THE 'SEPARATOR' SUBROUTINE\n \nUsed by the routine at #ADDR:0x1B28#.\n \nThe report 'Nonsense in BASIC' is given if the required separator is not\npresent. But note that when syntax is being checked the actual report does\nnot appear on the screen - only the 'error marker'.\n \nC Entry from the #ADDR:0x1A7A#(parameter table)"
                },
                {
                    "Address": 886,
                    "Comment": "THE 'STMT-RET' SUBROUTINE\n \nUsed by the routine at #ADDR:0x1B28#.\n \nAfter the correct interpretation of a statement a return is made to this\nentry point."
                },
                {
                    "Address": 891,
                    "Comment": "Report L - BREAK into program."
                },
                {
                    "Address": 893,
                    "Comment": "Continue here as the BREAK key was not pressed."
                },
                {
                    "Address": 906,
                    "Comment": "This routine continues into #ADDR:0x1B8A#.\nTHE 'LINE-RUN' ENTRY POINT\n \nUsed by the routine at #ADDR:0x12A2#.\n \nThe routine at #ADDR:0x1B76# continues here.\n \nThis entry point is used wherever a line in the editing area is to be 'run'.\nIn such a case the syntax/run flag (bit 7 of \\#SYSVAR(FLAGS)) will be set.\n \nThe entry point is also used in the syntax checking of a line in the editing\narea that has more than one statement (bit 7 of \\#SYSVAR(FLAGS) will be\nreset)."
                },
                {
                    "Address": 926,
                    "Comment": "THE 'LINE-NEW' SUBROUTINE\n \nUsed by the routine at #ADDR:0x1B76#.\n \nThere has been a jump in the program and the starting address of the new line\nhas to be found.\n \nHL Number of the new line"
                },
                {
                    "Address": 944,
                    "Comment": "Report 0 - OK."
                },
                {
                    "Address": 946,
                    "Comment": "Note: obviously not an error in the normal sense - but rather a jump past the\nprogram.\nTHE 'REM' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1AA5#(parameter table).\n \nThe return address to #ADDR:0x1B76# is dropped which has the effect of forcing the\nrest of the line to be ignored."
                },
                {
                    "Address": 947,
                    "Comment": "This routine continues into #ADDR:0x1BB3#.\nTHE 'LINE-END' ROUTINE\n \nUsed by the routines at #ADDR:0x1B28#, #ADDR:0x1BF4# and #ADDR:0x1CF0#.\n \nThe routine at #ADDR:0x1BB2# continues here.\n \nIf checking syntax a simple return is made but when 'running' the address\nheld by \\#SYSVAR(NXTLIN) has to be checked before it can be used."
                },
                {
                    "Address": 959,
                    "Comment": "This routine continues into #ADDR:0x1BBF#.\nTHE 'LINE-USE' ROUTINE\n \nUsed by the routine at #ADDR:0x1B9E#.\n \nThe routine at #ADDR:0x1BB3# continues here.\n \nThis short routine has three functions:\n \n\\#LIST\n{ Change statement zero to statement '1'. }\n{ Find the number of the new line and enter it into \\#SYSVAR(PPC). }\n{ Form the address of the start of the line after. }\nLIST\\#\n \nA Statement number\nHL Start address of the line"
                },
                {
                    "Address": 977,
                    "Comment": "This routine continues into #ADDR:0x1BD1#.\nTHE 'NEXT-LINE' ROUTINE\n \nUsed by the routine at #ADDR:0x1B8A#.\n \nThe routine at #ADDR:0x1BBF# continues here.\n \nOn entry the #REG:HL# register pair points to the location after the end of the\n'next' line to be handled and the #REG:DE# register pair to the location before\nthe first character of the line. This applies to lines in the program area\nand also to a line in the editing area - where the next line will be the same\nline again whilst there are still statements to be interpreted.\n \nDE One before the address of the first character in the line\nHL Start address of the following line"
                },
                {
                    "Address": 1004,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1B9E#.\n \nReport N - Statement lost."
                },
                {
                    "Address": 1006,
                    "Comment": "THE 'CHECK-END' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0605#, #ADDR:0x17F9#, #ADDR:0x1C0D#, #ADDR:0x1C4E#, #ADDR:0x1C96#, #ADDR:0x1D03#,\n#ADDR:0x1DEC#, #ADDR:0x1E27#, #ADDR:0x1F60#, #ADDR:0x1FC9#, #ADDR:0x2089#, #ADDR:0x2320#, #ADDR:0x2382# and #ADDR:0x2C02#.\n \nThis is an important routine and is called from many places in the monitor\nprogram when the syntax of the edit-line is being checked. The purpose of the\nroutine is to give an error report if the end of a statement has not been\nreached and to move on to the next statement if the syntax is correct."
                },
                {
                    "Address": 1012,
                    "Comment": "THE 'STMT-NEXT' ROUTINE\n \nUsed by the routines at #ADDR:0x1B76# and #ADDR:0x1BD1#.\n \nThe routine at #ADDR:0x1BEE# continues here.\n \nIf the present character is a 'carriage return' then the 'next statement' is\non the 'next line'; if ':' it is on the same line; but if any other character\nis found then there is an error in syntax."
                }
            ],
            "DataInfo": [
                {
                    "Address": 0,
                    "DataType": 11,
                    "InstructionAddressRef": 402587648
                },
                {
                    "Address": 1,
                    "DataType": 11,
                    "InstructionAddressRef": 402587648
                },
                {
                    "Address": 584,
                    "Comment": "#ADDR:0x1AF9#"
                },
                {
                    "Address": 585,
                    "Comment": "#ADDR:0x1B14#"
                },
                {
                    "Address": 586,
                    "Comment": "#ADDR:0x1B06#"
                },
                {
                    "Address": 587,
                    "Comment": "#ADDR:0x1B0A#"
                },
                {
                    "Address": 588,
                    "Comment": "#ADDR:0x1B10#"
                },
                {
                    "Address": 589,
                    "Comment": "#ADDR:0x1AFC#"
                },
                {
                    "Address": 590,
                    "Comment": "#ADDR:0x1B02#"
                },
                {
                    "Address": 591,
                    "Comment": "#ADDR:0x1AE2#"
                },
                {
                    "Address": 592,
                    "Comment": "#ADDR:0x1AE1#"
                },
                {
                    "Address": 593,
                    "Comment": "#ADDR:0x1AE3#"
                },
                {
                    "Address": 594,
                    "Comment": "#ADDR:0x1AE7#"
                },
                {
                    "Address": 595,
                    "Comment": "#ADDR:0x1AEB#"
                },
                {
                    "Address": 596,
                    "Comment": "#ADDR:0x1AEC#"
                },
                {
                    "Address": 597,
                    "Comment": "#ADDR:0x1AED#"
                },
                {
                    "Address": 598,
                    "Comment": "#ADDR:0x1AEE#"
                },
                {
                    "Address": 599,
                    "Comment": "#ADDR:0x1AEF#"
                },
                {
                    "Address": 600,
                    "Comment": "#ADDR:0x1AF0#"
                },
                {
                    "Address": 601,
                    "Comment": "#ADDR:0x1AF1#"
                },
                {
                    "Address": 602,
                    "Comment": "#ADDR:0x1AD9#"
                },
                {
                    "Address": 603,
                    "Comment": "#ADDR:0x1ADC#"
                },
                {
                    "Address": 604,
                    "Comment": "#ADDR:0x1A8A#"
                },
                {
                    "Address": 605,
                    "Comment": "#ADDR:0x1AC9#"
                },
                {
                    "Address": 606,
                    "Comment": "#ADDR:0x1ACC#"
                },
                {
                    "Address": 607,
                    "Comment": "#ADDR:0x1ACF#"
                },
                {
                    "Address": 608,
                    "Comment": "#ADDR:0x1AA8#"
                },
                {
                    "Address": 609,
                    "Comment": "#ADDR:0x1AF5#"
                },
                {
                    "Address": 610,
                    "Comment": "#ADDR:0x1AB8#"
                },
                {
                    "Address": 611,
                    "Comment": "#ADDR:0x1AA2#"
                },
                {
                    "Address": 612,
                    "Comment": "#ADDR:0x1AA5#"
                },
                {
                    "Address": 613,
                    "Comment": "#ADDR:0x1A90#"
                },
                {
                    "Address": 614,
                    "Comment": "#ADDR:0x1A7D#"
                },
                {
                    "Address": 615,
                    "Comment": "#ADDR:0x1A86#"
                },
                {
                    "Address": 616,
                    "Comment": "#ADDR:0x1A9F#"
                },
                {
                    "Address": 617,
                    "Comment": "#ADDR:0x1AE0#"
                },
                {
                    "Address": 618,
                    "Comment": "#ADDR:0x1AAE#"
                },
                {
                    "Address": 619,
                    "Comment": "#ADDR:0x1A7A#"
                },
                {
                    "Address": 620,
                    "Comment": "#ADDR:0x1AC5#"
                },
                {
                    "Address": 621,
                    "Comment": "#ADDR:0x1A98#"
                },
                {
                    "Address": 622,
                    "Comment": "#ADDR:0x1AB1#"
                },
                {
                    "Address": 623,
                    "Comment": "#ADDR:0x1A9C#"
                },
                {
                    "Address": 624,
                    "Comment": "#ADDR:0x1AC1#"
                },
                {
                    "Address": 625,
                    "Comment": "#ADDR:0x1AAB#"
                },
                {
                    "Address": 626,
                    "Comment": "#ADDR:0x1ADF#"
                },
                {
                    "Address": 627,
                    "Comment": "#ADDR:0x1AB5#"
                },
                {
                    "Address": 628,
                    "Comment": "#ADDR:0x1A81#"
                },
                {
                    "Address": 629,
                    "Comment": "#ADDR:0x1ABE#"
                },
                {
                    "Address": 630,
                    "Comment": "#ADDR:0x1AD2#"
                },
                {
                    "Address": 631,
                    "Comment": "#ADDR:0x1ABB#"
                },
                {
                    "Address": 632,
                    "Comment": "#ADDR:0x1A8D#"
                },
                {
                    "Address": 633,
                    "Comment": "#ADDR:0x1AD6#"
                },
                {
                    "Address": 634,
                    "Comment": "#ADDR:0x1C1F#"
                },
                {
                    "Address": 636,
                    "Comment": "#ADDR:0x1C4E#"
                },
                {
                    "Address": 637,
                    "Comment": "#ADDR:0x1C82#"
                },
                {
                    "Address": 638,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 639,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 641,
                    "Comment": "#ADDR:0x1C82#"
                },
                {
                    "Address": 642,
                    "Comment": "THEN"
                },
                {
                    "Address": 643,
                    "Comment": "#ADDR:0x1C11#"
                },
                {
                    "Address": 644,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 646,
                    "Comment": "#ADDR:0x1C82#"
                },
                {
                    "Address": 647,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 648,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 650,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 651,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 653,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 654,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 656,
                    "Comment": "#ADDR:0x1C6C#"
                },
                {
                    "Address": 658,
                    "Comment": "#ADDR:0x1C82#"
                },
                {
                    "Address": 659,
                    "Comment": "TO"
                },
                {
                    "Address": 660,
                    "Comment": "#ADDR:0x1C82#"
                },
                {
                    "Address": 661,
                    "Comment": "#ADDR:0x1C11#"
                },
                {
                    "Address": 662,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 664,
                    "Comment": "#ADDR:0x1C6C#"
                },
                {
                    "Address": 665,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 666,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 668,
                    "Comment": "#ADDR:0x1C11#"
                },
                {
                    "Address": 669,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 671,
                    "Comment": "#ADDR:0x1C11#"
                },
                {
                    "Address": 672,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 674,
                    "Comment": "#ADDR:0x1C11#"
                },
                {
                    "Address": 675,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 677,
                    "Comment": "#ADDR:0x1C11#"
                },
                {
                    "Address": 678,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 680,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 681,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 683,
                    "Comment": "#ADDR:0x1C0D#"
                },
                {
                    "Address": 684,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 686,
                    "Comment": "#ADDR:0x1C11#"
                },
                {
                    "Address": 687,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 689,
                    "Comment": "#ADDR:0x1C7A#"
                },
                {
                    "Address": 690,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 691,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 693,
                    "Comment": "#ADDR:0x1C0D#"
                },
                {
                    "Address": 694,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 696,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 697,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 699,
                    "Comment": "#ADDR:0x1C0D#"
                },
                {
                    "Address": 700,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 702,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 703,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 705,
                    "Comment": "#ADDR:0x1CBE#"
                },
                {
                    "Address": 706,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 707,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 709,
                    "Comment": "#ADDR:0x1C82#"
                },
                {
                    "Address": 710,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 711,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 713,
                    "Comment": "#ADDR:0x1C11#"
                },
                {
                    "Address": 714,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 716,
                    "Comment": "#ADDR:0x1C11#"
                },
                {
                    "Address": 717,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 719,
                    "Comment": "#ADDR:0x1C0D#"
                },
                {
                    "Address": 720,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 722,
                    "Comment": "#ADDR:0x1CBE#"
                },
                {
                    "Address": 723,
                    "Comment": "#ADDR:0x1C11#"
                },
                {
                    "Address": 724,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 726,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 727,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 729,
                    "Comment": "#ADDR:0x1C11#"
                },
                {
                    "Address": 730,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 732,
                    "Comment": "#ADDR:0x1C11#"
                },
                {
                    "Address": 733,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 735,
                    "Comment": "#ADDR:0x1CDB#"
                },
                {
                    "Address": 736,
                    "Comment": "#ADDR:0x1CDB#"
                },
                {
                    "Address": 737,
                    "Comment": "#ADDR:0x1CDB#"
                },
                {
                    "Address": 738,
                    "Comment": "#ADDR:0x1CDB#"
                },
                {
                    "Address": 739,
                    "Comment": "#ADDR:0x1C7A#"
                },
                {
                    "Address": 740,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 741,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 743,
                    "Comment": "#ADDR:0x1CBE#"
                },
                {
                    "Address": 744,
                    "Comment": "#ADDR:0x1C11#"
                },
                {
                    "Address": 745,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 747,
                    "Comment": "#ADDR:0x1C96#"
                },
                {
                    "Address": 748,
                    "Comment": "#ADDR:0x1C96#"
                },
                {
                    "Address": 749,
                    "Comment": "#ADDR:0x1C96#"
                },
                {
                    "Address": 750,
                    "Comment": "#ADDR:0x1C96#"
                },
                {
                    "Address": 751,
                    "Comment": "#ADDR:0x1C96#"
                },
                {
                    "Address": 752,
                    "Comment": "#ADDR:0x1C96#"
                },
                {
                    "Address": 753,
                    "Comment": "#ADDR:0x1C7A#"
                },
                {
                    "Address": 754,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 755,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 757,
                    "Comment": "#ADDR:0x1C82#"
                },
                {
                    "Address": 758,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 759,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 761,
                    "Comment": "#ADDR:0x1C11#"
                },
                {
                    "Address": 762,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 764,
                    "Comment": "#ADDR:0x1C82#"
                },
                {
                    "Address": 765,
                    "ByteSize": 2,
                    "DataType": 1
                },
                {
                    "Address": 767,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 768,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 770,
                    "Comment": "#ADDR:0x1C82#"
                },
                {
                    "Address": 771,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 772,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 774,
                    "Comment": "#ADDR:0x1C8C#"
                },
                {
                    "Address": 775,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 776,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 778,
                    "Comment": "#ADDR:0x1C8C#"
                },
                {
                    "Address": 779,
                    "ByteSize": 2,
                    "DataType": 1
                },
                {
                    "Address": 781,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 782,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 784,
                    "Comment": "#ADDR:0x1C8C#"
                },
                {
                    "Address": 785,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 786,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 788,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 789,
                    "ByteSize": 2,
                    "DataType": 2
                },
                {
                    "Address": 892,
                    "Comment": "}"
                },
                {
                    "Address": 945,
                    "Comment": "}"
                },
                {
                    "Address": 1005,
                    "Comment": "}"
                }
            ],
            "LabelInfo": [
                {
                    "Address": 20,
                    "LabelType": 2,
                    "Name": "LIST_2"
                },
                {
                    "Address": 26,
                    "LabelType": 2,
                    "Name": "LIST_3"
                },
                {
                    "Address": 31,
                    "LabelType": 2,
                    "Name": "LIST_4"
                },
                {
                    "Address": 34,
                    "LabelType": 2,
                    "Name": "LIST_5"
                },
                {
                    "Address": 51,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "LIST_ALL"
                },
                {
                    "Address": 53,
                    "LabelType": 2,
                    "Name": "LIST_ALL_1"
                },
                {
                    "Address": 85,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "OUT_LINE"
                },
                {
                    "Address": 101,
                    "LabelType": 2,
                    "Name": "OUT_LINE1"
                },
                {
                    "Address": 125,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "OUT_LINE2"
                },
                {
                    "Address": 129,
                    "LabelType": 2,
                    "Name": "OUT_LINE3"
                },
                {
                    "Address": 148,
                    "LabelType": 2,
                    "Name": "OUT_LINE4"
                },
                {
                    "Address": 161,
                    "LabelType": 2,
                    "Name": "OUT_LINE5"
                },
                {
                    "Address": 180,
                    "LabelType": 2,
                    "Name": "OUT_LINE6"
                },
                {
                    "Address": 182,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "NUMBER"
                },
                {
                    "Address": 193,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "OUT_FLASH"
                },
                {
                    "Address": 225,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "OUT_CURS"
                },
                {
                    "Address": 243,
                    "LabelType": 2,
                    "Name": "OUT_C_1"
                },
                {
                    "Address": 265,
                    "LabelType": 2,
                    "Name": "OUT_C_2"
                },
                {
                    "Address": 271,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "LN_FETCH"
                },
                {
                    "Address": 284,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "LN_STORE"
                },
                {
                    "Address": 293,
                    "LabelType": 2,
                    "Name": "OUT_SP_2"
                },
                {
                    "Address": 298,
                    "LabelType": 2,
                    "Name": "OUT_SP_NO"
                },
                {
                    "Address": 299,
                    "LabelType": 2,
                    "Name": "OUT_SP_1"
                },
                {
                    "Address": 311,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "OUT_CHAR"
                },
                {
                    "Address": 346,
                    "LabelType": 2,
                    "Name": "OUT_CH_1"
                },
                {
                    "Address": 360,
                    "LabelType": 2,
                    "Name": "OUT_CH_2"
                },
                {
                    "Address": 364,
                    "LabelType": 2,
                    "Name": "OUT_CH_3"
                },
                {
                    "Address": 366,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "LINE_ADDR"
                },
                {
                    "Address": 372,
                    "LabelType": 2,
                    "Name": "LINE_AD_1"
                },
                {
                    "Address": 384,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CP_LINES"
                },
                {
                    "Address": 395,
                    "LabelType": 2,
                    "Name": "EACH_STMT"
                },
                {
                    "Address": 400,
                    "LabelType": 2,
                    "Name": "EACH_S_1"
                },
                {
                    "Address": 408,
                    "LabelType": 2,
                    "Name": "EACH_S_2"
                },
                {
                    "Address": 410,
                    "LabelType": 2,
                    "Name": "EACH_S_3"
                },
                {
                    "Address": 421,
                    "LabelType": 2,
                    "Name": "EACH_S_4"
                },
                {
                    "Address": 429,
                    "LabelType": 2,
                    "Name": "EACH_S_5"
                },
                {
                    "Address": 433,
                    "LabelType": 2,
                    "Name": "EACH_S_6"
                },
                {
                    "Address": 440,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "NEXT_ONE"
                },
                {
                    "Address": 455,
                    "LabelType": 2,
                    "Name": "NEXT_O_1"
                },
                {
                    "Address": 462,
                    "LabelType": 2,
                    "Name": "NEXT_O_2"
                },
                {
                    "Address": 469,
                    "LabelType": 2,
                    "Name": "NEXT_O_3"
                },
                {
                    "Address": 470,
                    "LabelType": 2,
                    "Name": "NEXT_O_4"
                },
                {
                    "Address": 475,
                    "LabelType": 2,
                    "Name": "NEXT_O_5"
                },
                {
                    "Address": 477,
                    "LabelType": 2,
                    "Name": "DIFFER"
                },
                {
                    "Address": 485,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "RECLAIM_1"
                },
                {
                    "Address": 488,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "RECLAIM_2"
                },
                {
                    "Address": 507,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "E_LINE_NO"
                },
                {
                    "Address": 533,
                    "LabelType": 2,
                    "Name": "E_L_1"
                },
                {
                    "Address": 539,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "OUT_NUM_1"
                },
                {
                    "Address": 552,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "OUT_NUM_2"
                },
                {
                    "Address": 560,
                    "LabelType": 2,
                    "Name": "OUT_NUM_3"
                },
                {
                    "Address": 578,
                    "LabelType": 2,
                    "Name": "OUT_NUM_4"
                },
                {
                    "Address": 584,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "SYNTAX"
                },
                {
                    "Address": 634,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_LET"
                },
                {
                    "Address": 637,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_GO_TO"
                },
                {
                    "Address": 641,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_IF"
                },
                {
                    "Address": 646,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_GO_SUB"
                },
                {
                    "Address": 650,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_STOP"
                },
                {
                    "Address": 653,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_RETURN"
                },
                {
                    "Address": 656,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_FOR"
                },
                {
                    "Address": 664,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_NEXT"
                },
                {
                    "Address": 668,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_PRINT"
                },
                {
                    "Address": 671,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_INPUT"
                },
                {
                    "Address": 674,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_DIM"
                },
                {
                    "Address": 677,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_REM"
                },
                {
                    "Address": 680,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_NEW"
                },
                {
                    "Address": 683,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_RUN"
                },
                {
                    "Address": 686,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_LIST"
                },
                {
                    "Address": 689,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_POKE"
                },
                {
                    "Address": 693,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_RANDOM"
                },
                {
                    "Address": 696,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_CONT"
                },
                {
                    "Address": 699,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_CLEAR"
                },
                {
                    "Address": 702,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_CLS"
                },
                {
                    "Address": 705,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_PLOT"
                },
                {
                    "Address": 709,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_PAUSE"
                },
                {
                    "Address": 713,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_READ"
                },
                {
                    "Address": 716,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_DATA"
                },
                {
                    "Address": 719,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_RESTORE"
                },
                {
                    "Address": 722,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_DRAW"
                },
                {
                    "Address": 726,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_COPY"
                },
                {
                    "Address": 729,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_LPRINT"
                },
                {
                    "Address": 732,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_LLIST"
                },
                {
                    "Address": 735,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_SAVE"
                },
                {
                    "Address": 736,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_LOAD"
                },
                {
                    "Address": 737,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_VERIFY"
                },
                {
                    "Address": 738,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_MERGE"
                },
                {
                    "Address": 739,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_BEEP"
                },
                {
                    "Address": 743,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_CIRCLE"
                },
                {
                    "Address": 747,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_INK"
                },
                {
                    "Address": 748,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_PAPER"
                },
                {
                    "Address": 749,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_FLASH"
                },
                {
                    "Address": 750,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_BRIGHT"
                },
                {
                    "Address": 751,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_INVERSE"
                },
                {
                    "Address": 752,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_OVER"
                },
                {
                    "Address": 753,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_OUT"
                },
                {
                    "Address": 757,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_BORDER"
                },
                {
                    "Address": 761,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_DEF_FN"
                },
                {
                    "Address": 764,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_OPEN"
                },
                {
                    "Address": 770,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_CLOSE"
                },
                {
                    "Address": 774,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_FORMAT"
                },
                {
                    "Address": 778,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_MOVE"
                },
                {
                    "Address": 784,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_ERASE"
                },
                {
                    "Address": 788,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "P_CAT"
                },
                {
                    "Address": 791,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "LINE_SCAN"
                },
                {
                    "Address": 808,
                    "LabelType": 2,
                    "Name": "STMT_LOOP"
                },
                {
                    "Address": 809,
                    "LabelType": 2,
                    "Name": "STMT_L_1"
                },
                {
                    "Address": 850,
                    "LabelType": 2,
                    "Name": "SCAN_LOOP"
                },
                {
                    "Address": 853,
                    "LabelType": 2,
                    "Name": "GET_PARAM"
                },
                {
                    "Address": 879,
                    "LabelType": 2,
                    "Name": "SEPARATOR"
                },
                {
                    "Address": 886,
                    "LabelType": 2,
                    "Name": "STMT_RET"
                },
                {
                    "Address": 893,
                    "LabelType": 2,
                    "Name": "STMT_R_1"
                },
                {
                    "Address": 906,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "LINE_RUN"
                },
                {
                    "Address": 926,
                    "LabelType": 2,
                    "Name": "LINE_NEW"
                },
                {
                    "Address": 946,
                    "LabelType": 2,
                    "Name": "REM"
                },
                {
                    "Address": 947,
                    "LabelType": 2,
                    "Name": "LINE_END"
                },
                {
                    "Address": 959,
                    "LabelType": 2,
                    "Name": "LINE_USE"
                },
                {
                    "Address": 977,
                    "LabelType": 2,
                    "Name": "NEXT_LINE"
                },
                {
                    "Address": 1004,
                    "LabelType": 2,
                    "Name": "REPORT_N"
                },
                {
                    "Address": 1006,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CHECK_END"
                },
                {
                    "Address": 1012,
                    "LabelType": 2,
                    "Name": "STMT_NEXT"
                }
            ],
            "PageId": 6
        },
        {
            "CodeInfo": [
                {
                    "Address": 13,
                    "ByteSize": 3,
                    "Comment": "A number is fetched but zero is used in cases of\ndefault.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 16,
                    "ByteSize": 1,
                    "Comment": "Set the zero flag for later."
                },
                {
                    "Address": 17,
                    "ByteSize": 1,
                    "Comment": "In all cases drop the address - #ADDR:0x1B52#."
                },
                {
                    "Address": 18,
                    "ByteSize": 3,
                    "Comment": "If handling commands of classes &00 and &03 and syntax\nis being checked move on now to consider the next\nstatement.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 21,
                    "ByteSize": 1,
                    "Comment": "Save the line pointer in the #REG:DE# register pair."
                },
                {
                    "Address": 22,
                    "ByteSize": 3,
                    "Comment": "{Fetch the pointer to the entries in the",
                    "OperandType": 1
                },
                {
                    "Address": 25,
                    "ByteSize": 1,
                    "Comment": "#ADDR:0x1A7A#(parameter table) from \\#SYSVAR(T-ADDR) and fetch"
                },
                {
                    "Address": 26,
                    "ByteSize": 1,
                    "Comment": "the address of the required command routine."
                },
                {
                    "Address": 27,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 28,
                    "ByteSize": 1,
                    "Comment": "{Exchange the pointers back and make an indirect jump to"
                },
                {
                    "Address": 29,
                    "ByteSize": 1,
                    "Comment": "the command routine."
                },
                {
                    "Address": 30,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 31,
                    "ByteSize": 3,
                    "Comment": "Look in the variables area to determine whether or not\nthe variable has been used already.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 34,
                    "ByteSize": 4,
                    "Comment": "Initialise \\#SYSVAR(FLAGX) to &00."
                },
                {
                    "Address": 38,
                    "ByteSize": 2,
                    "Comment": "Jump forward if the variable has been used before.",
                    "OperandType": 2
                },
                {
                    "Address": 40,
                    "ByteSize": 4,
                    "Comment": "Signal 'a new variable' (set bit 1 of \\#SYSVAR(FLAGX))."
                },
                {
                    "Address": 44,
                    "ByteSize": 2,
                    "Comment": "Give an error if trying to use an 'undimensioned\narray'.",
                    "OperandType": 2
                },
                {
                    "Address": 46,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 48,
                    "ByteSize": 3,
                    "Comment": "The parameters of simple string variables and all\narray variables are passed to the calculator stack.\n(#ADDR:0x2996# will 'slice' a string if required.)",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 51,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if handling a numeric variable (bit 6 of"
                },
                {
                    "Address": 55,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(FLAGS) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 57,
                    "ByteSize": 1,
                    "Comment": "Clear the #REG:A# register."
                },
                {
                    "Address": 58,
                    "ByteSize": 3,
                    "Comment": "{The parameters of the string or string array variable",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 61,
                    "ByteSize": 3,
                    "Comment": "are fetched unless syntax is being checked.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 64,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(FLAGX)."
                },
                {
                    "Address": 67,
                    "ByteSize": 1,
                    "Comment": "{Bit 0 is set only when handling complete 'simple"
                },
                {
                    "Address": 68,
                    "ByteSize": 1,
                    "Comment": "strings' thereby signalling 'old copy to be deleted'.}"
                },
                {
                    "Address": 69,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# now points to the string or the element of the\narray."
                },
                {
                    "Address": 70,
                    "ByteSize": 4,
                    "Comment": "Set \\#SYSVAR(STRLEN) as required.",
                    "OperandType": 1
                },
                {
                    "Address": 74,
                    "ByteSize": 3,
                    "Comment": "{Set \\#SYSVAR(DEST) as required and return.",
                    "OperandType": 1
                },
                {
                    "Address": 77,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 78,
                    "ByteSize": 1,
                    "Comment": "The address #ADDR:0x1B52# is dropped."
                },
                {
                    "Address": 79,
                    "ByteSize": 3,
                    "Comment": "The assignment is made.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 82,
                    "ByteSize": 3,
                    "Comment": "{Move on to the next statement either via #ADDR:0x1BEE# if",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 85,
                    "ByteSize": 1,
                    "Comment": "checking syntax, or #ADDR:0x1B76# if in 'run-time'.}"
                },
                {
                    "Address": 86,
                    "ByteSize": 3,
                    "Comment": "Use \\#SYSVAR(FLAGS).",
                    "OperandType": 1
                },
                {
                    "Address": 89,
                    "ByteSize": 1,
                    "Comment": "Save \\#SYSVAR(FLAGS) or \\#SYSVAR(FLAGX)."
                },
                {
                    "Address": 90,
                    "ByteSize": 3,
                    "Comment": "Evaluate the next expression.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 93,
                    "ByteSize": 1,
                    "Comment": "Fetch the old \\#SYSVAR(FLAGS) or \\#SYSVAR(FLAGX)."
                },
                {
                    "Address": 94,
                    "ByteSize": 3,
                    "Comment": "Fetch the new \\#SYSVAR(FLAGS)."
                },
                {
                    "Address": 97,
                    "ByteSize": 1,
                    "Comment": "{The nature - numeric or string - of the variable and"
                },
                {
                    "Address": 98,
                    "ByteSize": 2,
                    "Comment": "the expression must match.}"
                },
                {
                    "Address": 100,
                    "ByteSize": 2,
                    "Comment": "Give report C if they do not.",
                    "OperandType": 2
                },
                {
                    "Address": 102,
                    "ByteSize": 2,
                    "Comment": "{Jump forward to make the actual assignment unless"
                },
                {
                    "Address": 104,
                    "ByteSize": 3,
                    "Comment": "checking syntax (in which case simply return).",
                    "OperandType": 2
                },
                {
                    "Address": 107,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 108,
                    "ByteSize": 3,
                    "Comment": "Look in the variables area for the variable being used.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 111,
                    "ByteSize": 1,
                    "Comment": "{Save the #REG:AF# register pair whilst the discriminator"
                },
                {
                    "Address": 112,
                    "ByteSize": 1,
                    "Comment": "byte is tested to ensure that the variable is a FOR-NEXT"
                },
                {
                    "Address": 113,
                    "ByteSize": 2,
                    "Comment": "control variable."
                },
                {
                    "Address": 115,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 116,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 118,
                    "ByteSize": 1,
                    "Comment": "{Restore the flags register and jump to make the"
                },
                {
                    "Address": 119,
                    "ByteSize": 2,
                    "Comment": "variable that has been found the 'variable in\nassignment'.}",
                    "OperandType": 2
                },
                {
                    "Address": 121,
                    "ByteSize": 1,
                    "Comment": "Advance \\#SYSVAR(CH-ADD).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 122,
                    "ByteSize": 3,
                    "Comment": "Evaluate each expression in turn - so evaluate the\nfirst.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 125,
                    "ByteSize": 2,
                    "Comment": "{Give an error report if the separator is not a comma."
                },
                {
                    "Address": 127,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 129,
                    "ByteSize": 1,
                    "Comment": "Advance \\#SYSVAR(CH-ADD).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 130,
                    "ByteSize": 3,
                    "Comment": "Evaluate the next expression.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 133,
                    "ByteSize": 4,
                    "Comment": "{Return as long as the result was numeric (bit 6 of"
                },
                {
                    "Address": 137,
                    "ByteSize": 1,
                    "Comment": "\\#SYSVAR(FLAGS) set); otherwise it is an error.}"
                },
                {
                    "Address": 138,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 140,
                    "ByteSize": 3,
                    "Comment": "Evaluate the next expression.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 143,
                    "ByteSize": 4,
                    "Comment": "{This time return if the result indicates a string (bit"
                },
                {
                    "Address": 147,
                    "ByteSize": 1,
                    "Comment": "6 of \\#SYSVAR(FLAGS) reset); otherwise give an error"
                },
                {
                    "Address": 148,
                    "ByteSize": 2,
                    "Comment": "report.}",
                    "OperandType": 2
                },
                {
                    "Address": 150,
                    "ByteSize": 4,
                    "Comment": "The syntax/run flag (bit 7 of \\#SYSVAR(FLAGS)) is read."
                },
                {
                    "Address": 154,
                    "ByteSize": 4,
                    "Comment": "Signal 'main screen' (reset bit 0 of \\#SYSVAR(TV-FLAG))."
                },
                {
                    "Address": 158,
                    "ByteSize": 3,
                    "Comment": "Only during a 'run' call #ADDR:0x0D4D# to ensure the\ntemporary colours are the main screen colours.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 161,
                    "ByteSize": 1,
                    "Comment": "Drop the return address #ADDR:0x1B52#."
                },
                {
                    "Address": 162,
                    "ByteSize": 3,
                    "Comment": "{Fetch the low byte of \\#SYSVAR(T-ADDR) and subtract &13",
                    "OperandType": 1
                },
                {
                    "Address": 165,
                    "ByteSize": 2,
                    "Comment": "to give the range &D9 to &DE which are the token codes\nfor INK to OVER.}"
                },
                {
                    "Address": 167,
                    "ByteSize": 3,
                    "Comment": "Change the temporary colours as directed by the BASIC\nstatement.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 170,
                    "ByteSize": 3,
                    "Comment": "Move on to the next statement if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 173,
                    "ByteSize": 3,
                    "Comment": "{Now the temporary colour values (\\#SYSVAR(ATTR-T) and",
                    "OperandType": 1
                },
                {
                    "Address": 176,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(MASK-T)) are made permanent (\\#SYSVAR(ATTR-P)\nand \\#SYSVAR(MASK-P)).}",
                    "OperandType": 1
                },
                {
                    "Address": 179,
                    "ByteSize": 3,
                    "Comment": "{This is \\#SYSVAR(P-FLAG), and that too has to be"
                },
                {
                    "Address": 182,
                    "ByteSize": 1,
                    "Comment": "considered.}"
                },
                {
                    "Address": 183,
                    "ByteSize": 1,
                    "Comment": "Move the mask leftwards."
                },
                {
                    "Address": 184,
                    "ByteSize": 1,
                    "Comment": "{Impress onto the mask only the even bits of the other"
                },
                {
                    "Address": 185,
                    "ByteSize": 2,
                    "Comment": "byte."
                },
                {
                    "Address": 187,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 188,
                    "ByteSize": 1,
                    "Comment": "Restore the result."
                },
                {
                    "Address": 189,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 190,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 193,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 195,
                    "ByteSize": 4,
                    "Comment": "Signal 'main screen' (reset bit 0 of \\#SYSVAR(TV-FLAG))."
                },
                {
                    "Address": 199,
                    "ByteSize": 3,
                    "Comment": "Set the temporary colours for the main screen.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 202,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(MASK-T)."
                },
                {
                    "Address": 205,
                    "ByteSize": 1,
                    "Comment": "{Fetch its present value but keep only its INK part"
                },
                {
                    "Address": 206,
                    "ByteSize": 2,
                    "Comment": "'unmasked'.}"
                },
                {
                    "Address": 208,
                    "ByteSize": 1,
                    "Comment": "Restore the value which now indicates 'FLASH 8; BRIGHT\n8; PAPER 8;'."
                },
                {
                    "Address": 209,
                    "ByteSize": 4,
                    "Comment": "Also ensure NOT 'PAPER 9' (reset bit 6 of\n\\#SYSVAR(P-FLAG))."
                },
                {
                    "Address": 213,
                    "ByteSize": 1,
                    "Comment": "Fetch the present character before continuing to deal\nwith embedded colour items.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 214,
                    "ByteSize": 3,
                    "Comment": "Deal with the locally dominant colour items.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 217,
                    "ByteSize": 2,
                    "Comment": "Now get the first two operands for PLOT, DRAW or\nCIRCLE.",
                    "OperandType": 2
                },
                {
                    "Address": 219,
                    "ByteSize": 3,
                    "Comment": "Jump to the cassette handling routine.",
                    "OperandType": 2
                },
                {
                    "Address": 222,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if at the end of a line."
                },
                {
                    "Address": 224,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 226,
                    "ByteSize": 2,
                    "Comment": "{But jump to #ADDR:0x1C82# unless at the end of a statement."
                },
                {
                    "Address": 228,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 230,
                    "ByteSize": 3,
                    "Comment": "{Do not perform the operation if syntax is being",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 233,
                    "ByteSize": 1,
                    "Comment": "checked.}"
                },
                {
                    "Address": 234,
                    "ByteSize": 1,
                    "Comment": "Use the calculator.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 237,
                    "ByteSize": 1,
                    "Comment": "Return with zero added to the stack."
                },
                {
                    "Address": 238,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 240,
                    "ByteSize": 1,
                    "Comment": "Drop the return address - #ADDR:0x1B76#."
                },
                {
                    "Address": 241,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 244,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 246,
                    "ByteSize": 1,
                    "Comment": "Use the calculator.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 249,
                    "ByteSize": 1,
                    "Comment": "{Make #REG:HL# point to the first byte and call #ADDR:0x34E9#."
                },
                {
                    "Address": 250,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 253,
                    "ByteSize": 3,
                    "Comment": "If the value was 'FALSE' jump to the next line.",
                    "OperandType": 2
                },
                {
                    "Address": 256,
                    "ByteSize": 3,
                    "Comment": "But if 'TRUE' jump to the next statement (after the\nTHEN).",
                    "OperandType": 2
                },
                {
                    "Address": 259,
                    "ByteSize": 2,
                    "Comment": "{Jump forward unless a 'STEP' is given."
                },
                {
                    "Address": 261,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 263,
                    "ByteSize": 1,
                    "Comment": "{Advance \\#SYSVAR(CH-ADD) and fetch the value of the",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 264,
                    "ByteSize": 3,
                    "Comment": "STEP.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 267,
                    "ByteSize": 3,
                    "Comment": "{Move on to the next statement if checking syntax;",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 270,
                    "ByteSize": 2,
                    "Comment": "otherwise jump forward.}",
                    "OperandType": 2
                },
                {
                    "Address": 272,
                    "ByteSize": 3,
                    "Comment": "Move on to the next statement if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 275,
                    "ByteSize": 1,
                    "Comment": "Otherwise use the calculator to place a '1' on the\ncalculator stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 278,
                    "ByteSize": 1,
                    "Comment": "v, l, s",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 285,
                    "ByteSize": 3,
                    "Comment": "The variable is found, or created if needed (v is used).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 288,
                    "ByteSize": 3,
                    "Comment": "Make it a 'memory area' by setting \\#SYSVAR(MEM).",
                    "OperandType": 1
                },
                {
                    "Address": 291,
                    "ByteSize": 1,
                    "Comment": "{Fetch the variable's single character name."
                },
                {
                    "Address": 292,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 293,
                    "ByteSize": 2,
                    "Comment": "Ensure bit 7 of the name is set."
                },
                {
                    "Address": 295,
                    "ByteSize": 3,
                    "Comment": "It will have six locations at least."
                },
                {
                    "Address": 298,
                    "ByteSize": 1,
                    "Comment": "Make #REG:HL# point after them."
                },
                {
                    "Address": 299,
                    "ByteSize": 1,
                    "Comment": "{Rotate the name and jump if it was already a FOR"
                },
                {
                    "Address": 300,
                    "ByteSize": 2,
                    "Comment": "variable.}",
                    "OperandType": 2
                },
                {
                    "Address": 302,
                    "ByteSize": 2,
                    "Comment": "{Otherwise create thirteen more locations."
                },
                {
                    "Address": 304,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 307,
                    "ByteSize": 1,
                    "Comment": "Again make #REG:HL# point to the LIMIT position."
                },
                {
                    "Address": 308,
                    "ByteSize": 1,
                    "Comment": "The pointer is saved."
                },
                {
                    "Address": 309,
                    "ByteSize": 1,
                    "Comment": "l, s",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 313,
                    "ByteSize": 1,
                    "Comment": "{The pointer is restored and both pointers exchanged."
                },
                {
                    "Address": 314,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 315,
                    "ByteSize": 2,
                    "Comment": "{The ten bytes of the LIMIT and the STEP are moved."
                },
                {
                    "Address": 317,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 319,
                    "ByteSize": 3,
                    "Comment": "The current line number (\\#SYSVAR(PPC)).",
                    "OperandType": 1
                },
                {
                    "Address": 322,
                    "ByteSize": 1,
                    "Comment": "{Exchange the registers before adding the line number to"
                },
                {
                    "Address": 323,
                    "ByteSize": 1,
                    "Comment": "the FOR control variable."
                },
                {
                    "Address": 324,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 325,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 326,
                    "ByteSize": 3,
                    "Comment": "{The looping statement is always the next statement"
                },
                {
                    "Address": 329,
                    "ByteSize": 1,
                    "Comment": "whether it exists or not (increment \\#SYSVAR(SUBPPC))."
                },
                {
                    "Address": 330,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 331,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 332,
                    "ByteSize": 3,
                    "Comment": "Is a 'pass' possible?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 335,
                    "ByteSize": 1,
                    "Comment": "Return now if it is."
                },
                {
                    "Address": 336,
                    "ByteSize": 3,
                    "Comment": "Fetch the variable's name from \\#SYSVAR(STRLEN)."
                },
                {
                    "Address": 339,
                    "ByteSize": 3,
                    "Comment": "{Copy the present line number (\\#SYSVAR(PPC)) to",
                    "OperandType": 1
                },
                {
                    "Address": 342,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(NEWPPC).}",
                    "OperandType": 1
                },
                {
                    "Address": 345,
                    "ByteSize": 3,
                    "Comment": "{Fetch the current statement number (\\#SYSVAR(SUBPPC))",
                    "OperandType": 1
                },
                {
                    "Address": 348,
                    "ByteSize": 2,
                    "Comment": "and two's complement it.}"
                },
                {
                    "Address": 350,
                    "ByteSize": 1,
                    "Comment": "Transfer the result to the #REG:D# register."
                },
                {
                    "Address": 351,
                    "ByteSize": 3,
                    "Comment": "Fetch the current value of \\#SYSVAR(CH-ADD).",
                    "OperandType": 1
                },
                {
                    "Address": 354,
                    "ByteSize": 2,
                    "Comment": "The search will be for 'NEXT'."
                },
                {
                    "Address": 356,
                    "ByteSize": 1,
                    "Comment": "Save the variable's name."
                },
                {
                    "Address": 357,
                    "ByteSize": 4,
                    "Comment": "Fetch the current value of \\#SYSVAR(NXTLIN).",
                    "OperandType": 1
                },
                {
                    "Address": 361,
                    "ByteSize": 3,
                    "Comment": "The program area is now searched and #REG:BC# will change\nwith each new line examined.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 364,
                    "ByteSize": 4,
                    "Comment": "Upon return save the pointer at \\#SYSVAR(NXTLIN).",
                    "OperandType": 1
                },
                {
                    "Address": 368,
                    "ByteSize": 1,
                    "Comment": "Restore the variable's name."
                },
                {
                    "Address": 369,
                    "ByteSize": 2,
                    "Comment": "If there are no further NEXTs then give an error.",
                    "OperandType": 2
                },
                {
                    "Address": 371,
                    "ByteSize": 1,
                    "Comment": "Advance past the NEXT that was found.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 372,
                    "ByteSize": 2,
                    "Comment": "{Allow for upper and lower case letters before the new"
                },
                {
                    "Address": 374,
                    "ByteSize": 1,
                    "Comment": "variable name is tested.}"
                },
                {
                    "Address": 375,
                    "ByteSize": 2,
                    "Comment": "Jump forward if it matches.",
                    "OperandType": 2
                },
                {
                    "Address": 377,
                    "ByteSize": 1,
                    "Comment": "{Advance \\#SYSVAR(CH-ADD) again and jump back if not the",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 378,
                    "ByteSize": 2,
                    "Comment": "correct variable.}",
                    "OperandType": 2
                },
                {
                    "Address": 380,
                    "ByteSize": 1,
                    "Comment": "Advance \\#SYSVAR(CH-ADD).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 381,
                    "ByteSize": 2,
                    "Comment": "{The statement counter in the #REG:D# register counted"
                },
                {
                    "Address": 383,
                    "ByteSize": 1,
                    "Comment": "statements back from zero so it has to be subtracted\nfrom '1'.}"
                },
                {
                    "Address": 384,
                    "ByteSize": 3,
                    "Comment": "The result is stored in \\#SYSVAR(NSPPC).",
                    "OperandType": 1
                },
                {
                    "Address": 387,
                    "ByteSize": 1,
                    "Comment": "Now return - to #ADDR:0x1B76#."
                },
                {
                    "Address": 388,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 390,
                    "ByteSize": 1,
                    "Comment": "Fetch the present character."
                },
                {
                    "Address": 391,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if it is a ':', which will indicate there"
                },
                {
                    "Address": 393,
                    "ByteSize": 2,
                    "Comment": "are more statements in the present line.}",
                    "OperandType": 2
                },
                {
                    "Address": 395,
                    "ByteSize": 1,
                    "Comment": "{Fetch the high byte of the line number and return with"
                },
                {
                    "Address": 396,
                    "ByteSize": 1,
                    "Comment": "carry set if there are no further lines in the program."
                },
                {
                    "Address": 397,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 399,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 400,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 401,
                    "ByteSize": 1,
                    "Comment": "{The line number is fetched and passed to"
                },
                {
                    "Address": 402,
                    "ByteSize": 1,
                    "Comment": "\\#SYSVAR(NEWPPC)."
                },
                {
                    "Address": 403,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 404,
                    "ByteSize": 4,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 408,
                    "ByteSize": 1,
                    "Comment": "{Then the length is collected."
                },
                {
                    "Address": 409,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 410,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 411,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 412,
                    "ByteSize": 1,
                    "Comment": "{The pointer is saved whilst the address of the end of"
                },
                {
                    "Address": 413,
                    "ByteSize": 1,
                    "Comment": "the line is formed in the #REG:BC# register pair."
                },
                {
                    "Address": 414,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 415,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 416,
                    "ByteSize": 1,
                    "Comment": "The pointer is restored."
                },
                {
                    "Address": 417,
                    "ByteSize": 2,
                    "Comment": "Set the statement counter to zero."
                },
                {
                    "Address": 419,
                    "ByteSize": 1,
                    "Comment": "{The end-of-line pointer is saved whilst the statements"
                },
                {
                    "Address": 420,
                    "ByteSize": 3,
                    "Comment": "of the line are examined.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 423,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 424,
                    "ByteSize": 1,
                    "Comment": "{Make a return if there was an 'occurrence'; otherwise"
                },
                {
                    "Address": 425,
                    "ByteSize": 2,
                    "Comment": "consider the next line.}",
                    "OperandType": 2
                },
                {
                    "Address": 427,
                    "ByteSize": 4,
                    "Comment": "{Jump to give the error report if the variable was not"
                },
                {
                    "Address": 431,
                    "ByteSize": 3,
                    "Comment": "found (bit 1 of \\#SYSVAR(FLAGX) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 434,
                    "ByteSize": 3,
                    "Comment": "{The address of the variable is fetched from",
                    "OperandType": 1
                },
                {
                    "Address": 437,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(DEST) and the name tested further."
                },
                {
                    "Address": 439,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 441,
                    "ByteSize": 1,
                    "Comment": "Step past the name."
                },
                {
                    "Address": 442,
                    "ByteSize": 3,
                    "Comment": "Make the variable a temporary 'memory area' by setting\n\\#SYSVAR(MEM).",
                    "OperandType": 1
                },
                {
                    "Address": 445,
                    "ByteSize": 1,
                    "Comment": "-",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 452,
                    "ByteSize": 3,
                    "Comment": "Test the new VALUE against the LIMIT.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 455,
                    "ByteSize": 1,
                    "Comment": "Return now if the FOR-NEXT loop has been completed."
                },
                {
                    "Address": 456,
                    "ByteSize": 3,
                    "Comment": "{Find the address of the low byte of the looping line",
                    "OperandType": 1
                },
                {
                    "Address": 459,
                    "ByteSize": 3,
                    "Comment": "number (\\#SYSVAR(MEM)+\\#h0F)."
                },
                {
                    "Address": 462,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 463,
                    "ByteSize": 1,
                    "Comment": "{Now fetch this line number."
                },
                {
                    "Address": 464,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 465,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 466,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 467,
                    "ByteSize": 1,
                    "Comment": "Followed by the statement number."
                },
                {
                    "Address": 468,
                    "ByteSize": 1,
                    "Comment": "{Exchange the numbers before jumping forward to treat"
                },
                {
                    "Address": 469,
                    "ByteSize": 3,
                    "Comment": "them as the destination line of a GO TO command.}",
                    "OperandType": 2
                },
                {
                    "Address": 472,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 474,
                    "ByteSize": 1,
                    "Comment": "-",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 487,
                    "ByteSize": 1,
                    "Comment": "{Clear the carry flag and return - loop is possible."
                },
                {
                    "Address": 488,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 490,
                    "ByteSize": 1,
                    "Comment": "{Set the carry flag and return."
                },
                {
                    "Address": 491,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 492,
                    "ByteSize": 1,
                    "Comment": "Come here on each pass, after the first, to move along\nthe READ statement.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 493,
                    "ByteSize": 3,
                    "Comment": "Consider whether the variable has been used before;\nfind the existing entry if it has.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 496,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 499,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 501,
                    "ByteSize": 1,
                    "Comment": "{Save the current pointer \\#SYSVAR(CH-ADD) in",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 502,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(X-PTR).}",
                    "OperandType": 1
                },
                {
                    "Address": 505,
                    "ByteSize": 3,
                    "Comment": "{Fetch the current DATA list pointer (\\#SYSVAR(DATADD))",
                    "OperandType": 1
                },
                {
                    "Address": 508,
                    "ByteSize": 1,
                    "Comment": "and jump forward unless a new DATA statement has to be"
                },
                {
                    "Address": 509,
                    "ByteSize": 2,
                    "Comment": "found."
                },
                {
                    "Address": 511,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 513,
                    "ByteSize": 2,
                    "Comment": "The search is for 'DATA'."
                },
                {
                    "Address": 515,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if the search is successful.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 518,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 520,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 522,
                    "ByteSize": 3,
                    "Comment": "Advance the pointer along the DATA list and set\n\\#SYSVAR(CH-ADD).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 525,
                    "ByteSize": 3,
                    "Comment": "Fetch the value and assign it to the variable.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 528,
                    "ByteSize": 1,
                    "Comment": "{Fetch the current value of \\#SYSVAR(CH-ADD) and store",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 529,
                    "ByteSize": 3,
                    "Comment": "it in \\#SYSVAR(DATADD).}",
                    "OperandType": 1
                },
                {
                    "Address": 532,
                    "ByteSize": 3,
                    "Comment": "{Fetch the pointer to the READ statement from",
                    "OperandType": 1
                },
                {
                    "Address": 535,
                    "ByteSize": 4,
                    "Comment": "\\#SYSVAR(X-PTR) and clear it.}"
                },
                {
                    "Address": 539,
                    "ByteSize": 3,
                    "Comment": "Make \\#SYSVAR(CH-ADD) once again point to the READ\nstatement.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 542,
                    "ByteSize": 1,
                    "Comment": "{Get the present character and see if it is a ','.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 543,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 545,
                    "ByteSize": 2,
                    "Comment": "{If it is then jump back as there are further items;",
                    "OperandType": 2
                },
                {
                    "Address": 547,
                    "ByteSize": 3,
                    "Comment": "otherwise return via either #ADDR:0x1BEE# (if checking",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 550,
                    "ByteSize": 1,
                    "Comment": "syntax) or the '\\#S/RET/' instruction (to #ADDR:0x1B76#).}"
                },
                {
                    "Address": 551,
                    "ByteSize": 3,
                    "Comment": "{Jump forward unless checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 554,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 556,
                    "ByteSize": 3,
                    "Comment": "Scan the next expression.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 559,
                    "ByteSize": 2,
                    "Comment": "Check for a comma separator."
                },
                {
                    "Address": 561,
                    "ByteSize": 3,
                    "Comment": "Move on to the next statement if not matched.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 564,
                    "ByteSize": 1,
                    "Comment": "{Whilst there are still expressions to be checked go",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 565,
                    "ByteSize": 2,
                    "Comment": "around the loop.}",
                    "OperandType": 2
                },
                {
                    "Address": 567,
                    "ByteSize": 2,
                    "Comment": "It is a 'DATA' statement that is to be passed by."
                },
                {
                    "Address": 569,
                    "ByteSize": 1,
                    "Comment": "Make the #REG:BC# register pair hold a very high number."
                },
                {
                    "Address": 570,
                    "ByteSize": 2,
                    "Comment": "Look back along the statement for the token."
                },
                {
                    "Address": 572,
                    "ByteSize": 3,
                    "Comment": "{Now look along the line for the statement after (the"
                },
                {
                    "Address": 575,
                    "ByteSize": 3,
                    "Comment": "'#REG:D#-1'th statement from the current position).}",
                    "OperandType": 2
                },
                {
                    "Address": 578,
                    "ByteSize": 3,
                    "Comment": "Compress the operand into the #REG:BC# register pair.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 581,
                    "ByteSize": 1,
                    "Comment": "{Transfer the result to the #REG:HL# register pair."
                },
                {
                    "Address": 582,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 583,
                    "ByteSize": 3,
                    "Comment": "Now find the address of that line or the 'first line\nafter'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 586,
                    "ByteSize": 1,
                    "Comment": "{Make \\#SYSVAR(DATADD) point to the location before."
                },
                {
                    "Address": 587,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 590,
                    "ByteSize": 1,
                    "Comment": "Return once it is done."
                },
                {
                    "Address": 591,
                    "ByteSize": 3,
                    "Comment": "Fetch the operand.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 594,
                    "ByteSize": 1,
                    "Comment": "{Jump forward unless the value of the operand is zero."
                },
                {
                    "Address": 595,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 596,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 598,
                    "ByteSize": 4,
                    "Comment": "Fetch the two low order bytes of \\#SYSVAR(FRAMES)\ninstead.",
                    "OperandType": 1
                },
                {
                    "Address": 602,
                    "ByteSize": 4,
                    "Comment": "{Now enter the result into the system variable",
                    "OperandType": 1
                },
                {
                    "Address": 606,
                    "ByteSize": 1,
                    "Comment": "\\#SYSVAR(SEED) before returning.}"
                },
                {
                    "Address": 607,
                    "ByteSize": 3,
                    "Comment": "The line number (\\#SYSVAR(OLDPPC)).",
                    "OperandType": 1
                },
                {
                    "Address": 610,
                    "ByteSize": 3,
                    "Comment": "The statement number (\\#SYSVAR(OSPCC))."
                },
                {
                    "Address": 613,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 615,
                    "ByteSize": 3,
                    "Comment": "{Fetch the operand and transfer it to the #REG:HL#",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 618,
                    "ByteSize": 1,
                    "Comment": "register pair."
                },
                {
                    "Address": 619,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 620,
                    "ByteSize": 2,
                    "Comment": "Set the statement number to zero."
                },
                {
                    "Address": 622,
                    "ByteSize": 1,
                    "Comment": "{Give the error message 'Integer out of range' with line"
                },
                {
                    "Address": 623,
                    "ByteSize": 2,
                    "Comment": "numbers over 61439."
                },
                {
                    "Address": 625,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 627,
                    "ByteSize": 3,
                    "Comment": "{Enter the line number (\\#SYSVAR(NEWPPC)) and then the",
                    "OperandType": 1
                },
                {
                    "Address": 630,
                    "ByteSize": 3,
                    "Comment": "statement number (\\#SYSVAR(NSPPC)).}"
                },
                {
                    "Address": 633,
                    "ByteSize": 1,
                    "Comment": "Return - to #ADDR:0x1B76#."
                },
                {
                    "Address": 634,
                    "ByteSize": 3,
                    "Comment": "The operands are fetched.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 637,
                    "ByteSize": 2,
                    "Comment": "The actual '\\#S/OUT/' instruction."
                },
                {
                    "Address": 639,
                    "ByteSize": 1,
                    "Comment": "Return - to #ADDR:0x1B76#."
                },
                {
                    "Address": 640,
                    "ByteSize": 3,
                    "Comment": "The operands are fetched.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 643,
                    "ByteSize": 1,
                    "Comment": "The actual POKE operation."
                },
                {
                    "Address": 644,
                    "ByteSize": 1,
                    "Comment": "Return - to #ADDR:0x1B76#."
                },
                {
                    "Address": 645,
                    "ByteSize": 3,
                    "Comment": "The parameter is fetched.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 648,
                    "ByteSize": 2,
                    "Comment": "Give an error if it is too high a number.",
                    "OperandType": 2
                },
                {
                    "Address": 650,
                    "ByteSize": 2,
                    "Comment": "{Jump forward with positive numbers but two's complement",
                    "OperandType": 2
                },
                {
                    "Address": 652,
                    "ByteSize": 2,
                    "Comment": "negative numbers.}"
                },
                {
                    "Address": 654,
                    "ByteSize": 1,
                    "Comment": "{Save the first parameter whilst the second is fetched."
                },
                {
                    "Address": 655,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 658,
                    "ByteSize": 1,
                    "Comment": "{The first parameter is restored before returning."
                },
                {
                    "Address": 659,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 660,
                    "ByteSize": 3,
                    "Comment": "Fetch the 'last value'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 663,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 665,
                    "ByteSize": 3,
                    "Comment": "Fetch the 'last value'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 668,
                    "ByteSize": 2,
                    "Comment": "In both cases overflow is indicated by a set carry flag.",
                    "OperandType": 2
                },
                {
                    "Address": 670,
                    "ByteSize": 1,
                    "Comment": "Return with all positive numbers that are in range."
                },
                {
                    "Address": 671,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 673,
                    "ByteSize": 3,
                    "Comment": "Set \\#SYSVAR(NEWPPC) as required.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 676,
                    "ByteSize": 3,
                    "Comment": "{Now perform a 'RESTORE 0'."
                },
                {
                    "Address": 679,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 682,
                    "ByteSize": 2,
                    "Comment": "Exit via the #ADDR:0x1EAC# command routine.",
                    "OperandType": 2
                },
                {
                    "Address": 684,
                    "ByteSize": 3,
                    "Comment": "Fetch the operand - using zero by default.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 687,
                    "ByteSize": 1,
                    "Comment": "{Jump forward if the operand is other than zero. When"
                },
                {
                    "Address": 688,
                    "ByteSize": 1,
                    "Comment": "called from #ADDR:0x1EA1# there is no jump."
                },
                {
                    "Address": 689,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 691,
                    "ByteSize": 4,
                    "Comment": "If zero use the existing value in \\#SYSVAR(RAMTOP).",
                    "OperandType": 1
                },
                {
                    "Address": 695,
                    "ByteSize": 1,
                    "Comment": "Save the value."
                },
                {
                    "Address": 696,
                    "ByteSize": 4,
                    "Comment": "{Next reclaim all the bytes of the present variables",
                    "OperandType": 1
                },
                {
                    "Address": 700,
                    "ByteSize": 3,
                    "Comment": "area (\\#SYSVAR(VARS) to \\#SYSVAR(E-LINE)-1).",
                    "OperandType": 1
                },
                {
                    "Address": 703,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 704,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 707,
                    "ByteSize": 3,
                    "Comment": "Clear the display area.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 710,
                    "ByteSize": 3,
                    "Comment": "{The current value of \\#SYSVAR(STKEND) is increased by 50",
                    "OperandType": 1
                },
                {
                    "Address": 713,
                    "ByteSize": 3,
                    "Comment": "before being tested. This forms the lower limit."
                },
                {
                    "Address": 716,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 717,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 718,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 720,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(RAMTOP) will be too low.",
                    "OperandType": 2
                },
                {
                    "Address": 722,
                    "ByteSize": 3,
                    "Comment": "{For the upper test the value for \\#SYSVAR(RAMTOP) is",
                    "OperandType": 1
                },
                {
                    "Address": 725,
                    "ByteSize": 1,
                    "Comment": "tested against \\#SYSVAR(P-RAMT)."
                },
                {
                    "Address": 726,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 728,
                    "ByteSize": 2,
                    "Comment": "Jump forward if acceptable.",
                    "OperandType": 2
                },
                {
                    "Address": 730,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 732,
                    "ByteSize": 1,
                    "Comment": "{Now the value can actually be passed to"
                },
                {
                    "Address": 733,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(RAMTOP).}",
                    "OperandType": 1
                },
                {
                    "Address": 736,
                    "ByteSize": 1,
                    "Comment": "Fetch the address of #ADDR:0x1B76#."
                },
                {
                    "Address": 737,
                    "ByteSize": 1,
                    "Comment": "Fetch the 'error address'."
                },
                {
                    "Address": 738,
                    "ByteSize": 2,
                    "Comment": "Enter a GO SUB stack end marker."
                },
                {
                    "Address": 740,
                    "ByteSize": 1,
                    "Comment": "Leave one location."
                },
                {
                    "Address": 741,
                    "ByteSize": 1,
                    "Comment": "Make the stack pointer point to an empty GO SUB stack."
                },
                {
                    "Address": 742,
                    "ByteSize": 1,
                    "Comment": "{Next pass the 'error address' to the stack and save its"
                },
                {
                    "Address": 743,
                    "ByteSize": 4,
                    "Comment": "address in \\#SYSVAR(ERR-SP).}",
                    "OperandType": 1
                },
                {
                    "Address": 747,
                    "ByteSize": 1,
                    "Comment": "{An indirect return is now made to #ADDR:0x1B76#."
                },
                {
                    "Address": 748,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 749,
                    "ByteSize": 1,
                    "Comment": "Save the address - #ADDR:0x1B76#."
                },
                {
                    "Address": 750,
                    "ByteSize": 3,
                    "Comment": "{Fetch the statement number (\\#SYSVAR(SUBPPC)) and"
                },
                {
                    "Address": 753,
                    "ByteSize": 1,
                    "Comment": "increment it.}"
                },
                {
                    "Address": 754,
                    "ByteSize": 1,
                    "Comment": "Exchange the 'error address' with the statement number."
                },
                {
                    "Address": 755,
                    "ByteSize": 1,
                    "Comment": "Reclaim the use of a location."
                },
                {
                    "Address": 756,
                    "ByteSize": 4,
                    "Comment": "{Next save the present line number (\\#SYSVAR(PPC)).",
                    "OperandType": 1
                },
                {
                    "Address": 760,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 761,
                    "ByteSize": 1,
                    "Comment": "{Return the 'error address' to the machine stack and"
                },
                {
                    "Address": 762,
                    "ByteSize": 4,
                    "Comment": "reset \\#SYSVAR(ERR-SP) to point to it.}",
                    "OperandType": 1
                },
                {
                    "Address": 766,
                    "ByteSize": 1,
                    "Comment": "Return the address #ADDR:0x1B76#."
                },
                {
                    "Address": 767,
                    "ByteSize": 3,
                    "Comment": "Now set \\#SYSVAR(NEWPPC) and \\#SYSVAR(NSPPC) to the\nrequired values.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 770,
                    "ByteSize": 3,
                    "Comment": "But before making the jump make a test for room."
                },
                {
                    "Address": 773,
                    "ByteSize": 3,
                    "Comment": "{Increase the value taken from \\#SYSVAR(STKEND) by the",
                    "OperandType": 1
                },
                {
                    "Address": 776,
                    "ByteSize": 1,
                    "Comment": "value carried into the routine by the #REG:BC# register\npair.}"
                },
                {
                    "Address": 777,
                    "ByteSize": 2,
                    "Comment": "Jump forward if the result is over &FFFF.",
                    "OperandType": 2
                },
                {
                    "Address": 779,
                    "ByteSize": 1,
                    "Comment": "{Try it again allowing for a further eighty bytes."
                },
                {
                    "Address": 780,
                    "ByteSize": 3,
                    "Comment": " "
                },
                {
                    "Address": 783,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 784,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 786,
                    "ByteSize": 2,
                    "Comment": "Finally test the value against the address of the\nmachine stack."
                },
                {
                    "Address": 788,
                    "ByteSize": 1,
                    "Comment": "Return if satisfactory."
                },
                {
                    "Address": 789,
                    "ByteSize": 2,
                    "Comment": "{This is a 'run-time' error and the error marker is not"
                },
                {
                    "Address": 791,
                    "ByteSize": 3,
                    "Comment": "to be used.}",
                    "OperandType": 2
                },
                {
                    "Address": 794,
                    "ByteSize": 3,
                    "Comment": "Do not allow any overhead.",
                    "Flags": 4
                },
                {
                    "Address": 797,
                    "ByteSize": 3,
                    "Comment": "{Make the test and pass the result to the #REG:BC#",
                    "Flags": 12,
                    "OperandType": 2
                },
                {
                    "Address": 800,
                    "ByteSize": 1,
                    "Comment": "register before returning.",
                    "Flags": 4
                },
                {
                    "Address": 801,
                    "ByteSize": 1,
                    "Comment": " ",
                    "Flags": 4
                },
                {
                    "Address": 802,
                    "ByteSize": 1,
                    "Comment": "}",
                    "Flags": 4
                },
                {
                    "Address": 803,
                    "ByteSize": 1,
                    "Comment": "Fetch the address - #ADDR:0x1B76#."
                },
                {
                    "Address": 804,
                    "ByteSize": 1,
                    "Comment": "Fetch the 'error address'."
                },
                {
                    "Address": 805,
                    "ByteSize": 1,
                    "Comment": "Fetch the last entry on the GO SUB stack."
                },
                {
                    "Address": 806,
                    "ByteSize": 1,
                    "Comment": "{The entry is tested to see if it is the GO SUB stack"
                },
                {
                    "Address": 807,
                    "ByteSize": 2,
                    "Comment": "end marker.}"
                },
                {
                    "Address": 809,
                    "ByteSize": 2,
                    "Comment": "Jump if it is.",
                    "OperandType": 2
                },
                {
                    "Address": 811,
                    "ByteSize": 1,
                    "Comment": "The full entry uses three locations only."
                },
                {
                    "Address": 812,
                    "ByteSize": 1,
                    "Comment": "Exchange the statement number with the 'error address'."
                },
                {
                    "Address": 813,
                    "ByteSize": 1,
                    "Comment": "Move the statement number."
                },
                {
                    "Address": 814,
                    "ByteSize": 4,
                    "Comment": "Reset the error pointer (\\#SYSVAR(ERR-SP)).",
                    "OperandType": 1
                },
                {
                    "Address": 818,
                    "ByteSize": 1,
                    "Comment": "Replace the address #ADDR:0x1B76#."
                },
                {
                    "Address": 819,
                    "ByteSize": 3,
                    "Comment": "Jump back to change \\#SYSVAR(NEWPPC) and \\#SYSVAR(NSPPC).",
                    "OperandType": 2
                },
                {
                    "Address": 822,
                    "ByteSize": 1,
                    "Comment": "{Replace the end marker and the 'error address'."
                },
                {
                    "Address": 823,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 824,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 826,
                    "ByteSize": 3,
                    "Comment": "Fetch the operand.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 829,
                    "ByteSize": 1,
                    "Comment": "Wait for a maskable interrupt."
                },
                {
                    "Address": 830,
                    "ByteSize": 1,
                    "Comment": "Decrease the counter."
                },
                {
                    "Address": 831,
                    "ByteSize": 1,
                    "Comment": "{If the counter is thereby reduced to zero the pause"
                },
                {
                    "Address": 832,
                    "ByteSize": 1,
                    "Comment": "has come to an end."
                },
                {
                    "Address": 833,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 835,
                    "ByteSize": 1,
                    "Comment": "{If the operand was zero #REG:BC# will now hold &FFFF and"
                },
                {
                    "Address": 836,
                    "ByteSize": 1,
                    "Comment": "this value will be returned to zero. Jump with all"
                },
                {
                    "Address": 837,
                    "ByteSize": 1,
                    "Comment": "other operand values."
                },
                {
                    "Address": 838,
                    "ByteSize": 2,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 840,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 841,
                    "ByteSize": 4,
                    "Comment": "{Jump back unless a key has been pressed (bit 5 of"
                },
                {
                    "Address": 845,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(FLAGS) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 847,
                    "ByteSize": 4,
                    "Comment": "Signal 'no key pressed' (reset bit 5 of\n\\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 851,
                    "ByteSize": 1,
                    "Comment": "Now return - to #ADDR:0x1B76#."
                },
                {
                    "Address": 852,
                    "ByteSize": 2,
                    "Comment": "{Form the port address &7FFE and read in a byte."
                },
                {
                    "Address": 854,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 856,
                    "ByteSize": 1,
                    "Comment": "Examine only bit 0 by shifting it into the carry\nposition."
                },
                {
                    "Address": 857,
                    "ByteSize": 1,
                    "Comment": "Return if the BREAK key is not being pressed."
                },
                {
                    "Address": 858,
                    "ByteSize": 2,
                    "Comment": "{Form the port address &FEFE and read in a byte."
                },
                {
                    "Address": 860,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 862,
                    "ByteSize": 1,
                    "Comment": "Again examine bit 0."
                },
                {
                    "Address": 863,
                    "ByteSize": 1,
                    "Comment": "Return with carry reset if both keys are being pressed."
                },
                {
                    "Address": 864,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 867,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 869,
                    "ByteSize": 2,
                    "Comment": "{Otherwise pass by the 'DEF FN' statement."
                },
                {
                    "Address": 871,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 874,
                    "ByteSize": 4,
                    "Comment": "Signal 'a numeric variable' (set bit 6 of\n\\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 878,
                    "ByteSize": 3,
                    "Comment": "Check that the present code is a letter.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 881,
                    "ByteSize": 2,
                    "Comment": "Jump forward if not.",
                    "OperandType": 2
                },
                {
                    "Address": 883,
                    "ByteSize": 1,
                    "Comment": "Fetch the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 884,
                    "ByteSize": 2,
                    "Comment": "{Jump forward unless it is a '$'."
                },
                {
                    "Address": 886,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 888,
                    "ByteSize": 4,
                    "Comment": "Reset bit 6 of \\#SYSVAR(FLAGS) as it is a string\nvariable."
                },
                {
                    "Address": 892,
                    "ByteSize": 1,
                    "Comment": "Fetch the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 893,
                    "ByteSize": 2,
                    "Comment": "{A '(' must follow the variable's name."
                },
                {
                    "Address": 895,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 897,
                    "ByteSize": 1,
                    "Comment": "Fetch the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 898,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if it is a ')' as there are no parameters"
                },
                {
                    "Address": 900,
                    "ByteSize": 2,
                    "Comment": "of the function.}",
                    "OperandType": 2
                },
                {
                    "Address": 902,
                    "ByteSize": 3,
                    "Comment": "{The present code must be a letter.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 905,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 908,
                    "ByteSize": 1,
                    "Comment": "Save the pointer in #REG:DE#."
                },
                {
                    "Address": 909,
                    "ByteSize": 1,
                    "Comment": "Fetch the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 910,
                    "ByteSize": 2,
                    "Comment": "{Jump forward unless it is a '$'."
                },
                {
                    "Address": 912,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 914,
                    "ByteSize": 1,
                    "Comment": "Otherwise save the new pointer in #REG:DE# instead."
                },
                {
                    "Address": 915,
                    "ByteSize": 1,
                    "Comment": "Fetch the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 916,
                    "ByteSize": 1,
                    "Comment": "Move the pointer to the last character of the name to\nthe #REG:HL# register pair."
                },
                {
                    "Address": 917,
                    "ByteSize": 3,
                    "Comment": "{Now make six locations after that last character and"
                },
                {
                    "Address": 920,
                    "ByteSize": 3,
                    "Comment": "enter a 'number marker' into the first of the new",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 923,
                    "ByteSize": 1,
                    "Comment": "locations."
                },
                {
                    "Address": 924,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 925,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 927,
                    "ByteSize": 2,
                    "Comment": "{If the present character is a ',' then jump back as"
                },
                {
                    "Address": 929,
                    "ByteSize": 2,
                    "Comment": "there should be a further parameter; otherwise jump out",
                    "OperandType": 2
                },
                {
                    "Address": 931,
                    "ByteSize": 1,
                    "Comment": "of the loop.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 932,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 934,
                    "ByteSize": 2,
                    "Comment": "{Check that the ')' does exist."
                },
                {
                    "Address": 936,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 938,
                    "ByteSize": 1,
                    "Comment": "The next character is fetched.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 939,
                    "ByteSize": 2,
                    "Comment": "{It must be an '='."
                },
                {
                    "Address": 941,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 943,
                    "ByteSize": 1,
                    "Comment": "Fetch the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 944,
                    "ByteSize": 3,
                    "Comment": "{Save the nature - numeric or string - of the variable",
                    "OperandType": 1
                },
                {
                    "Address": 947,
                    "ByteSize": 1,
                    "Comment": "(bit 6 of \\#SYSVAR(FLAGS)).}"
                },
                {
                    "Address": 948,
                    "ByteSize": 3,
                    "Comment": "Now consider the definition as an expression.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 951,
                    "ByteSize": 1,
                    "Comment": "{Fetch the nature of the variable and check that it is"
                },
                {
                    "Address": 952,
                    "ByteSize": 3,
                    "Comment": "of the same type as found for the definition (specified"
                },
                {
                    "Address": 955,
                    "ByteSize": 2,
                    "Comment": "by bit 6 of \\#SYSVAR(FLAGS)).}"
                },
                {
                    "Address": 957,
                    "ByteSize": 3,
                    "Comment": "Give an error report if it is required.",
                    "OperandType": 2
                },
                {
                    "Address": 960,
                    "ByteSize": 3,
                    "Comment": "Exit via #ADDR:0x1BEE# (thereby moving on to consider the\nnext statement in the line).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 963,
                    "ByteSize": 3,
                    "Comment": "Is syntax being checked?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 966,
                    "ByteSize": 1,
                    "Comment": "{Fetch the return address but ignore it in"
                },
                {
                    "Address": 967,
                    "ByteSize": 1,
                    "Comment": "'syntax-time'.}"
                },
                {
                    "Address": 968,
                    "ByteSize": 1,
                    "Comment": "In 'run-time' make a simple return to the calling\nroutine."
                },
                {
                    "Address": 969,
                    "ByteSize": 2,
                    "Comment": "Prepare to open channel 'P'."
                },
                {
                    "Address": 971,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 973,
                    "ByteSize": 2,
                    "Comment": "Prepare to open channel 'S'."
                },
                {
                    "Address": 975,
                    "ByteSize": 3,
                    "Comment": "{Unless syntax is being checked open a channel.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 978,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 981,
                    "ByteSize": 3,
                    "Comment": "Set the temporary colour system variables.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 984,
                    "ByteSize": 3,
                    "Comment": "Call the print controlling subroutine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 987,
                    "ByteSize": 3,
                    "Comment": "{Move on to consider the next statement (via #ADDR:0x1BEE# if",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 990,
                    "ByteSize": 1,
                    "Comment": "checking syntax).}"
                },
                {
                    "Address": 991,
                    "ByteSize": 1,
                    "Comment": "Get the first character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 992,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if already at the end of the item list.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 995,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 997,
                    "ByteSize": 3,
                    "Comment": "{Deal with any consecutive position controllers.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1000,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 1002,
                    "ByteSize": 3,
                    "Comment": "Deal with a single print item.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1005,
                    "ByteSize": 3,
                    "Comment": "{Check for further position controllers and print items",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1008,
                    "ByteSize": 2,
                    "Comment": "until there are none left.}",
                    "OperandType": 2
                },
                {
                    "Address": 1010,
                    "ByteSize": 2,
                    "Comment": "{Return now if the present character is a ')'; otherwise"
                },
                {
                    "Address": 1012,
                    "ByteSize": 1,
                    "Comment": "consider performing a 'carriage return'.}"
                },
                {
                    "Address": 1013,
                    "ByteSize": 3,
                    "Comment": "Return if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1016,
                    "ByteSize": 2,
                    "Comment": "{Print a carriage return character and then return."
                },
                {
                    "Address": 1018,
                    "ByteSize": 1,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1019,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 1020,
                    "ByteSize": 1,
                    "Comment": "The first character is fetched.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1021,
                    "ByteSize": 2,
                    "Comment": "{Jump forward unless it is an 'AT'."
                },
                {
                    "Address": 1023,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                }
            ],
            "CommentBlocks": [
                {
                    "Address": 1,
                    "Comment": "THE 'COMMAND CLASS' TABLE\n \nUsed by the routine at #ADDR:0x1B28#."
                },
                {
                    "Address": 13,
                    "Comment": "THE 'COMMAND CLASSES - &00, &03 and &05'\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x1C01#(command class table).\n \nThe commands of class &03 may, or may not, be followed by a number. e.g. RUN\nand RUN 200.\n \nA Code of the first character after the command\nHL Address of the first character after the command"
                },
                {
                    "Address": 16,
                    "Comment": "The address of this entry point is derived from an offset found in the\n#ADDR:0x1C01#(command class table).\n \nThe commands of class &00 must not have any operands, e.g. COPY and CONTINUE."
                },
                {
                    "Address": 17,
                    "Comment": "The address of this entry point is derived from an offset found in the\n#ADDR:0x1C01#(command class table).\n \nThe commands of class &05 may be followed by a set of items, e.g. PRINT and\nPRINT \"222\"."
                },
                {
                    "Address": 22,
                    "Comment": "After the command class entries and the separator entries in the\n#ADDR:0x1A7A#(parameter table) have been considered the jump to the appropriate\ncommand routine is made."
                },
                {
                    "Address": 31,
                    "Comment": "THE 'COMMAND CLASS &01' ROUTINE\n \nUsed by the routines at #ADDR:0x1DEC# and #ADDR:0x2089#.\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x1C01#(command class table).\n \nCommand class &01 is concerned with the identification of the variable in a\nLET, READ or INPUT statement."
                },
                {
                    "Address": 34,
                    "Comment": "This routine continues into #ADDR:0x1C22#.\nTHE 'VARIABLE IN ASSIGNMENT' SUBROUTINE\n \nUsed by the routine at #ADDR:0x1C6C#.\n \nThe routine at #ADDR:0x1C1F# continues here.\n \nThis subroutine develops the appropriate values for the system variables\n\\#SYSVAR(DEST) and \\#SYSVAR(STRLEN).\n \nC Bit 5: Set if the variable is numeric, reset if it's a string\nC Bit 6: Set if the variable is simple, reset if it's an array\nC Bit 7: Set if checking syntax, reset if executing\nHL Address of the last letter of the variable's name (in the variables area,\n.  if it exists)\nF Carry flag reset if the variable already exists\nF Zero flag reset if the variable is simple (not an array) and does not exist"
                },
                {
                    "Address": 46,
                    "Comment": "This entry point is used by the routines at #ADDR:0x1DAB# and #ADDR:0x26C9#.\n \nReport 2 - Variable not found."
                },
                {
                    "Address": 48,
                    "Comment": "Continue with the handling of existing variables."
                },
                {
                    "Address": 70,
                    "Comment": "The pathways now come together to set \\#SYSVAR(STRLEN) and \\#SYSVAR(DEST) as\nrequired. For all numeric variables and 'new' string and string array\nvariables \\#SYSVAR(STRLEN-lo) holds the 'letter' of the variable's name. But\nfor 'old' string and string array variables whether 'sliced' or complete it\nholds the 'length' in 'assignment'."
                },
                {
                    "Address": 74,
                    "Comment": "\\#SYSVAR(DEST) holds the address for the 'destination' of an 'old' variable\nbut in effect the 'source' for a 'new' variable."
                },
                {
                    "Address": 78,
                    "Comment": "THE 'COMMAND CLASS &02' ROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x1C01#(command class table).\n \nCommand class &02 is concerned with the actual calculation of the value to be\nassigned in a LET statement."
                },
                {
                    "Address": 86,
                    "Comment": "THE 'FETCH A VALUE' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1C4E# and #ADDR:0x1DEC#.\n \nThis subroutine is used by LET, READ and INPUT statements to first evaluate\nand then assign values to the previously designated variable.\n \nThe main entry point is used by LET and READ and considers \\#SYSVAR(FLAGS),\nwhereas the entry point #ADDR:0x1C59# is used by INPUT and considers\n\\#SYSVAR(FLAGX)."
                },
                {
                    "Address": 89,
                    "Comment": "This entry point is used by the routine at #ADDR:0x21B9# with #REG:A# holding the\ncontents of \\#SYSVAR(FLAGX)."
                },
                {
                    "Address": 108,
                    "Comment": "THE 'COMMAND CLASS &04' ROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x1C01#(command class table).\n \nThe command class &04 entry point is used by FOR and NEXT statements."
                },
                {
                    "Address": 121,
                    "Comment": "THE 'EXPECT NUMERIC/STRING EXPRESSIONS' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1FFC# and #ADDR:0x2522#.\n \nThere is a series of short subroutines that are used to fetch the result of\nevaluating the next expression. The result from a single expression is\nreturned as a 'last value' on the calculator stack.\n \n \n \nThis entry point is used when \\#SYSVAR(CH-ADD) needs updating to point to the\nstart of the first expression."
                },
                {
                    "Address": 122,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1CBE#.\n \nThe address of this entry point is derived from an offset found in the\n#ADDR:0x1C01#(command class table).\n \nThis entry point allows for two numeric expressions, separated by a comma, to\nbe evaluated."
                },
                {
                    "Address": 130,
                    "Comment": "This entry point is used by the routines at #ADDR:0x0605#, #ADDR:0x17F9#, #ADDR:0x1CDE#,\n#ADDR:0x1D03#, #ADDR:0x1FFC#, #ADDR:0x2070#, #ADDR:0x21E1#, #ADDR:0x2320#, #ADDR:0x2382# and #ADDR:0x2ACC#.\n \nThe address of this entry point is derived from an offset found in the\n#ADDR:0x1C01#(command class table).\n \nThis entry point allows for a single numeric expression to be evaluated."
                },
                {
                    "Address": 138,
                    "Comment": "This entry point is used by the routines at #ADDR:0x04AA#, #ADDR:0x0605#, #ADDR:0x19FB#,\n#ADDR:0x1B28#, #ADDR:0x1B6F#, #ADDR:0x1BF4#, #ADDR:0x1C56#, #ADDR:0x1C6C#, #ADDR:0x1F60#, #ADDR:0x2089#, #ADDR:0x21E1#,\n#ADDR:0x2320#, #ADDR:0x250F#, #ADDR:0x2522#, #ADDR:0x25E8#, #ADDR:0x26C9#, #ADDR:0x27BD#, #ADDR:0x28B2#, #ADDR:0x2A52#,\n#ADDR:0x2C02#, #ADDR:0x2C9B# and #ADDR:0x35DE#.\n \nReport C - Nonsense in BASIC."
                },
                {
                    "Address": 140,
                    "Comment": "This entry point is used by the routine at #ADDR:0x0605#.\n \nThe address of this entry point is derived from an offset found in the\n#ADDR:0x1C01#(command class table).\n \nThis entry point allows for a single string expression to be evaluated."
                },
                {
                    "Address": 150,
                    "Comment": "THE 'SET PERMANENT COLOURS' SUBROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x1C01#(command class table).\n \nThis subroutine allows for the current temporary colours to be made\npermanent. As command class &07 it is in effect the command routine for the\nsix colour item commands."
                },
                {
                    "Address": 183,
                    "Comment": "The following instructions cleverly copy the even bits of the supplied byte\nto the odd bits, in effect making the permanent bits the same as the\ntemporary ones."
                },
                {
                    "Address": 190,
                    "Comment": "THE 'COMMAND CLASS &09' ROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x1C01#(command class table).\n \nThis routine is used by PLOT, DRAW and CIRCLE statements in order to specify\nthe default conditions of 'FLASH 8; BRIGHT 8; PAPER 8;' that are set up\nbefore any embedded colour items are considered."
                },
                {
                    "Address": 219,
                    "Comment": "THE 'COMMAND CLASS &0B' ROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x1C01#(command class table).\n \nThis routine is used by SAVE, LOAD, VERIFY and MERGE statements."
                },
                {
                    "Address": 222,
                    "Comment": "THE 'FETCH A NUMBER' SUBROUTINE\n \nUsed by the routines at #ADDR:0x17F9# and #ADDR:0x1C0D#.\n \nThis subroutine leads to a following numeric expression being evaluated but\nzero being used instead if there is no expression.\n \nA Code of the first character of the expression"
                },
                {
                    "Address": 230,
                    "Comment": "This entry point is used by the routines at #ADDR:0x0605# and #ADDR:0x17F9#.\n \nThe calculator is now used to add the value zero to the calculator stack."
                },
                {
                    "Address": 238,
                    "Comment": "THE 'STOP' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1A8A#(parameter table).\n \nThe command routine for STOP contains only a call to the error handling\nroutine."
                },
                {
                    "Address": 240,
                    "Comment": "THE 'IF' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1A81#(parameter table).\n \nOn entry the value of the expression between the IF and the THEN is the 'last\nvalue' on the calculator stack. If this is logically true then the next\nstatement is considered; otherwise the line is considered to have been\nfinished."
                },
                {
                    "Address": 246,
                    "Comment": "Now use the calculator to 'delete' the last value on the calculator stack but\nleave the #REG:DE# register pair addressing the first byte of the value."
                },
                {
                    "Address": 259,
                    "Comment": "THE 'FOR' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1A90#(parameter table).\n \nThis command routine is entered with the VALUE and the LIMIT of the FOR\nstatement already on the top of the calculator stack.\n \nA Code of the next character in the statement"
                },
                {
                    "Address": 272,
                    "Comment": "There has not been a STEP supplied so the value '1' is to be used."
                },
                {
                    "Address": 278,
                    "Comment": "The three values on the calculator stack are the VALUE (v), the LIMIT (l) and\nthe STEP (s). These values now have to be manipulated."
                },
                {
                    "Address": 285,
                    "Comment": "A FOR control variable is now established and treated as a temporary\ncalculator memory area."
                },
                {
                    "Address": 291,
                    "Comment": "The variable that has been found may be a simple numeric variable using only\nsix locations in which case it will need extending."
                },
                {
                    "Address": 308,
                    "Comment": "The initial values for the LIMIT and the STEP are now added."
                },
                {
                    "Address": 319,
                    "Comment": "The looping line number and statement number are now entered."
                },
                {
                    "Address": 332,
                    "Comment": "The #ADDR:0x1DDA# subroutine is called to test the possibility of a 'pass' and a\nreturn is made if one is possible; otherwise the statement after for FOR -\nNEXT loop has to be identified."
                },
                {
                    "Address": 356,
                    "Comment": "Now a search is made in the program area, from the present point onwards, for\nthe first occurrence of NEXT followed by the correct variable."
                },
                {
                    "Address": 380,
                    "Comment": "\\#SYSVAR(NEWPPC) holds the line number of the line in which the correct NEXT\nwas found. Now the statement number has to be found and stored in\n\\#SYSVAR(NSPPC)."
                },
                {
                    "Address": 388,
                    "Comment": "Report I - FOR without NEXT."
                },
                {
                    "Address": 390,
                    "Comment": "THE 'LOOK-PROG' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1D03#, #ADDR:0x1DEC# and #ADDR:0x27BD#.\n \nThis subroutine is used to find occurrences of either DATA, DEF FN or NEXT.\n \nE Token code to search for\nHL Search start address\nO:F Carry flag reset if the token is found"
                },
                {
                    "Address": 395,
                    "Comment": "Now a loop is entered to examine each further line in the program."
                },
                {
                    "Address": 427,
                    "Comment": "THE 'NEXT' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1A98#(parameter table).\n \nThe 'variable in assignment' has already been determined (see #ADDR:0x1C6C#), and\nit remains to change the VALUE as required."
                },
                {
                    "Address": 441,
                    "Comment": "Next the variable's VALUE (v) and STEP (s) are manipulated by the calculator."
                },
                {
                    "Address": 452,
                    "Comment": "The result of adding the VALUE and the STEP is now tested against the LIMIT\nby calling #ADDR:0x1DDA#."
                },
                {
                    "Address": 456,
                    "Comment": "Otherwise collect the 'looping' line number and statement."
                },
                {
                    "Address": 472,
                    "Comment": "Report 1 - NEXT without FOR."
                },
                {
                    "Address": 474,
                    "Comment": "THE 'NEXT-LOOP' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1D03# and #ADDR:0x1DAB#.\n \nThis subroutine is used to determine whether the LIMIT (l) has been exceeded\nby the present VALUE (v). Note has to be taken of the sign of the STEP (s).\n \nThe subroutine returns the carry flag set if the LIMIT is exceeded."
                },
                {
                    "Address": 489,
                    "Comment": "However if the loop is impossible the carry flag has to be set."
                },
                {
                    "Address": 492,
                    "Comment": "THE 'READ' COMMAND ROUTINE\n \nThe READ command allows for the reading of a DATA list and has an effect\nsimilar to a series of LET statements.\n \nEach assignment within a single READ statement is dealt with in turn. The\nsystem variable \\#SYSVAR(X-PTR) is used as a storage location for the pointer\nto the READ statement whilst \\#SYSVAR(CH-ADD) is used to step along the DATA\nlist."
                },
                {
                    "Address": 493,
                    "Comment": "The address of this entry point is found in the #ADDR:0x1AC9#(parameter table)."
                },
                {
                    "Address": 520,
                    "Comment": "Report E - Out of DATA."
                },
                {
                    "Address": 522,
                    "Comment": "Continue - picking up a value from the DATA list."
                },
                {
                    "Address": 551,
                    "Comment": "THE 'DATA' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1ACC#(parameter table).\n \nDuring syntax checking a DATA statement is checked to ensure that it contains\na series of valid expressions, separated by commas. But in 'run-time' the\nstatement is passed by."
                },
                {
                    "Address": 556,
                    "Comment": "A loop is now entered to deal with each expression in the DATA statement."
                },
                {
                    "Address": 567,
                    "Comment": "The DATA statement has to be passed by in 'run-time'."
                },
                {
                    "Address": 569,
                    "Comment": "This routine continues into #ADDR:0x1E39#.\nTHE 'PASS-BY' SUBROUTINE\n \nUsed by the routine at #ADDR:0x1F60#.\n \nThe routine at #ADDR:0x1E27# continues here.\n \nOn entry the #REG:A# register will hold either the token 'DATA' or the token\n'DEF FN' depending on the type of statement that is being passed by.\n \nA &CE (DEF FN) or &E4 (DATA)"
                },
                {
                    "Address": 578,
                    "Comment": "THE 'RESTORE' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1ACF#(parameter table).\n \nThe operand for a RESTORE command is taken as a line number, zero being used\nif no operand is given."
                },
                {
                    "Address": 581,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1EA1#."
                },
                {
                    "Address": 591,
                    "Comment": "THE 'RANDOMIZE' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1AB5#(parameter table).\n \nThe operand is compressed into the #REG:BC# register pair and transferred to\nthe required system variable. However if the operand is zero the value in\n#ADDR:0x5C78#(FRAMES1 and FRAMES2) is used instead."
                },
                {
                    "Address": 607,
                    "Comment": "THE 'CONTINUE' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1AB8#(parameter table).\n \nThe required line number and statement number within that line are made the\nobject of a jump."
                },
                {
                    "Address": 615,
                    "Comment": "THE 'GO TO' COMMAND ROUTINE\n \nUsed by the routines at #ADDR:0x1EA1# and #ADDR:0x1EED#.\n \nThe address of this routine is found in the #ADDR:0x1A7D#(parameter table).\n \nThe operand of a GO TO ought to be a line number in the range 1-9999 but the\nactual test is against an upper value of 61439."
                },
                {
                    "Address": 627,
                    "Comment": "This entry point is used by the routines at #ADDR:0x1DAB#, #ADDR:0x1E5F# and #ADDR:0x1F23# to\ndetermine the line number of the next line to be handled."
                },
                {
                    "Address": 634,
                    "Comment": "THE 'OUT' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1AF1#(parameter table).\n \nThe two parameters for the '\\#S/OUT/' instruction are fetched from the\ncalculator stack and used as directed."
                },
                {
                    "Address": 640,
                    "Comment": "THE 'POKE' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1AB1#(parameter table).\n \nIn a similar manner to #ADDR:0x1E7A#(OUT), the POKE operation is performed."
                },
                {
                    "Address": 645,
                    "Comment": "THE 'TWO-PARAM' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1E7A# and #ADDR:0x1E80#.\n \nThe topmost parameter on the calculator stack must be compressible into a\nsingle register. It is two's complemented if it is negative. The second\nparameter must be compressible into a register pair."
                },
                {
                    "Address": 660,
                    "Comment": "THE 'FIND INTEGERS' SUBROUTINE\n \nUsed by the routines at #ADDR:0x03F8#, #ADDR:0x171E#, #ADDR:0x2070#, #ADDR:0x21E1#, #ADDR:0x2294#, #ADDR:0x2320#\nand #ADDR:0x3645#.\n \nThe 'last value' on the calculator stack is fetched and compressed into a\nsingle register or a register pair by entering at #ADDR:0x1E94# and #ADDR:0x1E99#\nrespectively."
                },
                {
                    "Address": 665,
                    "Comment": "This entry point is used by the routines at #ADDR:0x03F8#, #ADDR:0x0605#, #ADDR:0x17F9#,\n#ADDR:0x1E42#, #ADDR:0x1E4F#, #ADDR:0x1E67#, #ADDR:0x1E85#, #ADDR:0x1EAC#, #ADDR:0x1F3A#, #ADDR:0x1FFC#, #ADDR:0x2ACC#,\n#ADDR:0x34A5#, #ADDR:0x34AC# and #ADDR:0x34B3#."
                },
                {
                    "Address": 671,
                    "Comment": "This entry point is used by the routines at #ADDR:0x0A6D#, #ADDR:0x1E67#, #ADDR:0x1E85# and\n#ADDR:0x3645#.\n \nReport B - Integer out of range."
                },
                {
                    "Address": 673,
                    "Comment": "THE 'RUN' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1AAB#(parameter table).\n \nThe parameter of the RUN command is passed to \\#SYSVAR(NEWPPC) by calling\n#ADDR:0x1E67#. The operations of 'RESTORE 0' and 'CLEAR 0' are then performed\nbefore a return is made."
                },
                {
                    "Address": 684,
                    "Comment": "THE 'CLEAR' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1ABB#(parameter table).\n \nThis routine allows for the variables area to be cleared, the display area\ncleared and \\#SYSVAR(RAMTOP) moved. In consequence of the last operation the\nmachine stack is rebuilt thereby having the effect of also clearing the GO\nSUB stack."
                },
                {
                    "Address": 687,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1EA1#."
                },
                {
                    "Address": 710,
                    "Comment": "The value in the #REG:BC# register pair which will be used as \\#SYSVAR(RAMTOP)\nis tested to ensure it is neither too low nor too high."
                },
                {
                    "Address": 730,
                    "Comment": "Report M - RAMTOP no good."
                },
                {
                    "Address": 732,
                    "Comment": "Continue with the CLEAR operation."
                },
                {
                    "Address": 749,
                    "Comment": "Note: when the routine is called from #ADDR:0x1EA1# the values of \\#SYSVAR(NEWPPC)\nand \\#SYSVAR(NSPPC) will have been affected and no statements coming after RUN\ncan ever be found before the jump is taken.\nTHE 'GO SUB' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1A86#(parameter table).\n \nThe present value of \\#SYSVAR(PPC) and the incremented value of\n\\#SYSVAR(SUBPPC) are stored on the GO SUB stack."
                },
                {
                    "Address": 773,
                    "Comment": "This routine continues into #ADDR:0x1F05#.\nTHE 'TEST-ROOM' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0808#, #ADDR:0x0FA9#, #ADDR:0x1652#, #ADDR:0x1F1A# and #ADDR:0x33A9#.\n \nThe routine at #ADDR:0x1EED# continues here.\n \nA series of tests is performed to ensure that there is sufficient free memory\navailable for the task being undertaken.\n \nBC Size of the required space\nO:HL \\#SYSVAR(STKEND)+#REG:BC#+80-#REG:SP#"
                },
                {
                    "Address": 789,
                    "Comment": "This entry point is used by the routines at #ADDR:0x2AF4# and #ADDR:0x2C02#.\n \nReport 4 - Out of memory."
                },
                {
                    "Address": 794,
                    "Comment": "THE 'FREE MEMORY' SUBROUTINE\n \nThere is no BASIC command 'FRE' in the Spectrum but there is a subroutine for\nperforming such a task.\n \nAn estimate of the amount of free space can be found at any time by using\n'PRINT 65536-USR 7962'.\n \nO:BC \\#SYSVAR(STKEND)+80-#REG:SP# (free space * -1)"
                },
                {
                    "Address": 803,
                    "Comment": "THE 'RETURN' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1A8D#(parameter table).\n \nThe line number and the statement number that are to be made the object of a\n'return' are fetched from the GO SUB stack."
                },
                {
                    "Address": 822,
                    "Comment": "Report 7 - RETURN without GOSUB."
                },
                {
                    "Address": 826,
                    "Comment": "THE 'PAUSE' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1AC5#(parameter table).\n \nThe period of the pause is determined by counting the number of maskable\ninterrupts as they occur every 1/50th of a second.\n \nA pause is finished either after the appropriate number of interrupts or by\nthe system variable \\#SYSVAR(FLAGS) indicating that a key has been pressed."
                },
                {
                    "Address": 847,
                    "Comment": "The period of the pause has now finished."
                },
                {
                    "Address": 852,
                    "Comment": "THE 'BREAK-KEY' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0EF4# and #ADDR:0x1B76#.\n \nThis subroutine is called in several instances to read the BREAK key. The\ncarry flag is returned reset only if the SHIFT and the BREAK keys are both\nbeing pressed."
                },
                {
                    "Address": 864,
                    "Comment": "THE 'DEF FN' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1AF9#(parameter table).\n \nDuring syntax checking a DEF FN statement is checked to ensure that it has\nthe correct form. Space is also made available for the result of evaluating\nthe function.\n \nBut in 'run-time' a DEF FN statement is passed by.\n \nA Code of the next character in the statement"
                },
                {
                    "Address": 874,
                    "Comment": "First consider the variable of the function."
                },
                {
                    "Address": 902,
                    "Comment": "A loop is now entered to deal with each parameter in turn."
                },
                {
                    "Address": 934,
                    "Comment": "Next the definition of the function is considered."
                },
                {
                    "Address": 963,
                    "Comment": "This routine continues into #ADDR:0x1FC3#.\nTHE 'UNSTACK-Z' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1FF5#, #ADDR:0x1FFC#, #ADDR:0x2070# and #ADDR:0x21E1#.\n \nThe routine at #ADDR:0x1F60# continues here.\n \nThis subroutine is called in several instances in order to 'return early'\nfrom a subroutine when checking syntax. The reason for this is to avoid\nactually printing characters or passing values to/from the calculator stack."
                },
                {
                    "Address": 969,
                    "Comment": "THE 'LPRINT and PRINT' COMMAND ROUTINES\n \nThe address of this routine is found in the #ADDR:0x1AD9#(parameter table).\n \nThe appropriate channel is opened as necessary and the items to be printed\nare considered in turn."
                },
                {
                    "Address": 973,
                    "Comment": "The address of this entry point is found in the #ADDR:0x1A9C#(parameter table)."
                },
                {
                    "Address": 991,
                    "Comment": "THE 'PRINT CONTROLLING' SUBROUTINE\n \nThis subroutine is called by the #ADDR:0x1FC9# and #ADDR:0x2089# command routines."
                },
                {
                    "Address": 997,
                    "Comment": "Now enter a loop to deal with the 'position controllers' and the print items."
                },
                {
                    "Address": 1013,
                    "Comment": "This routine continues into #ADDR:0x1FF5#.\nTHE 'PRINT A CARRIAGE RETURN' SUBROUTINE\n \nUsed by the routine at #ADDR:0x204E#.\n \nThe routine at #ADDR:0x1FDF# continues here."
                },
                {
                    "Address": 1020,
                    "Comment": "THE 'PRINT ITEMS' SUBROUTINE\n \nThis subroutine is called from the #ADDR:0x1FDF# and #ADDR:0x2089# routines.\n \nThe various types of print item are identified and printed."
                }
            ],
            "DataInfo": [
                {
                    "Address": 0,
                    "DataType": 11,
                    "InstructionAddressRef": 469630976
                },
                {
                    "Address": 1,
                    "Comment": "#ADDR:0x1C10#"
                },
                {
                    "Address": 2,
                    "Comment": "#ADDR:0x1C1F#"
                },
                {
                    "Address": 3,
                    "Comment": "#ADDR:0x1C4E#"
                },
                {
                    "Address": 4,
                    "Comment": "#ADDR:0x1C0D#"
                },
                {
                    "Address": 5,
                    "Comment": "#ADDR:0x1C6C#"
                },
                {
                    "Address": 6,
                    "Comment": "#ADDR:0x1C11#"
                },
                {
                    "Address": 7,
                    "Comment": "#ADDR:0x1C82#"
                },
                {
                    "Address": 8,
                    "Comment": "#ADDR:0x1C96#"
                },
                {
                    "Address": 9,
                    "Comment": "#ADDR:0x1C7A#"
                },
                {
                    "Address": 10,
                    "Comment": "#ADDR:0x1CBE#"
                },
                {
                    "Address": 11,
                    "Comment": "#ADDR:0x1C8C#"
                },
                {
                    "Address": 12,
                    "Comment": "#ADDR:0x1CDB#"
                },
                {
                    "Address": 47,
                    "Comment": "}"
                },
                {
                    "Address": 139,
                    "Comment": "}"
                },
                {
                    "Address": 235,
                    "Comment": "#ADDR:0x341B#(stk_zero)"
                },
                {
                    "Address": 236,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 239,
                    "Comment": "}"
                },
                {
                    "Address": 247,
                    "Comment": "#ADDR:0x33A1#"
                },
                {
                    "Address": 248,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 276,
                    "Comment": "#ADDR:0x341B#(stk_one)"
                },
                {
                    "Address": 277,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 279,
                    "Comment": "#ADDR:0x342D#(st_mem_0): v, l, s (mem-0=s)"
                },
                {
                    "Address": 280,
                    "Comment": "#ADDR:0x33A1#: v, l"
                },
                {
                    "Address": 281,
                    "Comment": "#ADDR:0x343C#: l, v"
                },
                {
                    "Address": 282,
                    "Comment": "#ADDR:0x340F#(get_mem_0): l, v, s"
                },
                {
                    "Address": 283,
                    "Comment": "#ADDR:0x343C#: l, s, v"
                },
                {
                    "Address": 284,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 310,
                    "Comment": "#ADDR:0x33A1#: l"
                },
                {
                    "Address": 311,
                    "Comment": "#ADDR:0x33A1#: -"
                },
                {
                    "Address": 312,
                    "Comment": "#ADDR:0x369B#: #REG:DE# still points to 'l'"
                },
                {
                    "Address": 389,
                    "Comment": "}"
                },
                {
                    "Address": 446,
                    "Comment": "#ADDR:0x340F#(get_mem_0): v"
                },
                {
                    "Address": 447,
                    "Comment": "#ADDR:0x340F#(get_mem_2): v, s"
                },
                {
                    "Address": 448,
                    "Comment": "#ADDR:0x3014#: v+s"
                },
                {
                    "Address": 449,
                    "Comment": "#ADDR:0x342D#(st_mem_0): v+s (v is replaced by v+s in mem-0)"
                },
                {
                    "Address": 450,
                    "Comment": "#ADDR:0x33A1#: -"
                },
                {
                    "Address": 451,
                    "Comment": "#ADDR:0x369B#: -"
                },
                {
                    "Address": 473,
                    "Comment": "}"
                },
                {
                    "Address": 475,
                    "Comment": "#ADDR:0x340F#(get_mem_1): l"
                },
                {
                    "Address": 476,
                    "Comment": "#ADDR:0x340F#(get_mem_0): l, v"
                },
                {
                    "Address": 477,
                    "Comment": "#ADDR:0x340F#(get_mem_2): l, v, s"
                },
                {
                    "Address": 478,
                    "Comment": "#ADDR:0x3506#: l, v,( 1/0)"
                },
                {
                    "Address": 479,
                    "Comment": "{#ADDR:0x368F# to #ADDR:0x1DE2#: l, v, (1/0)"
                },
                {
                    "Address": 480,
                    "Comment": "}"
                },
                {
                    "Address": 481,
                    "Comment": "#ADDR:0x343C#: v, l"
                },
                {
                    "Address": 482,
                    "Comment": "#ADDR:0x300F#: v-l or l-v"
                },
                {
                    "Address": 483,
                    "Comment": "#ADDR:0x34F9#: (1/0)"
                },
                {
                    "Address": 484,
                    "Comment": "{#ADDR:0x368F# to #ADDR:0x1DE9#: (1/0)"
                },
                {
                    "Address": 485,
                    "Comment": "}"
                },
                {
                    "Address": 486,
                    "Comment": "#ADDR:0x369B#: -"
                },
                {
                    "Address": 489,
                    "Comment": "#ADDR:0x369B#: -"
                },
                {
                    "Address": 521,
                    "Comment": "}"
                },
                {
                    "Address": 672,
                    "Comment": "}"
                },
                {
                    "Address": 731,
                    "Comment": "}"
                },
                {
                    "Address": 825,
                    "Comment": "}"
                }
            ],
            "LabelInfo": [
                {
                    "Address": 1,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "CMDCLASS"
                },
                {
                    "Address": 13,
                    "LabelType": 2,
                    "Name": "CLASS_03"
                },
                {
                    "Address": 16,
                    "LabelType": 2,
                    "Name": "CLASS_00"
                },
                {
                    "Address": 17,
                    "LabelType": 2,
                    "Name": "CLASS_05"
                },
                {
                    "Address": 31,
                    "LabelType": 2,
                    "Name": "CLASS_01"
                },
                {
                    "Address": 34,
                    "LabelType": 2,
                    "Name": "VAR_A_1"
                },
                {
                    "Address": 46,
                    "LabelType": 2,
                    "Name": "REPORT_2"
                },
                {
                    "Address": 48,
                    "LabelType": 2,
                    "Name": "VAR_A_2"
                },
                {
                    "Address": 70,
                    "LabelType": 2,
                    "Name": "VAR_A_3"
                },
                {
                    "Address": 78,
                    "LabelType": 2,
                    "Name": "CLASS_02"
                },
                {
                    "Address": 86,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "VAL_FET_1"
                },
                {
                    "Address": 89,
                    "LabelType": 2,
                    "Name": "VAL_FET_2"
                },
                {
                    "Address": 108,
                    "LabelType": 2,
                    "Name": "CLASS_04"
                },
                {
                    "Address": 121,
                    "LabelType": 2,
                    "Name": "NEXT_2NUM"
                },
                {
                    "Address": 122,
                    "LabelType": 2,
                    "Name": "CLASS_08"
                },
                {
                    "Address": 130,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CLASS_06"
                },
                {
                    "Address": 138,
                    "LabelType": 2,
                    "Name": "REPORT_C"
                },
                {
                    "Address": 140,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CLASS_0A"
                },
                {
                    "Address": 150,
                    "LabelType": 2,
                    "Name": "CLASS_07"
                },
                {
                    "Address": 190,
                    "LabelType": 2,
                    "Name": "CLASS_09"
                },
                {
                    "Address": 214,
                    "LabelType": 2,
                    "Name": "CL_09_1"
                },
                {
                    "Address": 219,
                    "LabelType": 2,
                    "Name": "CLASS_0B"
                },
                {
                    "Address": 222,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "FETCH_NUM"
                },
                {
                    "Address": 230,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "USE_ZERO"
                },
                {
                    "Address": 238,
                    "LabelType": 2,
                    "Name": "STOP"
                },
                {
                    "Address": 240,
                    "LabelType": 2,
                    "Name": "IF_CMD"
                },
                {
                    "Address": 256,
                    "LabelType": 2,
                    "Name": "IF_1"
                },
                {
                    "Address": 259,
                    "LabelType": 2,
                    "Name": "FOR"
                },
                {
                    "Address": 272,
                    "LabelType": 2,
                    "Name": "F_USE_1"
                },
                {
                    "Address": 278,
                    "LabelType": 2,
                    "Name": "F_REORDER"
                },
                {
                    "Address": 308,
                    "LabelType": 2,
                    "Name": "F_L_S"
                },
                {
                    "Address": 356,
                    "LabelType": 2,
                    "Name": "F_LOOP"
                },
                {
                    "Address": 380,
                    "LabelType": 2,
                    "Name": "F_FOUND"
                },
                {
                    "Address": 388,
                    "LabelType": 2,
                    "Name": "REPORT_I"
                },
                {
                    "Address": 390,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "LOOK_PROG"
                },
                {
                    "Address": 395,
                    "LabelType": 2,
                    "Name": "LOOK_P_1"
                },
                {
                    "Address": 419,
                    "LabelType": 2,
                    "Name": "LOOK_P_2"
                },
                {
                    "Address": 427,
                    "LabelType": 2,
                    "Name": "NEXT"
                },
                {
                    "Address": 472,
                    "LabelType": 2,
                    "Name": "REPORT_1"
                },
                {
                    "Address": 474,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "NEXT_LOOP"
                },
                {
                    "Address": 482,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "NEXT_1"
                },
                {
                    "Address": 489,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "NEXT_2"
                },
                {
                    "Address": 492,
                    "LabelType": 2,
                    "Name": "READ_3"
                },
                {
                    "Address": 493,
                    "LabelType": 2,
                    "Name": "READ"
                },
                {
                    "Address": 522,
                    "LabelType": 2,
                    "Name": "READ_1"
                },
                {
                    "Address": 542,
                    "LabelType": 2,
                    "Name": "READ_2"
                },
                {
                    "Address": 551,
                    "LabelType": 2,
                    "Name": "DATA"
                },
                {
                    "Address": 556,
                    "LabelType": 2,
                    "Name": "DATA_1"
                },
                {
                    "Address": 567,
                    "LabelType": 2,
                    "Name": "DATA_2"
                },
                {
                    "Address": 569,
                    "LabelType": 2,
                    "Name": "PASS_BY"
                },
                {
                    "Address": 578,
                    "LabelType": 2,
                    "Name": "RESTORE"
                },
                {
                    "Address": 581,
                    "LabelType": 2,
                    "Name": "REST_RUN"
                },
                {
                    "Address": 591,
                    "LabelType": 2,
                    "Name": "RANDOMIZE"
                },
                {
                    "Address": 602,
                    "LabelType": 2,
                    "Name": "RAND_1"
                },
                {
                    "Address": 607,
                    "LabelType": 2,
                    "Name": "CONTINUE"
                },
                {
                    "Address": 615,
                    "LabelType": 2,
                    "Name": "GO_TO"
                },
                {
                    "Address": 627,
                    "LabelType": 2,
                    "Name": "GO_TO_2"
                },
                {
                    "Address": 634,
                    "LabelType": 2,
                    "Name": "OUT_CMD"
                },
                {
                    "Address": 640,
                    "LabelType": 2,
                    "Name": "POKE"
                },
                {
                    "Address": 645,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "TWO_PARAM"
                },
                {
                    "Address": 654,
                    "LabelType": 2,
                    "Name": "TWO_P_1"
                },
                {
                    "Address": 660,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "FIND_INT1"
                },
                {
                    "Address": 665,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "FIND_INT2"
                },
                {
                    "Address": 668,
                    "LabelType": 2,
                    "Name": "FIND_I_1"
                },
                {
                    "Address": 671,
                    "LabelType": 2,
                    "Name": "REPORT_B_2"
                },
                {
                    "Address": 673,
                    "LabelType": 2,
                    "Name": "RUN"
                },
                {
                    "Address": 684,
                    "LabelType": 2,
                    "Name": "CLEAR"
                },
                {
                    "Address": 687,
                    "LabelType": 2,
                    "Name": "CLEAR_RUN"
                },
                {
                    "Address": 695,
                    "LabelType": 2,
                    "Name": "CLEAR_1"
                },
                {
                    "Address": 730,
                    "LabelType": 2,
                    "Name": "REPORT_M"
                },
                {
                    "Address": 732,
                    "LabelType": 2,
                    "Name": "CLEAR_2"
                },
                {
                    "Address": 749,
                    "LabelType": 2,
                    "Name": "GO_SUB"
                },
                {
                    "Address": 773,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "TEST_ROOM"
                },
                {
                    "Address": 789,
                    "LabelType": 2,
                    "Name": "REPORT_4"
                },
                {
                    "Address": 794,
                    "LabelType": 2,
                    "Name": "FREE_MEM"
                },
                {
                    "Address": 803,
                    "LabelType": 2,
                    "Name": "RETURN"
                },
                {
                    "Address": 822,
                    "LabelType": 2,
                    "Name": "REPORT_7"
                },
                {
                    "Address": 826,
                    "LabelType": 2,
                    "Name": "PAUSE"
                },
                {
                    "Address": 829,
                    "LabelType": 2,
                    "Name": "PAUSE_1"
                },
                {
                    "Address": 841,
                    "LabelType": 2,
                    "Name": "PAUSE_2"
                },
                {
                    "Address": 847,
                    "LabelType": 2,
                    "Name": "PAUSE_END"
                },
                {
                    "Address": 852,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "BREAK_KEY"
                },
                {
                    "Address": 864,
                    "LabelType": 2,
                    "Name": "DEF_FN"
                },
                {
                    "Address": 874,
                    "LabelType": 2,
                    "Name": "DEF_FN_1"
                },
                {
                    "Address": 893,
                    "LabelType": 2,
                    "Name": "DEF_FN_2"
                },
                {
                    "Address": 902,
                    "LabelType": 2,
                    "Name": "DEF_FN_3"
                },
                {
                    "Address": 905,
                    "LabelType": 2,
                    "Name": "DEF_FN_4"
                },
                {
                    "Address": 916,
                    "LabelType": 2,
                    "Name": "DEF_FN_5"
                },
                {
                    "Address": 934,
                    "LabelType": 2,
                    "Name": "DEF_FN_6"
                },
                {
                    "Address": 957,
                    "LabelType": 2,
                    "Name": "DEF_FN_7"
                },
                {
                    "Address": 963,
                    "LabelType": 2,
                    "Name": "UNSTACK_Z"
                },
                {
                    "Address": 969,
                    "LabelType": 2,
                    "Name": "LPRINT"
                },
                {
                    "Address": 973,
                    "LabelType": 2,
                    "Name": "PRINT"
                },
                {
                    "Address": 975,
                    "LabelType": 2,
                    "Name": "PRINT_1"
                },
                {
                    "Address": 991,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "PRINT_2"
                },
                {
                    "Address": 997,
                    "LabelType": 2,
                    "Name": "PRINT_3"
                },
                {
                    "Address": 1010,
                    "LabelType": 2,
                    "Name": "PRINT_4"
                },
                {
                    "Address": 1013,
                    "LabelType": 2,
                    "Name": "PRINT_CR"
                },
                {
                    "Address": 1020,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "PR_ITEM_1"
                }
            ],
            "PageId": 7
        },
        {
            "CodeInfo": [
                {
                    "Address": 1,
                    "ByteSize": 3,
                    "Comment": "The two parameters are transferred to the calculator\nstack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 4,
                    "ByteSize": 3,
                    "Comment": "Return now if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 7,
                    "ByteSize": 3,
                    "Comment": "The parameters are compressed into the #REG:BC# register\npair.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 10,
                    "ByteSize": 2,
                    "Comment": "{The #REG:A# register is loaded with the AT control"
                },
                {
                    "Address": 12,
                    "ByteSize": 2,
                    "Comment": "character before the jump is taken.}",
                    "OperandType": 2
                },
                {
                    "Address": 14,
                    "ByteSize": 2,
                    "Comment": "{Jump forward unless it is a 'TAB'."
                },
                {
                    "Address": 16,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 18,
                    "ByteSize": 1,
                    "Comment": "Get the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 19,
                    "ByteSize": 3,
                    "Comment": "Transfer one parameter to the calculator stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 22,
                    "ByteSize": 3,
                    "Comment": "Return now if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 25,
                    "ByteSize": 3,
                    "Comment": "The value is compressed into the #REG:BC# register pair.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 28,
                    "ByteSize": 2,
                    "Comment": "The #REG:A# register is loaded with the TAB control\ncharacter."
                },
                {
                    "Address": 30,
                    "ByteSize": 1,
                    "Comment": "Print the control character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 31,
                    "ByteSize": 1,
                    "Comment": "{Follow it with the first value."
                },
                {
                    "Address": 32,
                    "ByteSize": 1,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 33,
                    "ByteSize": 1,
                    "Comment": "{Finally print the second value, then return."
                },
                {
                    "Address": 34,
                    "ByteSize": 1,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 35,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 36,
                    "ByteSize": 3,
                    "Comment": "{Return with carry reset if colour items were found.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 39,
                    "ByteSize": 1,
                    "Comment": "Continue if none were found.}"
                },
                {
                    "Address": 40,
                    "ByteSize": 3,
                    "Comment": "Next consider if the stream is to be changed.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 43,
                    "ByteSize": 1,
                    "Comment": "Continue unless it was altered."
                },
                {
                    "Address": 44,
                    "ByteSize": 3,
                    "Comment": "{Evaluate the expression but return now if checking",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 47,
                    "ByteSize": 3,
                    "Comment": "syntax.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 50,
                    "ByteSize": 4,
                    "Comment": "Test for the nature of the expression (bit 6 of\n\\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 54,
                    "ByteSize": 3,
                    "Comment": "{If it is a string then fetch the necessary parameters;",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 57,
                    "ByteSize": 3,
                    "Comment": "but if it is numeric then exit via #ADDR:0x2DE3#.}",
                    "OperandType": 2
                },
                {
                    "Address": 60,
                    "ByteSize": 1,
                    "Comment": "{Return now if there are no characters remaining in the"
                },
                {
                    "Address": 61,
                    "ByteSize": 1,
                    "Comment": "string; otherwise decrease the counter."
                },
                {
                    "Address": 62,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 63,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 64,
                    "ByteSize": 1,
                    "Comment": "{Fetch the code and increment the pointer."
                },
                {
                    "Address": 65,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 66,
                    "ByteSize": 1,
                    "Comment": "{The code is printed and a jump taken to consider any",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 67,
                    "ByteSize": 2,
                    "Comment": "further characters.}",
                    "OperandType": 2
                },
                {
                    "Address": 69,
                    "ByteSize": 2,
                    "Comment": "{Return now if the character is a ')'."
                },
                {
                    "Address": 71,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 72,
                    "ByteSize": 2,
                    "Comment": "{Return now if the character is a 'carriage return'."
                },
                {
                    "Address": 74,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 75,
                    "ByteSize": 2,
                    "Comment": "{Make a final test against ':' before returning."
                },
                {
                    "Address": 77,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 78,
                    "ByteSize": 1,
                    "Comment": "Get the present character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 79,
                    "ByteSize": 2,
                    "Comment": "        ; {Jump forward if it is a ';'."
                },
                {
                    "Address": 81,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 83,
                    "ByteSize": 2,
                    "Comment": "{Also jump forward with a character other than a ',',"
                },
                {
                    "Address": 85,
                    "ByteSize": 2,
                    "Comment": "but do not actually print the character if checking",
                    "OperandType": 2
                },
                {
                    "Address": 87,
                    "ByteSize": 3,
                    "Comment": "syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 90,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 92,
                    "ByteSize": 2,
                    "Comment": "{Load the #REG:A# register with the 'comma' control code"
                },
                {
                    "Address": 94,
                    "ByteSize": 1,
                    "Comment": "and print it, then jump forward.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 95,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 97,
                    "ByteSize": 2,
                    "Comment": "Is it a '''?"
                },
                {
                    "Address": 99,
                    "ByteSize": 1,
                    "Comment": "Return now (with the zero flag reset) if not any of the\nposition controllers."
                },
                {
                    "Address": 100,
                    "ByteSize": 3,
                    "Comment": "Print 'carriage return' unless checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 103,
                    "ByteSize": 1,
                    "Comment": "Fetch the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 104,
                    "ByteSize": 3,
                    "Comment": "{If not at the end of a print statement then jump",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 107,
                    "ByteSize": 2,
                    "Comment": "forward.}",
                    "OperandType": 2
                },
                {
                    "Address": 109,
                    "ByteSize": 1,
                    "Comment": "Otherwise drop the return address from the stack."
                },
                {
                    "Address": 110,
                    "ByteSize": 1,
                    "Comment": "{Set the zero flag and return."
                },
                {
                    "Address": 111,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 112,
                    "ByteSize": 2,
                    "Comment": "{Unless the present character is a '\\#' return with the"
                },
                {
                    "Address": 114,
                    "ByteSize": 1,
                    "Comment": "carry flag set."
                },
                {
                    "Address": 115,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 116,
                    "ByteSize": 1,
                    "Comment": "Advance \\#SYSVAR(CH-ADD).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 117,
                    "ByteSize": 3,
                    "Comment": "Pass the parameter to the calculator stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 120,
                    "ByteSize": 1,
                    "Comment": "Clear the carry flag."
                },
                {
                    "Address": 121,
                    "ByteSize": 3,
                    "Comment": "Return now if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 124,
                    "ByteSize": 3,
                    "Comment": "The value is passed to the #REG:A# register.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 127,
                    "ByteSize": 2,
                    "Comment": "{Give report O if the value is over &0F."
                },
                {
                    "Address": 129,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 132,
                    "ByteSize": 3,
                    "Comment": "Use the channel for the stream in question.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 135,
                    "ByteSize": 1,
                    "Comment": "{Clear the carry flag and return."
                },
                {
                    "Address": 136,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 137,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if syntax is being checked.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 140,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 142,
                    "ByteSize": 2,
                    "Comment": "{Open channel 'K'."
                },
                {
                    "Address": 144,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 147,
                    "ByteSize": 3,
                    "Comment": "The lower part of the display is cleared.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 150,
                    "ByteSize": 4,
                    "Comment": "Signal that the lower screen is being handled (set bit\n0 of \\#SYSVAR(TV-FLAG) and reset all other bits)."
                },
                {
                    "Address": 154,
                    "ByteSize": 3,
                    "Comment": "Call the subroutine to deal with the INPUT items.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 157,
                    "ByteSize": 3,
                    "Comment": "Move on to the next statement if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 160,
                    "ByteSize": 4,
                    "Comment": "Fetch the current print position (\\#SYSVAR(S-POSN)).",
                    "OperandType": 1
                },
                {
                    "Address": 164,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if the current position is above the",
                    "OperandType": 1
                },
                {
                    "Address": 167,
                    "ByteSize": 1,
                    "Comment": "lower screen (see \\#SYSVAR(DF-SZ))."
                },
                {
                    "Address": 168,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 170,
                    "ByteSize": 2,
                    "Comment": "{Otherwise set the print position to the top of the"
                },
                {
                    "Address": 172,
                    "ByteSize": 1,
                    "Comment": "lower screen.}"
                },
                {
                    "Address": 173,
                    "ByteSize": 4,
                    "Comment": "Reset \\#SYSVAR(S-POSN).",
                    "OperandType": 1
                },
                {
                    "Address": 177,
                    "ByteSize": 2,
                    "Comment": "{Now set the scroll counter (\\#SYSVAR(SCR-CT))."
                },
                {
                    "Address": 179,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 180,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 183,
                    "ByteSize": 4,
                    "Comment": "Signal 'main screen' (reset bit 0 of\n\\#SYSVAR(TV-FLAG))."
                },
                {
                    "Address": 187,
                    "ByteSize": 3,
                    "Comment": "{Set the system variables and exit via #ADDR:0x0D6E#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 190,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 193,
                    "ByteSize": 3,
                    "Comment": "{Consider first any position control characters.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 196,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 198,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if the present character is not a '('."
                },
                {
                    "Address": 200,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 202,
                    "ByteSize": 1,
                    "Comment": "Fetch the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 203,
                    "ByteSize": 3,
                    "Comment": "Now call the PRINT command routine to handle the items\ninside the brackets.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 206,
                    "ByteSize": 1,
                    "Comment": "Fetch the present character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 207,
                    "ByteSize": 2,
                    "Comment": "{Give report C unless the character is a ')'."
                },
                {
                    "Address": 209,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 212,
                    "ByteSize": 1,
                    "Comment": "{Fetch the next character and jump forward to see if",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 213,
                    "ByteSize": 3,
                    "Comment": "there are any further INPUT items.}",
                    "OperandType": 2
                },
                {
                    "Address": 216,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if it is not 'LINE'."
                },
                {
                    "Address": 218,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 220,
                    "ByteSize": 1,
                    "Comment": "Advance \\#SYSVAR(CH-ADD).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 221,
                    "ByteSize": 3,
                    "Comment": "Determine the destination address for the variable.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 224,
                    "ByteSize": 4,
                    "Comment": "Signal 'using INPUT LINE' (set bit 7 of\n\\#SYSVAR(FLAGX))."
                },
                {
                    "Address": 228,
                    "ByteSize": 4,
                    "Comment": "{Give report C unless using a string variable (bit 6"
                },
                {
                    "Address": 232,
                    "ByteSize": 3,
                    "Comment": "of \\#SYSVAR(FLAGS) reset).}",
                    "OperandType": 2
                },
                {
                    "Address": 235,
                    "ByteSize": 2,
                    "Comment": "Jump forward to issue the prompt message.",
                    "OperandType": 2
                },
                {
                    "Address": 237,
                    "ByteSize": 3,
                    "Comment": "{Jump to consider going round the loop again if the",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 240,
                    "ByteSize": 3,
                    "Comment": "present character is not a letter.}",
                    "OperandType": 2
                },
                {
                    "Address": 243,
                    "ByteSize": 3,
                    "Comment": "Determine the destination address for the variable.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 246,
                    "ByteSize": 4,
                    "Comment": "Signal 'not INPUT LINE' (reset bit 7 of\n\\#SYSVAR(FLAGX))."
                },
                {
                    "Address": 250,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if only checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 253,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 256,
                    "ByteSize": 3,
                    "Comment": "The work space is set to null.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 259,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(FLAGX)."
                },
                {
                    "Address": 262,
                    "ByteSize": 2,
                    "Comment": "Signal 'string result'."
                },
                {
                    "Address": 264,
                    "ByteSize": 2,
                    "Comment": "Signal 'INPUT mode'."
                },
                {
                    "Address": 266,
                    "ByteSize": 3,
                    "Comment": "Allow the prompt message only a single location."
                },
                {
                    "Address": 269,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if using 'LINE'."
                },
                {
                    "Address": 271,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 273,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if awaiting a numeric entry (bit 6 of",
                    "OperandType": 1
                },
                {
                    "Address": 276,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(FLAGS) set)."
                },
                {
                    "Address": 278,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 280,
                    "ByteSize": 2,
                    "Comment": "A string entry will need three locations."
                },
                {
                    "Address": 282,
                    "ByteSize": 1,
                    "Comment": "{Bit 6 of \\#SYSVAR(FLAGX) will become set for a numeric"
                },
                {
                    "Address": 283,
                    "ByteSize": 1,
                    "Comment": "entry.}"
                },
                {
                    "Address": 284,
                    "ByteSize": 1,
                    "Comment": "The required number of locations is made available.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 285,
                    "ByteSize": 2,
                    "Comment": "A 'carriage return' goes into the last location."
                },
                {
                    "Address": 287,
                    "ByteSize": 1,
                    "Comment": "{Test bit 6 of the #REG:C# register and jump forward if"
                },
                {
                    "Address": 288,
                    "ByteSize": 1,
                    "Comment": "only one location was required."
                },
                {
                    "Address": 289,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 290,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 292,
                    "ByteSize": 2,
                    "Comment": "{A 'double quotes' character goes into the first and"
                },
                {
                    "Address": 294,
                    "ByteSize": 1,
                    "Comment": "second locations."
                },
                {
                    "Address": 295,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 296,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 297,
                    "ByteSize": 3,
                    "Comment": "The position of the cursor (\\#SYSVAR(K-CUR)) can now be\nsaved.",
                    "OperandType": 1
                },
                {
                    "Address": 300,
                    "ByteSize": 4,
                    "Comment": "{Jump forward with 'INPUT LINE' (bit 7 of"
                },
                {
                    "Address": 304,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(FLAGX) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 306,
                    "ByteSize": 3,
                    "Comment": "{Save the current values of \\#SYSVAR(CH-ADD) and",
                    "OperandType": 1
                },
                {
                    "Address": 309,
                    "ByteSize": 1,
                    "Comment": "\\#SYSVAR(ERR-SP) on the machine stack."
                },
                {
                    "Address": 310,
                    "ByteSize": 3,
                    "Comment": " ",
                    "OperandType": 1
                },
                {
                    "Address": 313,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 314,
                    "ByteSize": 3,
                    "Comment": "{This will be the 'return point' in case of errors."
                },
                {
                    "Address": 317,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 318,
                    "ByteSize": 4,
                    "Comment": "{Only change the error stack pointer (\\#SYSVAR(ERR-SP))"
                },
                {
                    "Address": 322,
                    "ByteSize": 2,
                    "Comment": "if using channel 'K' (bit 4 of #ADDR:0x5C6A#(FLAGS2) set).",
                    "OperandType": 2
                },
                {
                    "Address": 324,
                    "ByteSize": 4,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 328,
                    "ByteSize": 3,
                    "Comment": "{Set #REG:HL# to the start of the INPUT line",
                    "OperandType": 1
                },
                {
                    "Address": 331,
                    "ByteSize": 3,
                    "Comment": "(\\#SYSVAR(WORKSP)) and remove any floating-point forms.\n(There will not be any except perhaps after an error.)\n}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 334,
                    "ByteSize": 4,
                    "Comment": "Signal 'no error yet' by resetting \\#SYSVAR(ERR-NR)."
                },
                {
                    "Address": 338,
                    "ByteSize": 3,
                    "Comment": "{Now get the INPUT and with the syntax/run flag (bit 7",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 341,
                    "ByteSize": 4,
                    "Comment": "of \\#SYSVAR(FLAGS)) indicating syntax, check the INPUT"
                },
                {
                    "Address": 345,
                    "ByteSize": 3,
                    "Comment": "for errors; jump if in order; return to #ADDR:0x213A# if",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 348,
                    "ByteSize": 2,
                    "Comment": "not.}",
                    "OperandType": 2
                },
                {
                    "Address": 350,
                    "ByteSize": 3,
                    "Comment": "Get a 'LINE'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 353,
                    "ByteSize": 4,
                    "Comment": "The cursor address (\\#SYSVAR(K-CUR)) is reset."
                },
                {
                    "Address": 357,
                    "ByteSize": 3,
                    "Comment": "{The jump is taken if using other than channel 'K'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 360,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 362,
                    "ByteSize": 3,
                    "Comment": "{The input-line is copied to the display and the",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 365,
                    "ByteSize": 4,
                    "Comment": "position in \\#SYSVAR(ECHO-E) made the current position",
                    "OperandType": 1
                },
                {
                    "Address": 369,
                    "ByteSize": 3,
                    "Comment": "in the lower screen.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 372,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(FLAGX)."
                },
                {
                    "Address": 375,
                    "ByteSize": 2,
                    "Comment": "Signal 'edit mode'."
                },
                {
                    "Address": 377,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if handling an INPUT LINE."
                },
                {
                    "Address": 379,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 381,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 383,
                    "ByteSize": 1,
                    "Comment": "Drop the address IN-VAR-1."
                },
                {
                    "Address": 384,
                    "ByteSize": 1,
                    "Comment": "{Reset the \\#SYSVAR(ERR-SP) to its original address."
                },
                {
                    "Address": 385,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 388,
                    "ByteSize": 1,
                    "Comment": "{Save the original \\#SYSVAR(CH-ADD) address in"
                },
                {
                    "Address": 389,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(X-PTR).}",
                    "OperandType": 1
                },
                {
                    "Address": 392,
                    "ByteSize": 4,
                    "Comment": "{Now with the syntax/run flag (bit 7 of"
                },
                {
                    "Address": 396,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(FLAGS)) indicating 'run' make the assignment.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 399,
                    "ByteSize": 3,
                    "Comment": "{Restore the original address to \\#SYSVAR(CH-ADD) and",
                    "OperandType": 1
                },
                {
                    "Address": 402,
                    "ByteSize": 4,
                    "Comment": "clear \\#SYSVAR(X-PTR)."
                },
                {
                    "Address": 406,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 409,
                    "ByteSize": 2,
                    "Comment": "Jump forward to see if there are further INPUT items.",
                    "OperandType": 2
                },
                {
                    "Address": 411,
                    "ByteSize": 3,
                    "Comment": "{The length of the 'LINE' in the work space is found",
                    "OperandType": 1
                },
                {
                    "Address": 414,
                    "ByteSize": 4,
                    "Comment": "(\\#SYSVAR(STKBOT)-\\#SYSVAR(WORKSP)-1).",
                    "OperandType": 1
                },
                {
                    "Address": 418,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 419,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 421,
                    "ByteSize": 1,
                    "Comment": "{#REG:DE# points to the start and #REG:BC# holds the"
                },
                {
                    "Address": 422,
                    "ByteSize": 1,
                    "Comment": "length.}"
                },
                {
                    "Address": 423,
                    "ByteSize": 3,
                    "Comment": "{These parameters are stacked and the actual",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 426,
                    "ByteSize": 3,
                    "Comment": "assignment made.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 429,
                    "ByteSize": 2,
                    "Comment": "Also jump forward to consider further items.",
                    "OperandType": 2
                },
                {
                    "Address": 431,
                    "ByteSize": 3,
                    "Comment": "Handle any print items.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 434,
                    "ByteSize": 3,
                    "Comment": "Handle any position controllers.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 437,
                    "ByteSize": 3,
                    "Comment": "{Go around the loop again if there are further items;",
                    "OperandType": 2
                },
                {
                    "Address": 440,
                    "ByteSize": 1,
                    "Comment": "otherwise return.}"
                },
                {
                    "Address": 441,
                    "ByteSize": 3,
                    "Comment": "{Set \\#SYSVAR(CH-ADD) to point to the first location of",
                    "OperandType": 1
                },
                {
                    "Address": 444,
                    "ByteSize": 3,
                    "Comment": "the work space (\\#SYSVAR(WORKSP)) and fetch the",
                    "OperandType": 1
                },
                {
                    "Address": 447,
                    "ByteSize": 1,
                    "Comment": "character.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 448,
                    "ByteSize": 2,
                    "Comment": "Is it a 'STOP'?"
                },
                {
                    "Address": 450,
                    "ByteSize": 2,
                    "Comment": "Jump if it is.",
                    "OperandType": 2
                },
                {
                    "Address": 452,
                    "ByteSize": 3,
                    "Comment": "{Otherwise pick up \\#SYSVAR(FLAGX) and make the",
                    "OperandType": 1
                },
                {
                    "Address": 455,
                    "ByteSize": 3,
                    "Comment": "assignment of the 'value' to the variable.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 458,
                    "ByteSize": 1,
                    "Comment": "{Get the present character and check it is a 'carriage",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 459,
                    "ByteSize": 2,
                    "Comment": "return'.}"
                },
                {
                    "Address": 461,
                    "ByteSize": 1,
                    "Comment": "Return if it is."
                },
                {
                    "Address": 462,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 464,
                    "ByteSize": 3,
                    "Comment": "{But do not give the error report on the syntax-pass.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 467,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 468,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 470,
                    "ByteSize": 3,
                    "Comment": "{The base address of the channel information for the",
                    "OperandType": 1
                },
                {
                    "Address": 473,
                    "ByteSize": 1,
                    "Comment": "current channel (\\#SYSVAR(CURCHL)) is fetched and the"
                },
                {
                    "Address": 474,
                    "ByteSize": 1,
                    "Comment": "channel code compared to the character 'K'."
                },
                {
                    "Address": 475,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 476,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 477,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 478,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 480,
                    "ByteSize": 1,
                    "Comment": "Return afterwards."
                },
                {
                    "Address": 481,
                    "ByteSize": 1,
                    "Comment": "Consider the next character in the BASIC statement.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 482,
                    "ByteSize": 3,
                    "Comment": "{Jump forward to see if the present code represents an",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 485,
                    "ByteSize": 1,
                    "Comment": "embedded 'temporary' colour item. Return carry set if\nnot a colour item.}"
                },
                {
                    "Address": 486,
                    "ByteSize": 1,
                    "Comment": "Fetch the present character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 487,
                    "ByteSize": 2,
                    "Comment": "{Jump back if it is either a ',' or a ';'; otherwise"
                },
                {
                    "Address": 489,
                    "ByteSize": 2,
                    "Comment": "there has been an error.",
                    "OperandType": 2
                },
                {
                    "Address": 491,
                    "ByteSize": 2,
                    "Comment": "        ;"
                },
                {
                    "Address": 493,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 495,
                    "ByteSize": 3,
                    "Comment": "Exit via 'report C'.",
                    "OperandType": 2
                },
                {
                    "Address": 498,
                    "ByteSize": 2,
                    "Comment": "{Return with the carry flag set if the code is not in"
                },
                {
                    "Address": 500,
                    "ByteSize": 1,
                    "Comment": "the range &D9 to &DE (INK to OVER)."
                },
                {
                    "Address": 501,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 503,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 504,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 505,
                    "ByteSize": 1,
                    "Comment": "{The colour item code is preserved whilst"
                },
                {
                    "Address": 506,
                    "ByteSize": 1,
                    "Comment": "\\#SYSVAR(CH-ADD) is advanced to address the parameter",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 507,
                    "ByteSize": 1,
                    "Comment": "that follows it.}"
                },
                {
                    "Address": 508,
                    "ByteSize": 2,
                    "Comment": "The token range (&D9 to &DE) is reduced to the control\ncharacter range (&10 to &15)."
                },
                {
                    "Address": 510,
                    "ByteSize": 1,
                    "Comment": "{The control character code is preserved whilst the"
                },
                {
                    "Address": 511,
                    "ByteSize": 3,
                    "Comment": "parameter is moved to the calculator stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 514,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 515,
                    "ByteSize": 1,
                    "Comment": "{A return is made at this point if syntax is being"
                },
                {
                    "Address": 516,
                    "ByteSize": 3,
                    "Comment": "checked.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 519,
                    "ByteSize": 1,
                    "Comment": "{The control character code is preserved whilst the"
                },
                {
                    "Address": 520,
                    "ByteSize": 3,
                    "Comment": "parameter is moved to the #REG:D# register.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 523,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 524,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 525,
                    "ByteSize": 1,
                    "Comment": "The control character is sent out.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 526,
                    "ByteSize": 1,
                    "Comment": "{Then the parameter is fetched and sent out before"
                },
                {
                    "Address": 527,
                    "ByteSize": 1,
                    "Comment": "returning.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 528,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 529,
                    "ByteSize": 2,
                    "Comment": "{Reduce the range and jump forward with INK and PAPER."
                },
                {
                    "Address": 531,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 533,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 535,
                    "ByteSize": 2,
                    "Comment": "{Reduce the range once again and jump forward with FLASH"
                },
                {
                    "Address": 537,
                    "ByteSize": 2,
                    "Comment": "and BRIGHT."
                },
                {
                    "Address": 539,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 541,
                    "ByteSize": 2,
                    "Comment": "Prepare to jump with OVER."
                },
                {
                    "Address": 543,
                    "ByteSize": 1,
                    "Comment": "Fetch the parameter."
                },
                {
                    "Address": 544,
                    "ByteSize": 2,
                    "Comment": "Prepare the mask for OVER."
                },
                {
                    "Address": 546,
                    "ByteSize": 2,
                    "Comment": "Now jump.",
                    "OperandType": 2
                },
                {
                    "Address": 548,
                    "ByteSize": 1,
                    "Comment": "{Bit 2 of the #REG:A# register is to be reset for INVERSE"
                },
                {
                    "Address": 549,
                    "ByteSize": 1,
                    "Comment": "0 and set for INVERSE 1; the mask is to have bit 2 set."
                },
                {
                    "Address": 550,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 552,
                    "ByteSize": 1,
                    "Comment": "Save the #REG:A# register whilst the range is tested."
                },
                {
                    "Address": 553,
                    "ByteSize": 1,
                    "Comment": "{The correct range for INVERSE and OVER is only '0-1'."
                },
                {
                    "Address": 554,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 556,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 558,
                    "ByteSize": 1,
                    "Comment": "Restore the #REG:A# register."
                },
                {
                    "Address": 559,
                    "ByteSize": 3,
                    "Comment": "It is \\#SYSVAR(P-FLAG) that is to be changed."
                },
                {
                    "Address": 562,
                    "ByteSize": 2,
                    "Comment": "Exit via #ADDR:0x226C# and alter \\#SYSVAR(P-FLAG) using #REG:B#\nas a mask, i.e. bit 0 for OVER and bit 2 for INVERSE.",
                    "OperandType": 2
                },
                {
                    "Address": 564,
                    "ByteSize": 1,
                    "Comment": "Fetch the parameter."
                },
                {
                    "Address": 565,
                    "ByteSize": 2,
                    "Comment": "Prepare the mask for INK."
                },
                {
                    "Address": 567,
                    "ByteSize": 2,
                    "Comment": "Jump forward with INK.",
                    "OperandType": 2
                },
                {
                    "Address": 569,
                    "ByteSize": 1,
                    "Comment": "{Multiply the parameter for PAPER by eight."
                },
                {
                    "Address": 570,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 571,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 572,
                    "ByteSize": 2,
                    "Comment": "Prepare the mask for PAPER."
                },
                {
                    "Address": 574,
                    "ByteSize": 1,
                    "Comment": "Save the parameter in the #REG:C# register whilst the\nrange of the parameter is tested."
                },
                {
                    "Address": 575,
                    "ByteSize": 1,
                    "Comment": "Fetch the original value."
                },
                {
                    "Address": 576,
                    "ByteSize": 2,
                    "Comment": "{Only allow PAPER/INK a range of '0' to '9'."
                },
                {
                    "Address": 578,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 580,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 582,
                    "ByteSize": 3,
                    "Comment": "Prepare to alter \\#SYSVAR(ATTR-T), \\#SYSVAR(MASK-T) and\n\\#SYSVAR(P-FLAG)."
                },
                {
                    "Address": 585,
                    "ByteSize": 2,
                    "Comment": "{Jump forward with PAPER/INK '0' to '7'."
                },
                {
                    "Address": 587,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 589,
                    "ByteSize": 1,
                    "Comment": "{Fetch the current value of \\#SYSVAR(ATTR-T) and use it"
                },
                {
                    "Address": 590,
                    "ByteSize": 2,
                    "Comment": "unchanged, by jumping forward, with PAPER/INK '8'.}",
                    "OperandType": 2
                },
                {
                    "Address": 592,
                    "ByteSize": 1,
                    "Comment": "{But for PAPER/INK '9' the PAPER and INK colours have to"
                },
                {
                    "Address": 593,
                    "ByteSize": 1,
                    "Comment": "be black and white."
                },
                {
                    "Address": 594,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 596,
                    "ByteSize": 2,
                    "Comment": "{Jump for black INK/PAPER, but continue for white",
                    "OperandType": 2
                },
                {
                    "Address": 598,
                    "ByteSize": 1,
                    "Comment": "INK/PAPER.}"
                },
                {
                    "Address": 599,
                    "ByteSize": 1,
                    "Comment": "Move the value to the #REG:C# register."
                },
                {
                    "Address": 600,
                    "ByteSize": 1,
                    "Comment": "Move the value."
                },
                {
                    "Address": 601,
                    "ByteSize": 3,
                    "Comment": "Now change \\#SYSVAR(ATTR-T) as needed.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 604,
                    "ByteSize": 2,
                    "Comment": "{The bits of \\#SYSVAR(MASK-T) are set only when using"
                },
                {
                    "Address": 606,
                    "ByteSize": 1,
                    "Comment": "PAPER/INK '8' or '9'."
                },
                {
                    "Address": 607,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 608,
                    "ByteSize": 3,
                    "Comment": "Now change \\#SYSVAR(MASK-T) as needed.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 611,
                    "ByteSize": 1,
                    "Comment": "{The appropriate mask is built up in the #REG:B# register"
                },
                {
                    "Address": 612,
                    "ByteSize": 1,
                    "Comment": "in order to change bits 4 and 6 as necessary."
                },
                {
                    "Address": 613,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 615,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 616,
                    "ByteSize": 2,
                    "Comment": "{The bits of \\#SYSVAR(P-FLAG) are set only when using"
                },
                {
                    "Address": 618,
                    "ByteSize": 1,
                    "Comment": "PAPER/INK '9'. Continue into #ADDR:0x226C# to manipulate"
                },
                {
                    "Address": 619,
                    "ByteSize": 1,
                    "Comment": "\\#SYSVAR(P-FLAG).}"
                },
                {
                    "Address": 620,
                    "ByteSize": 1,
                    "Comment": "{The bits, specified by the mask in the #REG:B# register,"
                },
                {
                    "Address": 621,
                    "ByteSize": 1,
                    "Comment": "are changed in the value and the result goes to form the"
                },
                {
                    "Address": 622,
                    "ByteSize": 1,
                    "Comment": "system variable."
                },
                {
                    "Address": 623,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 624,
                    "ByteSize": 1,
                    "Comment": "Move on to address the next system variable."
                },
                {
                    "Address": 625,
                    "ByteSize": 1,
                    "Comment": "{Return with the mask in the #REG:A# register."
                },
                {
                    "Address": 626,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 627,
                    "ByteSize": 1,
                    "Comment": "The zero flag will be set for BRIGHT."
                },
                {
                    "Address": 628,
                    "ByteSize": 1,
                    "Comment": "{The parameter is fetched and rotated."
                },
                {
                    "Address": 629,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 630,
                    "ByteSize": 2,
                    "Comment": "Prepare the mask for FLASH."
                },
                {
                    "Address": 632,
                    "ByteSize": 2,
                    "Comment": "Jump forward with FLASH.",
                    "OperandType": 2
                },
                {
                    "Address": 634,
                    "ByteSize": 1,
                    "Comment": "{Rotate an extra time and prepare the mask for BRIGHT."
                },
                {
                    "Address": 635,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 637,
                    "ByteSize": 1,
                    "Comment": "Save the value in the #REG:C# register."
                },
                {
                    "Address": 638,
                    "ByteSize": 1,
                    "Comment": "{Fetch the parameter and test its range; only '0', '1'"
                },
                {
                    "Address": 639,
                    "ByteSize": 2,
                    "Comment": "and '8' are allowable."
                },
                {
                    "Address": 641,
                    "ByteSize": 2,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 643,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 645,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 647,
                    "ByteSize": 1,
                    "Comment": "Fetch the value."
                },
                {
                    "Address": 648,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(ATTR-T)."
                },
                {
                    "Address": 651,
                    "ByteSize": 3,
                    "Comment": "Now change the system variable.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 654,
                    "ByteSize": 1,
                    "Comment": "The value is fetched anew."
                },
                {
                    "Address": 655,
                    "ByteSize": 1,
                    "Comment": "{The set bit of FLASH/BRIGHT '8' (bit 3) is moved to bit"
                },
                {
                    "Address": 656,
                    "ByteSize": 1,
                    "Comment": "7 (for FLASH) or bit 6 (for BRIGHT)."
                },
                {
                    "Address": 657,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 658,
                    "ByteSize": 2,
                    "Comment": "Exit via #ADDR:0x226C#.",
                    "OperandType": 2
                },
                {
                    "Address": 660,
                    "ByteSize": 3,
                    "Comment": "{The parameter is fetched and its range is tested.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 663,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 665,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 667,
                    "ByteSize": 2,
                    "Comment": "The '\\#S/OUT/' instruction is then used to set the border\ncolour."
                },
                {
                    "Address": 669,
                    "ByteSize": 1,
                    "Comment": "{The parameter is then multiplied by eight."
                },
                {
                    "Address": 670,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 671,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 672,
                    "ByteSize": 2,
                    "Comment": "Is the border colour a 'light' colour?"
                },
                {
                    "Address": 674,
                    "ByteSize": 2,
                    "Comment": "Jump if so (the INK colour will be black).",
                    "OperandType": 2
                },
                {
                    "Address": 676,
                    "ByteSize": 2,
                    "Comment": "Change the INK colour to white."
                },
                {
                    "Address": 678,
                    "ByteSize": 3,
                    "Comment": "{Set the system variable (\\#SYSVAR(BORDCR)) as required",
                    "OperandType": 1
                },
                {
                    "Address": 681,
                    "ByteSize": 1,
                    "Comment": "and return.}"
                },
                {
                    "Address": 682,
                    "ByteSize": 2,
                    "Comment": "{Test that the y co-ordinate (in #REG:B#) is not greater"
                },
                {
                    "Address": 684,
                    "ByteSize": 1,
                    "Comment": "than 175."
                },
                {
                    "Address": 685,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 688,
                    "ByteSize": 1,
                    "Comment": "#REG:B# now contains 175 minus y."
                },
                {
                    "Address": 689,
                    "ByteSize": 1,
                    "Comment": "#REG:A# holds b7b6b5b4b3b2b1b0, the bits of #REG:B#."
                },
                {
                    "Address": 690,
                    "ByteSize": 1,
                    "Comment": "And now 0b7b6b5b4b3b2b1."
                },
                {
                    "Address": 691,
                    "ByteSize": 1,
                    "Comment": "{Now 10b7b6b5b4b3b2."
                },
                {
                    "Address": 692,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 693,
                    "ByteSize": 1,
                    "Comment": "{Now 010b7b6b5b4b3."
                },
                {
                    "Address": 694,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 695,
                    "ByteSize": 1,
                    "Comment": "{Finally 010b7b6b2b1b0, so that #REG:H# becomes"
                },
                {
                    "Address": 696,
                    "ByteSize": 2,
                    "Comment": "64+8*INT(#REG:B#/64)+(#REG:B# mod 8), the high byte of the"
                },
                {
                    "Address": 698,
                    "ByteSize": 1,
                    "Comment": "pixel address."
                },
                {
                    "Address": 699,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 700,
                    "ByteSize": 1,
                    "Comment": "#REG:C# contains x."
                },
                {
                    "Address": 701,
                    "ByteSize": 1,
                    "Comment": "{#REG:A# starts as c7c6c5c4c3c2c1c0 and becomes"
                },
                {
                    "Address": 702,
                    "ByteSize": 1,
                    "Comment": "c4c3c2c1c0c7c6c5."
                },
                {
                    "Address": 703,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 704,
                    "ByteSize": 1,
                    "Comment": "{Now c4c3b5b4b3c7c6c5."
                },
                {
                    "Address": 705,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 707,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 708,
                    "ByteSize": 1,
                    "Comment": "{Finally b5b4b3c7c6c5c4c3, so that #REG:L# becomes"
                },
                {
                    "Address": 709,
                    "ByteSize": 1,
                    "Comment": "32*INT((#REG:B# mod 64)/8)+INT(x/8), the low byte."
                },
                {
                    "Address": 710,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 711,
                    "ByteSize": 1,
                    "Comment": "{#REG:A# holds x mod 8, so the pixel is bit (7-#REG:A#)"
                },
                {
                    "Address": 712,
                    "ByteSize": 2,
                    "Comment": "within the byte.}"
                },
                {
                    "Address": 714,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 715,
                    "ByteSize": 3,
                    "Comment": "y-coordinate to #REG:B#, x to #REG:C#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 718,
                    "ByteSize": 3,
                    "Comment": "Pixel address to #REG:HL#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 721,
                    "ByteSize": 1,
                    "Comment": "{#REG:B# will count #REG:A#+1 loops to get the wanted bit of"
                },
                {
                    "Address": 722,
                    "ByteSize": 1,
                    "Comment": "(#REG:HL#) to location 0."
                },
                {
                    "Address": 723,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 724,
                    "ByteSize": 1,
                    "Comment": "{The shifts."
                },
                {
                    "Address": 725,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 727,
                    "ByteSize": 2,
                    "Comment": "The bit is 1 for ink, 0 for paper."
                },
                {
                    "Address": 729,
                    "ByteSize": 3,
                    "Comment": "It is put on the calculator stack.",
                    "OperandType": 2
                },
                {
                    "Address": 732,
                    "ByteSize": 3,
                    "Comment": "y-coordinate to #REG:B#, x to #REG:C#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 735,
                    "ByteSize": 3,
                    "Comment": "The subroutine is called.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 738,
                    "ByteSize": 3,
                    "Comment": "Exit, setting temporary colours.",
                    "OperandType": 2
                },
                {
                    "Address": 741,
                    "ByteSize": 4,
                    "Comment": "The system variable \\#SYSVAR(COORDS) is set.",
                    "OperandType": 1
                },
                {
                    "Address": 745,
                    "ByteSize": 3,
                    "Comment": "Pixel address to #REG:HL#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 748,
                    "ByteSize": 1,
                    "Comment": "{#REG:B# will count #REG:A#+1 loops to get a zero to the"
                },
                {
                    "Address": 749,
                    "ByteSize": 1,
                    "Comment": "correct place in #REG:A#.}"
                },
                {
                    "Address": 750,
                    "ByteSize": 2,
                    "Comment": "The zero is entered."
                },
                {
                    "Address": 752,
                    "ByteSize": 1,
                    "Comment": "{Then lined up with the pixel bit position in the byte."
                },
                {
                    "Address": 753,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 755,
                    "ByteSize": 1,
                    "Comment": "Then copied to #REG:B#."
                },
                {
                    "Address": 756,
                    "ByteSize": 1,
                    "Comment": "The pixel-byte is obtained in #REG:A#."
                },
                {
                    "Address": 757,
                    "ByteSize": 3,
                    "Comment": "{\\#SYSVAR(P-FLAG) is obtained and first tested for OVER."
                },
                {
                    "Address": 760,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 762,
                    "ByteSize": 2,
                    "Comment": "Jump if OVER 1.",
                    "OperandType": 2
                },
                {
                    "Address": 764,
                    "ByteSize": 1,
                    "Comment": "OVER 0 first makes the pixel zero."
                },
                {
                    "Address": 765,
                    "ByteSize": 2,
                    "Comment": "Test for INVERSE."
                },
                {
                    "Address": 767,
                    "ByteSize": 2,
                    "Comment": "INVERSE 1 just leaves the pixel as it was (OVER 1) or\nzero (OVER 0).",
                    "OperandType": 2
                },
                {
                    "Address": 769,
                    "ByteSize": 1,
                    "Comment": "{INVERSE 0 leaves the pixel complemented (OVER 1) or 1"
                },
                {
                    "Address": 770,
                    "ByteSize": 1,
                    "Comment": "(OVER 0).}"
                },
                {
                    "Address": 771,
                    "ByteSize": 1,
                    "Comment": "The byte is entered. Its other bits are unchanged in\nevery case."
                },
                {
                    "Address": 772,
                    "ByteSize": 3,
                    "Comment": "Exit, setting attribute byte.",
                    "OperandType": 2
                },
                {
                    "Address": 775,
                    "ByteSize": 3,
                    "Comment": "First number to #REG:A#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 778,
                    "ByteSize": 1,
                    "Comment": "Hence to #REG:B#."
                },
                {
                    "Address": 779,
                    "ByteSize": 1,
                    "Comment": "Save it briefly."
                },
                {
                    "Address": 780,
                    "ByteSize": 3,
                    "Comment": "Second number to #REG:A#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 783,
                    "ByteSize": 1,
                    "Comment": "Its sign indicator to #REG:E#."
                },
                {
                    "Address": 784,
                    "ByteSize": 1,
                    "Comment": "Restore first number."
                },
                {
                    "Address": 785,
                    "ByteSize": 1,
                    "Comment": "Its sign indicator to #REG:D#."
                },
                {
                    "Address": 786,
                    "ByteSize": 1,
                    "Comment": "Second number to #REG:C#."
                },
                {
                    "Address": 787,
                    "ByteSize": 1,
                    "Comment": "#REG:BC#, #REG:DE# are now as required."
                },
                {
                    "Address": 788,
                    "ByteSize": 3,
                    "Comment": "{Modulus of rounded last value to #REG:A# if possible;",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 791,
                    "ByteSize": 3,
                    "Comment": "else, report error.}",
                    "OperandType": 2
                },
                {
                    "Address": 794,
                    "ByteSize": 2,
                    "Comment": "One to #REG:C# for positive last value."
                },
                {
                    "Address": 796,
                    "ByteSize": 1,
                    "Comment": "Return if value was positive."
                },
                {
                    "Address": 797,
                    "ByteSize": 2,
                    "Comment": "Else change #REG:C# to &FF (i.e. minus one)."
                },
                {
                    "Address": 799,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 800,
                    "ByteSize": 1,
                    "Comment": "Get the present character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 801,
                    "ByteSize": 2,
                    "Comment": "Test for comma."
                },
                {
                    "Address": 803,
                    "ByteSize": 3,
                    "Comment": "If not so, report the error.",
                    "OperandType": 2
                },
                {
                    "Address": 806,
                    "ByteSize": 1,
                    "Comment": "Get next character (the radius).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 807,
                    "ByteSize": 3,
                    "Comment": "Radius to calculator stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 810,
                    "ByteSize": 3,
                    "Comment": "Move to consider next statement if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 813,
                    "ByteSize": 1,
                    "Comment": "Use calculator.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 817,
                    "ByteSize": 1,
                    "Comment": "Get exponent of radius."
                },
                {
                    "Address": 818,
                    "ByteSize": 2,
                    "Comment": "Test whether radius less than 1."
                },
                {
                    "Address": 820,
                    "ByteSize": 2,
                    "Comment": "If not, jump.",
                    "OperandType": 2
                },
                {
                    "Address": 822,
                    "ByteSize": 1,
                    "Comment": "If less, delete it from the stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 825,
                    "ByteSize": 2,
                    "Comment": "Just plot the point X, Y.",
                    "OperandType": 2
                },
                {
                    "Address": 827,
                    "ByteSize": 1,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 830,
                    "ByteSize": 2,
                    "Comment": "Now increase exponent to &83, changing \\#pi/2 into 2\\#pi."
                },
                {
                    "Address": 832,
                    "ByteSize": 1,
                    "Comment": "X, Y, Z, 2\\#pi.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 836,
                    "ByteSize": 3,
                    "Comment": "Set the initial parameters.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 839,
                    "ByteSize": 1,
                    "Comment": "Save the arc-count in #REG:B#."
                },
                {
                    "Address": 840,
                    "ByteSize": 1,
                    "Comment": "X, Y, Z",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 845,
                    "ByteSize": 1,
                    "Comment": "{Z*SIN (\\#pi/A) is half the initial 'arc' length; it is"
                },
                {
                    "Address": 846,
                    "ByteSize": 2,
                    "Comment": "tested to see whether it is less than 0.5.}"
                },
                {
                    "Address": 848,
                    "ByteSize": 2,
                    "Comment": "If not, the jump is made.",
                    "OperandType": 2
                },
                {
                    "Address": 850,
                    "ByteSize": 1,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 854,
                    "ByteSize": 1,
                    "Comment": "Clear the machine stack."
                },
                {
                    "Address": 855,
                    "ByteSize": 3,
                    "Comment": "Jump to plot X, Y.",
                    "OperandType": 2
                },
                {
                    "Address": 858,
                    "ByteSize": 1,
                    "Comment": "X, Y, Z, Z*SIN (\\#pi/A)",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 878,
                    "ByteSize": 3,
                    "Comment": "Incrementing the exponent byte of #ADDR:0x5C9C#(mem-2) sets\nmem-2 to 2*Z*SIN(\\#pi/A)."
                },
                {
                    "Address": 881,
                    "ByteSize": 3,
                    "Comment": "{The last value X+Z is moved from the stack to #REG:A# and",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 884,
                    "ByteSize": 1,
                    "Comment": "copied to #REG:L#.}"
                },
                {
                    "Address": 885,
                    "ByteSize": 1,
                    "Comment": "It is saved in #REG:HL#."
                },
                {
                    "Address": 886,
                    "ByteSize": 3,
                    "Comment": "{Y-Z*SIN (\\#pi/A) goes from the stack to #REG:A# and is",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 889,
                    "ByteSize": 1,
                    "Comment": "copied to #REG:H#. #REG:HL# now holds the initial point."
                },
                {
                    "Address": 890,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 891,
                    "ByteSize": 3,
                    "Comment": "It is copied to \\#SYSVAR(COORDS).",
                    "OperandType": 1
                },
                {
                    "Address": 894,
                    "ByteSize": 1,
                    "Comment": "The arc-count is restored."
                },
                {
                    "Address": 895,
                    "ByteSize": 3,
                    "Comment": "The jump is made to #ADDR:0x2420#.",
                    "OperandType": 2
                },
                {
                    "Address": 898,
                    "ByteSize": 1,
                    "Comment": "Get the current character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 899,
                    "ByteSize": 2,
                    "Comment": "{If it is a comma, then jump."
                },
                {
                    "Address": 901,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 903,
                    "ByteSize": 3,
                    "Comment": "Move on to next statement if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 906,
                    "ByteSize": 3,
                    "Comment": "Jump to just draw the line.",
                    "OperandType": 2
                },
                {
                    "Address": 909,
                    "ByteSize": 1,
                    "Comment": "Get next character (the angle).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 910,
                    "ByteSize": 3,
                    "Comment": "Angle to calculator stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 913,
                    "ByteSize": 3,
                    "Comment": "Move on to next statement if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 916,
                    "ByteSize": 1,
                    "Comment": "X, Y, G are on the stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 928,
                    "ByteSize": 3,
                    "Comment": "Line X0, Y0 to X0+X, Y0+Y.",
                    "OperandType": 2
                },
                {
                    "Address": 949,
                    "ByteSize": 1,
                    "Comment": "Get exponent of Z."
                },
                {
                    "Address": 950,
                    "ByteSize": 2,
                    "Comment": "{If Z is greater than or equal to 1, jump."
                },
                {
                    "Address": 952,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 954,
                    "ByteSize": 1,
                    "Comment": "X, Y, SIN (G/2), Z",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 958,
                    "ByteSize": 3,
                    "Comment": "Just draw the line from X0, Y0 to X0+X, Y0+Y.",
                    "OperandType": 2
                },
                {
                    "Address": 961,
                    "ByteSize": 3,
                    "Comment": "The subroutine is called.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 964,
                    "ByteSize": 1,
                    "Comment": "Save the arc-counter in #REG:B#."
                },
                {
                    "Address": 965,
                    "ByteSize": 1,
                    "Comment": "X, Y, SIN(G/2), Z",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1021,
                    "ByteSize": 1,
                    "Comment": "Get exponent of U'+V'."
                },
                {
                    "Address": 1022,
                    "ByteSize": 2,
                    "Comment": "{If U'+V' is less than 1, just tidy the stack and draw"
                }
            ],
            "CommentBlocks": [
                {
                    "Address": 1,
                    "Comment": "Now deal with an 'AT'."
                },
                {
                    "Address": 14,
                    "Comment": "Next look for a 'TAB'."
                },
                {
                    "Address": 18,
                    "Comment": "Now deal with a 'TAB'."
                },
                {
                    "Address": 30,
                    "Comment": "The 'AT' and the 'TAB' print items are printed by making three calls to\n#ADDR:0x0010#."
                },
                {
                    "Address": 36,
                    "Comment": "Next consider embedded colour items."
                },
                {
                    "Address": 44,
                    "Comment": "The print item must now be an expression, either numeric or string."
                },
                {
                    "Address": 60,
                    "Comment": "A loop is now set up to deal with each character in turn of the string."
                },
                {
                    "Address": 69,
                    "Comment": "THE 'END OF PRINTING' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1FDF# and #ADDR:0x204E#.\n \nThe zero flag will be set if no further printing is to be done.\n \nA Code of the current character\nO:F Zero flag set if the character is ')', ':' or a carriage return"
                },
                {
                    "Address": 72,
                    "Comment": "This entry point is used by the routine at #ADDR:0x0605#."
                },
                {
                    "Address": 78,
                    "Comment": "THE 'PRINT POSITION' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1FDF# and #ADDR:0x2089#.\n \nThe various position controlling characters are considered by this\nsubroutine.\n \nO:F Zero flag set if a position controlling character is found"
                },
                {
                    "Address": 112,
                    "Comment": "THE 'ALTER STREAM' SUBROUTINE\n \nUsed by the routines at #ADDR:0x17F9# and #ADDR:0x1FFC#.\n \nThis subroutine is called whenever there is the need to consider whether the\nuser wishes to use a different stream.\n \nA Code of the current character\nO:F Carry flag set if the character is not '\\#'"
                },
                {
                    "Address": 137,
                    "Comment": "THE 'INPUT' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1A9F#(parameter table).\n \nThis routine allows for values entered from the keyboard to be assigned to\nvariables. It is also possible to have print items embedded in the INPUT\nstatement and these items are printed in the lower part of the display."
                },
                {
                    "Address": 193,
                    "Comment": "The INPUT items and embedded PRINT items are dealt with in turn by the\nfollowing loop."
                },
                {
                    "Address": 216,
                    "Comment": "Now consider whether INPUT LINE is being used."
                },
                {
                    "Address": 237,
                    "Comment": "Proceed to handle simple INPUT variables."
                },
                {
                    "Address": 250,
                    "Comment": "The prompt message is now built up in the work space."
                },
                {
                    "Address": 300,
                    "Comment": "In the case of INPUT LINE the EDITOR can be called without further\npreparation but for other types of INPUT the error stack has to be changed so\nas to trap errors."
                },
                {
                    "Address": 353,
                    "Comment": "All the system variables have to be reset before the actual assignment of a\nvalue can be made."
                },
                {
                    "Address": 431,
                    "Comment": "Further items in the INPUT statement are considered."
                },
                {
                    "Address": 441,
                    "Comment": "THE 'IN-ASSIGN' SUBROUTINE\n \nUsed by the routine at #ADDR:0x2089#.\n \nThis subroutine is called twice for each INPUT value: once with the\nsyntax/run flag reset (syntax) and once with it set (run)."
                },
                {
                    "Address": 462,
                    "Comment": "Report C - Nonsense in BASIC."
                },
                {
                    "Address": 464,
                    "Comment": "Come here if the INPUT line starts with 'STOP'."
                },
                {
                    "Address": 468,
                    "Comment": "Report H - STOP in INPUT."
                },
                {
                    "Address": 470,
                    "Comment": "THE 'IN-CHAN-K' SUBROUTINE\n \nUsed by the routine at #ADDR:0x2089#.\n \nO:F Zero flag set if channel 'K' (keyboard) is being used"
                },
                {
                    "Address": 481,
                    "Comment": "THE 'COLOUR ITEM' ROUTINES\n \nThis set of routines can be readily divided into two parts:\n \n\\#LIST\n{ i. The embedded colour item' handler. }\n{ ii. The 'colour system variable' handler. }\nLIST\\#\n \ni. Embedded colour items are handled by calling #ADDR:0x0010# as required.\n \nA loop is entered to handle each item in turn. The entry point is at #ADDR:0x21E2#."
                },
                {
                    "Address": 482,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1CBE#."
                },
                {
                    "Address": 498,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1FFC#."
                },
                {
                    "Address": 508,
                    "Comment": "This entry point is used by the routine at #ADDR:0x1C96#.\n \nThe colour item code and the parameter are now 'printed' by calling #ADDR:0x0010#\non two occasions."
                },
                {
                    "Address": 529,
                    "Comment": "This entry point is used by the routine at #ADDR:0x0A6D#.\n \nii. The colour system variables - \\#SYSVAR(ATTR-T), \\#SYSVAR(MASK-T) and\n\\#SYSVAR(P-FLAG) - are altered as required. On entry the control character\ncode is in the #REG:A# register and the parameter is in the #REG:D# register.\n \nNote that all changes are to the 'temporary' system variables."
                },
                {
                    "Address": 541,
                    "Comment": "The colour control code will now be &01 for INVERSE and &02 for OVER and the\nsystem variable \\#SYSVAR(P-FLAG) is altered accordingly."
                },
                {
                    "Address": 564,
                    "Comment": "PAPER and INK are dealt with by the following routine. On entry the carry\nflag is set for INK."
                },
                {
                    "Address": 580,
                    "Comment": "This entry point is used by the routine at #ADDR:0x2294#.\n \nReport K - Invalid colour."
                },
                {
                    "Address": 582,
                    "Comment": "Continue to handle PAPER and INK."
                },
                {
                    "Address": 600,
                    "Comment": "The mask (#REG:B#) and the value (#REG:C#) are now used to change\n\\#SYSVAR(ATTR-T)."
                },
                {
                    "Address": 604,
                    "Comment": "Next \\#SYSVAR(MASK-T) is considered."
                },
                {
                    "Address": 611,
                    "Comment": "Next \\#SYSVAR(P-FLAG) is considered."
                },
                {
                    "Address": 620,
                    "Comment": "The following subroutine is used to 'impress' upon a system variable the\n'nature' of the bits in the #REG:A# register. The #REG:B# register holds a mask\nthat shows which bits are to be 'copied over' from #REG:A# to (#REG:HL#)."
                },
                {
                    "Address": 627,
                    "Comment": "FLASH and BRIGHT are handled by the following routine."
                },
                {
                    "Address": 647,
                    "Comment": "The system variable \\#SYSVAR(ATTR-T) can now be altered."
                },
                {
                    "Address": 654,
                    "Comment": "The value in \\#SYSVAR(MASK-T) is now considered."
                },
                {
                    "Address": 660,
                    "Comment": "THE 'BORDER' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1AF5#(parameter table).\n \nThe parameter of the BORDER command is used with an '\\#S/OUT/' command to\nactually alter the colour of the border. The parameter is then saved in the\nsystem variable \\#SYSVAR(BORDCR)."
                },
                {
                    "Address": 682,
                    "Comment": "THE 'PIXEL ADDRESS' SUBROUTINE\n \nThis subroutine is called by #ADDR:0x22CB# and by #ADDR:0x22DC#. Is is entered with the\nco-ordinates of a pixel in the #REG:BC# register pair and returns with #REG:HL#\nholding the address of the display file byte which contains that pixel and\n#REG:A# pointing to the position of the pixel within the byte.\n \nB Pixel y-coordinate\nC Pixel x-coordinate\nO:A #REG:C# mod 8\nO:HL Display file address"
                },
                {
                    "Address": 715,
                    "Comment": "THE 'POINT' SUBROUTINE\n \nThis subroutine is called from #ADDR:0x267B#. It is entered with the coordinates of\na pixel on the calculator stack, and returns a last value of 1 if that pixel\nis ink colour, and 0 if it is paper colour."
                },
                {
                    "Address": 732,
                    "Comment": "THE 'PLOT' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1AC1#(parameter table).\n \nThis routine consists of a main subroutine plus one line to call it and one\nline to exit from it. The main routine is used twice by #ADDR:0x2320# and the\nsubroutine is called by #ADDR:0x24B7#. The routine is entered with the coordinates\nof a pixel on the calculator stack. It finds the address of that pixel and\nplots it, taking account of the status of INVERSE and OVER held in the\n\\#SYSVAR(P-FLAG)."
                },
                {
                    "Address": 741,
                    "Comment": "This entry point is used by the routine at #ADDR:0x24B7#."
                },
                {
                    "Address": 775,
                    "Comment": "THE 'STK-TO-BC' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1FFC#, #ADDR:0x22CB#, #ADDR:0x22DC#, #ADDR:0x24B7#, #ADDR:0x2535# and\n#ADDR:0x2580#.\n \nThis subroutine loads two floating point numbers into the #REG:BC# register\npair. It is thus used to pick up parameters in the range &00 to &FF. It also\nobtains in #REG:DE# the 'diagonal move' values (+/-1,+/-1) which are used in\n#ADDR:0x24B7#.\n \nO:B First number from the calculator stack\nO:C Second number from the calculator stack\nO:D Sign of the first number (&01 or &FF)\nO:E Sign of the second number (&01 or &FF)"
                },
                {
                    "Address": 788,
                    "Comment": "THE 'STK-TO-A' SUBROUTINE\n \nUsed by the routine at #ADDR:0x2307#.\n \nThis subroutine loads the #REG:A# register with the floating point number held\nat the top of the calculator stack. The number must be in the range &00 to\n&FF.\n \nO:A Number from the calculator stack\nO:C Sign of the number (&01 or &FF)"
                },
                {
                    "Address": 800,
                    "Comment": "THE 'CIRCLE' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1AE7#(parameter table).\n \nThis routine draws an approximation to the circle with centre co-ordinates X\nand Y and radius Z. These numbers are rounded to the nearest integer before\nuse. Thus Z must be less than 87.5, even when (X,Y) is in the centre of the\nscreen. The method used is to draw a series of arcs approximated by straight\nlines.\n \nCIRCLE has four parts:\n \n\\#LIST\n{ i. Tests the radius. If its modulus is less than 1, just plot X,Y. }\n{ ii. Calls #ADDR:0x247D#, which is used to set the initial parameters for both\nCIRCLE and DRAW. }\n{ iii. Sets up the remaining parameters for CIRCLE, including the initial\ndisplacement for the first 'arc' (a straight line in fact). }\n{ iv. Jumps to #ADDR:0x2420# to use the arc-drawing loop. }\nLIST\\#\n \nParts i. to iii. will now be explained in turn.\n \ni. The radius, say Z', is obtained from the calculator stack. Its modulus Z\nis formed and used from now on. If Z is less than 1, it is deleted from the\nstack and the point X,Y is plotted by a jump to PLOT."
                },
                {
                    "Address": 827,
                    "Comment": "ii. 2\\#pi is stored in mem-5 and #ADDR:0x247D# is called. This subroutine stores in\nthe #REG:B# register the number of arcs required for the circle, viz. A=4*INT\n(\\#pi*SQR Z/4)+4, hence 4, 8, 12, etc., up to a maximum of 32. It also stores\nin mem-0 to mem-4 the quantities 2\\#pi/A, SIN(\\#pi/A), 0, COS (2\\#pi/A) and SIN\n(2\\#pi/A)."
                },
                {
                    "Address": 839,
                    "Comment": "iii. A test is made to see whether the initial 'arc' length is less than 1.\nIf it is, a jump is made simply to plot X, Y. Otherwise, the parameters are\nset: X+Z and X-Z*SIN (\\#pi/A) are stacked twice as start and end point, and\ncopied to \\#SYSVAR(COORDS) as well; zero and 2*Z*SIN (\\#pi/A) are stored in\nmem-1 and mem-2 as initial increments, giving as first 'arc' the vertical\nstraight line joining X+Z, y-Z*SIN (\\#pi/A) and X+Z, Y+Z*SIN (\\#pi/A). The\narc-drawing loop at #ADDR:0x2420# will ensure that all subsequent points remain on\nthe same circle as these two points, with incremental angle 2\\#pi/A. But it is\nclear that these 2 points in fact subtend this angle at the point X+Z*(1-COS\n(\\#pi/A)), Y not at X, Y. Hence the end points of each arc of the circle are\ndisplaced right by an amount 2*(1-COS (\\#pi/A)), which is less than half a\npixel, and rounds to one pixel at most."
                },
                {
                    "Address": 878,
                    "Comment": "(Here sa denotes X+Z and sb denotes Y-Z*SIN (\\#pi/A).)"
                },
                {
                    "Address": 898,
                    "Comment": "(The stack now holds X+Z, Y-Z*SIN (\\#pi/A), Y-Z*SIN (\\#pi/A), X+Z.)\nTHE 'DRAW' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1AD2#(parameter table).\n \nThis routine is entered with the co-ordinates of a point X0, Y0, say, in\n\\#SYSVAR(COORDS). If only two parameters X, Y are given with the DRAW command,\nit draws an approximation to a straight line from the point X0, Y0 to X0+X,\nY0+Y. If a third parameter G is given, it draws an approximation to a\ncircular arc from X0, Y0 to X0+X, Y0+Y turning anti-clockwise through an\nangle G radians.\n \nThe routine has four parts:\n \n\\#LIST\n{ i. Just draws a line if only 2 parameters are given or if the diameter of\nthe implied circle is less than 1. }\n{ ii. Calls #ADDR:0x247D# to set the first parameters. }\n{ iii. Sets up the remaining parameters, including the initial displacements\nfor the first arc. }\n{ iv. Enters the arc-drawing loop and draws the arc as a series of smaller\narcs approximated by straight lines, calling the line-drawing subroutine at\n#ADDR:0x24B7# as necessary. }\nLIST\\#\n \nTwo subroutines, #ADDR:0x247D# and #ADDR:0x24B7#, follow the main routine. The above 4\nparts of the main routine will now be treated in turn.\n \ni. If there are only 2 parameters, a jump is made to #ADDR:0x2477#. A line is also\ndrawn if the quantity Z=(ABS X+ABS Y)/ABS SIN(G/2) is less than 1. Z lies\nbetween 1 and 1.5 times the diameter of the implied circle. In this section\nmem-0 is set to SIN (G/2), mem-1 to Y, and mem-5 to G."
                },
                {
                    "Address": 961,
                    "Comment": "ii. Just calls #ADDR:0x247D#. This subroutine saves in the #REG:B# register the\nnumber of shorter arcs required for the complete arc, viz. A=4*INT (G'*SQR\nZ/8)+4 (where G'=ABS G), or 252 if this expression exceeds 252 (as can happen\nwith a large chord and a small angle). So A is a multiple of 4 from 4 to 252.\nThe subroutine also stores in mem-0 to mem-4 the quantities G/A, SIN (G/2*A),\n0, COS (G/A), SIN (G/A)."
                },
                {
                    "Address": 964,
                    "Comment": "iii. Sets up the rest of the parameters as follow. The stack will hold these\n4 items, reading up to the top: X0+X and Y0+Y as end of last arc; then X0 and\nY0 as beginning of first arc. Mem-0 will hold X0 and mem-5 Y0. Mem-1 and\nmem-2 will hold the initial displacements for the first arc, U and V; and\nmem-3 and mem-4 will hold COS (G/A) and SIN (G/A) for use in the arc-drawing\nloop.\n \nThe formulae for U and V can be explained as follows. Instead of stepping\nalong the final chord, of length L, say, with displacements X and Y, we want\nto step along an initial chord (which may be longer) of length L*W, where\nW=SIN (G/2*A)/SIN (G/2), with displacements X*W and Y*W, but turned through\nan angle (G/2-G/2*A), hence with true displacements:\n \n\\#LIST\n{ U=Y*W*SIN (G/2-G/2*A)+X*W*COS (G/2-G/2*A) }\n{ Y=Y*W*COS (G/2-G/2*A)-X*W*SIN (G/2-G/2*A) }\nLIST\\#\n \nThese formulae can be checked from a diagram, using the normal expansion of\nCOS (P-Q) and SIN (P-Q), where Q=G/2-G/2*A."
                }
            ],
            "DataInfo": [
                {
                    "Address": 0,
                    "DataType": 11,
                    "InstructionAddressRef": 536805376
                },
                {
                    "Address": 463,
                    "Comment": "}"
                },
                {
                    "Address": 469,
                    "Comment": "}"
                },
                {
                    "Address": 581,
                    "Comment": "}"
                },
                {
                    "Address": 814,
                    "Comment": "#ADDR:0x346A#: X, Y, Z"
                },
                {
                    "Address": 815,
                    "Comment": "#ADDR:0x3297#: Z is re-stacked; its exponent is therefore\navailable."
                },
                {
                    "Address": 816,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 823,
                    "Comment": "#ADDR:0x33A1#: X, Y"
                },
                {
                    "Address": 824,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 828,
                    "Comment": "#ADDR:0x341B#(stk_pi_2): X, Y, Z, \\#pi/2"
                },
                {
                    "Address": 829,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 833,
                    "Comment": "#ADDR:0x342D#(st_mem_5): (2\\#pi is copied to mem-5)"
                },
                {
                    "Address": 834,
                    "Comment": "#ADDR:0x33A1#: X, Y, Z"
                },
                {
                    "Address": 835,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 841,
                    "Comment": "#ADDR:0x33C0#: X, Y, Z, Z"
                },
                {
                    "Address": 842,
                    "Comment": "#ADDR:0x340F#(get_mem_1): X, Y, Z, Z, SIN (\\#pi/A)"
                },
                {
                    "Address": 843,
                    "Comment": "#ADDR:0x30CA#: X, Y, Z, Z*SIN (\\#pi/A)"
                },
                {
                    "Address": 844,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 851,
                    "Comment": "#ADDR:0x33A1#: X, Y, Z"
                },
                {
                    "Address": 852,
                    "Comment": "#ADDR:0x33A1#: X, Y"
                },
                {
                    "Address": 853,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 859,
                    "Comment": "#ADDR:0x342D#(st_mem_2): (Z*SIN (\\#pi/A) to mem-2 for now)"
                },
                {
                    "Address": 860,
                    "Comment": "#ADDR:0x343C#: X, Y, Z*SIN (\\#pi/A), Z"
                },
                {
                    "Address": 861,
                    "Comment": "#ADDR:0x342D#(st_mem_0): X, Y, Z*SIN (\\#pi/A), Z (Z is copied\nto mem-0)"
                },
                {
                    "Address": 862,
                    "Comment": "#ADDR:0x33A1#: X, Y, Z*SIN (\\#pi/A)"
                },
                {
                    "Address": 863,
                    "Comment": "#ADDR:0x300F#: X, Y-Z*SIN (\\#pi/A)"
                },
                {
                    "Address": 864,
                    "Comment": "#ADDR:0x343C#: Y-Z*SIN (\\#pi/A), X"
                },
                {
                    "Address": 865,
                    "Comment": "#ADDR:0x340F#(get_mem_0): Y-Z*SIN (\\#pi/A), X, Z"
                },
                {
                    "Address": 866,
                    "Comment": "#ADDR:0x3014#: Y-Z*SIN (\\#pi/A), X+Z"
                },
                {
                    "Address": 867,
                    "Comment": "#ADDR:0x342D#(st_mem_0): (X+Z is copied to mem-0)"
                },
                {
                    "Address": 868,
                    "Comment": "#ADDR:0x343C#: X+Z, Y-Z*SIN (\\#pi/A)"
                },
                {
                    "Address": 869,
                    "Comment": "#ADDR:0x33C0#: X+Z, Y-Z*SIN (\\#pi/A), Y-Z*SIN (\\#pi/A)"
                },
                {
                    "Address": 870,
                    "Comment": "#ADDR:0x340F#(get_mem_0): sa, sb, sb, sa"
                },
                {
                    "Address": 871,
                    "Comment": "#ADDR:0x343C#: sa, sb, sa, sb"
                },
                {
                    "Address": 872,
                    "Comment": "#ADDR:0x33C0#: sa, sb, sa, sb, sb"
                },
                {
                    "Address": 873,
                    "Comment": "#ADDR:0x340F#(get_mem_0): sa, sb, sa, sb, sb, sa"
                },
                {
                    "Address": 874,
                    "Comment": "#ADDR:0x341B#(stk_zero): sa, sb, sa, sb, sb, sa, 0"
                },
                {
                    "Address": 875,
                    "Comment": "#ADDR:0x342D#(st_mem_1): (mem-1 is set to zero)"
                },
                {
                    "Address": 876,
                    "Comment": "#ADDR:0x33A1#: sa, sb, sa, sb, sb, sa"
                },
                {
                    "Address": 877,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 917,
                    "Comment": "#ADDR:0x342D#(st_mem_5): (G is copied to mem-5)"
                },
                {
                    "Address": 918,
                    "Comment": "#ADDR:0x341B#(stk_half): X, Y, G, 0.5"
                },
                {
                    "Address": 919,
                    "Comment": "#ADDR:0x30CA#: X, Y, G/2"
                },
                {
                    "Address": 920,
                    "Comment": "#ADDR:0x37B5#: X, Y, SIN (G/2)"
                },
                {
                    "Address": 921,
                    "Comment": "#ADDR:0x33C0#: X, Y, SIN (G/2), SIN (G/2)"
                },
                {
                    "Address": 922,
                    "Comment": "#ADDR:0x3501#: X, Y, SIN (G/2), (0/1)"
                },
                {
                    "Address": 923,
                    "Comment": "#ADDR:0x3501#: X, Y, SIN (G/2), (1/0)"
                },
                {
                    "Address": 924,
                    "Comment": "#ADDR:0x368F#: X, Y, SIN (G/2)"
                },
                {
                    "Address": 925,
                    "Comment": "to #ADDR:0x23A3# (if SIN (G/2)=0 i.e. G=2\\#piN just draw a\nstraight line)."
                },
                {
                    "Address": 926,
                    "Comment": "#ADDR:0x33A1#: X, Y"
                },
                {
                    "Address": 927,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 931,
                    "Comment": "#ADDR:0x342D#(st_mem_0): (SIN (G/2) is copied to mem-0)"
                },
                {
                    "Address": 932,
                    "Comment": "#ADDR:0x33A1#: X, Y are now on the stack."
                },
                {
                    "Address": 933,
                    "Comment": "#ADDR:0x342D#(st_mem_1): (Y is copied to mem-1)."
                },
                {
                    "Address": 934,
                    "Comment": "#ADDR:0x33A1#: X"
                },
                {
                    "Address": 935,
                    "Comment": "#ADDR:0x33C0#: X, X"
                },
                {
                    "Address": 936,
                    "Comment": "#ADDR:0x346A#: X, X' (X'=ABS X)"
                },
                {
                    "Address": 937,
                    "Comment": "#ADDR:0x340F#(get_mem_1): X, X', Y"
                },
                {
                    "Address": 938,
                    "Comment": "#ADDR:0x343C#: X, Y, X'"
                },
                {
                    "Address": 939,
                    "Comment": "#ADDR:0x340F#(get_mem_1): X, Y, X', Y"
                },
                {
                    "Address": 940,
                    "Comment": "#ADDR:0x346A#: X, Y, X', Y' (Y'=ABS Y)"
                },
                {
                    "Address": 941,
                    "Comment": "#ADDR:0x3014#: X, Y, X'+Y'"
                },
                {
                    "Address": 942,
                    "Comment": "#ADDR:0x340F#(get_mem_0): X, Y, X'+Y', SIN (G/2)"
                },
                {
                    "Address": 943,
                    "Comment": "#ADDR:0x31AF#: X, Y, (X'+Y')/SIN (G/2)=Z', say"
                },
                {
                    "Address": 944,
                    "Comment": "#ADDR:0x346A#: X, Y, Z (Z=ABS Z')"
                },
                {
                    "Address": 945,
                    "Comment": "#ADDR:0x340F#(get_mem_0): X, Y, Z, SIN (G/2)"
                },
                {
                    "Address": 946,
                    "Comment": "#ADDR:0x343C#: X, Y, SIN (G/2), Z"
                },
                {
                    "Address": 947,
                    "Comment": "#ADDR:0x3297#: (Z is re-stacked to make sure that its exponent\nis available)."
                },
                {
                    "Address": 948,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 955,
                    "Comment": "#ADDR:0x33A1#: X, Y, SIN (G/2)"
                },
                {
                    "Address": 956,
                    "Comment": "#ADDR:0x33A1#: X, Y"
                },
                {
                    "Address": 957,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 966,
                    "Comment": "#ADDR:0x33A1#: X, Y, SIN(G/2)"
                },
                {
                    "Address": 967,
                    "Comment": "#ADDR:0x340F#(get_mem_1): X, Y, SIN(G/2), SIN(G/2*A)"
                },
                {
                    "Address": 968,
                    "Comment": "#ADDR:0x343C#: X, Y, SIN(G/2*A), SIN(G/2)"
                },
                {
                    "Address": 969,
                    "Comment": "#ADDR:0x31AF#: X, Y, SIN(G/2*A)/SIN(G/2)=W"
                },
                {
                    "Address": 970,
                    "Comment": "#ADDR:0x342D#(st_mem_1): (W is copied to mem-1)."
                },
                {
                    "Address": 971,
                    "Comment": "#ADDR:0x33A1#: X, Y"
                },
                {
                    "Address": 972,
                    "Comment": "#ADDR:0x343C#: Y, X"
                },
                {
                    "Address": 973,
                    "Comment": "#ADDR:0x33C0#: Y, X, X"
                },
                {
                    "Address": 974,
                    "Comment": "#ADDR:0x340F#(get_mem_1): Y, X, X, W"
                },
                {
                    "Address": 975,
                    "Comment": "#ADDR:0x30CA#: Y, X, X*W"
                },
                {
                    "Address": 976,
                    "Comment": "#ADDR:0x342D#(st_mem_2): (X*W is copied to mem-2)."
                },
                {
                    "Address": 977,
                    "Comment": "#ADDR:0x33A1#: Y, X"
                },
                {
                    "Address": 978,
                    "Comment": "#ADDR:0x343C#: X, Y"
                },
                {
                    "Address": 979,
                    "Comment": "#ADDR:0x33C0#: X, Y, Y"
                },
                {
                    "Address": 980,
                    "Comment": "#ADDR:0x340F#(get_mem_1): X, Y, Y, W"
                },
                {
                    "Address": 981,
                    "Comment": "#ADDR:0x30CA#: X, Y, Y*W"
                },
                {
                    "Address": 982,
                    "Comment": "#ADDR:0x340F#(get_mem_2): X, Y, Y*W, X*W"
                },
                {
                    "Address": 983,
                    "Comment": "#ADDR:0x340F#(get_mem_5): X, Y, Y*W, X*W,G"
                },
                {
                    "Address": 984,
                    "Comment": "#ADDR:0x340F#(get_mem_0): X, Y, Y*W, X*W, G, G/A"
                },
                {
                    "Address": 985,
                    "Comment": "#ADDR:0x300F#: X, Y, Y*W, X*W, G-G/A"
                },
                {
                    "Address": 986,
                    "Comment": "#ADDR:0x341B#(stk_half): X, Y, Y*W, X*W, G-G/A, 1/2"
                },
                {
                    "Address": 987,
                    "Comment": "#ADDR:0x30CA#: X, Y, Y*W, X*W, G/2-G/2*A=F"
                },
                {
                    "Address": 988,
                    "Comment": "#ADDR:0x33C0#: X, Y, Y*W, X*W, F, F"
                },
                {
                    "Address": 989,
                    "Comment": "#ADDR:0x37B5#: X, Y, Y*W, X*W, F, SIN F"
                },
                {
                    "Address": 990,
                    "Comment": "#ADDR:0x342D#(st_mem_5): (SIN F is copied to mem-5)."
                },
                {
                    "Address": 991,
                    "Comment": "#ADDR:0x33A1#: X, Y, Y*W, X*W,F"
                },
                {
                    "Address": 992,
                    "Comment": "#ADDR:0x37AA#: X, Y, Y*W, X*W, COS F"
                },
                {
                    "Address": 993,
                    "Comment": "#ADDR:0x342D#(st_mem_0): (COS F is copied to mem-0)."
                },
                {
                    "Address": 994,
                    "Comment": "#ADDR:0x33A1#: X, Y, Y*W, X*W"
                },
                {
                    "Address": 995,
                    "Comment": "#ADDR:0x342D#(st_mem_2): (X*W is copied to mem-2)."
                },
                {
                    "Address": 996,
                    "Comment": "#ADDR:0x33A1#: X, Y, Y*W"
                },
                {
                    "Address": 997,
                    "Comment": "#ADDR:0x342D#(st_mem_1): (Y*W is copied to mem-1)."
                },
                {
                    "Address": 998,
                    "Comment": "#ADDR:0x340F#(get_mem_5): X, Y, Y*W, SIN F"
                },
                {
                    "Address": 999,
                    "Comment": "#ADDR:0x30CA#: X, Y, Y*W*SIN F"
                },
                {
                    "Address": 1000,
                    "Comment": "#ADDR:0x340F#(get_mem_0): X, Y, Y*W*SIN F, X*W"
                },
                {
                    "Address": 1001,
                    "Comment": "#ADDR:0x340F#(get_mem_2): X, Y, Y*W*SIN F, X*W, COS F"
                },
                {
                    "Address": 1002,
                    "Comment": "#ADDR:0x30CA#: X, Y, Y*W*SIN F, X*W*COS F"
                },
                {
                    "Address": 1003,
                    "Comment": "#ADDR:0x3014#: X, Y, Y*W*SIN F+X*W*COS F=U"
                },
                {
                    "Address": 1004,
                    "Comment": "#ADDR:0x340F#(get_mem_1): X, Y, U, Y*W"
                },
                {
                    "Address": 1005,
                    "Comment": "#ADDR:0x343C#: X, Y, Y*W, U"
                },
                {
                    "Address": 1006,
                    "Comment": "#ADDR:0x342D#(st_mem_1): (U is copied to mem-1)"
                },
                {
                    "Address": 1007,
                    "Comment": "#ADDR:0x33A1#: X, Y, Y*W"
                },
                {
                    "Address": 1008,
                    "Comment": "#ADDR:0x340F#(get_mem_0): X, Y, Y*W, COS F"
                },
                {
                    "Address": 1009,
                    "Comment": "#ADDR:0x30CA#: X, Y, Y*W*COS F"
                },
                {
                    "Address": 1010,
                    "Comment": "#ADDR:0x340F#(get_mem_2): X, Y, Y*W*COS F, X*W"
                },
                {
                    "Address": 1011,
                    "Comment": "#ADDR:0x340F#(get_mem_5): X, Y, Y*W*COS F, X*W, SIN F"
                },
                {
                    "Address": 1012,
                    "Comment": "#ADDR:0x30CA#: X, Y, Y*W*COS F, X*W*SIN F"
                },
                {
                    "Address": 1013,
                    "Comment": "#ADDR:0x300F#: X, Y, Y*W*COS F-X*W*SIN F=V"
                },
                {
                    "Address": 1014,
                    "Comment": "#ADDR:0x342D#(st_mem_2): (V is copied to mem-2)."
                },
                {
                    "Address": 1015,
                    "Comment": "#ADDR:0x346A#: X, Y, V' (V'=ABS V)"
                },
                {
                    "Address": 1016,
                    "Comment": "#ADDR:0x340F#(get_mem_1): X, Y, V', U"
                },
                {
                    "Address": 1017,
                    "Comment": "#ADDR:0x346A#: X, Y, V', U' (U'=ABS U)"
                },
                {
                    "Address": 1018,
                    "Comment": "#ADDR:0x3014#: X, Y, U'+V'"
                },
                {
                    "Address": 1019,
                    "Comment": "#ADDR:0x33A1#: X, Y"
                },
                {
                    "Address": 1020,
                    "Comment": "#ADDR:0x369B#: (#REG:DE# now points to U'+V')."
                }
            ],
            "LabelInfo": [
                {
                    "Address": 14,
                    "LabelType": 2,
                    "Name": "PR_ITEM_2"
                },
                {
                    "Address": 30,
                    "LabelType": 2,
                    "Name": "PR_AT_TAB"
                },
                {
                    "Address": 36,
                    "LabelType": 2,
                    "Name": "PR_ITEM_3"
                },
                {
                    "Address": 60,
                    "LabelType": 2,
                    "Name": "PR_STRING"
                },
                {
                    "Address": 69,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "PR_END_Z"
                },
                {
                    "Address": 72,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "PR_ST_END"
                },
                {
                    "Address": 78,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "PR_POSN_1"
                },
                {
                    "Address": 97,
                    "LabelType": 2,
                    "Name": "PR_POSN_2"
                },
                {
                    "Address": 103,
                    "LabelType": 2,
                    "Name": "PR_POSN_3"
                },
                {
                    "Address": 110,
                    "LabelType": 2,
                    "Name": "PR_POSN_4"
                },
                {
                    "Address": 112,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "STR_ALTER"
                },
                {
                    "Address": 137,
                    "LabelType": 2,
                    "Name": "INPUT"
                },
                {
                    "Address": 150,
                    "LabelType": 2,
                    "Name": "INPUT_1"
                },
                {
                    "Address": 173,
                    "LabelType": 2,
                    "Name": "INPUT_2"
                },
                {
                    "Address": 193,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "IN_ITEM_1"
                },
                {
                    "Address": 216,
                    "LabelType": 2,
                    "Name": "IN_ITEM_2"
                },
                {
                    "Address": 237,
                    "LabelType": 2,
                    "Name": "IN_ITEM_3"
                },
                {
                    "Address": 250,
                    "LabelType": 2,
                    "Name": "IN_PROMPT"
                },
                {
                    "Address": 282,
                    "LabelType": 2,
                    "Name": "IN_PR_1"
                },
                {
                    "Address": 284,
                    "LabelType": 2,
                    "Name": "IN_PR_2"
                },
                {
                    "Address": 297,
                    "LabelType": 2,
                    "Name": "IN_PR_3"
                },
                {
                    "Address": 314,
                    "LabelType": 2,
                    "Name": "IN_VAR_1"
                },
                {
                    "Address": 328,
                    "LabelType": 2,
                    "Name": "IN_VAR_2"
                },
                {
                    "Address": 350,
                    "LabelType": 2,
                    "Name": "IN_VAR_3"
                },
                {
                    "Address": 353,
                    "LabelType": 2,
                    "Name": "IN_VAR_4"
                },
                {
                    "Address": 372,
                    "LabelType": 2,
                    "Name": "IN_VAR_5"
                },
                {
                    "Address": 411,
                    "LabelType": 2,
                    "Name": "IN_VAR_6"
                },
                {
                    "Address": 431,
                    "LabelType": 2,
                    "Name": "IN_NEXT_1"
                },
                {
                    "Address": 434,
                    "LabelType": 2,
                    "Name": "IN_NEXT_2"
                },
                {
                    "Address": 441,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "IN_ASSIGN"
                },
                {
                    "Address": 464,
                    "LabelType": 2,
                    "Name": "IN_STOP"
                },
                {
                    "Address": 470,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "IN_CHAN_K"
                },
                {
                    "Address": 481,
                    "LabelType": 2,
                    "Name": "CO_TEMP_1"
                },
                {
                    "Address": 482,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CO_TEMP_2"
                },
                {
                    "Address": 498,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CO_TEMP_3"
                },
                {
                    "Address": 508,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CO_TEMP_4"
                },
                {
                    "Address": 529,
                    "LabelType": 2,
                    "Name": "CO_TEMP_5"
                },
                {
                    "Address": 552,
                    "LabelType": 2,
                    "Name": "CO_TEMP_6"
                },
                {
                    "Address": 564,
                    "LabelType": 2,
                    "Name": "CO_TEMP_7"
                },
                {
                    "Address": 574,
                    "LabelType": 2,
                    "Name": "CO_TEMP_8"
                },
                {
                    "Address": 580,
                    "LabelType": 2,
                    "Name": "REPORT_K"
                },
                {
                    "Address": 582,
                    "LabelType": 2,
                    "Name": "CO_TEMP_9"
                },
                {
                    "Address": 599,
                    "LabelType": 2,
                    "Name": "CO_TEMP_A"
                },
                {
                    "Address": 600,
                    "LabelType": 2,
                    "Name": "CO_TEMP_B"
                },
                {
                    "Address": 620,
                    "LabelType": 2,
                    "Name": "CO_CHANGE"
                },
                {
                    "Address": 627,
                    "LabelType": 2,
                    "Name": "CO_TEMP_C"
                },
                {
                    "Address": 637,
                    "LabelType": 2,
                    "Name": "CO_TEMP_D"
                },
                {
                    "Address": 647,
                    "LabelType": 2,
                    "Name": "CO_TEMP_E"
                },
                {
                    "Address": 660,
                    "LabelType": 2,
                    "Name": "BORDER"
                },
                {
                    "Address": 678,
                    "LabelType": 2,
                    "Name": "BORDER_1"
                },
                {
                    "Address": 682,
                    "LabelType": 2,
                    "Name": "PIXEL_ADD"
                },
                {
                    "Address": 715,
                    "LabelType": 2,
                    "Name": "POINT_SUB"
                },
                {
                    "Address": 724,
                    "LabelType": 2,
                    "Name": "POINT_LP"
                },
                {
                    "Address": 732,
                    "LabelType": 2,
                    "Name": "PLOT"
                },
                {
                    "Address": 741,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "PLOT_SUB"
                },
                {
                    "Address": 752,
                    "LabelType": 2,
                    "Name": "PLOT_LOOP"
                },
                {
                    "Address": 765,
                    "LabelType": 2,
                    "Name": "PL_TST_IN"
                },
                {
                    "Address": 771,
                    "LabelType": 2,
                    "Name": "PLOT_END"
                },
                {
                    "Address": 775,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "STK_TO_BC"
                },
                {
                    "Address": 788,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "STK_TO_A"
                },
                {
                    "Address": 800,
                    "LabelType": 2,
                    "Name": "CIRCLE"
                },
                {
                    "Address": 827,
                    "LabelType": 2,
                    "Name": "C_R_GRE_1"
                },
                {
                    "Address": 858,
                    "LabelType": 2,
                    "Name": "C_ARC_GE1"
                },
                {
                    "Address": 898,
                    "LabelType": 2,
                    "Name": "DRAW"
                },
                {
                    "Address": 909,
                    "LabelType": 2,
                    "Name": "DR_3_PRMS"
                },
                {
                    "Address": 931,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "DR_SIN_NZ"
                },
                {
                    "Address": 961,
                    "LabelType": 2,
                    "Name": "DR_PRMS"
                }
            ],
            "PageId": 8
        },
        {
            "CodeInfo": [
                {
                    "Address": 0,
                    "ByteSize": 1,
                    "Comment": "the line from X0, Y0 to X0+X, Y0+Y."
                },
                {
                    "Address": 1,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 4,
                    "ByteSize": 1,
                    "Comment": "{Otherwise, continue with the parameters: X, Y, on the"
                },
                {
                    "Address": 5,
                    "ByteSize": 1,
                    "Comment": "stack.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 8,
                    "ByteSize": 3,
                    "Comment": "{Get X0 from \\#SYSVAR(COORDS) into #REG:A# and so on to the",
                    "OperandType": 1
                },
                {
                    "Address": 11,
                    "ByteSize": 3,
                    "Comment": "stack.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 14,
                    "ByteSize": 1,
                    "Comment": "Y, X, X0",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 19,
                    "ByteSize": 3,
                    "Comment": "{Get Y0 from \\#SYSVAR(COORDS) into #REG:A# and so on to the",
                    "OperandType": 1
                },
                {
                    "Address": 22,
                    "ByteSize": 3,
                    "Comment": "stack.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 25,
                    "ByteSize": 1,
                    "Comment": "X0+X, Y, Y0",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 31,
                    "ByteSize": 1,
                    "Comment": "Restore the arc-counter in #REG:B#."
                },
                {
                    "Address": 32,
                    "ByteSize": 1,
                    "Comment": "#REG:B# counts the passes through the loop."
                },
                {
                    "Address": 33,
                    "ByteSize": 2,
                    "Comment": "Jump when #REG:B# has reached zero.",
                    "OperandType": 2
                },
                {
                    "Address": 35,
                    "ByteSize": 2,
                    "Comment": "Jump into the loop to start.",
                    "OperandType": 2
                },
                {
                    "Address": 37,
                    "ByteSize": 1,
                    "Comment": "(See text above for the stack).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 57,
                    "ByteSize": 1,
                    "Comment": "Save the arc-counter."
                },
                {
                    "Address": 58,
                    "ByteSize": 1,
                    "Comment": "X0+X, Y0+y, Xn, Yn",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 65,
                    "ByteSize": 3,
                    "Comment": "{Next Xn', the approximate value of Xn reached by the",
                    "OperandType": 1
                },
                {
                    "Address": 68,
                    "ByteSize": 3,
                    "Comment": "line-drawing subroutine is copied from \\#SYSVAR(COORDS)\nto #REG:A# and hence to the stack.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 71,
                    "ByteSize": 1,
                    "Comment": "X0+X, Y0+Y, Xn+1, Xn'",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 80,
                    "ByteSize": 3,
                    "Comment": "{Yn', approximate like Xn', is copied from",
                    "OperandType": 1
                },
                {
                    "Address": 83,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(COORDS) to #REG:A# and hence to the stack.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 86,
                    "ByteSize": 1,
                    "Comment": "X0+X, Y0+Y, Xn+1, Yn+1, Un', Yn+1, Yn'",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 89,
                    "ByteSize": 3,
                    "Comment": "The next 'arc' is drawn.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 92,
                    "ByteSize": 1,
                    "Comment": "The arc-counter is restored."
                },
                {
                    "Address": 93,
                    "ByteSize": 2,
                    "Comment": "{Jump if more arcs to draw.",
                    "OperandType": 2
                },
                {
                    "Address": 95,
                    "ByteSize": 1,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 100,
                    "ByteSize": 3,
                    "Comment": "{The X-co-ordinate of the end of the last arc that was",
                    "OperandType": 1
                },
                {
                    "Address": 103,
                    "ByteSize": 3,
                    "Comment": "drawn, say Xz', is copied from \\#SYSVAR(COORDS) to the\nstack.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 106,
                    "ByteSize": 1,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 110,
                    "ByteSize": 3,
                    "Comment": "{The Y-co-ordinate is obtained from \\#SYSVAR(COORDS) and",
                    "OperandType": 1
                },
                {
                    "Address": 113,
                    "ByteSize": 3,
                    "Comment": "stacked.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 116,
                    "ByteSize": 1,
                    "Comment": "X0+X-Xz', Y0+Y, Yz'",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 119,
                    "ByteSize": 3,
                    "Comment": "The final arc is drawn to reach X0+X, Y0+Y (or close the\ncircle).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 122,
                    "ByteSize": 3,
                    "Comment": "Exit, setting temporary colours.",
                    "OperandType": 2
                },
                {
                    "Address": 125,
                    "ByteSize": 1,
                    "Comment": "Z",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 138,
                    "ByteSize": 3,
                    "Comment": "A1 to #REG:A# from the stack, if possible.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 141,
                    "ByteSize": 2,
                    "Comment": "If A1 rounds to 256 or more, use 252.",
                    "OperandType": 2
                },
                {
                    "Address": 143,
                    "ByteSize": 2,
                    "Comment": "4*INT (A1/4) to #REG:A#."
                },
                {
                    "Address": 145,
                    "ByteSize": 2,
                    "Comment": "Add 4, giving the arc-count A."
                },
                {
                    "Address": 147,
                    "ByteSize": 2,
                    "Comment": "Jump if still under 256.",
                    "OperandType": 2
                },
                {
                    "Address": 149,
                    "ByteSize": 2,
                    "Comment": "Here, just use 252."
                },
                {
                    "Address": 151,
                    "ByteSize": 1,
                    "Comment": "Now save the arc-count."
                },
                {
                    "Address": 152,
                    "ByteSize": 3,
                    "Comment": "Copy it to calculator stack too.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 155,
                    "ByteSize": 1,
                    "Comment": "Z, A",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 181,
                    "ByteSize": 1,
                    "Comment": "Restore the arc-count to #REG:B#."
                },
                {
                    "Address": 182,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 183,
                    "ByteSize": 3,
                    "Comment": "ABS Y to #REG:B#; ABS X to #REG:C#; SGN Y to #REG:D#; SGN X to\n#REG:E#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 186,
                    "ByteSize": 1,
                    "Comment": "{Jump if ABS X is greater than or equal to ABS Y, so"
                },
                {
                    "Address": 187,
                    "ByteSize": 1,
                    "Comment": "that the smaller goes to #REG:L#, and the larger (later)"
                },
                {
                    "Address": 188,
                    "ByteSize": 2,
                    "Comment": "goes to #REG:H#.",
                    "OperandType": 2
                },
                {
                    "Address": 190,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 191,
                    "ByteSize": 1,
                    "Comment": "Save diagonal step (+/-1,+/-1) in #REG:DE#."
                },
                {
                    "Address": 192,
                    "ByteSize": 1,
                    "Comment": "{Insert a vertical step (+/-1,0) into #REG:DE# (#REG:D#"
                },
                {
                    "Address": 193,
                    "ByteSize": 1,
                    "Comment": "holds SGN Y).}"
                },
                {
                    "Address": 194,
                    "ByteSize": 2,
                    "Comment": "Now jump to set #REG:H#.",
                    "OperandType": 2
                },
                {
                    "Address": 196,
                    "ByteSize": 1,
                    "Comment": "{Return if ABS X and ABS Y are both zero."
                },
                {
                    "Address": 197,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 198,
                    "ByteSize": 1,
                    "Comment": "The smaller (ABS Y here) goes to #REG:L#."
                },
                {
                    "Address": 199,
                    "ByteSize": 1,
                    "Comment": "ABS X to #REG:B# here, for #REG:H#."
                },
                {
                    "Address": 200,
                    "ByteSize": 1,
                    "Comment": "Save the diagonal step here too."
                },
                {
                    "Address": 201,
                    "ByteSize": 2,
                    "Comment": "Horizontal step (0,+/-1) to #REG:DE# here."
                },
                {
                    "Address": 203,
                    "ByteSize": 1,
                    "Comment": "Larger of ABS X, ABS Y to #REG:H# now."
                },
                {
                    "Address": 204,
                    "ByteSize": 1,
                    "Comment": "#REG:B# to #REG:A# as well as to #REG:H#."
                },
                {
                    "Address": 205,
                    "ByteSize": 1,
                    "Comment": "#REG:A# starts at INT (#REG:H#/2)."
                },
                {
                    "Address": 206,
                    "ByteSize": 1,
                    "Comment": "#REG:L# is added to #REG:A#."
                },
                {
                    "Address": 207,
                    "ByteSize": 2,
                    "Comment": "If 256 or more, jump - diagonal step.",
                    "OperandType": 2
                },
                {
                    "Address": 209,
                    "ByteSize": 1,
                    "Comment": "{If #REG:A# is less than #REG:H#, jump for horizontal or"
                },
                {
                    "Address": 210,
                    "ByteSize": 2,
                    "Comment": "vertical step.}",
                    "OperandType": 2
                },
                {
                    "Address": 212,
                    "ByteSize": 1,
                    "Comment": "Reduce #REG:A# by #REG:H#."
                },
                {
                    "Address": 213,
                    "ByteSize": 1,
                    "Comment": "Restore it to #REG:C#."
                },
                {
                    "Address": 214,
                    "ByteSize": 1,
                    "Comment": "Now use the exchange resisters."
                },
                {
                    "Address": 215,
                    "ByteSize": 1,
                    "Comment": "Diagonal step to \\#REGbc'."
                },
                {
                    "Address": 216,
                    "ByteSize": 1,
                    "Comment": "Save it too."
                },
                {
                    "Address": 217,
                    "ByteSize": 2,
                    "Comment": "Jump to take the step.",
                    "OperandType": 2
                },
                {
                    "Address": 219,
                    "ByteSize": 1,
                    "Comment": "Save #REG:A# (unreduced) in #REG:C#."
                },
                {
                    "Address": 220,
                    "ByteSize": 1,
                    "Comment": "Step to stack briefly."
                },
                {
                    "Address": 221,
                    "ByteSize": 1,
                    "Comment": "Get exchange registers."
                },
                {
                    "Address": 222,
                    "ByteSize": 1,
                    "Comment": "Step to \\#REGbc' now."
                },
                {
                    "Address": 223,
                    "ByteSize": 3,
                    "Comment": "Now take the step: first, \\#SYSVAR(COORDS) to \\#REGhl' as\nthe start point.",
                    "OperandType": 1
                },
                {
                    "Address": 226,
                    "ByteSize": 1,
                    "Comment": "Y-step from \\#REGb' to #REG:A#."
                },
                {
                    "Address": 227,
                    "ByteSize": 1,
                    "Comment": "Add in \\#REGh'."
                },
                {
                    "Address": 228,
                    "ByteSize": 1,
                    "Comment": "Result to \\#REGb'."
                },
                {
                    "Address": 229,
                    "ByteSize": 1,
                    "Comment": "{Now the X-step; it will be tested for range (Y will be"
                },
                {
                    "Address": 230,
                    "ByteSize": 1,
                    "Comment": "tested in #ADDR:0x22DC#).}"
                },
                {
                    "Address": 231,
                    "ByteSize": 1,
                    "Comment": "{Add \\#REGl' to \\#REGc' in #REG:A#, jump on carry for"
                },
                {
                    "Address": 232,
                    "ByteSize": 2,
                    "Comment": "further test.}",
                    "OperandType": 2
                },
                {
                    "Address": 234,
                    "ByteSize": 2,
                    "Comment": "Zero after no carry denotes X-position -1, out of range.",
                    "OperandType": 2
                },
                {
                    "Address": 236,
                    "ByteSize": 1,
                    "Comment": "Restore true value to #REG:A#."
                },
                {
                    "Address": 237,
                    "ByteSize": 1,
                    "Comment": "Value to \\#REGc' for plotting."
                },
                {
                    "Address": 238,
                    "ByteSize": 3,
                    "Comment": "Plot the step.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 241,
                    "ByteSize": 1,
                    "Comment": "Restore main registers."
                },
                {
                    "Address": 242,
                    "ByteSize": 1,
                    "Comment": "#REG:C# back to #REG:A# to continue algorithm."
                },
                {
                    "Address": 243,
                    "ByteSize": 2,
                    "Comment": "Loop back for #REG:B# steps (i.e. #REG:H# steps).",
                    "OperandType": 2
                },
                {
                    "Address": 245,
                    "ByteSize": 1,
                    "Comment": "Clear machine stack."
                },
                {
                    "Address": 246,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 247,
                    "ByteSize": 2,
                    "Comment": "Zero after carry denotes X-position 255, in range.",
                    "OperandType": 2
                },
                {
                    "Address": 249,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 251,
                    "ByteSize": 1,
                    "Comment": "The first character is fetched.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 252,
                    "ByteSize": 2,
                    "Comment": "The starting priority marker."
                },
                {
                    "Address": 254,
                    "ByteSize": 1,
                    "Comment": "It is stacked."
                },
                {
                    "Address": 255,
                    "ByteSize": 1,
                    "Comment": "The main re-entry point."
                },
                {
                    "Address": 256,
                    "ByteSize": 3,
                    "Comment": "{Index into the #ADDR:0x2596#(scanning function table) with"
                },
                {
                    "Address": 259,
                    "ByteSize": 3,
                    "Comment": "the code in #REG:C#.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 262,
                    "ByteSize": 1,
                    "Comment": "Restore the code to #REG:A#."
                },
                {
                    "Address": 263,
                    "ByteSize": 3,
                    "Comment": "Jump if code not found in table.",
                    "OperandType": 2
                },
                {
                    "Address": 266,
                    "ByteSize": 2,
                    "Comment": "{Use the entry found in the table to build up the"
                },
                {
                    "Address": 268,
                    "ByteSize": 1,
                    "Comment": "required address in #REG:HL#, and jump to it."
                },
                {
                    "Address": 269,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 270,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 271,
                    "ByteSize": 3,
                    "Comment": "Point to the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 274,
                    "ByteSize": 1,
                    "Comment": "Increase the length count by one."
                },
                {
                    "Address": 275,
                    "ByteSize": 2,
                    "Comment": "Is it a carriage return?"
                },
                {
                    "Address": 277,
                    "ByteSize": 3,
                    "Comment": "Report the error if so.",
                    "OperandType": 2
                },
                {
                    "Address": 280,
                    "ByteSize": 2,
                    "Comment": "Is it another '\"'?"
                },
                {
                    "Address": 282,
                    "ByteSize": 2,
                    "Comment": "Loop back if it is not.",
                    "OperandType": 2
                },
                {
                    "Address": 284,
                    "ByteSize": 3,
                    "Comment": "Point to next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 287,
                    "ByteSize": 2,
                    "Comment": "Set zero flag if it is another '\"'."
                },
                {
                    "Address": 289,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 290,
                    "ByteSize": 1,
                    "Comment": "Fetch the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 291,
                    "ByteSize": 2,
                    "Comment": "Is it a '('?"
                },
                {
                    "Address": 293,
                    "ByteSize": 2,
                    "Comment": "Report the error if it is not.",
                    "OperandType": 2
                },
                {
                    "Address": 295,
                    "ByteSize": 3,
                    "Comment": "Co-ordinates to calculator stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 298,
                    "ByteSize": 1,
                    "Comment": "Fetch the current character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 299,
                    "ByteSize": 2,
                    "Comment": "Is it a ')'?"
                },
                {
                    "Address": 301,
                    "ByteSize": 3,
                    "Comment": "Report the error if it is not.",
                    "OperandType": 2
                },
                {
                    "Address": 304,
                    "ByteSize": 4,
                    "Comment": "Test bit 7 of \\#SYSVAR(FLAGS)."
                },
                {
                    "Address": 308,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 309,
                    "ByteSize": 3,
                    "Comment": "x to #REG:C#, y to #REG:B#; 0<=x<=23; 0<=y<=31.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 312,
                    "ByteSize": 3,
                    "Comment": "{\\#SYSVAR(CHARS) plus &0100 gives #REG:HL# pointing to the",
                    "OperandType": 1
                },
                {
                    "Address": 315,
                    "ByteSize": 3,
                    "Comment": "character set."
                },
                {
                    "Address": 318,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 319,
                    "ByteSize": 1,
                    "Comment": "x is copied to #REG:A#."
                },
                {
                    "Address": 320,
                    "ByteSize": 1,
                    "Comment": "{The number 32*(x mod 8)+y is formed in #REG:A# and copied"
                },
                {
                    "Address": 321,
                    "ByteSize": 1,
                    "Comment": "to #REG:E#. This is the low byte of the required screen"
                },
                {
                    "Address": 322,
                    "ByteSize": 1,
                    "Comment": "address."
                },
                {
                    "Address": 323,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 325,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 326,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 327,
                    "ByteSize": 1,
                    "Comment": "x is copied to #REG:A# again."
                },
                {
                    "Address": 328,
                    "ByteSize": 2,
                    "Comment": "{Now the number 64+8*INT (x/8) is inserted into #REG:D#."
                },
                {
                    "Address": 330,
                    "ByteSize": 2,
                    "Comment": "#REG:DE# now holds the screen address."
                },
                {
                    "Address": 332,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 333,
                    "ByteSize": 2,
                    "Comment": "#REG:B# counts the 96 characters."
                },
                {
                    "Address": 335,
                    "ByteSize": 1,
                    "Comment": "Save the count."
                },
                {
                    "Address": 336,
                    "ByteSize": 1,
                    "Comment": "And the screen pointer."
                },
                {
                    "Address": 337,
                    "ByteSize": 1,
                    "Comment": "And the character set pointer."
                },
                {
                    "Address": 338,
                    "ByteSize": 1,
                    "Comment": "Get first row of screen character."
                },
                {
                    "Address": 339,
                    "ByteSize": 1,
                    "Comment": "Match with row from character set."
                },
                {
                    "Address": 340,
                    "ByteSize": 2,
                    "Comment": "Jump if direct match found.",
                    "OperandType": 2
                },
                {
                    "Address": 342,
                    "ByteSize": 1,
                    "Comment": "Now test for match with inverse character (get &00 in\n#REG:A# from &FF)."
                },
                {
                    "Address": 343,
                    "ByteSize": 2,
                    "Comment": "Jump if neither match found.",
                    "OperandType": 2
                },
                {
                    "Address": 345,
                    "ByteSize": 1,
                    "Comment": "Restore &FF to #REG:A#."
                },
                {
                    "Address": 346,
                    "ByteSize": 1,
                    "Comment": "Inverse status (&00 or &FF) to #REG:C#."
                },
                {
                    "Address": 347,
                    "ByteSize": 2,
                    "Comment": "#REG:B# counts through the other 7 rows."
                },
                {
                    "Address": 349,
                    "ByteSize": 1,
                    "Comment": "Move #REG:DE# to next row (add &0100)."
                },
                {
                    "Address": 350,
                    "ByteSize": 1,
                    "Comment": "Move #REG:HL# to next row (i.e. next byte)."
                },
                {
                    "Address": 351,
                    "ByteSize": 1,
                    "Comment": "Get the screen row."
                },
                {
                    "Address": 352,
                    "ByteSize": 1,
                    "Comment": "Match with row from the ROM."
                },
                {
                    "Address": 353,
                    "ByteSize": 1,
                    "Comment": "Include the inverse status."
                },
                {
                    "Address": 354,
                    "ByteSize": 2,
                    "Comment": "Jump if row fails to match.",
                    "OperandType": 2
                },
                {
                    "Address": 356,
                    "ByteSize": 2,
                    "Comment": "Jump back till all rows done.",
                    "OperandType": 2
                },
                {
                    "Address": 358,
                    "ByteSize": 1,
                    "Comment": "Discard character set pointer."
                },
                {
                    "Address": 359,
                    "ByteSize": 1,
                    "Comment": "And screen pointer."
                },
                {
                    "Address": 360,
                    "ByteSize": 1,
                    "Comment": "Final count to #REG:BC#."
                },
                {
                    "Address": 361,
                    "ByteSize": 2,
                    "Comment": "Last character code in set plus one."
                },
                {
                    "Address": 363,
                    "ByteSize": 1,
                    "Comment": "#REG:A# now holds required code."
                },
                {
                    "Address": 364,
                    "ByteSize": 3,
                    "Comment": "One space is now needed in the work space."
                },
                {
                    "Address": 367,
                    "ByteSize": 1,
                    "Comment": "Make the space.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 368,
                    "ByteSize": 1,
                    "Comment": "Put the character into it."
                },
                {
                    "Address": 369,
                    "ByteSize": 2,
                    "Comment": "Jump to stack the character.",
                    "OperandType": 2
                },
                {
                    "Address": 371,
                    "ByteSize": 1,
                    "Comment": "Restore character set pointer."
                },
                {
                    "Address": 372,
                    "ByteSize": 3,
                    "Comment": "{Move it on 8 bytes, to the next character in the set."
                },
                {
                    "Address": 375,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 376,
                    "ByteSize": 1,
                    "Comment": "Restore the screen pointer."
                },
                {
                    "Address": 377,
                    "ByteSize": 1,
                    "Comment": "And the counter."
                },
                {
                    "Address": 378,
                    "ByteSize": 2,
                    "Comment": "Loop back for the 96 characters.",
                    "OperandType": 2
                },
                {
                    "Address": 380,
                    "ByteSize": 1,
                    "Comment": "Stack the empty string (length zero)."
                },
                {
                    "Address": 381,
                    "ByteSize": 3,
                    "Comment": "Jump to stack the matching character, or the null string\nif no match is found.",
                    "OperandType": 2
                },
                {
                    "Address": 384,
                    "ByteSize": 3,
                    "Comment": "x to #REG:C#, y to #REG:B#. Again, 0<=x<=23; 0<=y<=31.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 387,
                    "ByteSize": 1,
                    "Comment": "{x is copied to #REG:A# and the number 32*(x mod 8)+y is"
                },
                {
                    "Address": 388,
                    "ByteSize": 1,
                    "Comment": "formed in #REG:A#. 32*(x mod 8)+INT (x/8) is also copied"
                },
                {
                    "Address": 389,
                    "ByteSize": 1,
                    "Comment": "to #REG:C#."
                },
                {
                    "Address": 390,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 391,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 392,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 394,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 395,
                    "ByteSize": 1,
                    "Comment": "#REG:L# holds low byte of attribute address."
                },
                {
                    "Address": 396,
                    "ByteSize": 1,
                    "Comment": "32*(x mod 8)+INT (x/8) is copied to #REG:A#."
                },
                {
                    "Address": 397,
                    "ByteSize": 2,
                    "Comment": "{88+INT (x/8) is formed in #REG:A#."
                },
                {
                    "Address": 399,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 401,
                    "ByteSize": 1,
                    "Comment": "#REG:H# holds high byte of attribute address."
                },
                {
                    "Address": 402,
                    "ByteSize": 1,
                    "Comment": "The attribute byte is copied to #REG:A#."
                },
                {
                    "Address": 403,
                    "ByteSize": 3,
                    "Comment": "Exit, stacking the required byte.",
                    "OperandType": 2
                },
                {
                    "Address": 431,
                    "ByteSize": 1,
                    "Comment": "{For unary plus, simply move on to the next character",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 432,
                    "ByteSize": 3,
                    "Comment": "and jump back to the main re-entry of #ADDR:0x24FB#.}",
                    "OperandType": 2
                },
                {
                    "Address": 435,
                    "ByteSize": 1,
                    "Comment": "Fetch the current character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 436,
                    "ByteSize": 1,
                    "Comment": "Point to the start of the string."
                },
                {
                    "Address": 437,
                    "ByteSize": 1,
                    "Comment": "Save the start address."
                },
                {
                    "Address": 438,
                    "ByteSize": 3,
                    "Comment": "Set the length to zero."
                },
                {
                    "Address": 441,
                    "ByteSize": 3,
                    "Comment": "Call the \"matching\" subroutine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 444,
                    "ByteSize": 2,
                    "Comment": "Jump if zero reset - no more quotes.",
                    "OperandType": 2
                },
                {
                    "Address": 446,
                    "ByteSize": 3,
                    "Comment": "Call it again for a third quote.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 449,
                    "ByteSize": 2,
                    "Comment": "And again for the fifth, seventh etc.",
                    "OperandType": 2
                },
                {
                    "Address": 451,
                    "ByteSize": 3,
                    "Comment": "{If testing syntax, jump to reset bit 6 of",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 454,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(FLAGS) and to continue scanning.}",
                    "OperandType": 2
                },
                {
                    "Address": 456,
                    "ByteSize": 1,
                    "Comment": "Make space in the work space for the string and the\nterminating quote.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 457,
                    "ByteSize": 1,
                    "Comment": "Get the pointer to the start."
                },
                {
                    "Address": 458,
                    "ByteSize": 1,
                    "Comment": "Save the pointer to the first space."
                },
                {
                    "Address": 459,
                    "ByteSize": 1,
                    "Comment": "Get a character from the string."
                },
                {
                    "Address": 460,
                    "ByteSize": 1,
                    "Comment": "Point to the next one."
                },
                {
                    "Address": 461,
                    "ByteSize": 1,
                    "Comment": "Copy last one to work space."
                },
                {
                    "Address": 462,
                    "ByteSize": 1,
                    "Comment": "Point to the next space."
                },
                {
                    "Address": 463,
                    "ByteSize": 2,
                    "Comment": "Is last character a '\"'?"
                },
                {
                    "Address": 465,
                    "ByteSize": 2,
                    "Comment": "If not, jump to copy next one.",
                    "OperandType": 2
                },
                {
                    "Address": 467,
                    "ByteSize": 1,
                    "Comment": "{But if it was, do not copy next one; if next one is a"
                },
                {
                    "Address": 468,
                    "ByteSize": 1,
                    "Comment": "'\"', jump to copy the one after it; otherwise, finished"
                },
                {
                    "Address": 469,
                    "ByteSize": 2,
                    "Comment": "with copying."
                },
                {
                    "Address": 471,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 473,
                    "ByteSize": 1,
                    "Comment": "Get true length to #REG:BC#."
                },
                {
                    "Address": 474,
                    "ByteSize": 1,
                    "Comment": "Restore start of copied string."
                },
                {
                    "Address": 475,
                    "ByteSize": 3,
                    "Comment": "{This is \\#SYSVAR(FLAGS); this entry point is used"
                },
                {
                    "Address": 478,
                    "ByteSize": 2,
                    "Comment": "whenever bit 6 is to be reset and a string stacked if"
                },
                {
                    "Address": 480,
                    "ByteSize": 2,
                    "Comment": "executing a line. This is done now."
                },
                {
                    "Address": 482,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 485,
                    "ByteSize": 3,
                    "Comment": "Jump to continue scanning the line.",
                    "OperandType": 2
                },
                {
                    "Address": 488,
                    "ByteSize": 1,
                    "Comment": "{This routine simply gets the character and calls",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 489,
                    "ByteSize": 3,
                    "Comment": "#ADDR:0x24FB# recursively.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 492,
                    "ByteSize": 2,
                    "Comment": "{Report the error if no matching bracket."
                },
                {
                    "Address": 494,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 497,
                    "ByteSize": 1,
                    "Comment": "{Continue scanning.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 498,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 501,
                    "ByteSize": 3,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 504,
                    "ByteSize": 3,
                    "Comment": "{Unless syntax is being checked, jump to",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 507,
                    "ByteSize": 2,
                    "Comment": "calculate a random number.}",
                    "OperandType": 2
                },
                {
                    "Address": 509,
                    "ByteSize": 4,
                    "Comment": "Fetch the current value of \\#SYSVAR(SEED).",
                    "OperandType": 1
                },
                {
                    "Address": 513,
                    "ByteSize": 3,
                    "Comment": "Put it on the calculator stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 516,
                    "ByteSize": 1,
                    "Comment": "Now use the calculator.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 535,
                    "ByteSize": 3,
                    "Comment": "{Use the 'last value' to give the new value",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 538,
                    "ByteSize": 4,
                    "Comment": "for \\#SYSVAR(SEED).}",
                    "OperandType": 1
                },
                {
                    "Address": 542,
                    "ByteSize": 1,
                    "Comment": "Fetch the exponent of 'last value'."
                },
                {
                    "Address": 543,
                    "ByteSize": 1,
                    "Comment": "{Jump forward if the exponent is zero."
                },
                {
                    "Address": 544,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 546,
                    "ByteSize": 2,
                    "Comment": "{Reduce the exponent, i.e. divide 'last"
                },
                {
                    "Address": 548,
                    "ByteSize": 1,
                    "Comment": "value' by 65536 to give the required 'last\nvalue'.}"
                },
                {
                    "Address": 549,
                    "ByteSize": 2,
                    "Comment": "Jump past the #ADDR:0x2627# routine.",
                    "OperandType": 2
                },
                {
                    "Address": 551,
                    "ByteSize": 3,
                    "Comment": "Test for syntax checking.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 554,
                    "ByteSize": 2,
                    "Comment": "Jump if required.",
                    "OperandType": 2
                },
                {
                    "Address": 556,
                    "ByteSize": 1,
                    "Comment": "Now use the calculator.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 559,
                    "ByteSize": 1,
                    "Comment": "The exponent is incremented thereby doubling the 'last\nvalue' giving \\#pi."
                },
                {
                    "Address": 560,
                    "ByteSize": 1,
                    "Comment": "Move on to the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 561,
                    "ByteSize": 3,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 564,
                    "ByteSize": 3,
                    "Comment": "{Priority &10, operation code &5A for the 'read-in'"
                },
                {
                    "Address": 567,
                    "ByteSize": 1,
                    "Comment": "subroutine.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 568,
                    "ByteSize": 2,
                    "Comment": "{If next char. is '\\#', jump. There will be a numerical"
                },
                {
                    "Address": 570,
                    "ByteSize": 3,
                    "Comment": "argument.}",
                    "OperandType": 2
                },
                {
                    "Address": 573,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(FLAGS)."
                },
                {
                    "Address": 576,
                    "ByteSize": 2,
                    "Comment": "Reset bit 6 for a string result."
                },
                {
                    "Address": 578,
                    "ByteSize": 2,
                    "Comment": "Test for syntax checking."
                },
                {
                    "Address": 580,
                    "ByteSize": 2,
                    "Comment": "Jump if required.",
                    "OperandType": 2
                },
                {
                    "Address": 582,
                    "ByteSize": 3,
                    "Comment": "Fetch a key-value in #REG:DE#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 585,
                    "ByteSize": 2,
                    "Comment": "{Prepare empty string; stack it if too many keys"
                },
                {
                    "Address": 587,
                    "ByteSize": 2,
                    "Comment": "pressed.}",
                    "OperandType": 2
                },
                {
                    "Address": 589,
                    "ByteSize": 3,
                    "Comment": "{Test the key value; stack empty string if",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 592,
                    "ByteSize": 2,
                    "Comment": "unsatisfactory.}",
                    "OperandType": 2
                },
                {
                    "Address": 594,
                    "ByteSize": 1,
                    "Comment": "&FF to #REG:D# for 'L' mode (bit 3 set)."
                },
                {
                    "Address": 595,
                    "ByteSize": 1,
                    "Comment": "Key-value to #REG:E# for decoding."
                },
                {
                    "Address": 596,
                    "ByteSize": 3,
                    "Comment": "Decode the key-value.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 599,
                    "ByteSize": 1,
                    "Comment": "Save the ASCII value briefly."
                },
                {
                    "Address": 600,
                    "ByteSize": 3,
                    "Comment": "One space is needed in the work space."
                },
                {
                    "Address": 603,
                    "ByteSize": 1,
                    "Comment": "Make it now.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 604,
                    "ByteSize": 1,
                    "Comment": "Restore the ASCII value."
                },
                {
                    "Address": 605,
                    "ByteSize": 1,
                    "Comment": "Prepare to stack it as a string."
                },
                {
                    "Address": 606,
                    "ByteSize": 2,
                    "Comment": "Its length is one."
                },
                {
                    "Address": 608,
                    "ByteSize": 2,
                    "Comment": "Complete the length parameter."
                },
                {
                    "Address": 610,
                    "ByteSize": 3,
                    "Comment": "Stack the required string.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 613,
                    "ByteSize": 3,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 616,
                    "ByteSize": 3,
                    "Comment": "Check that 2 co-ordinates are given.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 619,
                    "ByteSize": 3,
                    "Comment": "Call the subroutine unless checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 622,
                    "ByteSize": 1,
                    "Comment": "{Then get the next character and jump back.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 623,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 626,
                    "ByteSize": 3,
                    "Comment": "Check that 2 co-ordinates are given.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 629,
                    "ByteSize": 3,
                    "Comment": "Call the subroutine unless checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 632,
                    "ByteSize": 1,
                    "Comment": "{Then get the next character and jump forward.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 633,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 635,
                    "ByteSize": 3,
                    "Comment": "Check that 2 co-ordinates are given.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 638,
                    "ByteSize": 3,
                    "Comment": "Call the subroutine unless checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 641,
                    "ByteSize": 1,
                    "Comment": "{Then get the next character and jump forward.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 642,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 644,
                    "ByteSize": 3,
                    "Comment": "Is the character alphanumeric?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 647,
                    "ByteSize": 2,
                    "Comment": "Jump if not a letter or a digit.",
                    "OperandType": 2
                },
                {
                    "Address": 649,
                    "ByteSize": 2,
                    "Comment": "{Now jump if it is a letter; otherwise continue on into"
                },
                {
                    "Address": 651,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x268D#.}",
                    "OperandType": 2
                },
                {
                    "Address": 653,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if a line is being executed.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 656,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 658,
                    "ByteSize": 3,
                    "Comment": "The floating-point form is found.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 661,
                    "ByteSize": 1,
                    "Comment": "Set #REG:HL# to point one past the last digit.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 662,
                    "ByteSize": 3,
                    "Comment": "Six locations are required."
                },
                {
                    "Address": 665,
                    "ByteSize": 3,
                    "Comment": "Make the room in the BASIC line.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 668,
                    "ByteSize": 1,
                    "Comment": "Point to the first free space."
                },
                {
                    "Address": 669,
                    "ByteSize": 2,
                    "Comment": "Enter the number marker code."
                },
                {
                    "Address": 671,
                    "ByteSize": 1,
                    "Comment": "Point to the second location."
                },
                {
                    "Address": 672,
                    "ByteSize": 1,
                    "Comment": "This pointer is wanted in #REG:DE#."
                },
                {
                    "Address": 673,
                    "ByteSize": 3,
                    "Comment": "Fetch the 'old' \\#SYSVAR(STKEND).",
                    "OperandType": 1
                },
                {
                    "Address": 676,
                    "ByteSize": 2,
                    "Comment": "There are 5 bytes to move."
                },
                {
                    "Address": 678,
                    "ByteSize": 1,
                    "Comment": "Clear the carry flag."
                },
                {
                    "Address": 679,
                    "ByteSize": 2,
                    "Comment": "{The 'new' \\#SYSVAR(STKEND)='old' \\#SYSVAR(STKEND) minus"
                },
                {
                    "Address": 681,
                    "ByteSize": 3,
                    "Comment": "5.}",
                    "OperandType": 1
                },
                {
                    "Address": 684,
                    "ByteSize": 2,
                    "Comment": "Move the floating-point number from the calculator\nstack to the line."
                },
                {
                    "Address": 686,
                    "ByteSize": 1,
                    "Comment": "Put the line pointer in #REG:HL#."
                },
                {
                    "Address": 687,
                    "ByteSize": 1,
                    "Comment": "Point to the last byte added."
                },
                {
                    "Address": 688,
                    "ByteSize": 3,
                    "Comment": "This sets \\#SYSVAR(CH-ADD).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 691,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 693,
                    "ByteSize": 1,
                    "Comment": "Get the current character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 694,
                    "ByteSize": 1,
                    "Comment": "{Now move on to the next character in turn until the"
                },
                {
                    "Address": 695,
                    "ByteSize": 1,
                    "Comment": "number marker code (&0E) is found."
                },
                {
                    "Address": 696,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 698,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 700,
                    "ByteSize": 1,
                    "Comment": "Point to the first byte of the number."
                },
                {
                    "Address": 701,
                    "ByteSize": 3,
                    "Comment": "Move the floating-point number.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 704,
                    "ByteSize": 3,
                    "Comment": "Set \\#SYSVAR(CH-ADD).",
                    "OperandType": 1
                },
                {
                    "Address": 707,
                    "ByteSize": 4,
                    "Comment": "Set the numeric marker flag (bit 6 of \\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 711,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 713,
                    "ByteSize": 3,
                    "Comment": "Look in the existing variables for the matching entry.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 716,
                    "ByteSize": 3,
                    "Comment": "An error is reported if there is no existing entry.",
                    "OperandType": 2
                },
                {
                    "Address": 719,
                    "ByteSize": 3,
                    "Comment": "Stack the parameters of the string entry/return numeric\nelement base address.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 722,
                    "ByteSize": 3,
                    "Comment": "Fetch \\#SYSVAR(FLAGS).",
                    "OperandType": 1
                },
                {
                    "Address": 725,
                    "ByteSize": 2,
                    "Comment": "Test bits 6 and 7 together."
                },
                {
                    "Address": 727,
                    "ByteSize": 2,
                    "Comment": "Jump if one or both bits are reset.",
                    "OperandType": 2
                },
                {
                    "Address": 729,
                    "ByteSize": 1,
                    "Comment": "A numeric value is to be stacked."
                },
                {
                    "Address": 730,
                    "ByteSize": 3,
                    "Comment": "Move the number.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 733,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 735,
                    "ByteSize": 3,
                    "Comment": "Priority &09, operation code &DB."
                },
                {
                    "Address": 738,
                    "ByteSize": 2,
                    "Comment": "Is it a '-'?"
                },
                {
                    "Address": 740,
                    "ByteSize": 2,
                    "Comment": "Jump forward if it is 'unary minus'.",
                    "OperandType": 2
                },
                {
                    "Address": 742,
                    "ByteSize": 3,
                    "Comment": "Priority &10, operation code &18."
                },
                {
                    "Address": 745,
                    "ByteSize": 2,
                    "Comment": "Is it 'VAL$'?"
                },
                {
                    "Address": 747,
                    "ByteSize": 2,
                    "Comment": "Jump forward if it is 'VAL$'.",
                    "OperandType": 2
                },
                {
                    "Address": 749,
                    "ByteSize": 2,
                    "Comment": "The range of the functions is changed from &AF to &C3\nto range &00 to &14."
                },
                {
                    "Address": 751,
                    "ByteSize": 3,
                    "Comment": "Report an error if out of range.",
                    "OperandType": 2
                },
                {
                    "Address": 754,
                    "ByteSize": 3,
                    "Comment": "Priority &04, operation code &F0."
                },
                {
                    "Address": 757,
                    "ByteSize": 2,
                    "Comment": "Is it the function 'NOT'?"
                },
                {
                    "Address": 759,
                    "ByteSize": 2,
                    "Comment": "Jump if it is so.",
                    "OperandType": 2
                },
                {
                    "Address": 761,
                    "ByteSize": 3,
                    "Comment": "Check the range again.",
                    "OperandType": 2
                },
                {
                    "Address": 764,
                    "ByteSize": 2,
                    "Comment": "Priority &10."
                },
                {
                    "Address": 766,
                    "ByteSize": 2,
                    "Comment": "The function range is now &DC to &EF."
                },
                {
                    "Address": 768,
                    "ByteSize": 1,
                    "Comment": "Transfer the operation code."
                },
                {
                    "Address": 769,
                    "ByteSize": 2,
                    "Comment": "{Separate CODE, VAL and LEN which operate on strings to"
                },
                {
                    "Address": 771,
                    "ByteSize": 2,
                    "Comment": "give numerical results.",
                    "OperandType": 2
                },
                {
                    "Address": 773,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 775,
                    "ByteSize": 2,
                    "Comment": "{Separate STR$ and CHR$ which operate on numbers to"
                },
                {
                    "Address": 777,
                    "ByteSize": 2,
                    "Comment": "give string results.}",
                    "OperandType": 2
                },
                {
                    "Address": 779,
                    "ByteSize": 2,
                    "Comment": "Mark the operation codes. The other operation codes\nhave bits 6 and 7 both set."
                },
                {
                    "Address": 781,
                    "ByteSize": 1,
                    "Comment": "{Stack the priority and operation codes before moving"
                },
                {
                    "Address": 782,
                    "ByteSize": 1,
                    "Comment": "on to consider the next part of the expression.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 783,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 786,
                    "ByteSize": 1,
                    "Comment": "Fetch the present character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 787,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if it is not a '(', which indicates a"
                },
                {
                    "Address": 789,
                    "ByteSize": 2,
                    "Comment": "parenthesised expression.}",
                    "OperandType": 2
                },
                {
                    "Address": 791,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if dealing with a numeric parenthesised"
                },
                {
                    "Address": 795,
                    "ByteSize": 2,
                    "Comment": "expression (bit 6 of \\#SYSVAR(FLAGS) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 797,
                    "ByteSize": 3,
                    "Comment": "Modify the parameters of the 'last value'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 800,
                    "ByteSize": 1,
                    "Comment": "{Move on to consider the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 801,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 803,
                    "ByteSize": 2,
                    "Comment": "{Original code to #REG:BC# to index into the"
                },
                {
                    "Address": 805,
                    "ByteSize": 1,
                    "Comment": "#ADDR:0x2795#(table of operators).}"
                },
                {
                    "Address": 806,
                    "ByteSize": 3,
                    "Comment": "The pointer to the table."
                },
                {
                    "Address": 809,
                    "ByteSize": 3,
                    "Comment": "Index into the table.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 812,
                    "ByteSize": 2,
                    "Comment": "Jump forward if no operation found.",
                    "OperandType": 2
                },
                {
                    "Address": 814,
                    "ByteSize": 1,
                    "Comment": "Get required code from the table."
                },
                {
                    "Address": 815,
                    "ByteSize": 3,
                    "Comment": "The pointer to the priority table (\\#h26ED+\\#hC3 gives\n#ADDR:0x27B0# as the first address)."
                },
                {
                    "Address": 818,
                    "ByteSize": 1,
                    "Comment": "Index into the table."
                },
                {
                    "Address": 819,
                    "ByteSize": 1,
                    "Comment": "Fetch the appropriate priority."
                },
                {
                    "Address": 820,
                    "ByteSize": 1,
                    "Comment": "Get the 'last' operation and priority."
                },
                {
                    "Address": 821,
                    "ByteSize": 1,
                    "Comment": "The priority goes to the #REG:A# register."
                },
                {
                    "Address": 822,
                    "ByteSize": 1,
                    "Comment": "Compare 'last' against 'present'."
                },
                {
                    "Address": 823,
                    "ByteSize": 2,
                    "Comment": "Exit to wait for the argument.",
                    "OperandType": 2
                },
                {
                    "Address": 825,
                    "ByteSize": 1,
                    "Comment": "Are both priorities zero?"
                },
                {
                    "Address": 826,
                    "ByteSize": 3,
                    "Comment": "Exit via #ADDR:0x0018# thereby making 'last value' the\nrequired result.",
                    "OperandType": 2
                },
                {
                    "Address": 829,
                    "ByteSize": 1,
                    "Comment": "Stack the 'present' values."
                },
                {
                    "Address": 830,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(FLAGS)."
                },
                {
                    "Address": 833,
                    "ByteSize": 1,
                    "Comment": "{The 'last' operation is compared with the code for"
                },
                {
                    "Address": 834,
                    "ByteSize": 2,
                    "Comment": "USR, which will give 'USR number' unless modified; jump"
                },
                {
                    "Address": 836,
                    "ByteSize": 2,
                    "Comment": "if not 'USR'.}",
                    "OperandType": 2
                },
                {
                    "Address": 838,
                    "ByteSize": 2,
                    "Comment": "Test bit 6 of \\#SYSVAR(FLAGS)."
                },
                {
                    "Address": 840,
                    "ByteSize": 2,
                    "Comment": "Jump if it is set ('USR number').",
                    "OperandType": 2
                },
                {
                    "Address": 842,
                    "ByteSize": 2,
                    "Comment": "Modify the 'last' operation code: 'offset' &19, plus\n&80 for string input and numerical result ('USR\nstring')."
                },
                {
                    "Address": 844,
                    "ByteSize": 1,
                    "Comment": "Stack the 'last' values briefly."
                },
                {
                    "Address": 845,
                    "ByteSize": 3,
                    "Comment": "{Do not perform the actual operation if syntax is being",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 848,
                    "ByteSize": 2,
                    "Comment": "checked.}",
                    "OperandType": 2
                },
                {
                    "Address": 850,
                    "ByteSize": 1,
                    "Comment": "The 'last' operation code."
                },
                {
                    "Address": 851,
                    "ByteSize": 2,
                    "Comment": "{Strip off bits 6 and 7 to convert the operation code"
                },
                {
                    "Address": 853,
                    "ByteSize": 1,
                    "Comment": "to a calculator offset.}"
                },
                {
                    "Address": 854,
                    "ByteSize": 1,
                    "Comment": "Now use the calculator.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 857,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 859,
                    "ByteSize": 1,
                    "Comment": "Get the 'last' operation code."
                },
                {
                    "Address": 860,
                    "ByteSize": 3,
                    "Comment": "{This tests the nature of the 'last value' (bit 6 of"
                },
                {
                    "Address": 863,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(FLAGS)) against the requirement of the\noperation. They are to be the same for correct syntax.}"
                },
                {
                    "Address": 865,
                    "ByteSize": 3,
                    "Comment": "Jump if syntax fails.",
                    "OperandType": 2
                },
                {
                    "Address": 868,
                    "ByteSize": 1,
                    "Comment": "Get the 'last' operation code."
                },
                {
                    "Address": 869,
                    "ByteSize": 3,
                    "Comment": "This is \\#SYSVAR(FLAGS)."
                },
                {
                    "Address": 872,
                    "ByteSize": 2,
                    "Comment": "Assume result to be numeric."
                },
                {
                    "Address": 874,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if the nature of 'last value' is numeric."
                },
                {
                    "Address": 876,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 878,
                    "ByteSize": 2,
                    "Comment": "It is a string."
                },
                {
                    "Address": 880,
                    "ByteSize": 1,
                    "Comment": "Get the 'present' values into #REG:BC#."
                },
                {
                    "Address": 881,
                    "ByteSize": 2,
                    "Comment": "Jump back.",
                    "OperandType": 2
                },
                {
                    "Address": 883,
                    "ByteSize": 1,
                    "Comment": "The 'last' values go on the stack."
                },
                {
                    "Address": 884,
                    "ByteSize": 1,
                    "Comment": "Get the 'present' operation code."
                },
                {
                    "Address": 885,
                    "ByteSize": 4,
                    "Comment": "{Do not modify the operation code if dealing with a"
                },
                {
                    "Address": 889,
                    "ByteSize": 2,
                    "Comment": "numeric operand (bit 6 of \\#SYSVAR(FLAGS) set).}",
                    "OperandType": 2
                },
                {
                    "Address": 891,
                    "ByteSize": 2,
                    "Comment": "Clear bits 6 and 7."
                },
                {
                    "Address": 893,
                    "ByteSize": 2,
                    "Comment": "Increase the code by &08."
                },
                {
                    "Address": 895,
                    "ByteSize": 1,
                    "Comment": "Return the code to the #REG:C# register."
                },
                {
                    "Address": 896,
                    "ByteSize": 2,
                    "Comment": "Is the operation 'AND'?"
                },
                {
                    "Address": 898,
                    "ByteSize": 2,
                    "Comment": "Jump if it is not so.",
                    "OperandType": 2
                },
                {
                    "Address": 900,
                    "ByteSize": 2,
                    "Comment": "'AND' requires a numeric operand."
                },
                {
                    "Address": 902,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 904,
                    "ByteSize": 2,
                    "Comment": "The operations -, *, /, \\#power and OR are not possible\nbetween strings.",
                    "OperandType": 2
                },
                {
                    "Address": 906,
                    "ByteSize": 2,
                    "Comment": "Is the operation a '+'?"
                },
                {
                    "Address": 908,
                    "ByteSize": 2,
                    "Comment": "Jump if it is so.",
                    "OperandType": 2
                },
                {
                    "Address": 910,
                    "ByteSize": 2,
                    "Comment": "The other operations yield a numeric result."
                },
                {
                    "Address": 912,
                    "ByteSize": 1,
                    "Comment": "The 'present' values go on the machine stack."
                },
                {
                    "Address": 913,
                    "ByteSize": 1,
                    "Comment": "Consider the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 914,
                    "ByteSize": 3,
                    "Comment": "Go around the loop again.",
                    "OperandType": 2
                },
                {
                    "Address": 957,
                    "ByteSize": 3,
                    "Comment": "{Unless syntax is being checked, a jump is made to",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 960,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x27F7#.}",
                    "OperandType": 2
                },
                {
                    "Address": 962,
                    "ByteSize": 1,
                    "Comment": "Get the first character of the name.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 963,
                    "ByteSize": 3,
                    "Comment": "{If it is not alphabetic, then report the error.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 966,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 969,
                    "ByteSize": 1,
                    "Comment": "Get the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 970,
                    "ByteSize": 2,
                    "Comment": "Is it a '$'?"
                },
                {
                    "Address": 972,
                    "ByteSize": 1,
                    "Comment": "Save the zero flag on the stack."
                },
                {
                    "Address": 973,
                    "ByteSize": 2,
                    "Comment": "Jump if it was not a '$'.",
                    "OperandType": 2
                },
                {
                    "Address": 975,
                    "ByteSize": 1,
                    "Comment": "But get the next character if it was.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 976,
                    "ByteSize": 2,
                    "Comment": "{If the character is not a '(', then report the error."
                },
                {
                    "Address": 978,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 980,
                    "ByteSize": 1,
                    "Comment": "Get the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 981,
                    "ByteSize": 2,
                    "Comment": "Is it a ')'?"
                },
                {
                    "Address": 983,
                    "ByteSize": 2,
                    "Comment": "Jump if it is; there are no arguments.",
                    "OperandType": 2
                },
                {
                    "Address": 985,
                    "ByteSize": 3,
                    "Comment": "Within the loop, call #ADDR:0x24FB# to check the syntax of\neach argument and to insert floating-point numbers.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 988,
                    "ByteSize": 1,
                    "Comment": "{Get the character which follows the argument; if it is",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 989,
                    "ByteSize": 2,
                    "Comment": "not a ',' then jump - no more arguments."
                },
                {
                    "Address": 991,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 993,
                    "ByteSize": 1,
                    "Comment": "Get the first character in the next argument.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 994,
                    "ByteSize": 2,
                    "Comment": "Loop back to consider this argument.",
                    "OperandType": 2
                },
                {
                    "Address": 996,
                    "ByteSize": 2,
                    "Comment": "Is the current character a ')'?"
                },
                {
                    "Address": 998,
                    "ByteSize": 3,
                    "Comment": "Report the error if it is not.",
                    "OperandType": 2
                },
                {
                    "Address": 1001,
                    "ByteSize": 1,
                    "Comment": "Point to the next character in the BASIC line.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1002,
                    "ByteSize": 3,
                    "Comment": "{Assume a string-valued function and reset bit 6 of"
                },
                {
                    "Address": 1005,
                    "ByteSize": 2,
                    "Comment": "\\#SYSVAR(FLAGS).}"
                },
                {
                    "Address": 1007,
                    "ByteSize": 1,
                    "Comment": "{Restore the zero flag, jump if the FN is indeed"
                },
                {
                    "Address": 1008,
                    "ByteSize": 2,
                    "Comment": "string-valued.}",
                    "OperandType": 2
                },
                {
                    "Address": 1010,
                    "ByteSize": 2,
                    "Comment": "Otherwise, set bit 6 of \\#SYSVAR(FLAGS)."
                },
                {
                    "Address": 1012,
                    "ByteSize": 3,
                    "Comment": "Jump back to continue scanning the line.",
                    "OperandType": 2
                },
                {
                    "Address": 1015,
                    "ByteSize": 1,
                    "Comment": "Get the first character of the name.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1016,
                    "ByteSize": 2,
                    "Comment": "Reset bit 5 for upper case."
                },
                {
                    "Address": 1018,
                    "ByteSize": 1,
                    "Comment": "Copy the name to #REG:B#."
                },
                {
                    "Address": 1019,
                    "ByteSize": 1,
                    "Comment": "Get the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1020,
                    "ByteSize": 2,
                    "Comment": "Subtract &24, the code for '$'."
                },
                {
                    "Address": 1022,
                    "ByteSize": 1,
                    "Comment": "Copy the result to #REG:C# (zero for a string, non-zero\nfor a numerical function)."
                },
                {
                    "Address": 1023,
                    "ByteSize": 2,
                    "Comment": "Jump if non-zero: numerical function.",
                    "OperandType": 2
                }
            ],
            "CommentBlocks": [
                {
                    "Address": 32,
                    "Comment": "This entry point is used by the routine at #ADDR:0x2320#.\n \niv. The arc-drawing loop. This is entered at #ADDR:0x2439# with the co-ordinates of\nthe starting point on top of the stack, and the initial displacements for the\nfirst arc in mem-1 and mem-2. It uses simple trigonometry to ensure that all\nsubsequent arcs will be drawn to points that lie on the same circle as the\nfirst two, subtending the same angle at the centre. It can be shown that if 2\npoints X1, Y1 and X2, Y2 lie on a circle and subtend an angle N at the\ncentre, which is also the origin of co-ordinates, then X2=X1*COS N-Y1*SIN N,\nand Y2=X1*SIN N+Y1*COS N. But because the origin is here at the increments,\nsay Un=Xn+1-Xn and Vn=Yn+1-Yn, thus achieving the desired result. The stack\nis shown below on the (n+1)th pass through the loop, as Xn and Yn are\nincremented by Un and Vn, after these are obtained from Un-1 and Vn-1. The 4\nvalues on the top of the stack at #ADDR:0x2425# are, in DRAW, reading upwards,\nX0+X, Y0+Y, Xn and Yn but to save space these are not shown until #ADDR:0x2439#.\nFor the initial values in CIRCLE, see the end of CIRCLE, above. In CIRCLE\ntoo, the angle G must be taken to be 2\\#pi."
                },
                {
                    "Address": 125,
                    "Comment": "THE 'INITIAL PARAMETERS' SUBROUTINE\n \nThis subroutine is called by both #ADDR:0x2320# and #ADDR:0x2382# to set their initial\nparameters. It is called by #ADDR:0x2320# with X, Y and the radius Z on the top of\nthe stack, reading upwards. It is called by #ADDR:0x2382# with its own X, Y, SIN\n(G/2) and Z, as defined in #ADDR:0x2382# i., on the top of the stack. In what\nfollows the stack is only shown from Z upwards.\n \nThe subroutine returns in #REG:B# the arc-count A as explained in both #ADDR:0x2320#\nand #ADDR:0x2382#, and in mem-0 to mem-5 the quantities G/A, SIN (G/2*A), 0, COS\n(G/A), SIN (G/A) and G. For a circle, G must be taken to be equal to 2\\#pi.\n \nO:B Arc count"
                },
                {
                    "Address": 183,
                    "Comment": "THE 'LINE-DRAWING' SUBROUTINE\n \nThis subroutine is called by #ADDR:0x2382# to draw an approximation to a straight\nline from the point X0, Y0 held in \\#SYSVAR(COORDS) to the point X0+X, Y0+Y,\nwhere the increments X and Y are on the top of the calculator stack. The\nsubroutine was originally intended for the ZX80 and ZX81 8K ROM, and it is\ndescribed in a BASIC program on page 121 of the ZX81 manual.\n \nThe method is to intersperse as many horizontal or vertical steps as are\nneeded among a basic set of diagonal steps, using an algorithm that spaces\nthe horizontal or vertical steps as evenly as possible."
                },
                {
                    "Address": 204,
                    "Comment": "The algorithm starts here. The larger of ABS X and ABS Y, say #REG:H#, is put\ninto #REG:A# and reduced to INT (#REG:H#/2). The #REG:H#-#REG:L# horizontal or\nvertical steps and #REG:L# diagonal steps are taken (where #REG:L# is the smaller\nof ABS X and ABS Y) in this way: #REG:L# is added to #REG:A#; if #REG:A# now equals\nor exceeds #REG:H#, it is reduced by #REG:H# and a diagonal step is taken;\notherwise a horizontal or vertical step is taken. This is repeated #REG:H#\ntimes (#REG:B# also holds #REG:H#). Note that meanwhile the exchange registers\n\\#REGh' and \\#REGl' are used to hold \\#SYSVAR(COORDS)."
                },
                {
                    "Address": 249,
                    "Comment": "This entry point is used by the routines at #ADDR:0x22AA# and #ADDR:0x2314#.\n \nReport B - Integer out of range."
                },
                {
                    "Address": 251,
                    "Comment": "THE 'SCANNING' SUBROUTINE\n \nUsed by the routines at #ADDR:0x04AA#, #ADDR:0x1C56#, #ADDR:0x1C79#, #ADDR:0x1E27#, #ADDR:0x1F60#, #ADDR:0x1FFC#,\n#ADDR:0x25E8#, #ADDR:0x27BD# and #ADDR:0x35DE#.\n \nThis subroutine is used to produce an evaluation result of the 'next\nexpression'.\n \nThe result is returned as the 'last value' on the calculator stack. For a\nnumerical result, the last value will be the actual floating point number.\nHowever, for a string result the last value will consist of a set of\nparameters. The first of the five bytes is unspecified, the second and third\nbytes hold the address of the start of the string and the fourth and fifth\nbytes hold the length of the string.\n \nBit 6 of \\#SYSVAR(FLAGS) is set for a numeric result and reset for a string\nresult.\n \nWhen a next expression consists of only a single operand (e.g. 'A', 'RND',\n'A$(4,3 TO 7)'), then the last value is simply the value that is obtained\nfrom evaluating the operand.\n \nHowever when the next expression contains a function and an operand (e.g.\n'CHR$ A', 'NOT A', 'SIN 1'), the operation code of the function is stored on\nthe machine stack until the last value of the operand has been calculated.\nThis last value is then subjected to the appropriate operation to give a new\nlast value.\n \nIn the case of there being an arithmetic or logical operation to be performed\n(e.g. 'A+B', 'A*B', 'A=B'), then both the last value of the first argument\nand the operation code have to be kept until the last value of the second\nargument has been found. Indeed the calculation of the last value of the\nsecond argument may also involve the storing of last values and operation\ncodes whilst the calculation is being performed.\n \nIt can therefore be shown that as a complex expression is evaluated (e.g.\n'CHR$ (T+A-26*INT ((T+A)/26)+65)'), a hierarchy of operations yet to be\nperformed is built up until the point is reached from which it must be\ndismantled to produce the final last value.\n \nEach operation code has associated with it an appropriate priority code and\noperations of higher priority are always performed before those of lower\npriority.\n \nThe subroutine begins with the #REG:A# register being set to hold the first\ncharacter of the expression and a starting priority marker - zero - being put\non the machine stack."
                },
                {
                    "Address": 255,
                    "Comment": "This entry point is used by the routines at #ADDR:0x25AF# and #ADDR:0x26C9#."
                },
                {
                    "Address": 271,
                    "Comment": "THE 'SCANNING QUOTES' SUBROUTINE\n \nThis subroutine is used by #ADDR:0x25B3# to check that every string quote is\nmatched by another one.\n \nBC Current string length counter\nO:BC Updated string length counter\nO:F Zero flag set if two consecutive '\"' characters are found"
                },
                {
                    "Address": 290,
                    "Comment": "THE 'SCANNING TWO CO-ORDINATES' SUBROUTINE\n \nThis subroutine is called by #ADDR:0x2668#, #ADDR:0x2672# and #ADDR:0x267B# to make sure the\nrequired two co-ordinates are given in their proper form.\n \nO:F Zero flag set if checking syntax"
                },
                {
                    "Address": 304,
                    "Comment": "This routine continues into #ADDR:0x2530#.\nTHE 'SYNTAX-Z' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0605#, #ADDR:0x17F9#, #ADDR:0x1BB3#, #ADDR:0x1BEE#, #ADDR:0x1C22#, #ADDR:0x1CBE#,\n#ADDR:0x1CDE#, #ADDR:0x1CF0#, #ADDR:0x1DEC#, #ADDR:0x1E27#, #ADDR:0x1F60#, #ADDR:0x1FC3#, #ADDR:0x1FC9#, #ADDR:0x204E#,\n#ADDR:0x2089#, #ADDR:0x21B9#, #ADDR:0x25B3#, #ADDR:0x25F8#, #ADDR:0x2627#, #ADDR:0x268D#, #ADDR:0x26C9#, #ADDR:0x27BD#,\n#ADDR:0x28B2#, #ADDR:0x2A52#, #ADDR:0x2ACC#, #ADDR:0x2AF4# and #ADDR:0x2C02#.\n \nThe routine at #ADDR:0x2522# continues here.\n \nThis subroutine is called 31 times, with a saving of just one byte each call.\nA simple test of bit 7 of \\#SYSVAR(FLAGS) will give the zero flag reset during\nexecution and set during syntax checking.\n \nO:F Zero flag set if checking syntax"
                },
                {
                    "Address": 309,
                    "Comment": "THE 'SCANNING SCREEN$' SUBROUTINE\n \nUsed by the routine at #ADDR:0x2668#.\n \nThis subroutine is used to find the character that appears at line x, column\ny of the screen. It only searches the character set 'pointed to' by\n\\#SYSVAR(CHARS).\n \nNote: this is normally the characters &20 (space) to &7F (\\#CHR(169)) although\nthe user can alter \\#SYSVAR(CHARS) to match for other characters, including\nuser-defined graphics."
                },
                {
                    "Address": 384,
                    "Comment": "\\#IF({fix}<2)||Note: this exit, via #ADDR:0x2AB2#, is a\n\\#BUG\\#anythingEqualsSCREEN$xy(mistake) as it leads to 'double storing' of the\nstring result (see #ADDR:0x25DB#). The instruction line should be '\\#S/RET/'.||\nTHE 'SCANNING ATTRIBUTES' SUBROUTINE\n \nUsed by the routine at #ADDR:0x2672#."
                },
                {
                    "Address": 406,
                    "Comment": "THE SCANNING FUNCTION TABLE\n \nUsed by the routine at #ADDR:0x24FB#.\n \nThis table contains 8 functions and 4 operators. It thus incorporates 5 new\nSpectrum functions and provides a neat way of accessing some functions and\noperators which already existed on the ZX81."
                },
                {
                    "Address": 431,
                    "Comment": "THE 'SCANNING UNARY PLUS' ROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x2596#(scanning function table)."
                },
                {
                    "Address": 435,
                    "Comment": "THE 'SCANNING QUOTE' ROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x2596#(scanning function table).\n \nThis routine deals with string quotes, whether simple like \"name\" or more\ncomplex like \"a \"\"white\"\" lie\" or the seemingly redundant VAL$ \"\"\"a\"\"\"."
                },
                {
                    "Address": 474,
                    "Comment": "Note that the first quote was not counted into the length; the final quote\nwas, and is discarded now. Inside the string, the first, third, fifth, etc.,\nquotes were counted in but the second, fourth, etc., were not."
                },
                {
                    "Address": 475,
                    "Comment": "This entry point is used by the routine at #ADDR:0x2668#."
                },
                {
                    "Address": 488,
                    "Comment": "Note that in copying the string to the work space, every two pairs of string\nquotes inside the string (\"\") have been reduced to one pair of string\nquotes(\").\nTHE 'SCANNING BRACKET' ROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x2596#(scanning function table)."
                },
                {
                    "Address": 501,
                    "Comment": "THE 'SCANNING FN' ROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x2596#(scanning function table).\n \nThis routine, for user-defined functions, just jumps to the #ADDR:0x27BD#('scanning\nFN' subroutine)."
                },
                {
                    "Address": 504,
                    "Comment": "THE 'SCANNING RND' ROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x2596#(scanning function table)."
                },
                {
                    "Address": 551,
                    "Comment": "THE 'SCANNING PI' ROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x2596#(scanning function table).\n \nUnless syntax is being checked the value of 'PI' is calculated and forms the\n'last value' on the calculator stack."
                },
                {
                    "Address": 560,
                    "Comment": "This entry point is used by the routine at #ADDR:0x25F8#."
                },
                {
                    "Address": 564,
                    "Comment": "THE' SCANNING INKEY$' ROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x2596#(scanning function table)."
                },
                {
                    "Address": 616,
                    "Comment": "THE 'SCANNING SCREEN$' ROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x2596#(scanning function table)."
                },
                {
                    "Address": 626,
                    "Comment": "THE 'SCANNING ATTR' ROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x2596#(scanning function table)."
                },
                {
                    "Address": 635,
                    "Comment": "THE 'SCANNING POINT' ROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x2596#(scanning function table)."
                },
                {
                    "Address": 644,
                    "Comment": "THE 'SCANNING ALPHANUMERIC' ROUTINE\n \nUsed by the routine at #ADDR:0x24FB#.\n \nA Code of the current character"
                },
                {
                    "Address": 653,
                    "Comment": "THE 'SCANNING DECIMAL' ROUTINE\n \nThe address of this routine is derived from an offset found in the\n#ADDR:0x2596#(scanning function table).\n \nThe routine at #ADDR:0x2684# continues here.\n \nThis routine deals with a decimal point or a number that starts with a digit.\nIt also takes care of the expression 'BIN', which is dealt with in the\n'decimal to floating-point' subroutine.\n \nA Code of the first character in the number"
                },
                {
                    "Address": 658,
                    "Comment": "The action taken is now very different for syntax checking and line\nexecution. If syntax is being checked then the floating-point form has to be\ncalculated and copied into the actual BASIC line. However when a line is\nbeing executed the floating-point form will always be available so it is\ncopied to the calculator stack to form a 'last value'.\n \nDuring syntax checking:"
                },
                {
                    "Address": 693,
                    "Comment": "During line execution:"
                },
                {
                    "Address": 707,
                    "Comment": "This entry point is used by the routines at #ADDR:0x2627#, #ADDR:0x2672# and #ADDR:0x267B#.\n \nA numeric result has now been identified, coming from RND, PI, ATTR, POINT or\na decimal number, therefore bit 6 of \\#SYSVAR(FLAGS) must be set."
                },
                {
                    "Address": 713,
                    "Comment": "THE 'SCANNING VARIABLE' ROUTINE\n \nUsed by the routine at #ADDR:0x2684#.\n \nWhen a variable name has been identified a call is made to #ADDR:0x28B2# which\nlooks through those variables that already exist in the variables area (or in\nthe program area at DEF FN statements for a user-defined function FN). If an\nappropriate numeric value is found then it is copied to the calculator stack\nusing #ADDR:0x33B4#. However a string or string array entry has to have the\nappropriate parameters passed to the calculator stack by #ADDR:0x2996# (or in the\ncase of a user-defined function, by #ADDR:0x2951# as called from #ADDR:0x28B2#)."
                },
                {
                    "Address": 733,
                    "Comment": "This entry point is used by the routine at #ADDR:0x268D#."
                },
                {
                    "Address": 735,
                    "Comment": "This entry point is used by the routine at #ADDR:0x2684#.\n \nThe character is tested against the code for '-', thus identifying the 'unary\nminus' operation.\n \nBefore the actual test the #REG:B# register is set to hold the priority &09 and\nthe #REG:C# register the operation code &DB that are required for this\noperation."
                },
                {
                    "Address": 742,
                    "Comment": "Next the character is tested against the code for 'VAL$', with priority &10\nand operation code &18."
                },
                {
                    "Address": 749,
                    "Comment": "The present character must now represent one of the functions CODE to NOT,\nwith codes &AF to &C3."
                },
                {
                    "Address": 754,
                    "Comment": "The function 'NOT' is identified and dealt with separately from the others."
                },
                {
                    "Address": 764,
                    "Comment": "The remaining functions have priority &10. The operation codes for these\nfunctions are now calculated. Functions that operate on strings need bit 6\nreset and functions that give string results need bit 7 reset in their\noperation codes."
                },
                {
                    "Address": 781,
                    "Comment": "This entry point is used by the routine at #ADDR:0x2634#.\n \nThe priority code and the operation code for the function being considered\nare now pushed on to the machine stack. A hierarchy of operations is thereby\nbuilt up."
                },
                {
                    "Address": 786,
                    "Comment": "This entry point is used by the routines at #ADDR:0x25B3#, #ADDR:0x25E8#, #ADDR:0x2634# and\n#ADDR:0x27BD#.\n \nThe scanning of the line now continues. The present argument may be followed\nby a '(', a binary operator or, if the end of the expression has been\nreached, then e.g. a carriage return character or a colon, a separator or a\n'THEN'."
                },
                {
                    "Address": 791,
                    "Comment": "If the 'last value' is numeric then the parenthesised expression is a true\nsub-expression and must be evaluated by itself. However if the 'last value'\nis a string then the parenthesised expression represents an element of an\narray or a slice of a string. A call to #ADDR:0x2A52# modifies the parameters of\nthe string as required."
                },
                {
                    "Address": 803,
                    "Comment": "If the present character is indeed a binary operator it will be given an\noperation code in the range &C3 to &CF, and the appropriate priority code."
                },
                {
                    "Address": 820,
                    "Comment": "The main loop of this subroutine is now entered. At this stage there are:\n \n\\#LIST\n{ i. A 'last value' on the calculator stack. }\n{ ii. The starting priority marker on the machine stack below a hierarchy, of\nunknown size, of function and binary operation codes. This hierarchy may be\nnull. }\n{ iii. The #REG:BC# register pair holding the 'present' operation and priority,\nwhich if the end of an expression has been reached will be priority zero. }\nLIST\\#\n \nInitially the 'last' operation and priority are taken off the machine stack\nand compared against the 'present' operation and priority."
                },
                {
                    "Address": 829,
                    "Comment": "Before the 'last' operation is performed, the 'USR' function is separated\ninto 'USR number' and 'USR string' according as bit 6 of \\#SYSVAR(FLAGS) was\nset or reset when the argument of the function was stacked as the 'last\nvalue'."
                },
                {
                    "Address": 859,
                    "Comment": "An important part of syntax checking involves the testing of the operation to\nensure that the nature of the 'last value' is of the correct type for the\noperation under consideration."
                },
                {
                    "Address": 868,
                    "Comment": "Before jumping back to go round the loop again the nature of the 'last value'\nmust be recorded in \\#SYSVAR(FLAGS)."
                },
                {
                    "Address": 883,
                    "Comment": "Whenever the 'present' operation binds tighter, the 'last' and the 'present'\nvalues go back on the machine stack. However if the 'present' operation\nrequires a string as its operand then the operation code is modified to\nindicate this requirement."
                },
                {
                    "Address": 917,
                    "Comment": "THE TABLE OF OPERATORS\n \nUsed by the routine at #ADDR:0x26C9#. Each entry in this table points to an entry\nin the #ADDR:0x27B0#(table of priorities)."
                },
                {
                    "Address": 944,
                    "Comment": "THE TABLE OF PRIORITIES\n \nUsed by the routine at #ADDR:0x26C9#. Each entry in this table is pointed to by an\nentry in the #ADDR:0x2795#(table of operators)."
                },
                {
                    "Address": 957,
                    "Comment": "THE 'SCANNING FUNCTION' SUBROUTINE\n \nUsed by the routine at #ADDR:0x25F5#.\n \nThis subroutine evaluates a user defined function which occurs in a BASIC\nline. The subroutine can be considered in four stages:\n \n\\#LIST\n{ i. The syntax of the FN statement is checked during syntax checking. }\n{ ii. During line execution, a search is made of the program area for a DEF\nFN statement, and the names of the functions are compared, until a match is\nfound - or an error is reported. }\n{ iii. The arguments of the FN are evaluated by calls to #ADDR:0x24FB#. }\n{ iv. The function itself is evaluated by calling #ADDR:0x24FB#, which in turn\ncalls #ADDR:0x28B2# and so #ADDR:0x2951#. }\nLIST\\#"
                },
                {
                    "Address": 1015,
                    "Comment": "ii. During line execution, a search must first be made for a DEF FN\nstatement."
                }
            ],
            "DataInfo": [
                {
                    "Address": 6,
                    "Comment": "#ADDR:0x343C#: Y, X"
                },
                {
                    "Address": 7,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 15,
                    "Comment": "#ADDR:0x342D#(st_mem_0): (X0 is copied to mem-0)."
                },
                {
                    "Address": 16,
                    "Comment": "#ADDR:0x3014#: Y, X0+X"
                },
                {
                    "Address": 17,
                    "Comment": "#ADDR:0x343C#: X0+X, Y"
                },
                {
                    "Address": 18,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 26,
                    "Comment": "#ADDR:0x342D#(st_mem_5): (Y0 is copied to mem-5)."
                },
                {
                    "Address": 27,
                    "Comment": "#ADDR:0x3014#: X0+X, Y0+Y"
                },
                {
                    "Address": 28,
                    "Comment": "#ADDR:0x340F#(get_mem_0): X0+X, Y0+Y, X0"
                },
                {
                    "Address": 29,
                    "Comment": "#ADDR:0x340F#(get_mem_5): X0+X, Y0+Y, X0, Y0"
                },
                {
                    "Address": 30,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 38,
                    "Comment": "#ADDR:0x340F#(get_mem_1): Un-1"
                },
                {
                    "Address": 39,
                    "Comment": "#ADDR:0x33C0#: Un-1, Un-1"
                },
                {
                    "Address": 40,
                    "Comment": "#ADDR:0x340F#(get_mem_3): Un-1, Un-1, COS(G/A)"
                },
                {
                    "Address": 41,
                    "Comment": "#ADDR:0x30CA#: Un-1, Un-1*COS(G/A)"
                },
                {
                    "Address": 42,
                    "Comment": "#ADDR:0x340F#(get_mem_2): Un-1, Un-1*COS(G/A), Vn-1"
                },
                {
                    "Address": 43,
                    "Comment": "#ADDR:0x340F#(get_mem_4): Un-1, Un-1*COS(G/A), Vn-1, SIN(G/A)"
                },
                {
                    "Address": 44,
                    "Comment": "#ADDR:0x30CA#: Un-1, Un-1*COS(G/A), Vn-1*SIN(G/A)"
                },
                {
                    "Address": 45,
                    "Comment": "#ADDR:0x300F#: Un-1, Un-1*COS(G/A)-Vn-1*SIN(G/A)=Un"
                },
                {
                    "Address": 46,
                    "Comment": "#ADDR:0x342D#(st_mem_1): (Un is copied to mem-1)."
                },
                {
                    "Address": 47,
                    "Comment": "#ADDR:0x33A1#: Un-1"
                },
                {
                    "Address": 48,
                    "Comment": "#ADDR:0x340F#(get_mem_4): Un-1, SIN(G/A)"
                },
                {
                    "Address": 49,
                    "Comment": "#ADDR:0x30CA#: Un-1*SIN(G/A)"
                },
                {
                    "Address": 50,
                    "Comment": "#ADDR:0x340F#(get_mem_2): Un-1*SIN(G/A), Vn-1"
                },
                {
                    "Address": 51,
                    "Comment": "#ADDR:0x340F#(get_mem_3): Un-1*SIN(G/A), Vn-1, COS(G/A)"
                },
                {
                    "Address": 52,
                    "Comment": "#ADDR:0x30CA#: Un-1*SIN(G/A), Vn-1*COS(G/A)"
                },
                {
                    "Address": 53,
                    "Comment": "#ADDR:0x3014#: Un-1*SIN(G/A)+Vn-1*COS(G/A)=Vn"
                },
                {
                    "Address": 54,
                    "Comment": "#ADDR:0x342D#(st_mem_2): (Vn is copied to mem-2)."
                },
                {
                    "Address": 55,
                    "Comment": "#ADDR:0x33A1#: (As noted in the text, the stack in fact holds\nX0+X, Y0+Y, Xn and Yn)."
                },
                {
                    "Address": 56,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 59,
                    "Comment": "#ADDR:0x342D#(st_mem_0): (Yn is copied to mem-0)."
                },
                {
                    "Address": 60,
                    "Comment": "#ADDR:0x33A1#: X0+X, Y0+Y, Xn"
                },
                {
                    "Address": 61,
                    "Comment": "#ADDR:0x340F#(get_mem_1): X0+X, Y0+Y, Xn, Un"
                },
                {
                    "Address": 62,
                    "Comment": "#ADDR:0x3014#: X0+X, Y0+Y, Xn+Un=Xn+1"
                },
                {
                    "Address": 63,
                    "Comment": "#ADDR:0x33C0#: X0+X, Y0+Y, Xn+1, Xn+1"
                },
                {
                    "Address": 64,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 72,
                    "Comment": "#ADDR:0x300F#: X0+X, Y0+Y, Xn+1, Xn+1, Xn'-Xn'=Un'"
                },
                {
                    "Address": 73,
                    "Comment": "#ADDR:0x340F#(get_mem_0): X0+X, Y0+Y, Xn+1, Un', Yn"
                },
                {
                    "Address": 74,
                    "Comment": "#ADDR:0x340F#(get_mem_2): X0+X, Y0+Y, Xn+1, Un', Yn, Vn"
                },
                {
                    "Address": 75,
                    "Comment": "#ADDR:0x3014#: X0+X, Y0+Y, Xn+1, Un', Yn+Vn=Yn+1"
                },
                {
                    "Address": 76,
                    "Comment": "#ADDR:0x342D#(st_mem_0): (Yn+1 is copied to mem-0)."
                },
                {
                    "Address": 77,
                    "Comment": "#ADDR:0x343C#: X0+X, Y0+Y, Xn+1, Yn+1, Un'"
                },
                {
                    "Address": 78,
                    "Comment": "#ADDR:0x340F#(get_mem_0): X0+X, Y0+Y, Xn+1, Yn+1, Un', Yn+1"
                },
                {
                    "Address": 79,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 87,
                    "Comment": "#ADDR:0x300F#: X0+X, Y0+Y, Xn+1, Yn+1, Un', Vn'"
                },
                {
                    "Address": 88,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 96,
                    "Comment": "{#ADDR:0x33A1#: The co-ordinates of the end of the last arc"
                },
                {
                    "Address": 97,
                    "Comment": "that was drawn are now deleted from the stack.}"
                },
                {
                    "Address": 98,
                    "Comment": "#ADDR:0x343C#: Y0+Y, X0+X"
                },
                {
                    "Address": 99,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 107,
                    "Comment": "#ADDR:0x300F#: Y0+Y, X0+X-Xz'"
                },
                {
                    "Address": 108,
                    "Comment": "#ADDR:0x343C#: X0+X-Xz', Y0+Y"
                },
                {
                    "Address": 109,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 117,
                    "Comment": "#ADDR:0x300F#: X0+X-Xz', Y0+Y-Yz'"
                },
                {
                    "Address": 118,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 126,
                    "Comment": "#ADDR:0x33C0#: Z, Z"
                },
                {
                    "Address": 127,
                    "Comment": "#ADDR:0x384A#: Z, SQR Z"
                },
                {
                    "Address": 128,
                    "Comment": "{#ADDR:0x33C6#: Z, SQR Z, 2"
                },
                {
                    "Address": 129,
                    "ByteSize": 2,
                    "Comment": "}",
                    "DataType": 1
                },
                {
                    "Address": 131,
                    "Comment": "#ADDR:0x343C#: Z, 2, SQR Z"
                },
                {
                    "Address": 132,
                    "Comment": "#ADDR:0x31AF#: Z, 2/SQR Z"
                },
                {
                    "Address": 133,
                    "Comment": "#ADDR:0x340F#(get_mem_5): Z, 2/SQR Z, G"
                },
                {
                    "Address": 134,
                    "Comment": "#ADDR:0x343C#: Z, G, 2/SQR Z"
                },
                {
                    "Address": 135,
                    "Comment": "#ADDR:0x31AF#: Z, G*SQR Z/2"
                },
                {
                    "Address": 136,
                    "Comment": "#ADDR:0x346A#: Z, G'*SQR Z/2 (G'=ABS G)"
                },
                {
                    "Address": 137,
                    "Comment": "#ADDR:0x369B#: Z, G'*SQR Z/2=A1, say"
                },
                {
                    "Address": 156,
                    "Comment": "#ADDR:0x340F#(get_mem_5): Z, A, G"
                },
                {
                    "Address": 157,
                    "Comment": "#ADDR:0x343C#: Z, G, A"
                },
                {
                    "Address": 158,
                    "Comment": "#ADDR:0x31AF#: Z, G/A"
                },
                {
                    "Address": 159,
                    "Comment": "#ADDR:0x33C0#: Z, G/A, G/A"
                },
                {
                    "Address": 160,
                    "Comment": "#ADDR:0x37B5#: Z, G/A, SIN (G/A)"
                },
                {
                    "Address": 161,
                    "Comment": "#ADDR:0x342D#(st_mem_4): (SIN (G/A) is copied to mem-4)"
                },
                {
                    "Address": 162,
                    "Comment": "#ADDR:0x33A1#: Z, G/A"
                },
                {
                    "Address": 163,
                    "Comment": "#ADDR:0x33C0#: Z, G/A, G/A"
                },
                {
                    "Address": 164,
                    "Comment": "#ADDR:0x341B#(stk_half): Z, G/A, G/A, 0.5"
                },
                {
                    "Address": 165,
                    "Comment": "#ADDR:0x30CA#: Z, G/A, G/2*A"
                },
                {
                    "Address": 166,
                    "Comment": "#ADDR:0x37B5#: Z, G/A, SIN (G/2*A)"
                },
                {
                    "Address": 167,
                    "Comment": "#ADDR:0x342D#(st_mem_1): (SIN (G/2*A) is copied to mem-1)"
                },
                {
                    "Address": 168,
                    "Comment": "#ADDR:0x343C#: Z, SIN (G/2*A), G/A"
                },
                {
                    "Address": 169,
                    "Comment": "#ADDR:0x342D#(st_mem_0): (G/A is copied to mem-0)"
                },
                {
                    "Address": 170,
                    "Comment": "#ADDR:0x33A1#: Z, SIN (G/2*A)=S"
                },
                {
                    "Address": 171,
                    "Comment": "#ADDR:0x33C0#: Z, S, S"
                },
                {
                    "Address": 172,
                    "Comment": "#ADDR:0x30CA#: Z, S*S"
                },
                {
                    "Address": 173,
                    "Comment": "#ADDR:0x33C0#: Z, S*S, S*S"
                },
                {
                    "Address": 174,
                    "Comment": "#ADDR:0x3014#: Z, 2*S*S"
                },
                {
                    "Address": 175,
                    "Comment": "#ADDR:0x341B#(stk_one): Z, 2*S*S, 1"
                },
                {
                    "Address": 176,
                    "Comment": "#ADDR:0x300F#: Z, 2*S*S-1"
                },
                {
                    "Address": 177,
                    "Comment": "#ADDR:0x346E#: Z, 1-2*S*S=COS (G/A)"
                },
                {
                    "Address": 178,
                    "Comment": "#ADDR:0x342D#(st_mem_3): (COS (G/A) is copied to mem-3)"
                },
                {
                    "Address": 179,
                    "Comment": "#ADDR:0x33A1#: Z"
                },
                {
                    "Address": 180,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 250,
                    "Comment": "}"
                },
                {
                    "Address": 406,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x25B3#",
                    "DataType": 1
                },
                {
                    "Address": 408,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x25E8#",
                    "DataType": 1
                },
                {
                    "Address": 410,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x268D#",
                    "DataType": 1
                },
                {
                    "Address": 412,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x25AF#",
                    "DataType": 1
                },
                {
                    "Address": 414,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x25F5#",
                    "DataType": 1
                },
                {
                    "Address": 416,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x25F8#",
                    "DataType": 1
                },
                {
                    "Address": 418,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x2627#",
                    "DataType": 1
                },
                {
                    "Address": 420,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x2634#",
                    "DataType": 1
                },
                {
                    "Address": 422,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x268D#",
                    "DataType": 1
                },
                {
                    "Address": 424,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x2668#",
                    "DataType": 1
                },
                {
                    "Address": 426,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x2672#",
                    "DataType": 1
                },
                {
                    "Address": 428,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x267B#",
                    "DataType": 1
                },
                {
                    "Address": 430,
                    "Comment": "End marker."
                },
                {
                    "Address": 517,
                    "Comment": "#ADDR:0x341B#(stk_one)"
                },
                {
                    "Address": 518,
                    "Comment": "#ADDR:0x3014#: The 'last value' is now\n\\#SYSVAR(SEED)+1."
                },
                {
                    "Address": 519,
                    "Comment": "{#ADDR:0x33C6#: Put the number 75 on the calculator"
                },
                {
                    "Address": 520,
                    "ByteSize": 2,
                    "Comment": "stack.}",
                    "DataType": 1
                },
                {
                    "Address": 522,
                    "Comment": "#ADDR:0x30CA#: 'last value' (\\#SYSVAR(SEED)+1)*75."
                },
                {
                    "Address": 523,
                    "Comment": "{#ADDR:0x33C6#: Put the number 65537 on the"
                },
                {
                    "Address": 524,
                    "ByteSize": 5,
                    "Comment": "calculator stack.}",
                    "DataType": 1
                },
                {
                    "Address": 529,
                    "Comment": "#ADDR:0x36A0#: Divide (\\#SYSVAR(SEED)+1)*75 by 65537\nto give a 'remainder' and an 'answer'."
                },
                {
                    "Address": 530,
                    "Comment": "#ADDR:0x33A1#: Discard the 'answer'."
                },
                {
                    "Address": 531,
                    "Comment": "#ADDR:0x341B#(stk_one)"
                },
                {
                    "Address": 532,
                    "Comment": "#ADDR:0x300F#: The 'last value' is now 'remainder'\n- 1."
                },
                {
                    "Address": 533,
                    "Comment": "#ADDR:0x33C0#: Make a copy of the 'last value'."
                },
                {
                    "Address": 534,
                    "Comment": "#ADDR:0x369B#: The calculation is finished."
                },
                {
                    "Address": 557,
                    "Comment": "#ADDR:0x341B#(stk_pi_2): The value of \\#pi/2 is put on the\ncalculator stack as the 'last value'."
                },
                {
                    "Address": 558,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 855,
                    "Comment": "#ADDR:0x33A2#: (perform the actual operation)"
                },
                {
                    "Address": 856,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 917,
                    "ByteSize": 2,
                    "Comment": "+",
                    "DataType": 1
                },
                {
                    "Address": 919,
                    "ByteSize": 2,
                    "Comment": "-",
                    "DataType": 1
                },
                {
                    "Address": 921,
                    "ByteSize": 2,
                    "Comment": "*",
                    "DataType": 1
                },
                {
                    "Address": 923,
                    "ByteSize": 2,
                    "Comment": "/",
                    "DataType": 1
                },
                {
                    "Address": 925,
                    "ByteSize": 2,
                    "Comment": "\\#power",
                    "DataType": 1
                },
                {
                    "Address": 927,
                    "ByteSize": 2,
                    "Comment": "=",
                    "DataType": 1
                },
                {
                    "Address": 929,
                    "ByteSize": 2,
                    "Comment": ">",
                    "DataType": 1
                },
                {
                    "Address": 931,
                    "ByteSize": 2,
                    "Comment": "<",
                    "DataType": 1
                },
                {
                    "Address": 933,
                    "ByteSize": 2,
                    "Comment": "<=",
                    "DataType": 1
                },
                {
                    "Address": 935,
                    "ByteSize": 2,
                    "Comment": ">=",
                    "DataType": 1
                },
                {
                    "Address": 937,
                    "ByteSize": 2,
                    "Comment": "<>",
                    "DataType": 1
                },
                {
                    "Address": 939,
                    "ByteSize": 2,
                    "Comment": "OR",
                    "DataType": 1
                },
                {
                    "Address": 941,
                    "ByteSize": 2,
                    "Comment": "AND",
                    "DataType": 1
                },
                {
                    "Address": 943,
                    "Comment": "End marker."
                },
                {
                    "Address": 944,
                    "Comment": "-"
                },
                {
                    "Address": 945,
                    "Comment": "*"
                },
                {
                    "Address": 946,
                    "Comment": "/"
                },
                {
                    "Address": 947,
                    "Comment": "\\#power"
                },
                {
                    "Address": 948,
                    "Comment": "OR"
                },
                {
                    "Address": 949,
                    "Comment": "AND"
                },
                {
                    "Address": 950,
                    "Comment": "<="
                },
                {
                    "Address": 951,
                    "Comment": ">="
                },
                {
                    "Address": 952,
                    "Comment": "<>"
                },
                {
                    "Address": 953,
                    "Comment": ">"
                },
                {
                    "Address": 954,
                    "Comment": "<"
                },
                {
                    "Address": 955,
                    "Comment": "="
                },
                {
                    "Address": 956,
                    "Comment": "+"
                }
            ],
            "LabelInfo": [
                {
                    "Address": 32,
                    "LabelType": 2,
                    "Name": "DRW_STEPS"
                },
                {
                    "Address": 37,
                    "LabelType": 2,
                    "Name": "ARC_LOOP"
                },
                {
                    "Address": 57,
                    "LabelType": 2,
                    "Name": "ARC_START"
                },
                {
                    "Address": 95,
                    "LabelType": 2,
                    "Name": "ARC_END"
                },
                {
                    "Address": 119,
                    "LabelType": 2,
                    "Name": "LINE_DRAW"
                },
                {
                    "Address": 125,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CD_PRMS1"
                },
                {
                    "Address": 149,
                    "LabelType": 2,
                    "Name": "USE_252"
                },
                {
                    "Address": 151,
                    "LabelType": 2,
                    "Name": "DRAW_SAVE"
                },
                {
                    "Address": 183,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "DRAW_LINE"
                },
                {
                    "Address": 196,
                    "LabelType": 2,
                    "Name": "DL_X_GE_Y"
                },
                {
                    "Address": 203,
                    "LabelType": 2,
                    "Name": "DL_LARGER"
                },
                {
                    "Address": 206,
                    "LabelType": 2,
                    "Name": "D_L_LOOP"
                },
                {
                    "Address": 212,
                    "LabelType": 2,
                    "Name": "D_L_DIAG"
                },
                {
                    "Address": 219,
                    "LabelType": 2,
                    "Name": "D_L_HR_VT"
                },
                {
                    "Address": 223,
                    "LabelType": 2,
                    "Name": "D_L_STEP"
                },
                {
                    "Address": 236,
                    "LabelType": 2,
                    "Name": "D_L_PLOT"
                },
                {
                    "Address": 247,
                    "LabelType": 2,
                    "Name": "D_L_RANGE"
                },
                {
                    "Address": 249,
                    "LabelType": 2,
                    "Name": "REPORT_B_3"
                },
                {
                    "Address": 251,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "SCANNING"
                },
                {
                    "Address": 255,
                    "LabelType": 2,
                    "Name": "S_LOOP_1"
                },
                {
                    "Address": 271,
                    "LabelType": 2,
                    "Name": "S_QUOTE_S"
                },
                {
                    "Address": 290,
                    "LabelType": 2,
                    "Name": "S_2_COORD"
                },
                {
                    "Address": 301,
                    "LabelType": 2,
                    "Name": "S_RPORT_C"
                },
                {
                    "Address": 304,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "SYNTAX_Z"
                },
                {
                    "Address": 309,
                    "LabelType": 2,
                    "Name": "S_SCRN_S"
                },
                {
                    "Address": 335,
                    "LabelType": 2,
                    "Name": "S_SCRN_LP"
                },
                {
                    "Address": 346,
                    "LabelType": 2,
                    "Name": "S_SC_MTCH"
                },
                {
                    "Address": 349,
                    "LabelType": 2,
                    "Name": "S_SC_ROWS"
                },
                {
                    "Address": 371,
                    "LabelType": 2,
                    "Name": "S_SCR_NXT"
                },
                {
                    "Address": 381,
                    "LabelType": 2,
                    "Name": "S_SCR_STO"
                },
                {
                    "Address": 384,
                    "LabelType": 2,
                    "Name": "S_ATTR_S"
                },
                {
                    "Address": 406,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "SCANFUNC"
                },
                {
                    "Address": 431,
                    "LabelType": 2,
                    "Name": "S_U_PLUS"
                },
                {
                    "Address": 435,
                    "LabelType": 2,
                    "Name": "S_QUOTE"
                },
                {
                    "Address": 446,
                    "LabelType": 2,
                    "Name": "S_Q_AGAIN"
                },
                {
                    "Address": 459,
                    "LabelType": 2,
                    "Name": "S_Q_COPY"
                },
                {
                    "Address": 473,
                    "LabelType": 2,
                    "Name": "S_Q_PRMS"
                },
                {
                    "Address": 475,
                    "LabelType": 2,
                    "Name": "S_STRING"
                },
                {
                    "Address": 488,
                    "LabelType": 2,
                    "Name": "S_BRACKET"
                },
                {
                    "Address": 501,
                    "LabelType": 2,
                    "Name": "S_FN"
                },
                {
                    "Address": 504,
                    "LabelType": 2,
                    "Name": "S_RND"
                },
                {
                    "Address": 549,
                    "LabelType": 2,
                    "Name": "S_RND_END"
                },
                {
                    "Address": 551,
                    "LabelType": 2,
                    "Name": "S_PI"
                },
                {
                    "Address": 560,
                    "LabelType": 2,
                    "Name": "S_PI_END"
                },
                {
                    "Address": 564,
                    "LabelType": 2,
                    "Name": "S_INKEY"
                },
                {
                    "Address": 608,
                    "LabelType": 2,
                    "Name": "S_IK_STK"
                },
                {
                    "Address": 613,
                    "LabelType": 2,
                    "Name": "S_INK_EN"
                },
                {
                    "Address": 616,
                    "LabelType": 2,
                    "Name": "S_SCREEN"
                },
                {
                    "Address": 626,
                    "LabelType": 2,
                    "Name": "S_ATTR"
                },
                {
                    "Address": 635,
                    "LabelType": 2,
                    "Name": "S_POINT"
                },
                {
                    "Address": 644,
                    "LabelType": 2,
                    "Name": "S_ALPHNUM"
                },
                {
                    "Address": 653,
                    "LabelType": 2,
                    "Name": "S_DECIMAL"
                },
                {
                    "Address": 693,
                    "LabelType": 2,
                    "Name": "S_STK_DEC"
                },
                {
                    "Address": 694,
                    "LabelType": 2,
                    "Name": "S_SD_SKIP"
                },
                {
                    "Address": 707,
                    "LabelType": 2,
                    "Name": "S_NUMERIC"
                },
                {
                    "Address": 713,
                    "LabelType": 2,
                    "Name": "S_LETTER"
                },
                {
                    "Address": 733,
                    "LabelType": 2,
                    "Name": "S_CONT_1"
                },
                {
                    "Address": 735,
                    "LabelType": 2,
                    "Name": "S_NEGATE"
                },
                {
                    "Address": 775,
                    "LabelType": 2,
                    "Name": "S_NO_TO_S"
                },
                {
                    "Address": 781,
                    "LabelType": 2,
                    "Name": "S_PUSH_PO"
                },
                {
                    "Address": 786,
                    "LabelType": 2,
                    "Name": "S_CONT_2"
                },
                {
                    "Address": 787,
                    "LabelType": 2,
                    "Name": "S_CONT_3"
                },
                {
                    "Address": 803,
                    "LabelType": 2,
                    "Name": "S_OPERTR"
                },
                {
                    "Address": 820,
                    "LabelType": 2,
                    "Name": "S_LOOP"
                },
                {
                    "Address": 844,
                    "LabelType": 2,
                    "Name": "S_STK_LST"
                },
                {
                    "Address": 859,
                    "LabelType": 2,
                    "Name": "S_SYNTEST"
                },
                {
                    "Address": 865,
                    "LabelType": 2,
                    "Name": "S_RPORT_C_2"
                },
                {
                    "Address": 868,
                    "LabelType": 2,
                    "Name": "S_RUNTEST"
                },
                {
                    "Address": 880,
                    "LabelType": 2,
                    "Name": "S_LOOPEND"
                },
                {
                    "Address": 883,
                    "LabelType": 2,
                    "Name": "S_TIGHTER"
                },
                {
                    "Address": 904,
                    "LabelType": 2,
                    "Name": "S_NOT_AND"
                },
                {
                    "Address": 912,
                    "LabelType": 2,
                    "Name": "S_NEXT"
                },
                {
                    "Address": 917,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "OPERATORS"
                },
                {
                    "Address": 944,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "PRIORITIES"
                },
                {
                    "Address": 957,
                    "LabelType": 2,
                    "Name": "S_FN_SBRN"
                },
                {
                    "Address": 976,
                    "LabelType": 2,
                    "Name": "SF_BRKT_1"
                },
                {
                    "Address": 985,
                    "LabelType": 2,
                    "Name": "SF_ARGMTS"
                },
                {
                    "Address": 996,
                    "LabelType": 2,
                    "Name": "SF_BRKT_2"
                },
                {
                    "Address": 998,
                    "LabelType": 2,
                    "Name": "SF_RPRT_C"
                },
                {
                    "Address": 1001,
                    "LabelType": 2,
                    "Name": "SF_FLAG_6"
                },
                {
                    "Address": 1012,
                    "LabelType": 2,
                    "Name": "SF_SYN_EN"
                },
                {
                    "Address": 1015,
                    "LabelType": 2,
                    "Name": "SF_RUN"
                }
            ],
            "PageId": 9
        },
        {
            "CodeInfo": [
                {
                    "Address": 1,
                    "ByteSize": 1,
                    "Comment": "Get the next character, the '('.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 2,
                    "ByteSize": 1,
                    "Comment": "Get 1st character of 1st argument.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 3,
                    "ByteSize": 1,
                    "Comment": "Save the pointer to it on the stack."
                },
                {
                    "Address": 4,
                    "ByteSize": 3,
                    "Comment": "Point to the start of the program (\\#SYSVAR(PROG)).",
                    "OperandType": 1
                },
                {
                    "Address": 7,
                    "ByteSize": 1,
                    "Comment": "Go back one location."
                },
                {
                    "Address": 8,
                    "ByteSize": 3,
                    "Comment": "The search will be for 'DEF FN'."
                },
                {
                    "Address": 11,
                    "ByteSize": 1,
                    "Comment": "Save the name and 'string status'."
                },
                {
                    "Address": 12,
                    "ByteSize": 3,
                    "Comment": "Search the program now.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 15,
                    "ByteSize": 1,
                    "Comment": "Restore the name and status."
                },
                {
                    "Address": 16,
                    "ByteSize": 2,
                    "Comment": "Jump if a DEF FN statement found.",
                    "OperandType": 2
                },
                {
                    "Address": 18,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 20,
                    "ByteSize": 1,
                    "Comment": "Save the pointer to the DEF FN character in case the\nsearch has to be resumed."
                },
                {
                    "Address": 21,
                    "ByteSize": 3,
                    "Comment": "Get the name of the DEF FN function.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 24,
                    "ByteSize": 2,
                    "Comment": "Reset bit 5 for upper case."
                },
                {
                    "Address": 26,
                    "ByteSize": 1,
                    "Comment": "Does it match the FN name?"
                },
                {
                    "Address": 27,
                    "ByteSize": 2,
                    "Comment": "Jump if it does not match.",
                    "OperandType": 2
                },
                {
                    "Address": 29,
                    "ByteSize": 3,
                    "Comment": "Get the next character in the DEF FN.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 32,
                    "ByteSize": 2,
                    "Comment": "Subtract &24, the code for '$'."
                },
                {
                    "Address": 34,
                    "ByteSize": 1,
                    "Comment": "Compare the status with that of FN."
                },
                {
                    "Address": 35,
                    "ByteSize": 2,
                    "Comment": "Jump if complete match now found.",
                    "OperandType": 2
                },
                {
                    "Address": 37,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer to the 'DEF FN'."
                },
                {
                    "Address": 38,
                    "ByteSize": 1,
                    "Comment": "Step back one location."
                },
                {
                    "Address": 39,
                    "ByteSize": 3,
                    "Comment": "{Use the search routine to find the end of the DEF FN"
                },
                {
                    "Address": 42,
                    "ByteSize": 1,
                    "Comment": "statement, preparing for the next search; save the name"
                },
                {
                    "Address": 43,
                    "ByteSize": 3,
                    "Comment": "and status meanwhile.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 46,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 47,
                    "ByteSize": 2,
                    "Comment": "Jump back for a further search.",
                    "OperandType": 2
                },
                {
                    "Address": 49,
                    "ByteSize": 1,
                    "Comment": "{If #REG:HL# is now pointing to a '$', move on to the '('."
                },
                {
                    "Address": 50,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 53,
                    "ByteSize": 1,
                    "Comment": "Discard the pointer to 'DEF FN'."
                },
                {
                    "Address": 54,
                    "ByteSize": 1,
                    "Comment": "{Get the pointer to the first argument of FN, and copy"
                },
                {
                    "Address": 55,
                    "ByteSize": 4,
                    "Comment": "it to \\#SYSVAR(CH-ADD).}",
                    "OperandType": 1
                },
                {
                    "Address": 59,
                    "ByteSize": 3,
                    "Comment": "Move past the '(' now.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 62,
                    "ByteSize": 1,
                    "Comment": "Save this pointer on the stack."
                },
                {
                    "Address": 63,
                    "ByteSize": 2,
                    "Comment": "Is it pointing to a ')'?"
                },
                {
                    "Address": 65,
                    "ByteSize": 2,
                    "Comment": "If so, jump: FN has no arguments.",
                    "OperandType": 2
                },
                {
                    "Address": 67,
                    "ByteSize": 1,
                    "Comment": "Point to the next code."
                },
                {
                    "Address": 68,
                    "ByteSize": 1,
                    "Comment": "Put the code into #REG:A#."
                },
                {
                    "Address": 69,
                    "ByteSize": 2,
                    "Comment": "Is it the 'number marker' code, &0E?"
                },
                {
                    "Address": 71,
                    "ByteSize": 2,
                    "Comment": "Set bit 6 of #REG:D# for a numerical argument."
                },
                {
                    "Address": 73,
                    "ByteSize": 2,
                    "Comment": "Jump on zero: numerical argument.",
                    "OperandType": 2
                },
                {
                    "Address": 75,
                    "ByteSize": 1,
                    "Comment": "{Now ensure that #REG:HL# is pointing to the '$' character"
                },
                {
                    "Address": 76,
                    "ByteSize": 3,
                    "Comment": "(not e.g. to a control code).}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 79,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# now points to the 'number marker'."
                },
                {
                    "Address": 80,
                    "ByteSize": 2,
                    "Comment": "Bit 6 of #REG:D# is reset: string argument."
                },
                {
                    "Address": 82,
                    "ByteSize": 1,
                    "Comment": "Point to the 1st of the 5 bytes in DEF FN."
                },
                {
                    "Address": 83,
                    "ByteSize": 1,
                    "Comment": "Save this pointer on the stack."
                },
                {
                    "Address": 84,
                    "ByteSize": 1,
                    "Comment": "Save the 'string status' of the argument."
                },
                {
                    "Address": 85,
                    "ByteSize": 3,
                    "Comment": "Now evaluate the argument.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 88,
                    "ByteSize": 1,
                    "Comment": "Get the no./string flag into #REG:A#."
                },
                {
                    "Address": 89,
                    "ByteSize": 3,
                    "Comment": "{Test bit 6 of it against the result of #ADDR:0x24FB# (bit 6"
                },
                {
                    "Address": 92,
                    "ByteSize": 2,
                    "Comment": "of \\#SYSVAR(FLAGS)).}"
                },
                {
                    "Address": 94,
                    "ByteSize": 2,
                    "Comment": "Give report Q if they did not match.",
                    "OperandType": 2
                },
                {
                    "Address": 96,
                    "ByteSize": 1,
                    "Comment": "{Get the pointer to the first of the 5 spaces in DEF FN"
                },
                {
                    "Address": 97,
                    "ByteSize": 1,
                    "Comment": "into #REG:DE#.}"
                },
                {
                    "Address": 98,
                    "ByteSize": 3,
                    "Comment": "Point #REG:HL# at \\#SYSVAR(STKEND).",
                    "OperandType": 1
                },
                {
                    "Address": 101,
                    "ByteSize": 3,
                    "Comment": "#REG:BC# will count 5 bytes to be moved."
                },
                {
                    "Address": 104,
                    "ByteSize": 2,
                    "Comment": "{First, decrease \\#SYSVAR(STKEND) by 5, so deleting the"
                },
                {
                    "Address": 106,
                    "ByteSize": 3,
                    "Comment": "'last value' from the stack.}",
                    "OperandType": 1
                },
                {
                    "Address": 109,
                    "ByteSize": 2,
                    "Comment": "Copy the 5 bytes into the spaces in DEF FN."
                },
                {
                    "Address": 111,
                    "ByteSize": 1,
                    "Comment": "Point #REG:HL# at the next code."
                },
                {
                    "Address": 112,
                    "ByteSize": 1,
                    "Comment": "{Ensure that #REG:HL# points to the character after the 5"
                },
                {
                    "Address": 113,
                    "ByteSize": 3,
                    "Comment": "bytes.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 116,
                    "ByteSize": 2,
                    "Comment": "Is it a ')'?"
                },
                {
                    "Address": 118,
                    "ByteSize": 2,
                    "Comment": "Jump if it is: no more arguments in the DEF FN\nstatement.",
                    "OperandType": 2
                },
                {
                    "Address": 120,
                    "ByteSize": 1,
                    "Comment": "It is a ',': save the pointer to it."
                },
                {
                    "Address": 121,
                    "ByteSize": 1,
                    "Comment": "Get the character after the last argument that was\nevaluated from FN.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 122,
                    "ByteSize": 2,
                    "Comment": "{If it is not a ',' jump: mismatched arguments of FN and"
                },
                {
                    "Address": 124,
                    "ByteSize": 2,
                    "Comment": "DEF FN.}",
                    "OperandType": 2
                },
                {
                    "Address": 126,
                    "ByteSize": 1,
                    "Comment": "Point \\#SYSVAR(CH-ADD) to the next argument of FN.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 127,
                    "ByteSize": 1,
                    "Comment": "Point #REG:HL# to the ',' in DEF FN again."
                },
                {
                    "Address": 128,
                    "ByteSize": 3,
                    "Comment": "Move #REG:HL# on to the next argument in DEF FN.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 131,
                    "ByteSize": 2,
                    "Comment": "Jump back to consider this argument.",
                    "OperandType": 2
                },
                {
                    "Address": 133,
                    "ByteSize": 1,
                    "Comment": "Save the pointer to the ')' in DEF FN."
                },
                {
                    "Address": 134,
                    "ByteSize": 1,
                    "Comment": "Get the character after the last argument in FN.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 135,
                    "ByteSize": 2,
                    "Comment": "Is it a ')'?"
                },
                {
                    "Address": 137,
                    "ByteSize": 2,
                    "Comment": "If so, jump to evaluate the function; but if not, give\nreport Q.",
                    "OperandType": 2
                },
                {
                    "Address": 139,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 141,
                    "ByteSize": 1,
                    "Comment": "Restore pointer to ')' in DEF FN."
                },
                {
                    "Address": 142,
                    "ByteSize": 1,
                    "Comment": "Get this pointer into #REG:HL#."
                },
                {
                    "Address": 143,
                    "ByteSize": 3,
                    "Comment": "Insert it into \\#SYSVAR(CH-ADD).",
                    "OperandType": 1
                },
                {
                    "Address": 146,
                    "ByteSize": 3,
                    "Comment": "Get the old value of \\#SYSVAR(DEFADD).",
                    "OperandType": 1
                },
                {
                    "Address": 149,
                    "ByteSize": 1,
                    "Comment": "{Stack it, and get the start address of the arguments"
                },
                {
                    "Address": 150,
                    "ByteSize": 3,
                    "Comment": "area of DEF FN into \\#SYSVAR(DEFADD).}",
                    "OperandType": 1
                },
                {
                    "Address": 153,
                    "ByteSize": 1,
                    "Comment": "Save address of ')' in FN."
                },
                {
                    "Address": 154,
                    "ByteSize": 1,
                    "Comment": "{Move \\#SYSVAR(CH-ADD) on past ')' and '=' to the start",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 155,
                    "ByteSize": 1,
                    "Comment": "of the expression for the function in DEF FN.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 156,
                    "ByteSize": 3,
                    "Comment": "Now evaluate the function.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 159,
                    "ByteSize": 1,
                    "Comment": "Restore the address of ')' in FN."
                },
                {
                    "Address": 160,
                    "ByteSize": 3,
                    "Comment": "Store it in \\#SYSVAR(CH-ADD).",
                    "OperandType": 1
                },
                {
                    "Address": 163,
                    "ByteSize": 1,
                    "Comment": "Restore original value of \\#SYSVAR(DEFADD)."
                },
                {
                    "Address": 164,
                    "ByteSize": 3,
                    "Comment": "Put it back into \\#SYSVAR(DEFADD).",
                    "OperandType": 1
                },
                {
                    "Address": 167,
                    "ByteSize": 1,
                    "Comment": "Get the next character in the BASIC line.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 168,
                    "ByteSize": 3,
                    "Comment": "Jump back to continue scanning.",
                    "OperandType": 2
                },
                {
                    "Address": 171,
                    "ByteSize": 1,
                    "Comment": "Point to the next code in the statement."
                },
                {
                    "Address": 172,
                    "ByteSize": 1,
                    "Comment": "Copy the code to #REG:A#."
                },
                {
                    "Address": 173,
                    "ByteSize": 2,
                    "Comment": "{Jump back to skip over it if it is a control code or a"
                },
                {
                    "Address": 175,
                    "ByteSize": 2,
                    "Comment": "space.}",
                    "OperandType": 2
                },
                {
                    "Address": 177,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 178,
                    "ByteSize": 4,
                    "Comment": "Presume a numeric variable (set bit 6 of\n\\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 182,
                    "ByteSize": 1,
                    "Comment": "Get the first character into #REG:A#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 183,
                    "ByteSize": 3,
                    "Comment": "Is it alphabetic?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 186,
                    "ByteSize": 3,
                    "Comment": "Give an error report if it is not so.",
                    "OperandType": 2
                },
                {
                    "Address": 189,
                    "ByteSize": 1,
                    "Comment": "Save the pointer to the first letter."
                },
                {
                    "Address": 190,
                    "ByteSize": 2,
                    "Comment": "{Transfer bits 0 to 4 of the letter to the #REG:C#"
                },
                {
                    "Address": 192,
                    "ByteSize": 1,
                    "Comment": "register; bits 5 and 7 are always reset.}"
                },
                {
                    "Address": 193,
                    "ByteSize": 1,
                    "Comment": "Get the second character into #REG:A#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 194,
                    "ByteSize": 1,
                    "Comment": "Save this pointer also."
                },
                {
                    "Address": 195,
                    "ByteSize": 2,
                    "Comment": "Is the second character a '('?"
                },
                {
                    "Address": 197,
                    "ByteSize": 2,
                    "Comment": "Separate arrays of numbers.",
                    "OperandType": 2
                },
                {
                    "Address": 199,
                    "ByteSize": 2,
                    "Comment": "Now set bit 6."
                },
                {
                    "Address": 201,
                    "ByteSize": 2,
                    "Comment": "Is the second character a '$'?"
                },
                {
                    "Address": 203,
                    "ByteSize": 2,
                    "Comment": "Separate all the strings.",
                    "OperandType": 2
                },
                {
                    "Address": 205,
                    "ByteSize": 2,
                    "Comment": "Now set bit 5."
                },
                {
                    "Address": 207,
                    "ByteSize": 3,
                    "Comment": "{If the variable's name has only one character then",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 210,
                    "ByteSize": 2,
                    "Comment": "jump forward.}",
                    "OperandType": 2
                },
                {
                    "Address": 212,
                    "ByteSize": 3,
                    "Comment": "Is the character alphanumeric?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 215,
                    "ByteSize": 2,
                    "Comment": "Jump out of the loop when the end of the name is found.",
                    "OperandType": 2
                },
                {
                    "Address": 217,
                    "ByteSize": 2,
                    "Comment": "Mark the discriminator byte."
                },
                {
                    "Address": 219,
                    "ByteSize": 1,
                    "Comment": "Get the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 220,
                    "ByteSize": 2,
                    "Comment": "Go back to test it.",
                    "OperandType": 2
                },
                {
                    "Address": 222,
                    "ByteSize": 1,
                    "Comment": "Step \\#SYSVAR(CH-ADD) past the '$'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 223,
                    "ByteSize": 4,
                    "Comment": "Reset bit 6 of \\#SYSVAR(FLAGS) to indicate a string."
                },
                {
                    "Address": 227,
                    "ByteSize": 3,
                    "Comment": "{Is \\#SYSVAR(DEFADD-hi) zero?",
                    "OperandType": 1
                },
                {
                    "Address": 230,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 231,
                    "ByteSize": 2,
                    "Comment": "If so, jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 233,
                    "ByteSize": 3,
                    "Comment": "In 'run-time'?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 236,
                    "ByteSize": 3,
                    "Comment": "If so, jump forward to search the DEF FN statement.",
                    "OperandType": 2
                },
                {
                    "Address": 239,
                    "ByteSize": 1,
                    "Comment": "Copy the discriminator byte to the #REG:B# register."
                },
                {
                    "Address": 240,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if in 'run-time'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 243,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 245,
                    "ByteSize": 1,
                    "Comment": "Move the discriminator to #REG:A#."
                },
                {
                    "Address": 246,
                    "ByteSize": 2,
                    "Comment": "Drop the character code part."
                },
                {
                    "Address": 248,
                    "ByteSize": 2,
                    "Comment": "Indicate syntax by setting bit 7."
                },
                {
                    "Address": 250,
                    "ByteSize": 1,
                    "Comment": "Restore the discriminator."
                },
                {
                    "Address": 251,
                    "ByteSize": 2,
                    "Comment": "Jump forward to continue.",
                    "OperandType": 2
                },
                {
                    "Address": 253,
                    "ByteSize": 3,
                    "Comment": "Pick up the \\#SYSVAR(VARS) pointer.",
                    "OperandType": 1
                },
                {
                    "Address": 256,
                    "ByteSize": 1,
                    "Comment": "The first letter of each existing variable."
                },
                {
                    "Address": 257,
                    "ByteSize": 2,
                    "Comment": "Match on bits 0 to 6."
                },
                {
                    "Address": 259,
                    "ByteSize": 2,
                    "Comment": "Jump when the '&80-byte' is reached.",
                    "OperandType": 2
                },
                {
                    "Address": 261,
                    "ByteSize": 1,
                    "Comment": "The actual comparison."
                },
                {
                    "Address": 262,
                    "ByteSize": 2,
                    "Comment": "Jump forward if the first characters do not match.",
                    "OperandType": 2
                },
                {
                    "Address": 264,
                    "ByteSize": 1,
                    "Comment": "{Rotate #REG:A# leftwards and then double it to test bits"
                },
                {
                    "Address": 265,
                    "ByteSize": 1,
                    "Comment": "5 and 6.}"
                },
                {
                    "Address": 266,
                    "ByteSize": 3,
                    "Comment": "Strings and array variables.",
                    "OperandType": 2
                },
                {
                    "Address": 269,
                    "ByteSize": 2,
                    "Comment": "Simple numeric and FOR-NEXT variables.",
                    "OperandType": 2
                },
                {
                    "Address": 271,
                    "ByteSize": 1,
                    "Comment": "{Take a copy of the pointer to the second character."
                },
                {
                    "Address": 272,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 273,
                    "ByteSize": 1,
                    "Comment": "Save the first letter pointer."
                },
                {
                    "Address": 274,
                    "ByteSize": 1,
                    "Comment": "Consider the next character."
                },
                {
                    "Address": 275,
                    "ByteSize": 1,
                    "Comment": "Fetch each character in turn."
                },
                {
                    "Address": 276,
                    "ByteSize": 1,
                    "Comment": "Point to the next character."
                },
                {
                    "Address": 277,
                    "ByteSize": 2,
                    "Comment": "Is the character a 'space'?"
                },
                {
                    "Address": 279,
                    "ByteSize": 2,
                    "Comment": "Ignore the spaces.",
                    "OperandType": 2
                },
                {
                    "Address": 281,
                    "ByteSize": 2,
                    "Comment": "Set bit 5 so as to match lower and upper case letters."
                },
                {
                    "Address": 283,
                    "ByteSize": 1,
                    "Comment": "Make the comparison."
                },
                {
                    "Address": 284,
                    "ByteSize": 2,
                    "Comment": "Back for another character if it does match.",
                    "OperandType": 2
                },
                {
                    "Address": 286,
                    "ByteSize": 2,
                    "Comment": "Will it match with bit 7 set?"
                },
                {
                    "Address": 288,
                    "ByteSize": 1,
                    "Comment": "Try it."
                },
                {
                    "Address": 289,
                    "ByteSize": 2,
                    "Comment": "Jump forward if the 'last characters' do not match.",
                    "OperandType": 2
                },
                {
                    "Address": 291,
                    "ByteSize": 1,
                    "Comment": "{Check that the end of the name has been reached before"
                },
                {
                    "Address": 292,
                    "ByteSize": 3,
                    "Comment": "jumping forward.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 295,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 297,
                    "ByteSize": 1,
                    "Comment": "Fetch the pointer."
                },
                {
                    "Address": 298,
                    "ByteSize": 1,
                    "Comment": "Save #REG:B# and #REG:C# briefly."
                },
                {
                    "Address": 299,
                    "ByteSize": 3,
                    "Comment": "#REG:DE# is made to point to the next variable.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 302,
                    "ByteSize": 1,
                    "Comment": "Switch the two pointers."
                },
                {
                    "Address": 303,
                    "ByteSize": 1,
                    "Comment": "Get #REG:B# and #REG:C# back."
                },
                {
                    "Address": 304,
                    "ByteSize": 2,
                    "Comment": "Go around the loop again.",
                    "OperandType": 2
                },
                {
                    "Address": 306,
                    "ByteSize": 2,
                    "Comment": "Signal 'variable not found'."
                },
                {
                    "Address": 308,
                    "ByteSize": 1,
                    "Comment": "Drop the pointer to the second character."
                },
                {
                    "Address": 309,
                    "ByteSize": 1,
                    "Comment": "Fetch the present character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 310,
                    "ByteSize": 2,
                    "Comment": "Is it a '('?"
                },
                {
                    "Address": 312,
                    "ByteSize": 2,
                    "Comment": "Jump forward if so.",
                    "OperandType": 2
                },
                {
                    "Address": 314,
                    "ByteSize": 2,
                    "Comment": "{Indicate not dealing with an array and jump forward."
                },
                {
                    "Address": 316,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 318,
                    "ByteSize": 1,
                    "Comment": "Drop the saved variable pointer."
                },
                {
                    "Address": 319,
                    "ByteSize": 1,
                    "Comment": "Drop the second character pointer."
                },
                {
                    "Address": 320,
                    "ByteSize": 1,
                    "Comment": "Drop the first letter pointer."
                },
                {
                    "Address": 321,
                    "ByteSize": 1,
                    "Comment": "Save the 'last' letter pointer."
                },
                {
                    "Address": 322,
                    "ByteSize": 1,
                    "Comment": "Fetch the current character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 323,
                    "ByteSize": 3,
                    "Comment": "Is it alphanumeric?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 326,
                    "ByteSize": 2,
                    "Comment": "Jump when the end of the name has been found.",
                    "OperandType": 2
                },
                {
                    "Address": 328,
                    "ByteSize": 1,
                    "Comment": "Fetch the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 329,
                    "ByteSize": 2,
                    "Comment": "Go back and test it.",
                    "OperandType": 2
                },
                {
                    "Address": 331,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# holds the pointer to the letter of a short name\nor the 'last' character of a long name."
                },
                {
                    "Address": 332,
                    "ByteSize": 2,
                    "Comment": "Rotate the whole register."
                },
                {
                    "Address": 334,
                    "ByteSize": 2,
                    "Comment": "Specify the state of bit 6."
                },
                {
                    "Address": 336,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 337,
                    "ByteSize": 3,
                    "Comment": "{Point to the first character in the arguments area",
                    "OperandType": 1
                },
                {
                    "Address": 340,
                    "ByteSize": 1,
                    "Comment": "(\\#SYSVAR(DEFADD)) and put it into #REG:A#.}"
                },
                {
                    "Address": 341,
                    "ByteSize": 2,
                    "Comment": "Is it a ')'?"
                },
                {
                    "Address": 343,
                    "ByteSize": 3,
                    "Comment": "Jump to search the variables area.",
                    "OperandType": 2
                },
                {
                    "Address": 346,
                    "ByteSize": 1,
                    "Comment": "Get the next argument in the loop."
                },
                {
                    "Address": 347,
                    "ByteSize": 2,
                    "Comment": "{Set bits 5 and 6, assuming a simple numeric variable;"
                },
                {
                    "Address": 349,
                    "ByteSize": 1,
                    "Comment": "copy it to #REG:B#.}"
                },
                {
                    "Address": 350,
                    "ByteSize": 1,
                    "Comment": "Point to the next code."
                },
                {
                    "Address": 351,
                    "ByteSize": 1,
                    "Comment": "Put it into the #REG:A# register."
                },
                {
                    "Address": 352,
                    "ByteSize": 2,
                    "Comment": "Is it the 'number marker' code, &0E?"
                },
                {
                    "Address": 354,
                    "ByteSize": 2,
                    "Comment": "Jump if so: numeric variable.",
                    "OperandType": 2
                },
                {
                    "Address": 356,
                    "ByteSize": 1,
                    "Comment": "{Ensure that #REG:HL# points to the character, not to a"
                },
                {
                    "Address": 357,
                    "ByteSize": 3,
                    "Comment": "space or control code.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 360,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# now points to the 'number marker'."
                },
                {
                    "Address": 361,
                    "ByteSize": 2,
                    "Comment": "Reset bit 5 of #REG:B#: string variable."
                },
                {
                    "Address": 363,
                    "ByteSize": 1,
                    "Comment": "Get the variable name into #REG:A#."
                },
                {
                    "Address": 364,
                    "ByteSize": 1,
                    "Comment": "Is it the one we are looking for?"
                },
                {
                    "Address": 365,
                    "ByteSize": 2,
                    "Comment": "Jump if it matches.",
                    "OperandType": 2
                },
                {
                    "Address": 367,
                    "ByteSize": 1,
                    "Comment": "{Now pass over the 5 bytes of the floating-point number"
                },
                {
                    "Address": 368,
                    "ByteSize": 1,
                    "Comment": "or string parameters to get to the next argument."
                },
                {
                    "Address": 369,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 370,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 371,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 372,
                    "ByteSize": 3,
                    "Comment": "Pass on to the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 375,
                    "ByteSize": 2,
                    "Comment": "Is it a ')'?"
                },
                {
                    "Address": 377,
                    "ByteSize": 3,
                    "Comment": "If so, jump to search the variables area.",
                    "OperandType": 2
                },
                {
                    "Address": 380,
                    "ByteSize": 3,
                    "Comment": "Point to the next argument.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 383,
                    "ByteSize": 2,
                    "Comment": "Jump back to consider it.",
                    "OperandType": 2
                },
                {
                    "Address": 385,
                    "ByteSize": 2,
                    "Comment": "Test for a numeric variable."
                },
                {
                    "Address": 387,
                    "ByteSize": 2,
                    "Comment": "Jump if the variable is numeric; #ADDR:0x24FB# will stack it.",
                    "OperandType": 2
                },
                {
                    "Address": 389,
                    "ByteSize": 1,
                    "Comment": "Point to the first of the 5 bytes to be stacked."
                },
                {
                    "Address": 390,
                    "ByteSize": 4,
                    "Comment": "Point #REG:DE# to \\#SYSVAR(STKEND).",
                    "OperandType": 1
                },
                {
                    "Address": 394,
                    "ByteSize": 3,
                    "Comment": "Stack the 5 bytes.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 397,
                    "ByteSize": 1,
                    "Comment": "{Point #REG:HL# to the new position of \\#SYSVAR(STKEND),"
                },
                {
                    "Address": 398,
                    "ByteSize": 3,
                    "Comment": "and reset the system variable.}",
                    "OperandType": 1
                },
                {
                    "Address": 401,
                    "ByteSize": 1,
                    "Comment": "{Discard the #ADDR:0x28B2# pointers (second and first"
                },
                {
                    "Address": 402,
                    "ByteSize": 1,
                    "Comment": "character pointers).}"
                },
                {
                    "Address": 403,
                    "ByteSize": 1,
                    "Comment": "{Return from the search with both the carry and zero"
                },
                {
                    "Address": 404,
                    "ByteSize": 1,
                    "Comment": "flags reset - signalling that a call #ADDR:0x2996# is not\nrequired.}"
                },
                {
                    "Address": 405,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 406,
                    "ByteSize": 1,
                    "Comment": "Clear the array flag."
                },
                {
                    "Address": 407,
                    "ByteSize": 1,
                    "Comment": "Clear the #REG:B# register for later."
                },
                {
                    "Address": 408,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if syntax is being checked."
                },
                {
                    "Address": 410,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 412,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if dealing with an array variable."
                },
                {
                    "Address": 414,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 416,
                    "ByteSize": 1,
                    "Comment": "Signal 'a simple string'."
                },
                {
                    "Address": 417,
                    "ByteSize": 1,
                    "Comment": "Move along the entry."
                },
                {
                    "Address": 418,
                    "ByteSize": 1,
                    "Comment": "Pick up the low length counter."
                },
                {
                    "Address": 419,
                    "ByteSize": 1,
                    "Comment": "Advance the pointer."
                },
                {
                    "Address": 420,
                    "ByteSize": 1,
                    "Comment": "Pick up the high length pointer."
                },
                {
                    "Address": 421,
                    "ByteSize": 1,
                    "Comment": "Advance the pointer."
                },
                {
                    "Address": 422,
                    "ByteSize": 1,
                    "Comment": "Transfer the pointer to the actual string."
                },
                {
                    "Address": 423,
                    "ByteSize": 3,
                    "Comment": "Pass these parameters to the calculator stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 426,
                    "ByteSize": 1,
                    "Comment": "{Fetch the present character and jump forward to see if",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 427,
                    "ByteSize": 3,
                    "Comment": "a 'slice' is required.}",
                    "OperandType": 2
                },
                {
                    "Address": 430,
                    "ByteSize": 1,
                    "Comment": "{Step past the length bytes."
                },
                {
                    "Address": 431,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 432,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 433,
                    "ByteSize": 1,
                    "Comment": "Collect the 'number of dimensions'."
                },
                {
                    "Address": 434,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if handling an array of numbers."
                },
                {
                    "Address": 436,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 438,
                    "ByteSize": 1,
                    "Comment": "{Decrease the 'number of dimensions' and jump if the"
                },
                {
                    "Address": 439,
                    "ByteSize": 2,
                    "Comment": "number is now zero.}",
                    "OperandType": 2
                },
                {
                    "Address": 441,
                    "ByteSize": 1,
                    "Comment": "Save the pointer in #REG:DE#."
                },
                {
                    "Address": 442,
                    "ByteSize": 1,
                    "Comment": "Get the present character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 443,
                    "ByteSize": 2,
                    "Comment": "Is it a '('?"
                },
                {
                    "Address": 445,
                    "ByteSize": 2,
                    "Comment": "Report the error if it is not so.",
                    "OperandType": 2
                },
                {
                    "Address": 447,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer."
                },
                {
                    "Address": 448,
                    "ByteSize": 1,
                    "Comment": "Pass the pointer to #REG:DE#."
                },
                {
                    "Address": 449,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 451,
                    "ByteSize": 1,
                    "Comment": "Save the counter."
                },
                {
                    "Address": 452,
                    "ByteSize": 1,
                    "Comment": "Get the present character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 453,
                    "ByteSize": 1,
                    "Comment": "Restore the counter."
                },
                {
                    "Address": 454,
                    "ByteSize": 2,
                    "Comment": "Is the present character a ','?"
                },
                {
                    "Address": 456,
                    "ByteSize": 2,
                    "Comment": "Jump forward to consider another subscript.",
                    "OperandType": 2
                },
                {
                    "Address": 458,
                    "ByteSize": 2,
                    "Comment": "{If a line is being executed then there is an error."
                },
                {
                    "Address": 460,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 462,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if dealing with an array of strings."
                },
                {
                    "Address": 464,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 466,
                    "ByteSize": 2,
                    "Comment": "Is the present character a ')'?"
                },
                {
                    "Address": 468,
                    "ByteSize": 2,
                    "Comment": "Report an error if not so.",
                    "OperandType": 2
                },
                {
                    "Address": 470,
                    "ByteSize": 1,
                    "Comment": "Advance \\#SYSVAR(CH-ADD).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 471,
                    "ByteSize": 1,
                    "Comment": "Return as the syntax is correct."
                },
                {
                    "Address": 472,
                    "ByteSize": 2,
                    "Comment": "Is the present character a ')'?"
                },
                {
                    "Address": 474,
                    "ByteSize": 2,
                    "Comment": "Jump forward and check whether there is another\nsubscript.",
                    "OperandType": 2
                },
                {
                    "Address": 476,
                    "ByteSize": 2,
                    "Comment": "Is the present character a 'TO'?"
                },
                {
                    "Address": 478,
                    "ByteSize": 2,
                    "Comment": "It must not be otherwise.",
                    "OperandType": 2
                },
                {
                    "Address": 480,
                    "ByteSize": 1,
                    "Comment": "Get the present character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 481,
                    "ByteSize": 1,
                    "Comment": "{Point to the preceding character and set"
                },
                {
                    "Address": 482,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(CH-ADD).}",
                    "OperandType": 1
                },
                {
                    "Address": 485,
                    "ByteSize": 2,
                    "Comment": "Evaluate the 'slice'.",
                    "OperandType": 2
                },
                {
                    "Address": 487,
                    "ByteSize": 3,
                    "Comment": "Set the counter to zero."
                },
                {
                    "Address": 490,
                    "ByteSize": 1,
                    "Comment": "Save the counter briefly."
                },
                {
                    "Address": 491,
                    "ByteSize": 1,
                    "Comment": "Advance \\#SYSVAR(CH-ADD).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 492,
                    "ByteSize": 1,
                    "Comment": "Restore the counter."
                },
                {
                    "Address": 493,
                    "ByteSize": 1,
                    "Comment": "Fetch the discriminator byte."
                },
                {
                    "Address": 494,
                    "ByteSize": 2,
                    "Comment": "{Jump unless checking the syntax for an array of"
                },
                {
                    "Address": 496,
                    "ByteSize": 2,
                    "Comment": "strings.}",
                    "OperandType": 2
                },
                {
                    "Address": 498,
                    "ByteSize": 1,
                    "Comment": "Get the present character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 499,
                    "ByteSize": 2,
                    "Comment": "Is it a ')'?"
                },
                {
                    "Address": 501,
                    "ByteSize": 2,
                    "Comment": "Jump forward as finished counting elements.",
                    "OperandType": 2
                },
                {
                    "Address": 503,
                    "ByteSize": 2,
                    "Comment": "Is to 'TO'?"
                },
                {
                    "Address": 505,
                    "ByteSize": 2,
                    "Comment": "Jump back if dealing with a 'slice'.",
                    "OperandType": 2
                },
                {
                    "Address": 507,
                    "ByteSize": 1,
                    "Comment": "Save the dimension-number counter and the discriminator\nbyte."
                },
                {
                    "Address": 508,
                    "ByteSize": 1,
                    "Comment": "Save the element-counter."
                },
                {
                    "Address": 509,
                    "ByteSize": 3,
                    "Comment": "Get a dimension-size into #REG:DE#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 512,
                    "ByteSize": 1,
                    "Comment": "The counter moves to #REG:HL# and the variable pointer is\nstacked."
                },
                {
                    "Address": 513,
                    "ByteSize": 1,
                    "Comment": "The counter moves to #REG:DE# and the dimension-size to\n#REG:HL#."
                },
                {
                    "Address": 514,
                    "ByteSize": 3,
                    "Comment": "Evaluate the next subscript.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 517,
                    "ByteSize": 2,
                    "Comment": "Give an error if out of range.",
                    "OperandType": 2
                },
                {
                    "Address": 519,
                    "ByteSize": 1,
                    "Comment": "The result of the evaluation is decremented as the\ncounter is to count the elements occurring before the\nspecified element."
                },
                {
                    "Address": 520,
                    "ByteSize": 3,
                    "Comment": "Multiply the counter by the dimension-size.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 523,
                    "ByteSize": 1,
                    "Comment": "Add the result of #ADDR:0x2ACC# to the present counter."
                },
                {
                    "Address": 524,
                    "ByteSize": 1,
                    "Comment": "Fetch the variable pointer."
                },
                {
                    "Address": 525,
                    "ByteSize": 1,
                    "Comment": "Fetch the dimension-number and the discriminator byte."
                },
                {
                    "Address": 526,
                    "ByteSize": 2,
                    "Comment": "Keep going round the loop until #REG:B# equals zero.",
                    "OperandType": 2
                },
                {
                    "Address": 528,
                    "ByteSize": 2,
                    "Comment": "{Report an error if checking syntax at this point."
                },
                {
                    "Address": 530,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 532,
                    "ByteSize": 1,
                    "Comment": "Save the counter."
                },
                {
                    "Address": 533,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if handling an array of strings."
                },
                {
                    "Address": 535,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 537,
                    "ByteSize": 1,
                    "Comment": "{Transfer the variable pointer to the #REG:BC# register"
                },
                {
                    "Address": 538,
                    "ByteSize": 1,
                    "Comment": "pair.}"
                },
                {
                    "Address": 539,
                    "ByteSize": 1,
                    "Comment": "Fetch the present character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 540,
                    "ByteSize": 2,
                    "Comment": "Is it a ')'?"
                },
                {
                    "Address": 542,
                    "ByteSize": 2,
                    "Comment": "Jump past the error report unless it is needed.",
                    "OperandType": 2
                },
                {
                    "Address": 544,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 546,
                    "ByteSize": 1,
                    "Comment": "Advance \\#SYSVAR(CH-ADD).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 547,
                    "ByteSize": 1,
                    "Comment": "Fetch the counter."
                },
                {
                    "Address": 548,
                    "ByteSize": 3,
                    "Comment": "There are 5 bytes to each element in an array of\nnumbers."
                },
                {
                    "Address": 551,
                    "ByteSize": 3,
                    "Comment": "Compute the total number of bytes before the required\nelement.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 554,
                    "ByteSize": 1,
                    "Comment": "Make #REG:HL# point to the location before the required\nelement."
                },
                {
                    "Address": 555,
                    "ByteSize": 1,
                    "Comment": "Return with this address."
                },
                {
                    "Address": 556,
                    "ByteSize": 3,
                    "Comment": "Fetch the last dimension-size.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 559,
                    "ByteSize": 1,
                    "Comment": "The variable pointer goes on the stack and the counter\nto #REG:HL#."
                },
                {
                    "Address": 560,
                    "ByteSize": 3,
                    "Comment": "Multiply 'counter' by 'dimension-size'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 563,
                    "ByteSize": 1,
                    "Comment": "Fetch the variable pointer."
                },
                {
                    "Address": 564,
                    "ByteSize": 1,
                    "Comment": "This gives #REG:HL# pointing to the location before the\nstring."
                },
                {
                    "Address": 565,
                    "ByteSize": 1,
                    "Comment": "So point to the actual 'start'."
                },
                {
                    "Address": 566,
                    "ByteSize": 1,
                    "Comment": "{Transfer the last dimension-size to #REG:BC# to form the"
                },
                {
                    "Address": 567,
                    "ByteSize": 1,
                    "Comment": "'length'.}"
                },
                {
                    "Address": 568,
                    "ByteSize": 1,
                    "Comment": "Move the 'start' to #REG:DE#."
                },
                {
                    "Address": 569,
                    "ByteSize": 3,
                    "Comment": "Pass these parameters to the calculator stack. Note:\nthe first parameter is zero indicating a string from an\n'array of strings' and hence the existing entry is not\nto be reclaimed.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 572,
                    "ByteSize": 1,
                    "Comment": "Get the present character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 573,
                    "ByteSize": 2,
                    "Comment": "Is it a ')'?"
                },
                {
                    "Address": 575,
                    "ByteSize": 2,
                    "Comment": "Jump if it is so.",
                    "OperandType": 2
                },
                {
                    "Address": 577,
                    "ByteSize": 2,
                    "Comment": "Is it a ','?"
                },
                {
                    "Address": 579,
                    "ByteSize": 2,
                    "Comment": "Report the error if not so.",
                    "OperandType": 2
                },
                {
                    "Address": 581,
                    "ByteSize": 3,
                    "Comment": "Use #ADDR:0x2A52# to modify the set of parameters.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 584,
                    "ByteSize": 1,
                    "Comment": "Fetch the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 585,
                    "ByteSize": 2,
                    "Comment": "Is It a '('?"
                },
                {
                    "Address": 587,
                    "ByteSize": 2,
                    "Comment": "Jump back if there is a 'slice' to be considered.",
                    "OperandType": 2
                },
                {
                    "Address": 589,
                    "ByteSize": 4,
                    "Comment": "Signal - string result (reset bit 6 of \\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 593,
                    "ByteSize": 1,
                    "Comment": "Return with the parameters of the required string\nforming a 'last value' on the calculator stack."
                },
                {
                    "Address": 594,
                    "ByteSize": 3,
                    "Comment": "Check the flag.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 597,
                    "ByteSize": 3,
                    "Comment": "Take the parameters off the stack in 'run-time'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 600,
                    "ByteSize": 1,
                    "Comment": "Get the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 601,
                    "ByteSize": 2,
                    "Comment": "Is it a ')'?"
                },
                {
                    "Address": 603,
                    "ByteSize": 2,
                    "Comment": "Jump forward if it is so.",
                    "OperandType": 2
                },
                {
                    "Address": 605,
                    "ByteSize": 1,
                    "Comment": "The 'start' goes on the machine stack."
                },
                {
                    "Address": 606,
                    "ByteSize": 1,
                    "Comment": "{The #REG:A# register is cleared and saved."
                },
                {
                    "Address": 607,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 608,
                    "ByteSize": 1,
                    "Comment": "The 'length' is saved briefly."
                },
                {
                    "Address": 609,
                    "ByteSize": 3,
                    "Comment": "Presume that the 'slice' is to begin with the first\ncharacter."
                },
                {
                    "Address": 612,
                    "ByteSize": 1,
                    "Comment": "Get the first character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 613,
                    "ByteSize": 1,
                    "Comment": "Pass the 'length' to #REG:HL#."
                },
                {
                    "Address": 614,
                    "ByteSize": 2,
                    "Comment": "Is the present character a 'TO'?"
                },
                {
                    "Address": 616,
                    "ByteSize": 2,
                    "Comment": "The first parameter, by default, will be '1' if the\njump is taken.",
                    "OperandType": 2
                },
                {
                    "Address": 618,
                    "ByteSize": 1,
                    "Comment": "At this stage #REG:A# is zero."
                },
                {
                    "Address": 619,
                    "ByteSize": 3,
                    "Comment": "#REG:BC# is made to hold the first parameter. #REG:A# will\nhold &FF if there has been an 'out of range' error.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 622,
                    "ByteSize": 1,
                    "Comment": "Save the value anyway."
                },
                {
                    "Address": 623,
                    "ByteSize": 1,
                    "Comment": "{Transfer the first parameter to #REG:DE#."
                },
                {
                    "Address": 624,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 625,
                    "ByteSize": 1,
                    "Comment": "Save the 'length' briefly."
                },
                {
                    "Address": 626,
                    "ByteSize": 1,
                    "Comment": "Get the present character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 627,
                    "ByteSize": 1,
                    "Comment": "Restore the 'length'."
                },
                {
                    "Address": 628,
                    "ByteSize": 2,
                    "Comment": "Is the present character a 'TO'?"
                },
                {
                    "Address": 630,
                    "ByteSize": 2,
                    "Comment": "{Jump forward to consider the second parameter if it is",
                    "OperandType": 2
                },
                {
                    "Address": 632,
                    "ByteSize": 2,
                    "Comment": "so; otherwise show that there is a closing bracket.}"
                },
                {
                    "Address": 634,
                    "ByteSize": 3,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 637,
                    "ByteSize": 1,
                    "Comment": "{The last character of the 'slice' is also the first"
                },
                {
                    "Address": 638,
                    "ByteSize": 1,
                    "Comment": "character.}"
                },
                {
                    "Address": 639,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 641,
                    "ByteSize": 1,
                    "Comment": "Save the 'length' briefly."
                },
                {
                    "Address": 642,
                    "ByteSize": 1,
                    "Comment": "Get the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 643,
                    "ByteSize": 1,
                    "Comment": "Restore the 'length'."
                },
                {
                    "Address": 644,
                    "ByteSize": 2,
                    "Comment": "Is the present character a ')'?"
                },
                {
                    "Address": 646,
                    "ByteSize": 2,
                    "Comment": "Jump if there is not a second parameter.",
                    "OperandType": 2
                },
                {
                    "Address": 648,
                    "ByteSize": 1,
                    "Comment": "If the first parameter was in range #REG:A# will hold\nzero, otherwise &FF."
                },
                {
                    "Address": 649,
                    "ByteSize": 3,
                    "Comment": "Make #REG:BC# hold the second parameter.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 652,
                    "ByteSize": 1,
                    "Comment": "Save the 'error register'."
                },
                {
                    "Address": 653,
                    "ByteSize": 1,
                    "Comment": "Get the present character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 654,
                    "ByteSize": 1,
                    "Comment": "{Pass the result obtained from #ADDR:0x2ACD# to the #REG:HL#"
                },
                {
                    "Address": 655,
                    "ByteSize": 1,
                    "Comment": "register pair.}"
                },
                {
                    "Address": 656,
                    "ByteSize": 2,
                    "Comment": "{Check that there is a closing bracket now."
                },
                {
                    "Address": 658,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 660,
                    "ByteSize": 1,
                    "Comment": "Fetch the 'error register'."
                },
                {
                    "Address": 661,
                    "ByteSize": 1,
                    "Comment": "The second parameter goes on the stack and the 'start'\ngoes to #REG:HL#."
                },
                {
                    "Address": 662,
                    "ByteSize": 1,
                    "Comment": "The first parameter is added to the 'start'."
                },
                {
                    "Address": 663,
                    "ByteSize": 1,
                    "Comment": "Go back a location to get it correct."
                },
                {
                    "Address": 664,
                    "ByteSize": 1,
                    "Comment": "The 'new start' goes on the stack and the second\nparameter goes to #REG:HL#."
                },
                {
                    "Address": 665,
                    "ByteSize": 1,
                    "Comment": "{Subtract the first parameters from the second to find"
                },
                {
                    "Address": 666,
                    "ByteSize": 2,
                    "Comment": "the length of the 'slice'.}"
                },
                {
                    "Address": 668,
                    "ByteSize": 3,
                    "Comment": "Initialise the 'new length'."
                },
                {
                    "Address": 671,
                    "ByteSize": 2,
                    "Comment": "A negative 'slice' is a 'null string' rather than an\nerror condition.",
                    "OperandType": 2
                },
                {
                    "Address": 673,
                    "ByteSize": 1,
                    "Comment": "Allow for the inclusive byte."
                },
                {
                    "Address": 674,
                    "ByteSize": 1,
                    "Comment": "Only now test the 'error register'."
                },
                {
                    "Address": 675,
                    "ByteSize": 3,
                    "Comment": "Jump if either parameter was out of range for the\nstring.",
                    "OperandType": 2
                },
                {
                    "Address": 678,
                    "ByteSize": 1,
                    "Comment": "{Transfer the 'new length' to #REG:BC#."
                },
                {
                    "Address": 679,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 680,
                    "ByteSize": 1,
                    "Comment": "Get the 'new start'."
                },
                {
                    "Address": 681,
                    "ByteSize": 4,
                    "Comment": "Ensure that a string is still indicated (reset bit 6 of\n\\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 685,
                    "ByteSize": 3,
                    "Comment": "{Return at this point if checking syntax; otherwise",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 688,
                    "ByteSize": 1,
                    "Comment": "continue into #ADDR:0x2AB1#.}"
                },
                {
                    "Address": 689,
                    "ByteSize": 1,
                    "Comment": "Signal - a string from an array of strings or a\n'sliced' string."
                },
                {
                    "Address": 690,
                    "ByteSize": 4,
                    "Comment": "Ensure the flag indicates a string result (reset bit 6\nof \\#SYSVAR(FLAGS))."
                },
                {
                    "Address": 694,
                    "ByteSize": 1,
                    "Comment": "Save #REG:B# and #REG:C# briefly."
                },
                {
                    "Address": 695,
                    "ByteSize": 3,
                    "Comment": "Is there room for 5 bytes? Do not return here unless\nthere is room available.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 698,
                    "ByteSize": 1,
                    "Comment": "Restore #REG:B# and #REG:C#."
                },
                {
                    "Address": 699,
                    "ByteSize": 3,
                    "Comment": "Fetch the address of the first location above the\npresent stack (\\#SYSVAR(STKEND)).",
                    "OperandType": 1
                },
                {
                    "Address": 702,
                    "ByteSize": 1,
                    "Comment": "Transfer the first byte."
                },
                {
                    "Address": 703,
                    "ByteSize": 1,
                    "Comment": "Step on."
                },
                {
                    "Address": 704,
                    "ByteSize": 1,
                    "Comment": "{Transfer the second and third bytes; for a string"
                },
                {
                    "Address": 705,
                    "ByteSize": 1,
                    "Comment": "these will be the 'start'."
                },
                {
                    "Address": 706,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 707,
                    "ByteSize": 1,
                    "Comment": "Step on."
                },
                {
                    "Address": 708,
                    "ByteSize": 1,
                    "Comment": "{Transfer the fourth and fifth bytes; for a string"
                },
                {
                    "Address": 709,
                    "ByteSize": 1,
                    "Comment": "these will be the 'length'."
                },
                {
                    "Address": 710,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 711,
                    "ByteSize": 1,
                    "Comment": "Step on so as to point to the location above the stack."
                },
                {
                    "Address": 712,
                    "ByteSize": 3,
                    "Comment": "{Save this address in \\#SYSVAR(STKEND) and return.",
                    "OperandType": 1
                },
                {
                    "Address": 715,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 716,
                    "ByteSize": 1,
                    "Comment": "Clear the 'error register'."
                },
                {
                    "Address": 717,
                    "ByteSize": 1,
                    "Comment": "{Save both the #REG:DE# and #REG:HL# register pairs"
                },
                {
                    "Address": 718,
                    "ByteSize": 1,
                    "Comment": "throughout.}"
                },
                {
                    "Address": 719,
                    "ByteSize": 1,
                    "Comment": "Save the 'error register' briefly."
                },
                {
                    "Address": 720,
                    "ByteSize": 3,
                    "Comment": "The 'next expression' is evaluated to give a 'last\nvalue' on the calculator stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 723,
                    "ByteSize": 1,
                    "Comment": "Restore the 'error register'."
                },
                {
                    "Address": 724,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if checking syntax.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 727,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 729,
                    "ByteSize": 1,
                    "Comment": "Save the error register again."
                },
                {
                    "Address": 730,
                    "ByteSize": 3,
                    "Comment": "The 'last value' is compressed Into #REG:BC#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 733,
                    "ByteSize": 1,
                    "Comment": "Error register to #REG:D#."
                },
                {
                    "Address": 734,
                    "ByteSize": 1,
                    "Comment": "{A 'next expression' that gives zero is always in error"
                },
                {
                    "Address": 735,
                    "ByteSize": 1,
                    "Comment": "so jump forward if it is so."
                },
                {
                    "Address": 736,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 737,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 739,
                    "ByteSize": 1,
                    "Comment": "{Take a copy of the limit-value. This will be a"
                },
                {
                    "Address": 740,
                    "ByteSize": 1,
                    "Comment": "'dimension-size', a 'DIM-limit' or a 'string length'.}"
                },
                {
                    "Address": 741,
                    "ByteSize": 1,
                    "Comment": "{Now compare the result of evaluating the expression"
                },
                {
                    "Address": 742,
                    "ByteSize": 2,
                    "Comment": "against the limit.}"
                },
                {
                    "Address": 744,
                    "ByteSize": 1,
                    "Comment": "Fetch the 'old error value'."
                },
                {
                    "Address": 745,
                    "ByteSize": 2,
                    "Comment": "Form the 'new error value': &00 if no error at any time,\n&FF or less if an 'out of range' error on this pass or\non previous ones."
                },
                {
                    "Address": 747,
                    "ByteSize": 1,
                    "Comment": "{Restore #REG:HL# and #REG:DE#."
                },
                {
                    "Address": 748,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 749,
                    "ByteSize": 1,
                    "Comment": "Return; 'error register' is the #REG:A# register."
                },
                {
                    "Address": 750,
                    "ByteSize": 1,
                    "Comment": "Use #REG:HL# for the construction."
                },
                {
                    "Address": 751,
                    "ByteSize": 1,
                    "Comment": "Point to '#REG:DE#+1'."
                },
                {
                    "Address": 752,
                    "ByteSize": 1,
                    "Comment": "In effect - \\#S/LD E,(DE+1)/."
                },
                {
                    "Address": 753,
                    "ByteSize": 1,
                    "Comment": "Point to '#REG:DE#+2'."
                },
                {
                    "Address": 754,
                    "ByteSize": 1,
                    "Comment": "In effect - \\#S/LD D,(DE+2)/."
                },
                {
                    "Address": 755,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 756,
                    "ByteSize": 3,
                    "Comment": "{Return directly if syntax is being checked.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 759,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 760,
                    "ByteSize": 3,
                    "Comment": "Perform the multiplication.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 763,
                    "ByteSize": 3,
                    "Comment": "Report 'Out of memory'.",
                    "OperandType": 2
                },
                {
                    "Address": 766,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 767,
                    "ByteSize": 3,
                    "Comment": "Fetch the present address in \\#SYSVAR(DEST).",
                    "OperandType": 1
                },
                {
                    "Address": 770,
                    "ByteSize": 4,
                    "Comment": "{Jump if handling a variable that 'exists already' (bit"
                },
                {
                    "Address": 774,
                    "ByteSize": 2,
                    "Comment": "1 of \\#SYSVAR(FLAGX) reset).}",
                    "OperandType": 2
                },
                {
                    "Address": 776,
                    "ByteSize": 3,
                    "Comment": "Presume dealing with a numeric variable - 5 bytes."
                },
                {
                    "Address": 779,
                    "ByteSize": 1,
                    "Comment": "Add '1' to the counter for each character of a name."
                },
                {
                    "Address": 780,
                    "ByteSize": 1,
                    "Comment": "Move along the variable's name."
                },
                {
                    "Address": 781,
                    "ByteSize": 1,
                    "Comment": "Fetch the 'present code'."
                },
                {
                    "Address": 782,
                    "ByteSize": 2,
                    "Comment": "{Jump back if it is a 'space', thereby ignoring spaces."
                },
                {
                    "Address": 784,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 786,
                    "ByteSize": 2,
                    "Comment": "Jump forward if the code is &21 to &FF.",
                    "OperandType": 2
                },
                {
                    "Address": 788,
                    "ByteSize": 2,
                    "Comment": "{Accept, as a final code, those in the range &00 to"
                },
                {
                    "Address": 790,
                    "ByteSize": 2,
                    "Comment": "&0F.}",
                    "OperandType": 2
                },
                {
                    "Address": 792,
                    "ByteSize": 2,
                    "Comment": "{Also accept the range &16 to &1F."
                },
                {
                    "Address": 794,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 796,
                    "ByteSize": 1,
                    "Comment": "Step past the control code after any of INK to OVER."
                },
                {
                    "Address": 797,
                    "ByteSize": 2,
                    "Comment": "Jump back as these control codes are treated as spaces.",
                    "OperandType": 2
                },
                {
                    "Address": 799,
                    "ByteSize": 3,
                    "Comment": "Is the code alphanumeric?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 802,
                    "ByteSize": 2,
                    "Comment": "If It is so then accept it as a character of a 'long'\nname.",
                    "OperandType": 2
                },
                {
                    "Address": 804,
                    "ByteSize": 2,
                    "Comment": "Is the present code a '$'?"
                },
                {
                    "Address": 806,
                    "ByteSize": 3,
                    "Comment": "Jump forward as handling a 'newly declared' simple\nstring.",
                    "OperandType": 2
                },
                {
                    "Address": 809,
                    "ByteSize": 1,
                    "Comment": "Copy the 'length' to #REG:A#."
                },
                {
                    "Address": 810,
                    "ByteSize": 3,
                    "Comment": "{Make #REG:HL# point to the '&80-byte' at the end of the",
                    "OperandType": 1
                },
                {
                    "Address": 813,
                    "ByteSize": 1,
                    "Comment": "variables area (\\#SYSVAR(E-LINE)-1).}"
                },
                {
                    "Address": 814,
                    "ByteSize": 3,
                    "Comment": "Now open up the variables area. Note: in effect #REG:BC#\nspaces are made before the displaced '&80-byte'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 817,
                    "ByteSize": 1,
                    "Comment": "Point to the first 'new' byte."
                },
                {
                    "Address": 818,
                    "ByteSize": 1,
                    "Comment": "{Make #REG:DE# point to the second 'new' byte."
                },
                {
                    "Address": 819,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 820,
                    "ByteSize": 1,
                    "Comment": "Save this pointer."
                },
                {
                    "Address": 821,
                    "ByteSize": 3,
                    "Comment": "Fetch the pointer to the start of the name\n(\\#SYSVAR(DEST)).",
                    "OperandType": 1
                },
                {
                    "Address": 824,
                    "ByteSize": 1,
                    "Comment": "Make #REG:DE# point to the first 'new' byte."
                },
                {
                    "Address": 825,
                    "ByteSize": 2,
                    "Comment": "{Make #REG:B# hold the 'number of extra letters' that are"
                },
                {
                    "Address": 827,
                    "ByteSize": 1,
                    "Comment": "found in a 'long name'.}"
                },
                {
                    "Address": 828,
                    "ByteSize": 2,
                    "Comment": "Jump forward if dealing with a variable with a 'short\nname'.",
                    "OperandType": 2
                },
                {
                    "Address": 830,
                    "ByteSize": 1,
                    "Comment": "Point to each 'extra' code."
                },
                {
                    "Address": 831,
                    "ByteSize": 1,
                    "Comment": "Fetch the code."
                },
                {
                    "Address": 832,
                    "ByteSize": 2,
                    "Comment": "{Accept codes from &21 to &FF; ignore codes &00 to &20."
                },
                {
                    "Address": 834,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 836,
                    "ByteSize": 2,
                    "Comment": "Set bit 5, as for lower case letters."
                },
                {
                    "Address": 838,
                    "ByteSize": 1,
                    "Comment": "{Transfer the codes in turn to the 2nd 'new' byte"
                },
                {
                    "Address": 839,
                    "ByteSize": 1,
                    "Comment": "onwards.}"
                },
                {
                    "Address": 840,
                    "ByteSize": 2,
                    "Comment": "Go round the loop for all the 'extra' codes.",
                    "OperandType": 2
                },
                {
                    "Address": 842,
                    "ByteSize": 2,
                    "Comment": "{Mark the code as required and overwrite the last code."
                },
                {
                    "Address": 844,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 845,
                    "ByteSize": 2,
                    "Comment": "Prepare to mark the letter of a 'long' name."
                },
                {
                    "Address": 847,
                    "ByteSize": 3,
                    "Comment": "Fetch the pointer to the letter (\\#SYSVAR(DEST)).",
                    "OperandType": 1
                },
                {
                    "Address": 850,
                    "ByteSize": 1,
                    "Comment": "#REG:A# holds &00 for a 'short' name and &C0 for a 'long'\nname."
                },
                {
                    "Address": 851,
                    "ByteSize": 2,
                    "Comment": "Set bit 5, as for lower case letters."
                },
                {
                    "Address": 853,
                    "ByteSize": 1,
                    "Comment": "Drop the pointer now."
                },
                {
                    "Address": 854,
                    "ByteSize": 3,
                    "Comment": "Enter the letter and return with #REG:HL# pointing to\n'new &80-byte'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 857,
                    "ByteSize": 1,
                    "Comment": "Save the 'destination' pointer."
                },
                {
                    "Address": 858,
                    "ByteSize": 1,
                    "Comment": "Use the calculator to move \\#SYSVAR(STKEND) back five\nbytes.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 861,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer."
                },
                {
                    "Address": 862,
                    "ByteSize": 3,
                    "Comment": "Give the number a 'length' of five bytes."
                },
                {
                    "Address": 865,
                    "ByteSize": 1,
                    "Comment": "{Make #REG:HL# point to the first of the five locations"
                },
                {
                    "Address": 866,
                    "ByteSize": 2,
                    "Comment": "and jump forward to make the actual transfer."
                },
                {
                    "Address": 868,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 870,
                    "ByteSize": 4,
                    "Comment": "{Jump forward if handling any kind of string variable"
                },
                {
                    "Address": 874,
                    "ByteSize": 2,
                    "Comment": "(bit 6 of \\#SYSVAR(FLAGS) reset).}",
                    "OperandType": 2
                },
                {
                    "Address": 876,
                    "ByteSize": 3,
                    "Comment": "The five bytes of a number + 1."
                },
                {
                    "Address": 879,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# now points 'after'."
                },
                {
                    "Address": 880,
                    "ByteSize": 2,
                    "Comment": "Jump back to make the actual transfer.",
                    "OperandType": 2
                },
                {
                    "Address": 882,
                    "ByteSize": 3,
                    "Comment": "Fetch the 'start' (\\#SYSVAR(DEST)). Note: this line is\nredundant.",
                    "OperandType": 1
                },
                {
                    "Address": 885,
                    "ByteSize": 4,
                    "Comment": "Fetch the 'length' (\\#SYSVAR(STRLEN)).",
                    "OperandType": 1
                },
                {
                    "Address": 889,
                    "ByteSize": 4,
                    "Comment": "{Jump if dealing with a complete simple string (bit 0"
                },
                {
                    "Address": 893,
                    "ByteSize": 2,
                    "Comment": "of \\#SYSVAR(FLAGX) set); the old string will need to be\n'deleted' in this case only.}",
                    "OperandType": 2
                },
                {
                    "Address": 895,
                    "ByteSize": 1,
                    "Comment": "{Return if the string is a null string."
                },
                {
                    "Address": 896,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 897,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 898,
                    "ByteSize": 1,
                    "Comment": "Save the 'start' (\\#SYSVAR(DEST))."
                },
                {
                    "Address": 899,
                    "ByteSize": 1,
                    "Comment": "Make the necessary amount of room in the work space.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 900,
                    "ByteSize": 1,
                    "Comment": "Save the pointer to the first location."
                },
                {
                    "Address": 901,
                    "ByteSize": 1,
                    "Comment": "Save the 'length' for use later on."
                },
                {
                    "Address": 902,
                    "ByteSize": 1,
                    "Comment": "{Make #REG:DE# point to the last location."
                },
                {
                    "Address": 903,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 904,
                    "ByteSize": 1,
                    "Comment": "Make #REG:HL# point 'one past' the new locations."
                },
                {
                    "Address": 905,
                    "ByteSize": 2,
                    "Comment": "Enter a 'space' character."
                },
                {
                    "Address": 907,
                    "ByteSize": 2,
                    "Comment": "Copy this character into all the new locations. Finish\nwith #REG:HL# pointing to the first new location."
                },
                {
                    "Address": 909,
                    "ByteSize": 1,
                    "Comment": "Save the pointer briefly."
                },
                {
                    "Address": 910,
                    "ByteSize": 3,
                    "Comment": "Fetch the 'new' parameters.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 913,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer."
                },
                {
                    "Address": 914,
                    "ByteSize": 1,
                    "Comment": "'Length' of new area to #REG:HL#. 'Pointer' to new area\nto stack."
                },
                {
                    "Address": 915,
                    "ByteSize": 1,
                    "Comment": "{Compare the two 'lengths' and jump forward if the"
                },
                {
                    "Address": 916,
                    "ByteSize": 2,
                    "Comment": "'new' string will fit into the room, i.e. no shortening"
                },
                {
                    "Address": 918,
                    "ByteSize": 1,
                    "Comment": "required."
                },
                {
                    "Address": 919,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 921,
                    "ByteSize": 1,
                    "Comment": "{However modify the 'new' length if it is too long."
                },
                {
                    "Address": 922,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 923,
                    "ByteSize": 1,
                    "Comment": "'Length' of new area to stack. 'Pointer' to new area to\n#REG:HL#."
                },
                {
                    "Address": 924,
                    "ByteSize": 1,
                    "Comment": "'Start' of new string to #REG:HL#. 'Pointer' to new area\nto #REG:DE#."
                },
                {
                    "Address": 925,
                    "ByteSize": 1,
                    "Comment": "{Jump forward if the 'new' string is a 'null' string."
                },
                {
                    "Address": 926,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 927,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 929,
                    "ByteSize": 2,
                    "Comment": "Otherwise move the 'new' string to the work space."
                },
                {
                    "Address": 931,
                    "ByteSize": 1,
                    "Comment": "'Length' of new area."
                },
                {
                    "Address": 932,
                    "ByteSize": 1,
                    "Comment": "'Pointer' to new area."
                },
                {
                    "Address": 933,
                    "ByteSize": 1,
                    "Comment": "The start - the pointer to the 'variable in assignment'\nwhich was originally in \\#SYSVAR(DEST). #ADDR:0x2BA6# is now\nused to pass the 'new' string to the variables area."
                },
                {
                    "Address": 934,
                    "ByteSize": 1,
                    "Comment": "Change the pointers over."
                },
                {
                    "Address": 935,
                    "ByteSize": 1,
                    "Comment": "{Check once again that the length is not zero."
                },
                {
                    "Address": 936,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 937,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 938,
                    "ByteSize": 1,
                    "Comment": "Save the destination pointer."
                },
                {
                    "Address": 939,
                    "ByteSize": 2,
                    "Comment": "Move the numeric value or the string."
                },
                {
                    "Address": 941,
                    "ByteSize": 1,
                    "Comment": "{Return with the #REG:HL# register pair pointing to the"
                },
                {
                    "Address": 942,
                    "ByteSize": 1,
                    "Comment": "first byte of the numeric value or the string.}"
                },
                {
                    "Address": 943,
                    "ByteSize": 1,
                    "Comment": "{Make #REG:HL# point to the letter of the variable's"
                },
                {
                    "Address": 944,
                    "ByteSize": 1,
                    "Comment": "name, i.e. \\#SYSVAR(DEST)-3."
                },
                {
                    "Address": 945,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 946,
                    "ByteSize": 1,
                    "Comment": "Pick up the letter."
                },
                {
                    "Address": 947,
                    "ByteSize": 1,
                    "Comment": "Save the pointer to the 'existing version'."
                },
                {
                    "Address": 948,
                    "ByteSize": 1,
                    "Comment": "Save the 'length' of the 'existing string'."
                },
                {
                    "Address": 949,
                    "ByteSize": 3,
                    "Comment": "Use #ADDR:0x2BC6# to add the new string to the variables\narea.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 952,
                    "ByteSize": 1,
                    "Comment": "Restore the 'length'."
                },
                {
                    "Address": 953,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer."
                },
                {
                    "Address": 954,
                    "ByteSize": 1,
                    "Comment": "{Allow one byte for the letter and two bytes for the"
                },
                {
                    "Address": 955,
                    "ByteSize": 1,
                    "Comment": "length."
                },
                {
                    "Address": 956,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 957,
                    "ByteSize": 3,
                    "Comment": "Exit by jumping to #ADDR:0x19E8# which will reclaim the whole\nof the existing version.",
                    "OperandType": 2
                },
                {
                    "Address": 960,
                    "ByteSize": 2,
                    "Comment": "Prepare for the marking of the variable's letter."
                },
                {
                    "Address": 962,
                    "ByteSize": 3,
                    "Comment": "Fetch the pointer to the letter (\\#SYSVAR(DEST)).",
                    "OperandType": 1
                },
                {
                    "Address": 965,
                    "ByteSize": 1,
                    "Comment": "Mark the letter as required. #ADDR:0x2BC6# is now used to add\nthe new string to the variables area."
                },
                {
                    "Address": 966,
                    "ByteSize": 1,
                    "Comment": "Save the variable's letter."
                },
                {
                    "Address": 967,
                    "ByteSize": 3,
                    "Comment": "Fetch the 'start' and the 'length' of the 'new' string.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 970,
                    "ByteSize": 1,
                    "Comment": "Move the 'start' to #REG:HL#."
                },
                {
                    "Address": 971,
                    "ByteSize": 1,
                    "Comment": "Make #REG:HL# point one past the string."
                },
                {
                    "Address": 972,
                    "ByteSize": 1,
                    "Comment": "Save the 'length'."
                },
                {
                    "Address": 973,
                    "ByteSize": 1,
                    "Comment": "Make #REG:HL# point to the end of the string."
                },
                {
                    "Address": 974,
                    "ByteSize": 3,
                    "Comment": "Save the pointer briefly in \\#SYSVAR(DEST).",
                    "OperandType": 1
                },
                {
                    "Address": 977,
                    "ByteSize": 1,
                    "Comment": "{Allow one byte for the letter and two bytes for the"
                },
                {
                    "Address": 978,
                    "ByteSize": 1,
                    "Comment": "length."
                },
                {
                    "Address": 979,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 980,
                    "ByteSize": 3,
                    "Comment": "{Make #REG:HL# point to the '&80-byte' at the end of the",
                    "OperandType": 1
                },
                {
                    "Address": 983,
                    "ByteSize": 1,
                    "Comment": "variables area (\\#SYSVAR(E-LINE)-1).}"
                },
                {
                    "Address": 984,
                    "ByteSize": 3,
                    "Comment": "Now open up the variables area. Note: in effect #REG:BC#\nspaces are made before the displaced '&80-byte'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 987,
                    "ByteSize": 3,
                    "Comment": "Restore the pointer to the end of the 'new' string from\n\\#SYSVAR(DEST).",
                    "OperandType": 1
                },
                {
                    "Address": 990,
                    "ByteSize": 1,
                    "Comment": "{Make a copy of the length of the 'new' string."
                },
                {
                    "Address": 991,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 992,
                    "ByteSize": 1,
                    "Comment": "Add one to the length in case the 'new' string is a\n'null' string."
                },
                {
                    "Address": 993,
                    "ByteSize": 2,
                    "Comment": "Now copy the 'new' string + one byte."
                },
                {
                    "Address": 995,
                    "ByteSize": 1,
                    "Comment": "{Make #REG:HL# point to the byte that is to hold the"
                },
                {
                    "Address": 996,
                    "ByteSize": 1,
                    "Comment": "high-length.}"
                },
                {
                    "Address": 997,
                    "ByteSize": 1,
                    "Comment": "Fetch the 'length'."
                },
                {
                    "Address": 998,
                    "ByteSize": 1,
                    "Comment": "Enter the high-length."
                },
                {
                    "Address": 999,
                    "ByteSize": 1,
                    "Comment": "Back one."
                },
                {
                    "Address": 1000,
                    "ByteSize": 1,
                    "Comment": "Enter the low-length."
                },
                {
                    "Address": 1001,
                    "ByteSize": 1,
                    "Comment": "Fetch the variable's letter."
                },
                {
                    "Address": 1002,
                    "ByteSize": 1,
                    "Comment": "Make #REG:HL# point to the 'old &80-byte'."
                },
                {
                    "Address": 1003,
                    "ByteSize": 1,
                    "Comment": "It is overwritten with the letter of the variable."
                },
                {
                    "Address": 1004,
                    "ByteSize": 3,
                    "Comment": "{Make #REG:HL# point to the 'new &80-byte'",
                    "OperandType": 1
                },
                {
                    "Address": 1007,
                    "ByteSize": 1,
                    "Comment": "(\\#SYSVAR(E-LINE)-1).}"
                },
                {
                    "Address": 1008,
                    "ByteSize": 1,
                    "Comment": "Finished with all the 'newly declared variables'."
                },
                {
                    "Address": 1009,
                    "ByteSize": 3,
                    "Comment": "Get \\#SYSVAR(STKEND).",
                    "OperandType": 1
                },
                {
                    "Address": 1012,
                    "ByteSize": 1,
                    "Comment": "Back one."
                },
                {
                    "Address": 1013,
                    "ByteSize": 1,
                    "Comment": "The fifth value."
                },
                {
                    "Address": 1014,
                    "ByteSize": 1,
                    "Comment": "Back one."
                },
                {
                    "Address": 1015,
                    "ByteSize": 1,
                    "Comment": "The fourth value."
                },
                {
                    "Address": 1016,
                    "ByteSize": 1,
                    "Comment": "Back one."
                },
                {
                    "Address": 1017,
                    "ByteSize": 1,
                    "Comment": "The third value."
                },
                {
                    "Address": 1018,
                    "ByteSize": 1,
                    "Comment": "Back one."
                },
                {
                    "Address": 1019,
                    "ByteSize": 1,
                    "Comment": "The second value."
                },
                {
                    "Address": 1020,
                    "ByteSize": 1,
                    "Comment": "Back one."
                },
                {
                    "Address": 1021,
                    "ByteSize": 1,
                    "Comment": "The first value."
                },
                {
                    "Address": 1022,
                    "ByteSize": 3,
                    "Comment": "Reset \\#SYSVAR(STKEND) to its new position.",
                    "OperandType": 1
                }
            ],
            "CommentBlocks": [
                {
                    "Address": 18,
                    "Comment": "Report P - FN without DEF."
                },
                {
                    "Address": 20,
                    "Comment": "When a DEF FN statement is found, the name and status of the two functions\nare compared; if they do not match, the search is resumed."
                },
                {
                    "Address": 49,
                    "Comment": "iii. The correct DEF FN statement has now been found. The arguments of the FN\nstatement will be evaluated by repeated calls of #ADDR:0x24FB#, and their 5 byte\nvalues (or parameters, for strings) will be inserted into the DEF FN\nstatement in the spaces made there at syntax checking. #REG:HL# will be used to\npoint along the DEF FN statement (calling #ADDR:0x28AB# as needed) while\n\\#SYSVAR(CH-ADD) points along the FN statement (calling #ADDR:0x0020# as needed)."
                },
                {
                    "Address": 139,
                    "Comment": "Report Q - Parameter error."
                },
                {
                    "Address": 141,
                    "Comment": "iv. Finally, the function itself is evaluated by calling #ADDR:0x24FB#, after first\nsetting \\#SYSVAR(DEFADD) to hold the address of the arguments as they occur in\nthe DEF FN statement. This ensures that #ADDR:0x28B2#, when called by #ADDR:0x24FB#, will\nfirst search these arguments for the required values, before making a search\nof the variables area."
                },
                {
                    "Address": 171,
                    "Comment": "THE 'FUNCTION SKIPOVER' SUBROUTINE\n \nThis subroutine is used by #ADDR:0x27BD# and by #ADDR:0x2951# to move #REG:HL# along the\nDEF FN statement while leaving \\#SYSVAR(CH-ADD) undisturbed, as it points\nalong the FN statement.\n \nHL Address of the current character\nO:A Code of next non-control, non-space character\nO:HL Address of that character"
                },
                {
                    "Address": 178,
                    "Comment": "THE 'LOOK-VARS' SUBROUTINE\n \nUsed by the routines at #ADDR:0x0605#, #ADDR:0x1C1F#, #ADDR:0x1C6C#, #ADDR:0x26C9# and #ADDR:0x2C02#.\n \nThis subroutine is called whenever a search of the variables area or of the\narguments of a DEF FN statement is required. The subroutine is entered with\nthe system variable \\#SYSVAR(CH-ADD) pointing to the first letter of the name\nof the variable whose location is being sought. The name will be in the\nprogram area or the work space. The subroutine initially builds up a\ndiscriminator byte, in the #REG:C# register, that is based on the first letter\nof the variable's name. Bits 5 and 6 of this byte indicate the type of the\nvariable that is being handled.\n \nThe #REG:B# register is used as a bit register to hold flags.\n \nO:C Bits 0-4: Code of the variable's name (if executing)\nO:C Bit 5: Set if the variable is numeric, reset if it's a string\nO:C Bit 6: Set if the variable is simple, reset if it's an array\nO:C Bit 7: Set if checking syntax, reset if executing\nO:HL Address of the last letter of the variable's name (in the variables\n.    area, if found)\nO:F Carry flag reset if the variable already exists or if checking syntax\nO:F Zero flag reset if the variable is simple (not an array) and does not\n.   exist"
                },
                {
                    "Address": 212,
                    "Comment": "Now find the end character of a name that has more than one character."
                },
                {
                    "Address": 222,
                    "Comment": "Simple strings and arrays of strings require that bit 6 of \\#SYSVAR(FLAGS) is\nreset."
                },
                {
                    "Address": 227,
                    "Comment": "If \\#SYSVAR(DEFADD-hi) is non-zero, indicating that a 'function' (a 'FN') is\nbeing evaluated, and if in 'run-time', a search will be made of the arguments\nin the DEF FN statement."
                },
                {
                    "Address": 239,
                    "Comment": "This entry point is used by the routine at #ADDR:0x2951#.\n \nOtherwise (or if the variable was not found in the DEF FN statement) a search\nof variables area will be made, unless syntax is being checked."
                },
                {
                    "Address": 253,
                    "Comment": "A BASIC line is being executed so make a search of the variables area."
                },
                {
                    "Address": 256,
                    "Comment": "Now enter a loop to consider the names of the existing variables."
                },
                {
                    "Address": 271,
                    "Comment": "Long names are required to be matched fully."
                },
                {
                    "Address": 297,
                    "Comment": "In all cases where the names fail to match the #REG:HL# register pair has to be\nmade to point to the next variable in the variables area."
                },
                {
                    "Address": 306,
                    "Comment": "Come here if no entry was found with the correct name."
                },
                {
                    "Address": 308,
                    "Comment": "Come here if checking syntax."
                },
                {
                    "Address": 318,
                    "Comment": "Come here when an entry with the correct name was found."
                },
                {
                    "Address": 323,
                    "Comment": "If the matching variable name has more than a single letter then the other\ncharacters must be passed over.\n \nNote: this appears to have been done already at #ADDR:0x28D4#."
                },
                {
                    "Address": 331,
                    "Comment": "The exit-parameters are now set."
                },
                {
                    "Address": 337,
                    "Comment": "The exit-parameters for the subroutine can be summarised as follows.\n \nThe system variable \\#SYSVAR(CH-ADD) points to the first location after the\nname of the variable as it occurs in the BASIC line.\n \nWhen 'variable not found':\n \n\\#LIST\n{ The carry flag is set. }\n{ The zero flag is set only when the search was for an array variable. }\n{ The #REG:HL# register pair points to the first letter of the name of the\nvariable as it occurs in the BASIC line. }\nLIST\\#\n \nWhen 'variable found':\n \n\\#LIST\n{ The carry flag is reset. }\n{ The zero flag is set for both simple string variables and all array\nvariables. }\n{ The #REG:HL# register pair points to the letter of a 'short' name, or the\nlast character of a 'long' name, of the existing entry that was found in the\nvariables area. }\nLIST\\#\n \nIn all cases bits 5 and 6 of the #REG:C# register indicate the type of variable\nbeing handled. Bit 7 is the complement of the SYNTAX/RUN flag. But only when\nthe subroutine is used in 'runtime' will bits 0 to 4 hold the code of the\nvariable's letter.\n \nIn syntax time the return is always made with the carry flag reset. The zero\nflag is set for arrays and reset for all other variables, except that a\nsimple string name incorrectly followed by a '$' sets the zero flag and, in\nthe case of SAVE \"name\" DATA a$(), passes syntax as well.\nTHE 'STACK FUNCTION ARGUMENT' SUBROUTINE\n \nThis subroutine is called by #ADDR:0x28B2# when \\#SYSVAR(DEFADD-hi) is non-zero, to\nmake a search of the arguments area of a DEF FN statement, before searching\nin the variables area. If the variable is found in the DEF FN statement, then\nthe parameters of a string variable are stacked and a signal is given that\nthere is no need to call #ADDR:0x2996#. But it is left to #ADDR:0x26C9# to stack the\nvalue of a numerical variable at #ADDR:0x26DA#(\\#h26DA) in the usual way."
                },
                {
                    "Address": 385,
                    "Comment": "A match has been found. The parameters of a string variable are stacked,\navoiding the need to call #ADDR:0x2996#."
                },
                {
                    "Address": 406,
                    "Comment": "THE 'STK-VAR' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1C22#, #ADDR:0x26C9# and #ADDR:0x2C02#.\n \nThis subroutine is used either to find the parameters that define an existing\nstring entry in the variables area, or to return in the #REG:HL# register pair\nthe base address of a particular element or an array of numbers. When called\nfrom #ADDR:0x2C02# the subroutine only checks the syntax of the BASIC statement.\n \nNote that the parameters that define a string may be altered by calling\n#ADDR:0x2A52# if this should be specified.\n \nInitially the #REG:A# and the #REG:B# registers are cleared and bit 7 of the\n#REG:C# register is tested to determine whether syntax is being checked.\n \nC Bit 5: Set if the variable is numeric, reset if it's a string\nC Bit 6: Set if the variable is simple, reset if it's an array\nC Bit 7: Set if checking syntax, reset if executing\nHL Address of the last letter of the variable's name (in the variables area)"
                },
                {
                    "Address": 412,
                    "Comment": "Next, simple strings are separated from array variables."
                },
                {
                    "Address": 416,
                    "Comment": "The parameters for a simple string are readily found."
                },
                {
                    "Address": 430,
                    "Comment": "The base address of an element in an array is now found. Initially the\n'number of dimensions' is collected."
                },
                {
                    "Address": 438,
                    "Comment": "If an array of strings has its 'number of dimensions' equal to '1' then such\nan array can be handled as a simple string."
                },
                {
                    "Address": 441,
                    "Comment": "Next a check is made to ensure that in the BASIC line the variable is\nfollowed by a subscript."
                },
                {
                    "Address": 448,
                    "Comment": "For both numeric arrays and arrays of strings the variable pointer is\ntransferred to the #REG:DE# register pair before the subscript is evaluated."
                },
                {
                    "Address": 451,
                    "Comment": "The following loop is used to find the parameters of a specified element\nwithin an array. The loop is entered at the mid-point - #ADDR:0x29E7# - where the\nelement count is set to zero.\n \nThe loop is accessed #REG:B# times, this being, for a numeric array, equal to\nthe number of dimensions that are being used, but for an array of strings\n#REG:B# is one less than the number of dimensions in use as the last subscript\nis used to specify a 'slice' of the string."
                },
                {
                    "Address": 472,
                    "Comment": "For an array of strings the present subscript may represent a 'slice', or the\nsubscript for a 'slice' may yet be present in the BASIC line."
                },
                {
                    "Address": 487,
                    "Comment": "Enter the loop here."
                },
                {
                    "Address": 528,
                    "Comment": "The SYNTAX/RUN flag is checked before arrays of strings are separated from\narrays of numbers."
                },
                {
                    "Address": 537,
                    "Comment": "When dealing with an array of numbers the present character must be a ')'."
                },
                {
                    "Address": 544,
                    "Comment": "This entry point is used by the routines at #ADDR:0x2A52# and #ADDR:0x2C02#.\n \nReport 3 - Subscript out of range."
                },
                {
                    "Address": 546,
                    "Comment": "The address of the location before the actual floating-point form can now be\ncalculated."
                },
                {
                    "Address": 556,
                    "Comment": "When dealing with an array of strings the length of an element is given by\nthe last 'dimension-size'. The appropriate parameters are calculated and then\npassed to the calculator stack."
                },
                {
                    "Address": 572,
                    "Comment": "There are three possible forms of the last subscript:\n \n\\#LIST\n{ A$(2,4 TO 8) }\n{ A$(2)(4 TO 8) }\n{ A$(2) }\nLIST\\#\n \nThe last of these is the default form and indicates that the whole string is\nrequired."
                },
                {
                    "Address": 589,
                    "Comment": "When finished considering the last subscript a return can be made."
                },
                {
                    "Address": 594,
                    "Comment": "THE 'SLICING' SUBROUTINE\n \nUsed by the routines at #ADDR:0x26C9# and #ADDR:0x2996#.\n \nThe present string can be sliced using this subroutine. The subroutine is\nentered with the parameters of the string being present on the top of the\ncalculator stack and in the registers #REG:A#, #REG:B#, #REG:C#, #REG:D# and #REG:E#.\nInitially the SYNTAX/RUN flag is tested and the parameters of the string are\nfetched only if a line is being executed.\n \nBC Length of the string\nDE Address of the first character in the string"
                },
                {
                    "Address": 600,
                    "Comment": "The possibility of the 'slice' being '()' has to be considered."
                },
                {
                    "Address": 605,
                    "Comment": "Before proceeding the registers are manipulated as follows:"
                },
                {
                    "Address": 614,
                    "Comment": "The first parameter of the 'slice' is now evaluated."
                },
                {
                    "Address": 634,
                    "Comment": "This entry point is used by the routine at #ADDR:0x2996#."
                },
                {
                    "Address": 637,
                    "Comment": "At this point a 'slice' of a single character has been identified. e.g.\nA$(4)."
                },
                {
                    "Address": 641,
                    "Comment": "The second parameter of a 'slice' is now evaluated."
                },
                {
                    "Address": 660,
                    "Comment": "The 'new' parameters are now defined."
                },
                {
                    "Address": 689,
                    "Comment": "THE 'STK-STORE' SUBROUTINE\n \nUsed by the routine at #ADDR:0x2996#.\n \nThe routine at #ADDR:0x2A52# continues here.\n \nThis subroutine passes the values held in the #REG:A#, #REG:B#, #REG:C#, #REG:D# and\n#REG:E# registers to the calculator stack. The stack thereby grows in size by 5\nbytes with every call to this subroutine.\n \nThe subroutine is normally used to transfer the parameters of strings but it\nis also used by #ADDR:0x2D2B# and #ADDR:0x2DC1# to transfer 'small integers' to the\nstack.\n \nNote that when storing the parameters of a string the first value stored\n(coming from the #REG:A# register) will be a zero if the string comes from an\narray of strings or is a 'slice' of a string. The value will be '1' for a\ncomplete simple string. This 'flag' is used in the #ADDR:0x2AFF# command routine\nwhen the '1' signals that the old copy of the string is to be 'reclaimed'.\n \nA First byte (when entering at #ADDR:0x2AB2# or #ADDR:0x2AB6#)\nB Fifth byte\nC Fourth byte\nD Third byte\nE Second byte\nO:HL The new value of \\#SYSVAR(STKEND)"
                },
                {
                    "Address": 690,
                    "Comment": "This entry point is used by the routines at #ADDR:0x2089#, #ADDR:0x2535#, #ADDR:0x25B3#,\n#ADDR:0x2634#, #ADDR:0x2996#, #ADDR:0x359C#, #ADDR:0x35C9#, #ADDR:0x361F# and #ADDR:0x3645#."
                },
                {
                    "Address": 694,
                    "Comment": "This entry point is used by the routines at #ADDR:0x2D2B# and #ADDR:0x2DC1#."
                },
                {
                    "Address": 716,
                    "Comment": "THE 'INT-EXP' SUBROUTINE\n \nUsed by the routines at #ADDR:0x2996# and #ADDR:0x2C02#.\n \nThis subroutine returns the result of evaluating the 'next expression' as an\ninteger value held in the #REG:BC# register pair. The subroutine also tests\nthis result against a limit-value supplied in the #REG:HL# register pair. The\ncarry flag becomes set if there is an 'out of range' error.\n \nThe #REG:A# register is used as an 'error register' and holds &00 if there is\nno 'previous error' and &FF if there has been one.\n \nHL Limit value\nO:BC Expression value\nO:F Carry flag set if this value is out of range"
                },
                {
                    "Address": 717,
                    "Comment": "This entry point is used by the routine at #ADDR:0x2A52#."
                },
                {
                    "Address": 744,
                    "Comment": "The state of the carry flag and the value held in the #REG:D# register are now\nmanipulated so as to give the appropriate value for the 'error register'."
                },
                {
                    "Address": 747,
                    "Comment": "Restore the registers before returning."
                },
                {
                    "Address": 750,
                    "Comment": "THE 'DE,(DE+1)' SUBROUTINE\n \nUsed by the routine at #ADDR:0x2996#.\n \nThis subroutine performs the construction '\\#S/LD DE,(DE+1)/' and returns\n#REG:HL# pointing to '#REG:DE#+2'.\n \nDE Target address minus one\nO:DE Word at the target address\nO:HL Target address plus one"
                },
                {
                    "Address": 756,
                    "Comment": "THE 'GET-HL*DE' SUBROUTINE\n \nUsed by the routines at #ADDR:0x2996# and #ADDR:0x2C02#.\n \nUnless syntax is being checked this subroutine calls #ADDR:0x30A9# which performs\nthe implied construction.\n \nOverflow of the 16 bits available in the #REG:HL# register pair gives the\nreport 'out of memory'. This is not exactly the true situation but it implies\nthat the memory is not large enough for the task envisaged by the programmer.\n \nDE First number (M)\nHL Second number (N)\nO:HL M*N (if not checking syntax)"
                },
                {
                    "Address": 767,
                    "Comment": "THE 'LET' COMMAND ROUTINE\n \nUsed by the routines at #ADDR:0x1C56#, #ADDR:0x1D03# and #ADDR:0x2089#.\n \nThis is the actual assignment routine for the LET, READ and INPUT commands.\n \nWhen the destination variable is a 'newly declared variable' then\n\\#SYSVAR(DEST) will point to the first letter of the variable's name as it\noccurs in the BASIC line. Bit 1 of \\#SYSVAR(FLAGX) will be set.\n \nHowever if the destination variable 'exists already' then bit 1 of\n\\#SYSVAR(FLAGX) will be reset and \\#SYSVAR(DEST) will point for a numeric\nvariable to the location before the five bytes of the 'old number', and for a\nstring variable to the first location of the 'old string'. The use of\n\\#SYSVAR(DEST) in this manner applies to simple variables and to elements of\narrays.\n \nBit 0 of \\#SYSVAR(FLAGX) is set if the destination variable is a 'complete'\nsimple string variable. (Signalling - delete the old copy.) Initially the\ncurrent value of \\#SYSVAR(DEST) is collected and bit 1 of \\#SYSVAR(FLAGS)\ntested."
                },
                {
                    "Address": 776,
                    "Comment": "A 'newly declared variable' is being used. So first the length of its name is\nfound."
                },
                {
                    "Address": 779,
                    "Comment": "Enter a loop to deal with the characters of a long name. Any spaces or colour\ncodes in the name are ignored."
                },
                {
                    "Address": 799,
                    "Comment": "Separate 'numeric' and 'string' names."
                },
                {
                    "Address": 809,
                    "Comment": "The 'newly declared numeric variable' presently being handled will require\n#REG:BC# spaces in the variables area for its name and its value. The room is\nmade available and the name of the variable is copied over with the\ncharacters being 'marked' as required."
                },
                {
                    "Address": 830,
                    "Comment": "The 'extra' codes of a long name are passed to the variables area."
                },
                {
                    "Address": 842,
                    "Comment": "The last code of a 'long' name has to be \\#S/OR/ed with &80."
                },
                {
                    "Address": 845,
                    "Comment": "The first letter of the name of the variable being handled is now considered."
                },
                {
                    "Address": 854,
                    "Comment": "The subroutine #ADDR:0x2BEA# is now called to enter the 'letter' into its\nappropriate location."
                },
                {
                    "Address": 857,
                    "Comment": "The 'last value' can now be transferred to the variables area. Note that at\nthis point #REG:HL# always points to the location after the five locations\nallotted to the number.\n \nA 'RST \\#o28' instruction is used to call the calculator and the 'last value'\nis deleted. However this value is not overwritten."
                },
                {
                    "Address": 870,
                    "Comment": "Come here if considering a variable that 'exists already'. First bit 6 of\n\\#SYSVAR(FLAGS) is tested so as to separate numeric variables from string or\narray of string variables."
                },
                {
                    "Address": 876,
                    "Comment": "For numeric variables the 'new' number overwrites the 'old' number. So first\n#REG:HL# has to be made to point to the location after the five bytes of the\nexisting entry. At present #REG:HL# points to the location before the five\nbytes."
                },
                {
                    "Address": 882,
                    "Comment": "The parameters of the string variable are fetched and complete simple strings\nseparated from 'sliced' strings and array strings."
                },
                {
                    "Address": 895,
                    "Comment": "When dealing with a 'slice' of an existing simple string, a 'slice' of a\nstring from an array of strings or a complete string from an array of strings\nthere are two distinct stages involved. The first is to build up the 'new'\nstring in the work space, lengthening or shortening it as required. The\nsecond stage is then to copy the 'new' string to its allotted room in the\nvariables area.\n \nHowever do nothing if the string has no 'length'."
                },
                {
                    "Address": 898,
                    "Comment": "Then make the required number of spaces available in the work space."
                },
                {
                    "Address": 909,
                    "Comment": "The parameters of the string being handled are now fetched from the\ncalculator stack."
                },
                {
                    "Address": 914,
                    "Comment": "Note: at this point the required amount of room has been made available in\nthe work space for the 'variable in assignment'; e.g. for the statement 'LET\nA$(4 TO 8)=\"abcdefg\"' five locations have been made.\n \nThe parameters fetched above as a 'last value' represent the string that is\nto be copied into the new locations with Procrustean lengthening or\nshortening as required.\n \nThe length of the 'new' string is compared to the length of the room made\navailable for it."
                },
                {
                    "Address": 924,
                    "Comment": "As long as the new string is not a 'null string' it is copied into the work\nspace. Procrustean lengthening is achieved automatically if the 'new' string\nis shorter than the room available for it."
                },
                {
                    "Address": 931,
                    "Comment": "The values that have been saved on the machine stack are restored."
                },
                {
                    "Address": 934,
                    "Comment": "The following short subroutine is used to pass either a numeric value from\nthe calculator stack, or a string from the work space, to its appropriate\nposition in the variables area.\n \nThe subroutine is therefore used for all except 'newly declared' simple\nstrings and 'complete and existing' simple strings."
                },
                {
                    "Address": 943,
                    "Comment": "When handling a 'complete and existing' simple string the new string is\nentered as if it were a 'newly declared' simple string before the existing\nversion is 'reclaimed'."
                },
                {
                    "Address": 960,
                    "Comment": "'Newly declared' simple strings are handled as follows:"
                },
                {
                    "Address": 966,
                    "Comment": "The parameters of the 'new' string are fetched, sufficient room is made\navailable for it and the string is then transferred."
                },
                {
                    "Address": 1002,
                    "Comment": "The following subroutine is entered with the letter of the variable, suitably\nmarked, in the #REG:A# register. The letter overwrites the 'old &80-byte' in\nthe variables area. The subroutine returns with the #REG:HL# register pair\npointing to the 'new &80-byte'."
                },
                {
                    "Address": 1009,
                    "Comment": "THE 'STK-FETCH' SUBROUTINE\n \nUsed by the routines at #ADDR:0x04AA#, #ADDR:0x0605#, #ADDR:0x175D#, #ADDR:0x1C22#, #ADDR:0x1FFC#, #ADDR:0x2A52#,\n#ADDR:0x2AFF#, #ADDR:0x34BC#, #ADDR:0x353B#, #ADDR:0x359C#, #ADDR:0x35DE#, #ADDR:0x3669# and #ADDR:0x3674#.\n \nThis important subroutine collects the 'last value' from the calculator\nstack. The five bytes can be either a floating-point number, in 'short' or\n'long' form, or a set of parameters that define a string.\n \nO:A First byte\nO:B Fifth byte\nO:C Fourth byte\nO:D Third byte\nO:E Second byte"
                }
            ],
            "DataInfo": [
                {
                    "Address": 0,
                    "DataType": 11,
                    "InstructionAddressRef": 671023104
                },
                {
                    "Address": 19,
                    "Comment": "}"
                },
                {
                    "Address": 140,
                    "Comment": "}"
                },
                {
                    "Address": 545,
                    "Comment": "}"
                },
                {
                    "Address": 859,
                    "Comment": "#ADDR:0x33A1#"
                },
                {
                    "Address": 860,
                    "Comment": "#ADDR:0x369B#"
                }
            ],
            "LabelInfo": [
                {
                    "Address": 2,
                    "LabelType": 2,
                    "Name": "SF_ARGMT1"
                },
                {
                    "Address": 8,
                    "LabelType": 2,
                    "Name": "SF_FND_DF"
                },
                {
                    "Address": 20,
                    "LabelType": 2,
                    "Name": "SF_CP_DEF"
                },
                {
                    "Address": 37,
                    "LabelType": 2,
                    "Name": "SF_NOT_FD"
                },
                {
                    "Address": 49,
                    "LabelType": 2,
                    "Name": "SF_VALUES"
                },
                {
                    "Address": 67,
                    "LabelType": 2,
                    "Name": "SF_ARG_LP"
                },
                {
                    "Address": 82,
                    "LabelType": 2,
                    "Name": "SF_ARG_VL"
                },
                {
                    "Address": 133,
                    "LabelType": 2,
                    "Name": "SF_R_BR_2"
                },
                {
                    "Address": 139,
                    "LabelType": 2,
                    "Name": "REPORT_Q"
                },
                {
                    "Address": 141,
                    "LabelType": 2,
                    "Name": "SF_VALUE"
                },
                {
                    "Address": 171,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "FN_SKPOVR"
                },
                {
                    "Address": 178,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "LOOK_VARS"
                },
                {
                    "Address": 212,
                    "LabelType": 2,
                    "Name": "V_CHAR"
                },
                {
                    "Address": 222,
                    "LabelType": 2,
                    "Name": "V_STR_VAR"
                },
                {
                    "Address": 227,
                    "LabelType": 2,
                    "Name": "V_TEST_FN"
                },
                {
                    "Address": 239,
                    "LabelType": 2,
                    "Name": "V_RUN_SYN"
                },
                {
                    "Address": 253,
                    "LabelType": 2,
                    "Name": "V_RUN"
                },
                {
                    "Address": 256,
                    "LabelType": 2,
                    "Name": "V_EACH"
                },
                {
                    "Address": 274,
                    "LabelType": 2,
                    "Name": "V_MATCHES"
                },
                {
                    "Address": 275,
                    "LabelType": 2,
                    "Name": "V_SPACES"
                },
                {
                    "Address": 297,
                    "LabelType": 2,
                    "Name": "V_GET_PTR"
                },
                {
                    "Address": 298,
                    "LabelType": 2,
                    "Name": "V_NEXT"
                },
                {
                    "Address": 306,
                    "LabelType": 2,
                    "Name": "V_80_BYTE"
                },
                {
                    "Address": 308,
                    "LabelType": 2,
                    "Name": "V_SYNTAX"
                },
                {
                    "Address": 318,
                    "LabelType": 2,
                    "Name": "V_FOUND_1"
                },
                {
                    "Address": 319,
                    "LabelType": 2,
                    "Name": "V_FOUND_2"
                },
                {
                    "Address": 323,
                    "LabelType": 2,
                    "Name": "V_PASS"
                },
                {
                    "Address": 331,
                    "LabelType": 2,
                    "Name": "V_END"
                },
                {
                    "Address": 337,
                    "LabelType": 2,
                    "Name": "STK_F_ARG"
                },
                {
                    "Address": 346,
                    "LabelType": 2,
                    "Name": "SFA_LOOP"
                },
                {
                    "Address": 363,
                    "LabelType": 2,
                    "Name": "SFA_CP_VR"
                },
                {
                    "Address": 385,
                    "LabelType": 2,
                    "Name": "SFA_MATCH"
                },
                {
                    "Address": 401,
                    "LabelType": 2,
                    "Name": "SFA_END"
                },
                {
                    "Address": 406,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "STK_VAR"
                },
                {
                    "Address": 417,
                    "LabelType": 2,
                    "Name": "SV_SIMPLE"
                },
                {
                    "Address": 430,
                    "LabelType": 2,
                    "Name": "SV_ARRAYS"
                },
                {
                    "Address": 448,
                    "LabelType": 2,
                    "Name": "SV_PTR"
                },
                {
                    "Address": 451,
                    "LabelType": 2,
                    "Name": "SV_COMMA"
                },
                {
                    "Address": 472,
                    "LabelType": 2,
                    "Name": "SV_CLOSE"
                },
                {
                    "Address": 480,
                    "LabelType": 2,
                    "Name": "SV_CH_ADD"
                },
                {
                    "Address": 487,
                    "LabelType": 2,
                    "Name": "SV_COUNT"
                },
                {
                    "Address": 490,
                    "LabelType": 2,
                    "Name": "SV_LOOP"
                },
                {
                    "Address": 507,
                    "LabelType": 2,
                    "Name": "SV_MULT"
                },
                {
                    "Address": 530,
                    "LabelType": 2,
                    "Name": "SV_RPT_C"
                },
                {
                    "Address": 544,
                    "LabelType": 2,
                    "Name": "REPORT_3"
                },
                {
                    "Address": 546,
                    "LabelType": 2,
                    "Name": "SV_NUMBER"
                },
                {
                    "Address": 556,
                    "LabelType": 2,
                    "Name": "SV_ELEM"
                },
                {
                    "Address": 581,
                    "LabelType": 2,
                    "Name": "SV_SLICE"
                },
                {
                    "Address": 584,
                    "LabelType": 2,
                    "Name": "SV_DIM"
                },
                {
                    "Address": 585,
                    "LabelType": 2,
                    "Name": "SV_SLICE2"
                },
                {
                    "Address": 594,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "SLICING"
                },
                {
                    "Address": 634,
                    "LabelType": 2,
                    "Name": "SL_RPT_C"
                },
                {
                    "Address": 641,
                    "LabelType": 2,
                    "Name": "SL_SECOND"
                },
                {
                    "Address": 660,
                    "LabelType": 2,
                    "Name": "SL_DEFINE"
                },
                {
                    "Address": 680,
                    "LabelType": 2,
                    "Name": "SL_OVER"
                },
                {
                    "Address": 685,
                    "LabelType": 2,
                    "Name": "SL_STORE"
                },
                {
                    "Address": 689,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "STK_ST_0"
                },
                {
                    "Address": 690,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "STK_STO"
                },
                {
                    "Address": 694,
                    "LabelType": 2,
                    "Name": "STK_STORE"
                },
                {
                    "Address": 716,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "INT_EXP1"
                },
                {
                    "Address": 717,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "INT_EXP2"
                },
                {
                    "Address": 744,
                    "LabelType": 2,
                    "Name": "I_CARRY"
                },
                {
                    "Address": 747,
                    "LabelType": 2,
                    "Name": "I_RESTORE"
                },
                {
                    "Address": 750,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "DE_DE_1"
                },
                {
                    "Address": 756,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "GET_HLxDE"
                },
                {
                    "Address": 767,
                    "LabelType": 2,
                    "Name": "LET"
                },
                {
                    "Address": 779,
                    "LabelType": 2,
                    "Name": "L_EACH_CH"
                },
                {
                    "Address": 780,
                    "LabelType": 2,
                    "Name": "L_NO_SP"
                },
                {
                    "Address": 799,
                    "LabelType": 2,
                    "Name": "L_TEST_CH"
                },
                {
                    "Address": 809,
                    "LabelType": 2,
                    "Name": "L_SPACES"
                },
                {
                    "Address": 830,
                    "LabelType": 2,
                    "Name": "L_CHAR"
                },
                {
                    "Address": 847,
                    "LabelType": 2,
                    "Name": "L_SINGLE"
                },
                {
                    "Address": 857,
                    "LabelType": 2,
                    "Name": "L_NUMERIC"
                },
                {
                    "Address": 870,
                    "LabelType": 2,
                    "Name": "L_EXISTS"
                },
                {
                    "Address": 882,
                    "LabelType": 2,
                    "Name": "L_DELETE"
                },
                {
                    "Address": 923,
                    "LabelType": 2,
                    "Name": "L_LENGTH"
                },
                {
                    "Address": 931,
                    "LabelType": 2,
                    "Name": "L_IN_W_S"
                },
                {
                    "Address": 934,
                    "LabelType": 2,
                    "Name": "L_ENTER"
                },
                {
                    "Address": 943,
                    "LabelType": 2,
                    "Name": "L_ADD"
                },
                {
                    "Address": 960,
                    "LabelType": 2,
                    "Name": "L_NEW"
                },
                {
                    "Address": 966,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "L_STRING"
                },
                {
                    "Address": 1002,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "L_FIRST"
                },
                {
                    "Address": 1009,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "STK_FETCH"
                }
            ],
            "PageId": 10
        },
        {
            "CodeInfo": [
                {
                    "Address": 1,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 2,
                    "ByteSize": 3,
                    "Comment": "Search the variables area.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 5,
                    "ByteSize": 3,
                    "Comment": "Give report C as there has been an error.",
                    "OperandType": 2
                },
                {
                    "Address": 8,
                    "ByteSize": 3,
                    "Comment": "{Jump forward if in 'run time'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 11,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 13,
                    "ByteSize": 2,
                    "Comment": "Test the syntax for string arrays as if they were\nnumeric."
                },
                {
                    "Address": 15,
                    "ByteSize": 3,
                    "Comment": "Check the syntax of the parenthesised expression.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 18,
                    "ByteSize": 3,
                    "Comment": "Move on to consider the next statement as the syntax was\nsatisfactory.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 21,
                    "ByteSize": 2,
                    "Comment": "Jump forward if there is no 'existing array'.",
                    "OperandType": 2
                },
                {
                    "Address": 23,
                    "ByteSize": 1,
                    "Comment": "Save the discriminator byte."
                },
                {
                    "Address": 24,
                    "ByteSize": 3,
                    "Comment": "Find the start of the next variable.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 27,
                    "ByteSize": 3,
                    "Comment": "Reclaim the 'existing array'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 30,
                    "ByteSize": 1,
                    "Comment": "Restore the discriminator byte."
                },
                {
                    "Address": 31,
                    "ByteSize": 2,
                    "Comment": "Set bit 7 in the discriminator byte."
                },
                {
                    "Address": 33,
                    "ByteSize": 2,
                    "Comment": "Make the dimension counter zero."
                },
                {
                    "Address": 35,
                    "ByteSize": 1,
                    "Comment": "Save the counter and the discriminator byte."
                },
                {
                    "Address": 36,
                    "ByteSize": 3,
                    "Comment": "{The #REG:HL# register pair is to hold the size of the"
                },
                {
                    "Address": 39,
                    "ByteSize": 2,
                    "Comment": "elements in the array: '1' for a string array, '5' for a"
                },
                {
                    "Address": 41,
                    "ByteSize": 2,
                    "Comment": "numeric array.",
                    "OperandType": 2
                },
                {
                    "Address": 43,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 45,
                    "ByteSize": 1,
                    "Comment": "Element size to #REG:DE#."
                },
                {
                    "Address": 46,
                    "ByteSize": 1,
                    "Comment": "Advance \\#SYSVAR(CH-ADD) on each pass.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 47,
                    "ByteSize": 2,
                    "Comment": "Set a 'limit value'."
                },
                {
                    "Address": 49,
                    "ByteSize": 3,
                    "Comment": "Evaluate a parameter.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 52,
                    "ByteSize": 3,
                    "Comment": "Give an error if 'out of range'.",
                    "OperandType": 2
                },
                {
                    "Address": 55,
                    "ByteSize": 1,
                    "Comment": "Fetch the dimension counter and the discriminator byte."
                },
                {
                    "Address": 56,
                    "ByteSize": 1,
                    "Comment": "Save the parameter on each pass through the loop."
                },
                {
                    "Address": 57,
                    "ByteSize": 1,
                    "Comment": "Increase the dimension counter on each pass also."
                },
                {
                    "Address": 58,
                    "ByteSize": 1,
                    "Comment": "Restack the dimension counter and the discriminator\nbyte."
                },
                {
                    "Address": 59,
                    "ByteSize": 1,
                    "Comment": "{The parameter is moved to the #REG:HL# register pair."
                },
                {
                    "Address": 60,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 61,
                    "ByteSize": 3,
                    "Comment": "{The byte total is built up in #REG:HL# and then",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 64,
                    "ByteSize": 1,
                    "Comment": "transferred to #REG:DE#.}"
                },
                {
                    "Address": 65,
                    "ByteSize": 1,
                    "Comment": "{Get the present character and go around the loop again",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 66,
                    "ByteSize": 2,
                    "Comment": "if there is another dimension."
                },
                {
                    "Address": 68,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 70,
                    "ByteSize": 2,
                    "Comment": "Is it a ')'?"
                },
                {
                    "Address": 72,
                    "ByteSize": 2,
                    "Comment": "Jump back if not so.",
                    "OperandType": 2
                },
                {
                    "Address": 74,
                    "ByteSize": 1,
                    "Comment": "Advance \\#SYSVAR(CH-ADD) past it.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 75,
                    "ByteSize": 1,
                    "Comment": "Fetch the dimension counter and the discriminator byte."
                },
                {
                    "Address": 76,
                    "ByteSize": 1,
                    "Comment": "Pass the discriminator byte to the #REG:A# register for\nlater."
                },
                {
                    "Address": 77,
                    "ByteSize": 1,
                    "Comment": "Move the counter to #REG:L#."
                },
                {
                    "Address": 78,
                    "ByteSize": 2,
                    "Comment": "Clear the #REG:H# register."
                },
                {
                    "Address": 80,
                    "ByteSize": 1,
                    "Comment": "{Increase the dimension counter by two and double the"
                },
                {
                    "Address": 81,
                    "ByteSize": 1,
                    "Comment": "result and form the correct overall length for the"
                },
                {
                    "Address": 82,
                    "ByteSize": 1,
                    "Comment": "variable by adding the element byte total."
                },
                {
                    "Address": 83,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 84,
                    "ByteSize": 3,
                    "Comment": "Give the report 'Out of memory' if required.",
                    "OperandType": 2
                },
                {
                    "Address": 87,
                    "ByteSize": 1,
                    "Comment": "Save the element byte total."
                },
                {
                    "Address": 88,
                    "ByteSize": 1,
                    "Comment": "Save the dimension counter and the discriminator byte."
                },
                {
                    "Address": 89,
                    "ByteSize": 1,
                    "Comment": "Save the overall length also."
                },
                {
                    "Address": 90,
                    "ByteSize": 1,
                    "Comment": "{Move the overall length to #REG:BC#."
                },
                {
                    "Address": 91,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 92,
                    "ByteSize": 3,
                    "Comment": "{Make the #REG:HL# register pair point to the '&80-byte'",
                    "OperandType": 1
                },
                {
                    "Address": 95,
                    "ByteSize": 1,
                    "Comment": "(\\#SYSVAR(E-LINE)-1).}"
                },
                {
                    "Address": 96,
                    "ByteSize": 3,
                    "Comment": "The room is made available.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 99,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# is made to point to the first new location."
                },
                {
                    "Address": 100,
                    "ByteSize": 1,
                    "Comment": "The letter, suitably marked, is entered first."
                },
                {
                    "Address": 101,
                    "ByteSize": 1,
                    "Comment": "{The overall length is fetched and decreased by '3'."
                },
                {
                    "Address": 102,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 103,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 104,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 105,
                    "ByteSize": 1,
                    "Comment": "Advance #REG:HL#."
                },
                {
                    "Address": 106,
                    "ByteSize": 1,
                    "Comment": "Enter the low length."
                },
                {
                    "Address": 107,
                    "ByteSize": 1,
                    "Comment": "Advance #REG:HL#."
                },
                {
                    "Address": 108,
                    "ByteSize": 1,
                    "Comment": "Enter the high length."
                },
                {
                    "Address": 109,
                    "ByteSize": 1,
                    "Comment": "Fetch the dimension counter."
                },
                {
                    "Address": 110,
                    "ByteSize": 1,
                    "Comment": "Move it to the #REG:A# register."
                },
                {
                    "Address": 111,
                    "ByteSize": 1,
                    "Comment": "Advance #REG:HL#."
                },
                {
                    "Address": 112,
                    "ByteSize": 1,
                    "Comment": "Enter the dimension count."
                },
                {
                    "Address": 113,
                    "ByteSize": 1,
                    "Comment": "{#REG:HL# is made to point to the last location of the"
                },
                {
                    "Address": 114,
                    "ByteSize": 1,
                    "Comment": "array and #REG:DE# to the location before that one."
                },
                {
                    "Address": 115,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 116,
                    "ByteSize": 2,
                    "Comment": "{Enter a zero into the last location but overwrite it"
                },
                {
                    "Address": 118,
                    "ByteSize": 2,
                    "Comment": "with 'space' if dealing with an array of strings."
                },
                {
                    "Address": 120,
                    "ByteSize": 2,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 122,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 124,
                    "ByteSize": 1,
                    "Comment": "Fetch the element byte total."
                },
                {
                    "Address": 125,
                    "ByteSize": 2,
                    "Comment": "Clear the array + one extra location."
                },
                {
                    "Address": 127,
                    "ByteSize": 1,
                    "Comment": "Get a dimension size."
                },
                {
                    "Address": 128,
                    "ByteSize": 1,
                    "Comment": "Enter the high byte."
                },
                {
                    "Address": 129,
                    "ByteSize": 1,
                    "Comment": "Back one."
                },
                {
                    "Address": 130,
                    "ByteSize": 1,
                    "Comment": "Enter the low byte."
                },
                {
                    "Address": 131,
                    "ByteSize": 1,
                    "Comment": "Back one."
                },
                {
                    "Address": 132,
                    "ByteSize": 1,
                    "Comment": "Decrease the dimension counter."
                },
                {
                    "Address": 133,
                    "ByteSize": 2,
                    "Comment": "{Repeat the operation until all the dimensions have been",
                    "OperandType": 2
                },
                {
                    "Address": 135,
                    "ByteSize": 1,
                    "Comment": "considered; then return.}"
                },
                {
                    "Address": 136,
                    "ByteSize": 3,
                    "Comment": "Test for a digit; carry will be reset for a digit.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 139,
                    "ByteSize": 1,
                    "Comment": "Complement the carry flag."
                },
                {
                    "Address": 140,
                    "ByteSize": 1,
                    "Comment": "Return if a digit; otherwise continue on into #ADDR:0x2C8D#."
                },
                {
                    "Address": 141,
                    "ByteSize": 2,
                    "Comment": "Test against &41, the code for 'A'."
                },
                {
                    "Address": 143,
                    "ByteSize": 1,
                    "Comment": "Complement the carry flag."
                },
                {
                    "Address": 144,
                    "ByteSize": 1,
                    "Comment": "Return if not a valid character code."
                },
                {
                    "Address": 145,
                    "ByteSize": 2,
                    "Comment": "Test against &5B, 1 more than the code for 'Z'."
                },
                {
                    "Address": 147,
                    "ByteSize": 1,
                    "Comment": "Return if an upper case letter."
                },
                {
                    "Address": 148,
                    "ByteSize": 2,
                    "Comment": "Test against &61, the code for 'a'."
                },
                {
                    "Address": 150,
                    "ByteSize": 1,
                    "Comment": "Complement the carry flag."
                },
                {
                    "Address": 151,
                    "ByteSize": 1,
                    "Comment": "Return if not a valid character code."
                },
                {
                    "Address": 152,
                    "ByteSize": 2,
                    "Comment": "Test against &7B, 1 more than the code for 'z'."
                },
                {
                    "Address": 154,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 155,
                    "ByteSize": 2,
                    "Comment": "Is the character a 'BIN'?"
                },
                {
                    "Address": 157,
                    "ByteSize": 2,
                    "Comment": "Jump if it is not 'BIN'.",
                    "OperandType": 2
                },
                {
                    "Address": 159,
                    "ByteSize": 3,
                    "Comment": "Initialise result to zero in #REG:DE#."
                },
                {
                    "Address": 162,
                    "ByteSize": 1,
                    "Comment": "Get the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 163,
                    "ByteSize": 2,
                    "Comment": "Subtract the character code for '1'."
                },
                {
                    "Address": 165,
                    "ByteSize": 2,
                    "Comment": "0 now gives 0 with carry set; 1 gives 0 with carry\nreset."
                },
                {
                    "Address": 167,
                    "ByteSize": 2,
                    "Comment": "Any other character causes a jump to #ADDR:0x2CB3# and will be\nchecked for syntax during or after scanning.",
                    "OperandType": 2
                },
                {
                    "Address": 169,
                    "ByteSize": 1,
                    "Comment": "Result so far to #REG:HL# now."
                },
                {
                    "Address": 170,
                    "ByteSize": 1,
                    "Comment": "Complement the carry flag."
                },
                {
                    "Address": 171,
                    "ByteSize": 2,
                    "Comment": "Shift the result left, with the carry going to bit 0."
                },
                {
                    "Address": 173,
                    "ByteSize": 3,
                    "Comment": "Report overflow if more than 65535.",
                    "OperandType": 2
                },
                {
                    "Address": 176,
                    "ByteSize": 1,
                    "Comment": "Return the result so far to #REG:DE#."
                },
                {
                    "Address": 177,
                    "ByteSize": 2,
                    "Comment": "Jump back for next 0 or 1.",
                    "OperandType": 2
                },
                {
                    "Address": 179,
                    "ByteSize": 1,
                    "Comment": "{Copy result to #REG:BC# for stacking."
                },
                {
                    "Address": 180,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 181,
                    "ByteSize": 3,
                    "Comment": "Jump forward to stack the result.",
                    "OperandType": 2
                },
                {
                    "Address": 184,
                    "ByteSize": 2,
                    "Comment": "Is the first character a '.'?"
                },
                {
                    "Address": 186,
                    "ByteSize": 2,
                    "Comment": "If so, jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 188,
                    "ByteSize": 3,
                    "Comment": "Otherwise, form a 'last value' of the integer.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 191,
                    "ByteSize": 2,
                    "Comment": "Is the next character a '.'?"
                },
                {
                    "Address": 193,
                    "ByteSize": 2,
                    "Comment": "Jump forward to see if it is an 'E'.",
                    "OperandType": 2
                },
                {
                    "Address": 195,
                    "ByteSize": 1,
                    "Comment": "Get the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 196,
                    "ByteSize": 3,
                    "Comment": "Is it a digit?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 199,
                    "ByteSize": 2,
                    "Comment": "Jump if not (e.g. 1.E4 is allowed).",
                    "OperandType": 2
                },
                {
                    "Address": 201,
                    "ByteSize": 2,
                    "Comment": "Jump forward to deal with the digits after the decimal\npoint.",
                    "OperandType": 2
                },
                {
                    "Address": 203,
                    "ByteSize": 1,
                    "Comment": "{If the number started with a decimal, see if the next",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 204,
                    "ByteSize": 3,
                    "Comment": "character is a digit.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 207,
                    "ByteSize": 3,
                    "Comment": "Report the error if it is not.",
                    "OperandType": 2
                },
                {
                    "Address": 210,
                    "ByteSize": 1,
                    "Comment": "Use the calculator to stack zero as the integer part of\nsuch numbers.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 213,
                    "ByteSize": 1,
                    "Comment": "Use the calculator to copy the number 1 to mem-0.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 218,
                    "ByteSize": 1,
                    "Comment": "Get the present character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 219,
                    "ByteSize": 3,
                    "Comment": "If it is a digit (D) then stack it.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 222,
                    "ByteSize": 2,
                    "Comment": "If not jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 224,
                    "ByteSize": 1,
                    "Comment": "Now use the calculator.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 232,
                    "ByteSize": 1,
                    "Comment": "Get the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 233,
                    "ByteSize": 2,
                    "Comment": "Jump back (one more byte than needed) to consider it.",
                    "OperandType": 2
                },
                {
                    "Address": 235,
                    "ByteSize": 2,
                    "Comment": "Is the present character an 'E'?"
                },
                {
                    "Address": 237,
                    "ByteSize": 2,
                    "Comment": "Jump forward if it is.",
                    "OperandType": 2
                },
                {
                    "Address": 239,
                    "ByteSize": 2,
                    "Comment": "Is it an 'e'?"
                },
                {
                    "Address": 241,
                    "ByteSize": 1,
                    "Comment": "Finished unless it is so."
                },
                {
                    "Address": 242,
                    "ByteSize": 2,
                    "Comment": "Use #REG:B# as a sign flag, &FF for '+'."
                },
                {
                    "Address": 244,
                    "ByteSize": 1,
                    "Comment": "Get the next character.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 245,
                    "ByteSize": 2,
                    "Comment": "Is it a '+'?"
                },
                {
                    "Address": 247,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 249,
                    "ByteSize": 2,
                    "Comment": "Is it a '-'?"
                },
                {
                    "Address": 251,
                    "ByteSize": 2,
                    "Comment": "Jump if neither '+' nor '-'.",
                    "OperandType": 2
                },
                {
                    "Address": 253,
                    "ByteSize": 1,
                    "Comment": "Change the sign of the flag."
                },
                {
                    "Address": 254,
                    "ByteSize": 1,
                    "Comment": "Point to the first digit.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 255,
                    "ByteSize": 3,
                    "Comment": "Is it indeed a digit?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 258,
                    "ByteSize": 2,
                    "Comment": "Report the error if not.",
                    "OperandType": 2
                },
                {
                    "Address": 260,
                    "ByteSize": 1,
                    "Comment": "Save the flag in #REG:B# briefly."
                },
                {
                    "Address": 261,
                    "ByteSize": 3,
                    "Comment": "Stack ABS m, where m is the exponent.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 264,
                    "ByteSize": 3,
                    "Comment": "Transfer ABS m to #REG:A#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 267,
                    "ByteSize": 1,
                    "Comment": "Restore the sign flag to #REG:B#."
                },
                {
                    "Address": 268,
                    "ByteSize": 3,
                    "Comment": "{Report the overflow now if ABS m is greater than 255 or",
                    "OperandType": 2
                },
                {
                    "Address": 271,
                    "ByteSize": 1,
                    "Comment": "indeed greater than 127 (other values greater than about"
                },
                {
                    "Address": 272,
                    "ByteSize": 3,
                    "Comment": "39 will be detected later).}",
                    "OperandType": 2
                },
                {
                    "Address": 275,
                    "ByteSize": 1,
                    "Comment": "Test the sign flag in #REG:B#; '+' (i.e. &FF) will now set\nthe zero flag."
                },
                {
                    "Address": 276,
                    "ByteSize": 2,
                    "Comment": "Jump if sign of m is '+'.",
                    "OperandType": 2
                },
                {
                    "Address": 278,
                    "ByteSize": 2,
                    "Comment": "Negate m if sign is '-'."
                },
                {
                    "Address": 280,
                    "ByteSize": 3,
                    "Comment": "Jump to assign to the 'last value' the result of\nx*10\\#powerm.",
                    "OperandType": 2
                },
                {
                    "Address": 283,
                    "ByteSize": 2,
                    "Comment": "Test against &30, the code for '0'."
                },
                {
                    "Address": 285,
                    "ByteSize": 1,
                    "Comment": "Return if not a valid character code."
                },
                {
                    "Address": 286,
                    "ByteSize": 2,
                    "Comment": "Test against the upper limit."
                },
                {
                    "Address": 288,
                    "ByteSize": 1,
                    "Comment": "Complement the carry flag."
                },
                {
                    "Address": 289,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 290,
                    "ByteSize": 3,
                    "Comment": "Is the character a digit?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 293,
                    "ByteSize": 1,
                    "Comment": "Return if not."
                },
                {
                    "Address": 294,
                    "ByteSize": 2,
                    "Comment": "Replace the code by the actual digit."
                },
                {
                    "Address": 296,
                    "ByteSize": 1,
                    "Comment": "Transfer the value to the #REG:C# register."
                },
                {
                    "Address": 297,
                    "ByteSize": 2,
                    "Comment": "Clear the #REG:B# register."
                },
                {
                    "Address": 299,
                    "ByteSize": 4,
                    "Comment": "Re-initialise #REG:IY# to \\#SYSVAR(ERR-NR)."
                },
                {
                    "Address": 303,
                    "ByteSize": 1,
                    "Comment": "Clear the #REG:A# register."
                },
                {
                    "Address": 304,
                    "ByteSize": 1,
                    "Comment": "And the #REG:E# register, to indicate '+'."
                },
                {
                    "Address": 305,
                    "ByteSize": 1,
                    "Comment": "Copy the less significant byte to #REG:D#."
                },
                {
                    "Address": 306,
                    "ByteSize": 1,
                    "Comment": "And the more significant byte to #REG:C#."
                },
                {
                    "Address": 307,
                    "ByteSize": 1,
                    "Comment": "Clear the #REG:B# register."
                },
                {
                    "Address": 308,
                    "ByteSize": 3,
                    "Comment": "Now stack the number.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 311,
                    "ByteSize": 1,
                    "Comment": "Use the calculator to make #REG:HL# point to\n\\#SYSVAR(STKEND)-5.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 313,
                    "ByteSize": 1,
                    "Comment": "Clear the carry flag."
                },
                {
                    "Address": 314,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 315,
                    "ByteSize": 1,
                    "Comment": "Save the first digit - in #REG:A#."
                },
                {
                    "Address": 316,
                    "ByteSize": 1,
                    "Comment": "Use the calculator.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 319,
                    "ByteSize": 1,
                    "Comment": "Restore the first digit."
                },
                {
                    "Address": 320,
                    "ByteSize": 3,
                    "Comment": "{If the code represents a digit (D) then stack the",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 323,
                    "ByteSize": 1,
                    "Comment": "floating-point form; otherwise return.}"
                },
                {
                    "Address": 324,
                    "ByteSize": 1,
                    "Comment": "Use the calculator.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 330,
                    "ByteSize": 3,
                    "Comment": "The next code goes into #REG:A#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 333,
                    "ByteSize": 2,
                    "Comment": "Loop back with this code.",
                    "OperandType": 2
                },
                {
                    "Address": 335,
                    "ByteSize": 1,
                    "Comment": "{Test the sign of m by rotating bit 7 of #REG:A# into the"
                },
                {
                    "Address": 336,
                    "ByteSize": 1,
                    "Comment": "carry without changing #REG:A#.}"
                },
                {
                    "Address": 337,
                    "ByteSize": 2,
                    "Comment": "Jump if m is positive.",
                    "OperandType": 2
                },
                {
                    "Address": 339,
                    "ByteSize": 1,
                    "Comment": "{Negate m in #REG:A# without disturbing the carry flag."
                },
                {
                    "Address": 340,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 341,
                    "ByteSize": 1,
                    "Comment": "Save m in #REG:A# briefly."
                },
                {
                    "Address": 342,
                    "ByteSize": 3,
                    "Comment": "{This is \\#SYSVAR(MEMBOT); a sign flag is now stored in"
                },
                {
                    "Address": 345,
                    "ByteSize": 3,
                    "Comment": "the first byte of mem-0, i.e. 0 for '+' and 1 for '-'.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 348,
                    "ByteSize": 1,
                    "Comment": "The stack holds x.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 351,
                    "ByteSize": 1,
                    "Comment": "Restore m in #REG:A#."
                },
                {
                    "Address": 352,
                    "ByteSize": 2,
                    "Comment": "{In the loop, shift out the next bit of m, modifying the"
                },
                {
                    "Address": 354,
                    "ByteSize": 2,
                    "Comment": "carry and zero flags appropriately; jump if carry reset.\n}",
                    "OperandType": 2
                },
                {
                    "Address": 356,
                    "ByteSize": 1,
                    "Comment": "Save the rest of m and the flags."
                },
                {
                    "Address": 357,
                    "ByteSize": 1,
                    "Comment": "The stack holds x' and 10\\#power(2\\#powern), where x' is\nan interim stage in the multiplication of x by\n10\\#powerm, and n=0, 1, 2, 3, 4 or 5.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 368,
                    "ByteSize": 1,
                    "Comment": "Restore the rest of m in #REG:A#, and the flags."
                },
                {
                    "Address": 369,
                    "ByteSize": 2,
                    "Comment": "Jump if m has been reduced to zero.",
                    "OperandType": 2
                },
                {
                    "Address": 371,
                    "ByteSize": 1,
                    "Comment": "Save the rest of m in #REG:A#."
                },
                {
                    "Address": 372,
                    "ByteSize": 1,
                    "Comment": "x'', 10\\#power(2\\#powern)",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 376,
                    "ByteSize": 1,
                    "Comment": "Restore the rest of m in #REG:A#."
                },
                {
                    "Address": 377,
                    "ByteSize": 2,
                    "Comment": "Jump back for all bits of m.",
                    "OperandType": 2
                },
                {
                    "Address": 379,
                    "ByteSize": 1,
                    "Comment": "Use the calculator to delete the final power of 10\nreached leaving the 'last value' x*10\\#powerm on the\nstack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 382,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 383,
                    "ByteSize": 1,
                    "Comment": "Point to the sign byte of the number."
                },
                {
                    "Address": 384,
                    "ByteSize": 1,
                    "Comment": "Copy the sign byte to #REG:C#."
                },
                {
                    "Address": 385,
                    "ByteSize": 1,
                    "Comment": "Point to the less significant byte."
                },
                {
                    "Address": 386,
                    "ByteSize": 1,
                    "Comment": "Collect the byte in #REG:A#."
                },
                {
                    "Address": 387,
                    "ByteSize": 1,
                    "Comment": "One's complement it if negative."
                },
                {
                    "Address": 388,
                    "ByteSize": 1,
                    "Comment": "This adds 1 for negative numbers; it sets the carry\nunless the byte was 0."
                },
                {
                    "Address": 389,
                    "ByteSize": 1,
                    "Comment": "Less significant byte to #REG:E# now."
                },
                {
                    "Address": 390,
                    "ByteSize": 1,
                    "Comment": "Point to the more significant byte."
                },
                {
                    "Address": 391,
                    "ByteSize": 1,
                    "Comment": "Collect it in #REG:A#."
                },
                {
                    "Address": 392,
                    "ByteSize": 1,
                    "Comment": "{Finish two's complementing in the case of a negative"
                },
                {
                    "Address": 393,
                    "ByteSize": 1,
                    "Comment": "number; note that the carry is always left reset.}"
                },
                {
                    "Address": 394,
                    "ByteSize": 1,
                    "Comment": "More significant byte to #REG:D# now."
                },
                {
                    "Address": 395,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 396,
                    "ByteSize": 2,
                    "Comment": "This (unused) entry point would store a number known to\nbe positive.",
                    "Flags": 4
                },
                {
                    "Address": 398,
                    "ByteSize": 1,
                    "Comment": "The pointer to the first location is saved."
                },
                {
                    "Address": 399,
                    "ByteSize": 2,
                    "Comment": "The first byte is set to zero."
                },
                {
                    "Address": 401,
                    "ByteSize": 1,
                    "Comment": "Point to the second location."
                },
                {
                    "Address": 402,
                    "ByteSize": 1,
                    "Comment": "Enter the second byte."
                },
                {
                    "Address": 403,
                    "ByteSize": 1,
                    "Comment": "Point to the third location."
                },
                {
                    "Address": 404,
                    "ByteSize": 1,
                    "Comment": "Collect the less significant byte."
                },
                {
                    "Address": 405,
                    "ByteSize": 1,
                    "Comment": "{Two's complement it if the number is negative."
                },
                {
                    "Address": 406,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 407,
                    "ByteSize": 1,
                    "Comment": "Store the byte."
                },
                {
                    "Address": 408,
                    "ByteSize": 1,
                    "Comment": "Point to the fourth location."
                },
                {
                    "Address": 409,
                    "ByteSize": 1,
                    "Comment": "Collect the more significant byte."
                },
                {
                    "Address": 410,
                    "ByteSize": 1,
                    "Comment": "{Two's complement it if the number is negative."
                },
                {
                    "Address": 411,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 412,
                    "ByteSize": 1,
                    "Comment": "Store the byte."
                },
                {
                    "Address": 413,
                    "ByteSize": 1,
                    "Comment": "Point to the fifth location."
                },
                {
                    "Address": 414,
                    "ByteSize": 2,
                    "Comment": "The fifth byte is set to zero."
                },
                {
                    "Address": 416,
                    "ByteSize": 1,
                    "Comment": "{Return with #REG:HL# pointing to the first byte of n on"
                },
                {
                    "Address": 417,
                    "ByteSize": 1,
                    "Comment": "the stack.}"
                },
                {
                    "Address": 418,
                    "ByteSize": 1,
                    "Comment": "Use the calculator to make #REG:HL# point to\n\\#SYSVAR(STKEND)-5.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 420,
                    "ByteSize": 1,
                    "Comment": "{Collect the exponent byte of the 'last value'; jump if"
                },
                {
                    "Address": 421,
                    "ByteSize": 1,
                    "Comment": "it is zero, indicating a 'small integer'."
                },
                {
                    "Address": 422,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 424,
                    "ByteSize": 1,
                    "Comment": "Now use the calculator to round the 'last value' (V) to\nthe nearest integer, which also changes it to 'small\ninteger' form on the calculator stack if that is\npossible, i.e. if -65535.5<=V<65535.5.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 429,
                    "ByteSize": 1,
                    "Comment": "Use the calculator to delete the integer from the stack;\n#REG:DE# still points to it in memory (at\n\\#SYSVAR(STKEND)).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 432,
                    "ByteSize": 1,
                    "Comment": "{Save both stack pointers."
                },
                {
                    "Address": 433,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 434,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# now points to the number."
                },
                {
                    "Address": 435,
                    "ByteSize": 1,
                    "Comment": "Copy the first byte to #REG:B#."
                },
                {
                    "Address": 436,
                    "ByteSize": 3,
                    "Comment": "Copy bytes 2, 3 and 4 to #REG:C#, #REG:E# and #REG:D#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 439,
                    "ByteSize": 1,
                    "Comment": "Clear the #REG:A# register."
                },
                {
                    "Address": 440,
                    "ByteSize": 1,
                    "Comment": "This sets the carry unless #REG:B# is zero."
                },
                {
                    "Address": 441,
                    "ByteSize": 2,
                    "Comment": "This sets the zero flag if the number is positive (NZ\ndenotes negative)."
                },
                {
                    "Address": 443,
                    "ByteSize": 1,
                    "Comment": "Copy the high byte to #REG:B#."
                },
                {
                    "Address": 444,
                    "ByteSize": 1,
                    "Comment": "And the low byte to #REG:C#."
                },
                {
                    "Address": 445,
                    "ByteSize": 1,
                    "Comment": "Copy the low byte to #REG:A# too."
                },
                {
                    "Address": 446,
                    "ByteSize": 1,
                    "Comment": "{Restore the stack pointers."
                },
                {
                    "Address": 447,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 448,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 449,
                    "ByteSize": 1,
                    "Comment": "{The integer #REG:A# is stacked, either as 00"
                },
                {
                    "Address": 450,
                    "ByteSize": 1,
                    "Comment": "00 #REG:A# 00 00 (for positive #REG:A#) or as 00"
                },
                {
                    "Address": 451,
                    "ByteSize": 1,
                    "Comment": "\\#S/FF/ #REG:A# \\#S/FF/ 00 (for negative #REG:A#).}"
                },
                {
                    "Address": 452,
                    "ByteSize": 1,
                    "Comment": "{These bytes are first loaded into #REG:A#,"
                },
                {
                    "Address": 453,
                    "ByteSize": 1,
                    "Comment": "#REG:E#, #REG:D#, #REG:C#, #REG:B# and then #ADDR:0x2AB6#"
                },
                {
                    "Address": 454,
                    "ByteSize": 1,
                    "Comment": "is called to put the number on the calculator"
                },
                {
                    "Address": 455,
                    "ByteSize": 1,
                    "Comment": "stack."
                },
                {
                    "Address": 456,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 459,
                    "ByteSize": 1,
                    "Comment": "The calculator is used.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 469,
                    "ByteSize": 3,
                    "Comment": "Compress the 'last value' into #REG:BC#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 472,
                    "ByteSize": 1,
                    "Comment": "Return if out of range already."
                },
                {
                    "Address": 473,
                    "ByteSize": 1,
                    "Comment": "Save the result and the flags."
                },
                {
                    "Address": 474,
                    "ByteSize": 1,
                    "Comment": "{Again it will be out of range if the #REG:B# register"
                },
                {
                    "Address": 475,
                    "ByteSize": 1,
                    "Comment": "does not hold zero.}"
                },
                {
                    "Address": 476,
                    "ByteSize": 2,
                    "Comment": "Jump if in range.",
                    "OperandType": 2
                },
                {
                    "Address": 478,
                    "ByteSize": 1,
                    "Comment": "Fetch the result and the flags."
                },
                {
                    "Address": 479,
                    "ByteSize": 1,
                    "Comment": "Signal the result is out of range."
                },
                {
                    "Address": 480,
                    "ByteSize": 1,
                    "Comment": "Finished - unsuccessful."
                },
                {
                    "Address": 481,
                    "ByteSize": 1,
                    "Comment": "Fetch the result and the flags."
                },
                {
                    "Address": 482,
                    "ByteSize": 1,
                    "Comment": "Finished - successful."
                },
                {
                    "Address": 483,
                    "ByteSize": 1,
                    "Comment": "Use the calculator.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 494,
                    "ByteSize": 2,
                    "Comment": "Enter the character code for '0'."
                },
                {
                    "Address": 496,
                    "ByteSize": 1,
                    "Comment": "Print the '0'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 497,
                    "ByteSize": 1,
                    "Comment": "Finished as the 'last value' is zero."
                },
                {
                    "Address": 500,
                    "ByteSize": 2,
                    "Comment": "Enter the character code for '-'."
                },
                {
                    "Address": 502,
                    "ByteSize": 1,
                    "Comment": "Print the '-'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 503,
                    "ByteSize": 1,
                    "Comment": "Use the calculator again.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 510,
                    "ByteSize": 1,
                    "Comment": "{\\#REGhl', which is used to hold calculator offsets"
                },
                {
                    "Address": 511,
                    "ByteSize": 1,
                    "Comment": "(e.g. for 'STR$'), is saved on the machine stack."
                },
                {
                    "Address": 512,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 513,
                    "ByteSize": 1,
                    "Comment": "Use the calculator again.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 523,
                    "ByteSize": 1,
                    "Comment": "{Is i a small integer (first byte zero) i.e. is ABS"
                },
                {
                    "Address": 524,
                    "ByteSize": 1,
                    "Comment": "i<=65535?}"
                },
                {
                    "Address": 525,
                    "ByteSize": 2,
                    "Comment": "Jump if it is not.",
                    "OperandType": 2
                },
                {
                    "Address": 527,
                    "ByteSize": 3,
                    "Comment": "i is copied to #REG:DE# (i, like x', >=0).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 530,
                    "ByteSize": 2,
                    "Comment": "#REG:B# is set to count 16 bits."
                },
                {
                    "Address": 532,
                    "ByteSize": 1,
                    "Comment": "{#REG:D# is copied to #REG:A# for testing: is it zero?"
                },
                {
                    "Address": 533,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 534,
                    "ByteSize": 2,
                    "Comment": "Jump if it is not zero.",
                    "OperandType": 2
                },
                {
                    "Address": 536,
                    "ByteSize": 1,
                    "Comment": "Now test #REG:E#."
                },
                {
                    "Address": 537,
                    "ByteSize": 2,
                    "Comment": "Jump if #REG:DE# is zero: x is a pure fraction.",
                    "OperandType": 2
                },
                {
                    "Address": 539,
                    "ByteSize": 1,
                    "Comment": "{Move #REG:E# to #REG:D# and set #REG:B# for 8 bits: #REG:D#"
                },
                {
                    "Address": 540,
                    "ByteSize": 2,
                    "Comment": "was zero and #REG:E# was not.}"
                },
                {
                    "Address": 542,
                    "ByteSize": 1,
                    "Comment": "{Transfer #REG:DE# to \\#REGde', via the machine stack,"
                },
                {
                    "Address": 543,
                    "ByteSize": 1,
                    "Comment": "to be moved into the print buffer at #ADDR:0x2E7B#."
                },
                {
                    "Address": 544,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 545,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 546,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 548,
                    "ByteSize": 1,
                    "Comment": "i (i=zero here)",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 551,
                    "ByteSize": 1,
                    "Comment": "The exponent byte e of f is copied to #REG:A#."
                },
                {
                    "Address": 552,
                    "ByteSize": 2,
                    "Comment": "#REG:A# becomes e minus &7E, i.e. e'+2, where e' is the\ntrue exponent of f."
                },
                {
                    "Address": 554,
                    "ByteSize": 3,
                    "Comment": "{The construction #REG:A#=ABS INT (LOG (2\\#power#REG:A#))",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 557,
                    "ByteSize": 1,
                    "Comment": "is performed (LOG is to base 10); i.e. #REG:A#=n, say:\nn is copied from #REG:A# to #REG:D#.}"
                },
                {
                    "Address": 558,
                    "ByteSize": 3,
                    "Comment": "{The current count is collected from the second byte",
                    "OperandType": 1
                },
                {
                    "Address": 561,
                    "ByteSize": 1,
                    "Comment": "of #ADDR:0x5CAB#(mem-5) and n is subtracted from it."
                },
                {
                    "Address": 562,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 565,
                    "ByteSize": 1,
                    "Comment": "n is copied from #REG:D# to #REG:A#."
                },
                {
                    "Address": 566,
                    "ByteSize": 3,
                    "Comment": "y=f*10\\#powern is formed and stacked.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 569,
                    "ByteSize": 1,
                    "Comment": "i, y",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 576,
                    "ByteSize": 3,
                    "Comment": "i2 is transferred from the stack to #REG:A#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 579,
                    "ByteSize": 1,
                    "Comment": "The pointer to f2 is saved."
                },
                {
                    "Address": 580,
                    "ByteSize": 3,
                    "Comment": "i2 is stored in the first byte of #ADDR:0x5CA1#(mem-3): a\ndigit for printing.",
                    "OperandType": 1
                },
                {
                    "Address": 583,
                    "ByteSize": 1,
                    "Comment": "{i2 will not count as a digit for printing if it is"
                },
                {
                    "Address": 584,
                    "ByteSize": 1,
                    "Comment": "zero; #REG:A# is manipulated so that zero will produce"
                },
                {
                    "Address": 585,
                    "ByteSize": 1,
                    "Comment": "zero but a non-zero digit will produce 1."
                },
                {
                    "Address": 586,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 587,
                    "ByteSize": 3,
                    "Comment": "{The zero or one is inserted into the first byte of"
                },
                {
                    "Address": 590,
                    "ByteSize": 1,
                    "Comment": "#ADDR:0x5CAB#(mem-5) (the number of digits for printing)"
                },
                {
                    "Address": 591,
                    "ByteSize": 1,
                    "Comment": "and added to the second byte of mem-5 (the number of"
                },
                {
                    "Address": 592,
                    "ByteSize": 1,
                    "Comment": "digits before the decimal)."
                },
                {
                    "Address": 593,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 594,
                    "ByteSize": 1,
                    "Comment": "The pointer to f2 is restored."
                },
                {
                    "Address": 595,
                    "ByteSize": 3,
                    "Comment": "Jump to store f2 in buffer (#REG:HL# now points to f2,\n#REG:DE# to i2).",
                    "OperandType": 2
                },
                {
                    "Address": 598,
                    "ByteSize": 2,
                    "Comment": "e minus &80 is e', the true exponent of i."
                },
                {
                    "Address": 600,
                    "ByteSize": 2,
                    "Comment": "Is e' less than 28?"
                },
                {
                    "Address": 602,
                    "ByteSize": 2,
                    "Comment": "Jump if it is less.",
                    "OperandType": 2
                },
                {
                    "Address": 604,
                    "ByteSize": 3,
                    "Comment": "n is formed in #REG:A#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 607,
                    "ByteSize": 2,
                    "Comment": "And reduced to n-7."
                },
                {
                    "Address": 609,
                    "ByteSize": 1,
                    "Comment": "Then copied to #REG:B#."
                },
                {
                    "Address": 610,
                    "ByteSize": 3,
                    "Comment": "{n-7 is added in to the second byte of"
                },
                {
                    "Address": 613,
                    "ByteSize": 1,
                    "Comment": "#ADDR:0x5CAB#(mem-5), the number of digits required before"
                },
                {
                    "Address": 614,
                    "ByteSize": 1,
                    "Comment": "the decimal in x.}"
                },
                {
                    "Address": 615,
                    "ByteSize": 1,
                    "Comment": "{Then i is multiplied by 10\\#power(-n+7). This will"
                },
                {
                    "Address": 616,
                    "ByteSize": 2,
                    "Comment": "bring it into medium range for printing."
                },
                {
                    "Address": 618,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 621,
                    "ByteSize": 2,
                    "Comment": "Round the loop again to deal with the now\nmedium-sized number.",
                    "OperandType": 2
                },
                {
                    "Address": 623,
                    "ByteSize": 1,
                    "Comment": "#REG:DE# now points to i, #REG:HL# to f."
                },
                {
                    "Address": 624,
                    "ByteSize": 3,
                    "Comment": "The mantissa of i is now in \\#REGd', \\#REGe', #REG:D#,\n#REG:E#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 627,
                    "ByteSize": 1,
                    "Comment": "Get the exchange registers."
                },
                {
                    "Address": 628,
                    "ByteSize": 2,
                    "Comment": "True numerical bit 7 to \\#REGd'."
                },
                {
                    "Address": 630,
                    "ByteSize": 1,
                    "Comment": "Exponent byte e of i to #REG:A#."
                },
                {
                    "Address": 631,
                    "ByteSize": 1,
                    "Comment": "Back to the main registers."
                },
                {
                    "Address": 632,
                    "ByteSize": 2,
                    "Comment": "True exponent e'=e minus &80 to #REG:A#."
                },
                {
                    "Address": 634,
                    "ByteSize": 1,
                    "Comment": "This gives the required bit count."
                },
                {
                    "Address": 635,
                    "ByteSize": 2,
                    "Comment": "{The mantissa of i is now rotated left and all the"
                },
                {
                    "Address": 637,
                    "ByteSize": 2,
                    "Comment": "bits of i are thus shifted into mem-4 and each byte"
                },
                {
                    "Address": 639,
                    "ByteSize": 1,
                    "Comment": "of mem-4 is decimal adjusted at each shift."
                },
                {
                    "Address": 640,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 642,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 644,
                    "ByteSize": 1,
                    "Comment": "Back to the main registers."
                },
                {
                    "Address": 645,
                    "ByteSize": 3,
                    "Comment": "{Address of fifth byte of #ADDR:0x5CA6#(mem-4) to #REG:HL#;"
                },
                {
                    "Address": 648,
                    "ByteSize": 2,
                    "Comment": "count of 5 bytes to #REG:C#.}"
                },
                {
                    "Address": 650,
                    "ByteSize": 1,
                    "Comment": "Get the byte of mem-4."
                },
                {
                    "Address": 651,
                    "ByteSize": 1,
                    "Comment": "Shift it left, taking in the new bit."
                },
                {
                    "Address": 652,
                    "ByteSize": 1,
                    "Comment": "Decimal adjust the byte."
                },
                {
                    "Address": 653,
                    "ByteSize": 1,
                    "Comment": "Restore it to mem-4."
                },
                {
                    "Address": 654,
                    "ByteSize": 1,
                    "Comment": "Point to next byte of mem-4."
                },
                {
                    "Address": 655,
                    "ByteSize": 1,
                    "Comment": "Decrease the byte count by one."
                },
                {
                    "Address": 656,
                    "ByteSize": 2,
                    "Comment": "Jump for each byte of mem-4.",
                    "OperandType": 2
                },
                {
                    "Address": 658,
                    "ByteSize": 2,
                    "Comment": "Jump for each bit of INT (x).",
                    "OperandType": 2
                },
                {
                    "Address": 660,
                    "ByteSize": 1,
                    "Comment": "#REG:A# is cleared to receive the digits."
                },
                {
                    "Address": 661,
                    "ByteSize": 3,
                    "Comment": "Source address: first byte of #ADDR:0x5CA6#(mem-4)."
                },
                {
                    "Address": 664,
                    "ByteSize": 3,
                    "Comment": "Destination: first byte of #ADDR:0x5CA1#(mem-3)."
                },
                {
                    "Address": 667,
                    "ByteSize": 2,
                    "Comment": "There are at most 9 digits."
                },
                {
                    "Address": 669,
                    "ByteSize": 2,
                    "Comment": "The left nibble of mem-4 is discarded."
                },
                {
                    "Address": 671,
                    "ByteSize": 2,
                    "Comment": "&FF in #REG:C# will signal a leading zero, &00 will\nsignal a non-leading zero."
                },
                {
                    "Address": 673,
                    "ByteSize": 2,
                    "Comment": "Left nibble of (#REG:HL#) to #REG:A#, right nibble of\n(#REG:HL#) to left."
                },
                {
                    "Address": 675,
                    "ByteSize": 2,
                    "Comment": "Jump if digit in #REG:A# is not zero.",
                    "OperandType": 2
                },
                {
                    "Address": 677,
                    "ByteSize": 1,
                    "Comment": "{Test for a leading zero: it will now give zero"
                },
                {
                    "Address": 678,
                    "ByteSize": 1,
                    "Comment": "reset.}"
                },
                {
                    "Address": 679,
                    "ByteSize": 2,
                    "Comment": "Jump if it was a leading zero.",
                    "OperandType": 2
                },
                {
                    "Address": 681,
                    "ByteSize": 1,
                    "Comment": "Insert the digit now."
                },
                {
                    "Address": 682,
                    "ByteSize": 1,
                    "Comment": "Point to next destination."
                },
                {
                    "Address": 683,
                    "ByteSize": 3,
                    "Comment": "{One more digit for printing, and one more before the"
                },
                {
                    "Address": 686,
                    "ByteSize": 3,
                    "Comment": "decimal.}"
                },
                {
                    "Address": 689,
                    "ByteSize": 2,
                    "Comment": "Change the flag from leading zero to other zero."
                },
                {
                    "Address": 691,
                    "ByteSize": 2,
                    "Comment": "{The source pointer needs to be incremented on every"
                },
                {
                    "Address": 693,
                    "ByteSize": 2,
                    "Comment": "second passage through the loop, when #REG:B# is odd.",
                    "OperandType": 2
                },
                {
                    "Address": 695,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 696,
                    "ByteSize": 2,
                    "Comment": "Jump back for all 9 digits.",
                    "OperandType": 2
                },
                {
                    "Address": 698,
                    "ByteSize": 3,
                    "Comment": "{Get counter from the first byte of #ADDR:0x5CAB#(mem-5):",
                    "OperandType": 1
                },
                {
                    "Address": 701,
                    "ByteSize": 2,
                    "Comment": "were there 9 digits excluding leading zeros?}"
                },
                {
                    "Address": 703,
                    "ByteSize": 2,
                    "Comment": "If not, jump to get more digits.",
                    "OperandType": 2
                },
                {
                    "Address": 705,
                    "ByteSize": 3,
                    "Comment": "Prepare to round: reduce count to 8."
                },
                {
                    "Address": 708,
                    "ByteSize": 2,
                    "Comment": "{Compare 9th digit, byte 4 of #ADDR:0x5CA6#(mem-4), with 4"
                },
                {
                    "Address": 710,
                    "ByteSize": 3,
                    "Comment": "to set carry for rounding up.}"
                },
                {
                    "Address": 713,
                    "ByteSize": 2,
                    "Comment": "Jump forward to round up.",
                    "OperandType": 2
                },
                {
                    "Address": 715,
                    "ByteSize": 1,
                    "Comment": "Use the calculator again.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 719,
                    "ByteSize": 1,
                    "Comment": "#REG:DE# now points to f."
                },
                {
                    "Address": 720,
                    "ByteSize": 3,
                    "Comment": "The mantissa of f is now in \\#REGd', \\#REGe', #REG:D#,\n#REG:E#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 723,
                    "ByteSize": 1,
                    "Comment": "Get the exchange registers."
                },
                {
                    "Address": 724,
                    "ByteSize": 2,
                    "Comment": "{The exponent of f is reduced to zero, by shifting"
                },
                {
                    "Address": 726,
                    "ByteSize": 1,
                    "Comment": "the bits of f &80 minus e places right, where \\#REGl'"
                },
                {
                    "Address": 727,
                    "ByteSize": 2,
                    "Comment": "contained e.}"
                },
                {
                    "Address": 729,
                    "ByteSize": 2,
                    "Comment": "True numerical bit to bit 7 of \\#REGd'."
                },
                {
                    "Address": 731,
                    "ByteSize": 1,
                    "Comment": "Restore the main registers."
                },
                {
                    "Address": 732,
                    "ByteSize": 3,
                    "Comment": "Now make the shift.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 735,
                    "ByteSize": 3,
                    "Comment": "Get the digit count."
                },
                {
                    "Address": 738,
                    "ByteSize": 2,
                    "Comment": "Are there already 8 digits?"
                },
                {
                    "Address": 740,
                    "ByteSize": 2,
                    "Comment": "If not, jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 742,
                    "ByteSize": 1,
                    "Comment": "{If 8 digits, just use f to round i up, rotating"
                },
                {
                    "Address": 743,
                    "ByteSize": 2,
                    "Comment": "\\#REGd' left to set the carry.}"
                },
                {
                    "Address": 745,
                    "ByteSize": 1,
                    "Comment": "{Restore main registers and jump forward to round up."
                },
                {
                    "Address": 746,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 748,
                    "ByteSize": 3,
                    "Comment": "Initial zero to #REG:C#, count of 2 to #REG:B#."
                },
                {
                    "Address": 751,
                    "ByteSize": 1,
                    "Comment": "{\\#REG(d'e'de) is multiplied by 10 in 2 stages, first"
                },
                {
                    "Address": 752,
                    "ByteSize": 3,
                    "Comment": "#REG:DE# then \\#REGde', each byte by byte in 2 steps,",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 755,
                    "ByteSize": 1,
                    "Comment": "and the integer part of the result is obtained in"
                },
                {
                    "Address": 756,
                    "ByteSize": 1,
                    "Comment": "#REG:C# to be passed into the print buffer."
                },
                {
                    "Address": 757,
                    "ByteSize": 3,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 760,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 761,
                    "ByteSize": 1,
                    "Comment": "{The count and the result alternate between #REG:BC#"
                },
                {
                    "Address": 762,
                    "ByteSize": 1,
                    "Comment": "and \\#REGbc'."
                },
                {
                    "Address": 763,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 764,
                    "ByteSize": 2,
                    "Comment": "Loop back once through the exchange registers.",
                    "OperandType": 2
                },
                {
                    "Address": 766,
                    "ByteSize": 3,
                    "Comment": "The start - 1st byte of #ADDR:0x5CA1#(mem-3)."
                },
                {
                    "Address": 769,
                    "ByteSize": 1,
                    "Comment": "Result to #REG:A# for storing."
                },
                {
                    "Address": 770,
                    "ByteSize": 3,
                    "Comment": "Count of digits so far in number to #REG:C#."
                },
                {
                    "Address": 773,
                    "ByteSize": 1,
                    "Comment": "Address the first empty byte."
                },
                {
                    "Address": 774,
                    "ByteSize": 1,
                    "Comment": "Store the next digit."
                },
                {
                    "Address": 775,
                    "ByteSize": 3,
                    "Comment": "Step up the count of digits."
                },
                {
                    "Address": 778,
                    "ByteSize": 2,
                    "Comment": "Loop back until there are 8 digits.",
                    "OperandType": 2
                },
                {
                    "Address": 780,
                    "ByteSize": 1,
                    "Comment": "Save the carry flag for the rounding."
                },
                {
                    "Address": 781,
                    "ByteSize": 3,
                    "Comment": "Base address of number: #ADDR:0x5CA1#(mem-3), byte 1."
                },
                {
                    "Address": 784,
                    "ByteSize": 3,
                    "Comment": "{Offset (number of digits in number) to #REG:BC#."
                },
                {
                    "Address": 787,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 789,
                    "ByteSize": 1,
                    "Comment": "Address the last byte of the number."
                },
                {
                    "Address": 790,
                    "ByteSize": 1,
                    "Comment": "Copy #REG:C# to #REG:B# as the counter."
                },
                {
                    "Address": 791,
                    "ByteSize": 1,
                    "Comment": "Restore the carry flag."
                },
                {
                    "Address": 792,
                    "ByteSize": 1,
                    "Comment": "This is the last byte of the number."
                },
                {
                    "Address": 793,
                    "ByteSize": 1,
                    "Comment": "Get the byte into #REG:A#."
                },
                {
                    "Address": 794,
                    "ByteSize": 2,
                    "Comment": "Add in the carry i.e. round up."
                },
                {
                    "Address": 796,
                    "ByteSize": 1,
                    "Comment": "Store the rounded byte in the buffer."
                },
                {
                    "Address": 797,
                    "ByteSize": 1,
                    "Comment": "{If the byte is 0 or 10, #REG:B# will be decremented"
                },
                {
                    "Address": 798,
                    "ByteSize": 2,
                    "Comment": "and the final zero (or the 10) will not be counted",
                    "OperandType": 2
                },
                {
                    "Address": 800,
                    "ByteSize": 2,
                    "Comment": "for printing.}"
                },
                {
                    "Address": 802,
                    "ByteSize": 1,
                    "Comment": "Reset the carry for a valid digit."
                },
                {
                    "Address": 803,
                    "ByteSize": 2,
                    "Comment": "Jump if carry reset.",
                    "OperandType": 2
                },
                {
                    "Address": 805,
                    "ByteSize": 2,
                    "Comment": "Jump back for more rounding or more final zeros.",
                    "OperandType": 2
                },
                {
                    "Address": 807,
                    "ByteSize": 2,
                    "Comment": "{There is overflow to the left; an extra 1 is needed"
                },
                {
                    "Address": 809,
                    "ByteSize": 1,
                    "Comment": "here.}"
                },
                {
                    "Address": 810,
                    "ByteSize": 3,
                    "Comment": "It is also an extra digit before the decimal."
                },
                {
                    "Address": 813,
                    "ByteSize": 3,
                    "Comment": "#REG:B# now sets the count of the digits to be printed\n(final zeros will not be printed)."
                },
                {
                    "Address": 816,
                    "ByteSize": 1,
                    "Comment": "f is to be deleted.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 819,
                    "ByteSize": 1,
                    "Comment": "{The calculator offset saved on the stack is restored"
                },
                {
                    "Address": 820,
                    "ByteSize": 1,
                    "Comment": "to \\#REGhl'."
                },
                {
                    "Address": 821,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 822,
                    "ByteSize": 4,
                    "Comment": "The counters are set (first two bytes of\n#ADDR:0x5CAB#(mem-5)).",
                    "OperandType": 1
                },
                {
                    "Address": 826,
                    "ByteSize": 3,
                    "Comment": "The start of the digits (first byte of\n#ADDR:0x5CA1#(mem-3))."
                },
                {
                    "Address": 829,
                    "ByteSize": 1,
                    "Comment": "{If more than 9, or fewer than minus 4, digits are"
                },
                {
                    "Address": 830,
                    "ByteSize": 2,
                    "Comment": "required before the decimal, then E-format will be"
                },
                {
                    "Address": 832,
                    "ByteSize": 2,
                    "Comment": "needed.}",
                    "OperandType": 2
                },
                {
                    "Address": 834,
                    "ByteSize": 2,
                    "Comment": "{Fewer than 4 means more than 4 leading zeros after"
                },
                {
                    "Address": 836,
                    "ByteSize": 2,
                    "Comment": "the decimal.}",
                    "OperandType": 2
                },
                {
                    "Address": 838,
                    "ByteSize": 1,
                    "Comment": "{Are there no digits before the decimal? If so, print"
                },
                {
                    "Address": 839,
                    "ByteSize": 3,
                    "Comment": "an initial zero.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 842,
                    "ByteSize": 1,
                    "Comment": "Start by setting #REG:A# to zero."
                },
                {
                    "Address": 843,
                    "ByteSize": 1,
                    "Comment": "{Subtract #REG:B#: minus will mean there are digits"
                },
                {
                    "Address": 844,
                    "ByteSize": 3,
                    "Comment": "before the decimal; jump forward to print them.}",
                    "OperandType": 2
                },
                {
                    "Address": 847,
                    "ByteSize": 1,
                    "Comment": "#REG:A# is now required as a counter."
                },
                {
                    "Address": 848,
                    "ByteSize": 2,
                    "Comment": "Jump forward to print the decimal part.",
                    "OperandType": 2
                },
                {
                    "Address": 850,
                    "ByteSize": 1,
                    "Comment": "{Copy the number of digits to be printed to #REG:A#. If"
                },
                {
                    "Address": 851,
                    "ByteSize": 1,
                    "Comment": "#REG:A# is 0, there are still final zeros to print"
                },
                {
                    "Address": 852,
                    "ByteSize": 2,
                    "Comment": "(#REG:B# is non-zero), so jump.}",
                    "OperandType": 2
                },
                {
                    "Address": 854,
                    "ByteSize": 1,
                    "Comment": "Get a digit from the print buffer."
                },
                {
                    "Address": 855,
                    "ByteSize": 1,
                    "Comment": "Point to the next digit."
                },
                {
                    "Address": 856,
                    "ByteSize": 1,
                    "Comment": "Decrease the count by one."
                },
                {
                    "Address": 857,
                    "ByteSize": 3,
                    "Comment": "Print the appropriate digit.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 860,
                    "ByteSize": 2,
                    "Comment": "Loop back until #REG:B# is zero.",
                    "OperandType": 2
                },
                {
                    "Address": 862,
                    "ByteSize": 1,
                    "Comment": "{It is time to print the decimal, unless #REG:C# is now"
                },
                {
                    "Address": 863,
                    "ByteSize": 1,
                    "Comment": "zero; in that case, return - finished."
                },
                {
                    "Address": 864,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 865,
                    "ByteSize": 1,
                    "Comment": "Add 1 to #REG:B# - include the decimal."
                },
                {
                    "Address": 866,
                    "ByteSize": 2,
                    "Comment": "Put the code for '.' into #REG:A#."
                },
                {
                    "Address": 868,
                    "ByteSize": 1,
                    "Comment": "Print the '.'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 869,
                    "ByteSize": 2,
                    "Comment": "Enter the character code for '0'."
                },
                {
                    "Address": 871,
                    "ByteSize": 2,
                    "Comment": "Loop back to print all needed zeros.",
                    "OperandType": 2
                },
                {
                    "Address": 873,
                    "ByteSize": 1,
                    "Comment": "Set the count for all remaining digits."
                },
                {
                    "Address": 874,
                    "ByteSize": 2,
                    "Comment": "Jump back to print them.",
                    "OperandType": 2
                },
                {
                    "Address": 876,
                    "ByteSize": 1,
                    "Comment": "The count of digits is copied to #REG:D#."
                },
                {
                    "Address": 877,
                    "ByteSize": 1,
                    "Comment": "It is decremented to give the exponent."
                },
                {
                    "Address": 878,
                    "ByteSize": 2,
                    "Comment": "One digit is required before the decimal in E-format."
                },
                {
                    "Address": 880,
                    "ByteSize": 3,
                    "Comment": "All the part of the number before the 'E' is now\nprinted.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 883,
                    "ByteSize": 2,
                    "Comment": "Enter the character code for 'E'."
                },
                {
                    "Address": 885,
                    "ByteSize": 1,
                    "Comment": "Print the 'E'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 886,
                    "ByteSize": 1,
                    "Comment": "Exponent to #REG:C# now for printing."
                },
                {
                    "Address": 887,
                    "ByteSize": 1,
                    "Comment": "And to #REG:A# for testing."
                },
                {
                    "Address": 888,
                    "ByteSize": 1,
                    "Comment": "Its sign is tested."
                },
                {
                    "Address": 889,
                    "ByteSize": 3,
                    "Comment": "Jump if it is positive.",
                    "OperandType": 2
                },
                {
                    "Address": 892,
                    "ByteSize": 2,
                    "Comment": "Otherwise, negate it in #REG:A#."
                },
                {
                    "Address": 894,
                    "ByteSize": 1,
                    "Comment": "Then copy it back to #REG:C# for printing."
                },
                {
                    "Address": 895,
                    "ByteSize": 2,
                    "Comment": "Enter the character code for '-'."
                },
                {
                    "Address": 897,
                    "ByteSize": 2,
                    "Comment": "Jump to print the sign.",
                    "OperandType": 2
                },
                {
                    "Address": 899,
                    "ByteSize": 2,
                    "Comment": "Enter the character code for '+'."
                },
                {
                    "Address": 901,
                    "ByteSize": 1,
                    "Comment": "Now print the sign: '+' or '-'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 902,
                    "ByteSize": 2,
                    "Comment": "#REG:BC# holds the exponent for printing."
                },
                {
                    "Address": 904,
                    "ByteSize": 3,
                    "Comment": "Jump back to print it and finish.",
                    "OperandType": 2
                },
                {
                    "Address": 907,
                    "ByteSize": 1,
                    "Comment": "Save whichever #REG:DE# pair is in use."
                },
                {
                    "Address": 908,
                    "ByteSize": 1,
                    "Comment": "{Copy the multiplicand from #REG:A# to #REG:HL#."
                },
                {
                    "Address": 909,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 911,
                    "ByteSize": 1,
                    "Comment": "{Copy it to #REG:DE# too."
                },
                {
                    "Address": 912,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 913,
                    "ByteSize": 1,
                    "Comment": "Double #REG:HL#."
                },
                {
                    "Address": 914,
                    "ByteSize": 1,
                    "Comment": "Double it again."
                },
                {
                    "Address": 915,
                    "ByteSize": 1,
                    "Comment": "Add in #REG:DE# to give #REG:HL#=5*#REG:A#."
                },
                {
                    "Address": 916,
                    "ByteSize": 1,
                    "Comment": "Double again: now #REG:HL#=10*#REG:A#."
                },
                {
                    "Address": 917,
                    "ByteSize": 1,
                    "Comment": "Copy #REG:C# to #REG:DE# (#REG:D# is zero) for addition."
                },
                {
                    "Address": 918,
                    "ByteSize": 1,
                    "Comment": "Now #REG:HL#=10*#REG:A#+#REG:C#."
                },
                {
                    "Address": 919,
                    "ByteSize": 1,
                    "Comment": "#REG:H# is copied to #REG:C#."
                },
                {
                    "Address": 920,
                    "ByteSize": 1,
                    "Comment": "#REG:L# is copied to #REG:A#, completing the task."
                },
                {
                    "Address": 921,
                    "ByteSize": 1,
                    "Comment": "The #REG:DE# register pair is restored."
                },
                {
                    "Address": 922,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 923,
                    "ByteSize": 1,
                    "Comment": "Transfer the exponent to #REG:A#."
                },
                {
                    "Address": 924,
                    "ByteSize": 2,
                    "Comment": "Presume a positive number."
                },
                {
                    "Address": 926,
                    "ByteSize": 1,
                    "Comment": "{If the number is zero then the preparation is already"
                },
                {
                    "Address": 927,
                    "ByteSize": 1,
                    "Comment": "finished.}"
                },
                {
                    "Address": 928,
                    "ByteSize": 1,
                    "Comment": "Now point to the sign byte."
                },
                {
                    "Address": 929,
                    "ByteSize": 2,
                    "Comment": "Set the zero flag for positive number."
                },
                {
                    "Address": 931,
                    "ByteSize": 2,
                    "Comment": "Restore the true numeric bit."
                },
                {
                    "Address": 933,
                    "ByteSize": 1,
                    "Comment": "Point to the first byte again."
                },
                {
                    "Address": 934,
                    "ByteSize": 1,
                    "Comment": "Positive numbers have been prepared, but negative\nnumbers need to be two's complemented."
                },
                {
                    "Address": 935,
                    "ByteSize": 1,
                    "Comment": "Save any earlier exponent."
                },
                {
                    "Address": 936,
                    "ByteSize": 3,
                    "Comment": "There are 5 bytes to be handled."
                },
                {
                    "Address": 939,
                    "ByteSize": 1,
                    "Comment": "Point one past the last byte."
                },
                {
                    "Address": 940,
                    "ByteSize": 1,
                    "Comment": "Transfer the 5 to #REG:B#."
                },
                {
                    "Address": 941,
                    "ByteSize": 1,
                    "Comment": "Save the exponent in #REG:C#."
                },
                {
                    "Address": 942,
                    "ByteSize": 1,
                    "Comment": "Set carry flag for negation."
                },
                {
                    "Address": 943,
                    "ByteSize": 1,
                    "Comment": "Point to each byte in turn."
                },
                {
                    "Address": 944,
                    "ByteSize": 1,
                    "Comment": "Get each byte."
                },
                {
                    "Address": 945,
                    "ByteSize": 1,
                    "Comment": "One's complement the byte."
                },
                {
                    "Address": 946,
                    "ByteSize": 2,
                    "Comment": "Add in carry for negation."
                },
                {
                    "Address": 948,
                    "ByteSize": 1,
                    "Comment": "Restore the byte."
                },
                {
                    "Address": 949,
                    "ByteSize": 2,
                    "Comment": "Loop 5 times.",
                    "OperandType": 2
                },
                {
                    "Address": 951,
                    "ByteSize": 1,
                    "Comment": "Restore the exponent to #REG:A#."
                },
                {
                    "Address": 952,
                    "ByteSize": 1,
                    "Comment": "Restore any earlier exponent."
                },
                {
                    "Address": 953,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 954,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# is preserved."
                },
                {
                    "Address": 955,
                    "ByteSize": 1,
                    "Comment": "#REG:AF# is preserved."
                },
                {
                    "Address": 956,
                    "ByteSize": 1,
                    "Comment": "M1 to #REG:C#."
                },
                {
                    "Address": 957,
                    "ByteSize": 1,
                    "Comment": "Next."
                },
                {
                    "Address": 958,
                    "ByteSize": 1,
                    "Comment": "M2 to #REG:B#."
                },
                {
                    "Address": 959,
                    "ByteSize": 1,
                    "Comment": "Copy the sign of the result to bit 7 of (#REG:HL#)."
                },
                {
                    "Address": 960,
                    "ByteSize": 1,
                    "Comment": "Next."
                },
                {
                    "Address": 961,
                    "ByteSize": 1,
                    "Comment": "M1 to #REG:A#."
                },
                {
                    "Address": 962,
                    "ByteSize": 1,
                    "Comment": "M3 to #REG:C#."
                },
                {
                    "Address": 963,
                    "ByteSize": 1,
                    "Comment": "Save M2 and M3 on the machine stack."
                },
                {
                    "Address": 964,
                    "ByteSize": 1,
                    "Comment": "Next."
                },
                {
                    "Address": 965,
                    "ByteSize": 1,
                    "Comment": "M4 to #REG:C#."
                },
                {
                    "Address": 966,
                    "ByteSize": 1,
                    "Comment": "Next."
                },
                {
                    "Address": 967,
                    "ByteSize": 1,
                    "Comment": "M5 to #REG:B#."
                },
                {
                    "Address": 968,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# now points to N1."
                },
                {
                    "Address": 969,
                    "ByteSize": 1,
                    "Comment": "M1 to #REG:D#."
                },
                {
                    "Address": 970,
                    "ByteSize": 1,
                    "Comment": "N1 to #REG:E#."
                },
                {
                    "Address": 971,
                    "ByteSize": 1,
                    "Comment": "Save M1 and N1 on the machine stack."
                },
                {
                    "Address": 972,
                    "ByteSize": 1,
                    "Comment": "Next."
                },
                {
                    "Address": 973,
                    "ByteSize": 1,
                    "Comment": "N2 to #REG:D#."
                },
                {
                    "Address": 974,
                    "ByteSize": 1,
                    "Comment": "Next."
                },
                {
                    "Address": 975,
                    "ByteSize": 1,
                    "Comment": "N3 to #REG:E#."
                },
                {
                    "Address": 976,
                    "ByteSize": 1,
                    "Comment": "Save N2 and N3 on the machine stack."
                },
                {
                    "Address": 977,
                    "ByteSize": 1,
                    "Comment": "Get the exchange registers."
                },
                {
                    "Address": 978,
                    "ByteSize": 1,
                    "Comment": "N2 to \\#REGd' and N3 to \\#REGe'."
                },
                {
                    "Address": 979,
                    "ByteSize": 1,
                    "Comment": "M1 to \\#REGh' and N1 to \\#REGl'."
                },
                {
                    "Address": 980,
                    "ByteSize": 1,
                    "Comment": "M2 to \\#REGb' and M3 to \\#REGc'."
                },
                {
                    "Address": 981,
                    "ByteSize": 1,
                    "Comment": "Get the original set of registers."
                },
                {
                    "Address": 982,
                    "ByteSize": 1,
                    "Comment": "Next."
                },
                {
                    "Address": 983,
                    "ByteSize": 1,
                    "Comment": "N4 to #REG:D#."
                },
                {
                    "Address": 984,
                    "ByteSize": 1,
                    "Comment": "Next."
                },
                {
                    "Address": 985,
                    "ByteSize": 1,
                    "Comment": "N5 to #REG:E#."
                },
                {
                    "Address": 986,
                    "ByteSize": 1,
                    "Comment": "Restore the original #REG:AF#."
                },
                {
                    "Address": 987,
                    "ByteSize": 1,
                    "Comment": "Restore the original #REG:HL#."
                },
                {
                    "Address": 988,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 989,
                    "ByteSize": 1,
                    "Comment": "{If the exponent difference is zero, the subroutine"
                },
                {
                    "Address": 990,
                    "ByteSize": 1,
                    "Comment": "returns at once.}"
                },
                {
                    "Address": 991,
                    "ByteSize": 2,
                    "Comment": "{If the difference is greater than &20, jump forward."
                },
                {
                    "Address": 993,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 995,
                    "ByteSize": 1,
                    "Comment": "Save #REG:BC# briefly."
                },
                {
                    "Address": 996,
                    "ByteSize": 1,
                    "Comment": "Transfer the exponent difference to #REG:B# to count the\nshifts right."
                },
                {
                    "Address": 997,
                    "ByteSize": 1,
                    "Comment": "{Arithmetic shift right for \\#REGl', preserving the sign"
                },
                {
                    "Address": 998,
                    "ByteSize": 2,
                    "Comment": "marker bits.}"
                },
                {
                    "Address": 1000,
                    "ByteSize": 2,
                    "Comment": "{Rotate right with carry \\#REGd', \\#REGe', #REG:D# and"
                },
                {
                    "Address": 1002,
                    "ByteSize": 2,
                    "Comment": "#REG:E#, thereby shifting the whole five bytes of the"
                },
                {
                    "Address": 1004,
                    "ByteSize": 1,
                    "Comment": "number to the right as many times as #REG:B# counts."
                },
                {
                    "Address": 1005,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 1007,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 1009,
                    "ByteSize": 2,
                    "Comment": "Loop back until #REG:B# reaches zero.",
                    "OperandType": 2
                },
                {
                    "Address": 1011,
                    "ByteSize": 1,
                    "Comment": "Restore the original #REG:BC#."
                },
                {
                    "Address": 1012,
                    "ByteSize": 1,
                    "Comment": "Done if no carry to retrieve."
                },
                {
                    "Address": 1013,
                    "ByteSize": 3,
                    "Comment": "Retrieve carry.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1016,
                    "ByteSize": 1,
                    "Comment": "Return unless the carry rippled right back. (In this\ncase there is nothing to add.)"
                },
                {
                    "Address": 1017,
                    "ByteSize": 1,
                    "Comment": "Fetch \\#REGl', \\#REGd' and \\#REGe'."
                },
                {
                    "Address": 1018,
                    "ByteSize": 1,
                    "Comment": "Clear the #REG:A# register."
                },
                {
                    "Address": 1019,
                    "ByteSize": 2,
                    "Comment": "{Set the addend to zero in \\#REGd', \\#REGe', #REG:D# and"
                },
                {
                    "Address": 1021,
                    "ByteSize": 1,
                    "Comment": "#REG:E#, together with its marker byte (sign indicator)"
                },
                {
                    "Address": 1022,
                    "ByteSize": 1,
                    "Comment": "\\#REGl', which was &00 for a positive number and &FF for"
                },
                {
                    "Address": 1023,
                    "ByteSize": 1,
                    "Comment": "a negative number. This produces only 4 zero bytes when"
                }
            ],
            "CommentBlocks": [
                {
                    "Address": 2,
                    "Comment": "THE 'DIM' COMMAND ROUTINE\n \nThe address of this routine is found in the #ADDR:0x1AA2#(parameter table).\n \nThis routine establishes new arrays in the variables area. The routine starts\nby searching the existing variables area to determine whether there is an\nexisting array with the same name. If such an array is found then it is\n'reclaimed' before the new array is established.\n \nA new array will have all its elements set to zero if it is a numeric array,\nor to 'spaces' if it is an array of strings."
                },
                {
                    "Address": 21,
                    "Comment": "An 'existing array' is reclaimed."
                },
                {
                    "Address": 31,
                    "Comment": "The initial parameters of the new array are found."
                },
                {
                    "Address": 46,
                    "Comment": "The following loop is accessed for each dimension that is specified in the\nparenthesised expression of the DIM statement. The total number of bytes\nrequired for the elements of the array is built up in the #REG:DE# register\npair."
                },
                {
                    "Address": 70,
                    "Comment": "At this point the #REG:DE# register pair indicates the number of bytes required\nfor the elements of the new array and the size of each dimension is stacked,\non the machine stack.\n \nNow check that there is indeed a closing bracket to the parenthesised\nexpression."
                },
                {
                    "Address": 75,
                    "Comment": "Allowance is now made for the dimension sizes."
                },
                {
                    "Address": 92,
                    "Comment": "The required amount of room is made available for the new array at the end of\nthe variables area."
                },
                {
                    "Address": 100,
                    "Comment": "The parameters are now entered."
                },
                {
                    "Address": 113,
                    "Comment": "The elements of the new array are now 'cleared'."
                },
                {
                    "Address": 127,
                    "Comment": "The 'dimension sizes' are now entered."
                },
                {
                    "Address": 136,
                    "Comment": "THE 'ALPHANUM' SUBROUTINE\n \nUsed by the routines at #ADDR:0x2684#, #ADDR:0x28B2# and #ADDR:0x2AFF#.\n \nThis subroutine returns with the carry flag set if the present value of the\n#REG:A# register denotes a valid digit or letter.\n \nA Character code\nO:F Carry flag set if the character is alphanumeric"
                },
                {
                    "Address": 141,
                    "Comment": "THE 'ALPHA' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1F60#, #ADDR:0x2089#, #ADDR:0x27BD#, #ADDR:0x28B2# and #ADDR:0x34BC#.\n \nThe routine at #ADDR:0x2C88# continues here.\n \nThis subroutine returns with the carry flag set if the present value of the\n#REG:A# register denotes a valid letter of the alphabet.\n \nA Character code\nO:F Carry flag set if the character is a letter (A-Z, a-z)"
                },
                {
                    "Address": 155,
                    "Comment": "THE 'DECIMAL TO FLOATING POINT' SUBROUTINE\n \nUsed by the routine at #ADDR:0x268D#.\n \nAs part of syntax checking decimal numbers that occur in a BASIC line are\nconverted to their floating-point forms. This subroutine reads the decimal\nnumber digit by digit and gives its result as a 'last value' on the\ncalculator stack. But first it deals with the alternative notation BIN, which\nintroduces a sequence of 0's and 1's giving the binary representation of the\nrequired number.\n \nA Code of the first character in the number"
                },
                {
                    "Address": 184,
                    "Comment": "For other numbers, first any integer part is converted; if the next character\nis a decimal, then the decimal fraction is considered."
                },
                {
                    "Address": 218,
                    "Comment": "For each passage of the following loop, the number (N) saved in the memory\narea mem-0 is fetched, divided by 10 and restored, i.e. N goes from 1 to .1\nto .01 to .001 etc. The present digit (D) is multiplied by N/10 and added to\nthe 'last value' (V), giving V+D*N/10."
                },
                {
                    "Address": 235,
                    "Comment": "Next consider any 'E notation', i.e. the form xEm or xem where m is a\npositive or negative integer."
                },
                {
                    "Address": 283,
                    "Comment": "THE 'NUMERIC' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1925#, #ADDR:0x2C88#, #ADDR:0x2C9B# and #ADDR:0x2D22#.\n \nThis subroutine returns with the carry flag reset if the present value of the\n#REG:A# register denotes a valid digit.\n \nA Character code\nO:F Carry flag reset if the character is a digit (0-9)"
                },
                {
                    "Address": 290,
                    "Comment": "THE 'STK-DIGIT' SUBROUTINE\n \nUsed by the routines at #ADDR:0x2C9B# and #ADDR:0x2D3B#.\n \nThis subroutine simply returns if the current value held in the #REG:A#\nregister does not represent a digit but if it does then the floating-point\nform for the digit becomes the 'last value' on the calculator stack.\n \nA Character code\nO:F Carry flag reset if the character is a digit (0-9)"
                },
                {
                    "Address": 296,
                    "Comment": "This routine continues into #ADDR:0x2D28#.\nTHE 'STACK-A' SUBROUTINE\n \nUsed by the routines at #ADDR:0x22CB#, #ADDR:0x2382#, #ADDR:0x247D#, #ADDR:0x2580#, #ADDR:0x34AC#, #ADDR:0x3669#\nand #ADDR:0x3713#.\n \nThe routine at #ADDR:0x2D22# continues here.\n \nThis subroutine gives the floating-point form for the absolute binary value\ncurrently held in the #REG:A# register.\n \nA Value to stack"
                },
                {
                    "Address": 299,
                    "Comment": "This routine continues into #ADDR:0x2D2B#.\nTHE 'STACK-BC' SUBROUTINE\n \nUsed by the routines at #ADDR:0x25F8#, #ADDR:0x2C9B#, #ADDR:0x34BC# and #ADDR:0x3674#.\n \nThe routine at #ADDR:0x2D28# continues here.\n \nThis subroutine gives the floating-point form for the absolute binary value\ncurrently held in the #REG:BC# register pair.\n \nThe form used in this and hence in the two previous subroutines as well is\nthe one reserved in the Spectrum for small integers n, where\n-65535<=n<=65535. The first and fifth bytes are zero; the third and fourth\nbytes are the less significant and more significant bytes of the 16 bit\ninteger n in two's complement form (if n is negative, these two bytes hold\n65536+n); and the second byte is a sign byte, &00 for '+' and &FF for '-'.\n \nBC Value to stack"
                },
                {
                    "Address": 315,
                    "Comment": "THE 'INTEGER TO FLOATING-POINT' SUBROUTINE\n \nUsed by the routines at #ADDR:0x19FB# and #ADDR:0x2C9B#.\n \nThis subroutine returns a 'last value' on the calculator stack that is the\nresult of converting an integer in a BASIC line, i.e. the integer part of the\ndecimal number or the line number, to its floating-point form.\n \nRepeated calls to #ADDR:0x0074# fetch each digit of the integer in turn. An exit is\nmade when a code that does not represent a digit has been fetched.\n \nA Code of the current character\nO:A Code of the next non-digit character"
                },
                {
                    "Address": 320,
                    "Comment": "Now a loop is set up. As long as the code represents a digit then the\nfloating-point form is found and stacked under the 'last value' (V, initially\nzero). V is then multiplied by 10 and added to the 'digit' to form a new\n'last value' which is carried back to the start of the loop."
                },
                {
                    "Address": 335,
                    "Comment": "THE 'E-FORMAT TO FLOATING-POINT' SUBROUTINE (offset &3C)\n \nUsed by the routines at #ADDR:0x2C9B# and #ADDR:0x2DE3#.\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses).\n \nThis subroutine gives a 'last value' on the top of the calculator stack that\nis the result of converting a number given in the form xEm, where m is a\npositive or negative integer. The subroutine is entered with x at the top of\nthe calculator stack and m in the #REG:A# register.\n \nThe method used is to find the absolute value of m, say p, and to multiply or\ndivide x by 10\\#powerp according to whether m is positive or negative.\n \nTo achieve this, p is shifted right until it is zero, and x is multiplied or\ndivided by 10\\#power(2\\#powern) for each set bit b(n) of p. Since p is never\nmuch more than 39, bits 6 and 7 of p will not normally be set.\n \nA Exponent (m)"
                },
                {
                    "Address": 383,
                    "Comment": "THE 'INT-FETCH' SUBROUTINE\n \nUsed by the routines at #ADDR:0x2DA2#, #ADDR:0x2DE3#, #ADDR:0x30CA#, #ADDR:0x3297# and #ADDR:0x346E#.\n \nThis subroutine collects in #REG:DE# a small integer n (-65535<=n<=65535) from\nthe location addressed by #REG:HL#, i.e. n is normally the first (or second)\nnumber at the top of the calculator stack; but #REG:HL# can also access (by\nexchange with #REG:DE#) a number which has been deleted from the stack.\n \nThe subroutine does not itself delete the number from the stack or from\nmemory; it returns #REG:HL# pointing to the fourth byte of the number in its\noriginal position.\n \nHL Address of the first byte of the value on the calculator stack\nO:C Sign byte\nO:DE The value\nO:HL Address of the fourth byte of the value"
                },
                {
                    "Address": 385,
                    "Comment": "The following mechanism will two's complement the number if it is negative\n(#REG:C# is &FF) but leave it unaltered if it is positive (#REG:C# is &00)."
                },
                {
                    "Address": 396,
                    "Comment": "THE 'POSITIVE-INT-STORE' SUBROUTINE"
                },
                {
                    "Address": 398,
                    "Comment": "This routine continues into #ADDR:0x2D8E#.\nTHE 'INT-STORE' SUBROUTINE\n \nUsed by the routines at #ADDR:0x30CA#, #ADDR:0x3214#, #ADDR:0x346E# and #ADDR:0x3492#.\n \nThis subroutine stores a small integer n (-65535<=n<=65535) in the location\naddressed by #REG:HL# and the four following locations, i.e. n replaces the\nfirst (or second) number at the top of the calculator stack. The subroutine\nreturns #REG:HL# pointing to the first byte of n on the stack.\n \nC Sign byte\nDE Value to store\nHL Address of the first byte of the slot on the calculator stack"
                },
                {
                    "Address": 403,
                    "Comment": "The same mechanism is now used as in #ADDR:0x2D7F# to two's complement negative\nnumbers. This is needed e.g. before and after the multiplication of small\nintegers. Addition is however performed without any further two's\ncomplementing before or afterwards."
                },
                {
                    "Address": 418,
                    "Comment": "THE 'FLOATING-POINT TO BC' SUBROUTINE\n \nUsed by the routines at #ADDR:0x19FB#, #ADDR:0x1E94#, #ADDR:0x25F8# and #ADDR:0x2DD5#.\n \nThis subroutine is used to compress the floating-point 'last value' on the\ncalculator stack into the #REG:BC# register pair. If the result is too large,\ni.e. greater than 65536, then the subroutine returns with the carry flag set.\nIf the 'last value' is negative then the zero flag is reset. The low byte of\nthe result is also copied to the #REG:A# register.\n \nO:A LSB of the value (same as #REG:C#)\nO:BC Last value from the calculator stack\nO:F Carry flag set on overflow\nO:F Zero flag set if the value is positive, reset if negative"
                },
                {
                    "Address": 449,
                    "Comment": "THE 'LOG(2\\#powerA)' SUBROUTINE\n \nUsed by the routine at #ADDR:0x2DE3#.\n \nThis subroutine calculates the approximate number of digits before the\ndecimal in x, the number to be printed, or, if there are no digits before the\ndecimal, then the approximate number of leading zeros after the decimal. It\nis entered with the #REG:A# register containing e', the true exponent of x, or\ne'-2, and calculates z=log to the base 10 of (2\\#power#REG:A#). It then sets\n#REG:A# equal to ABS INT (z+0.5), as required, using #ADDR:0x2DD5# for this purpose.\n \nA e' (true exponent) or e'-2\nO:A INT log (2\\#power#REG:A#)"
                },
                {
                    "Address": 469,
                    "Comment": "The subroutine continues into #ADDR:0x2DD5# to complete the calculation.\nTHE 'FLOATING-POINT TO A' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1E85#, #ADDR:0x1E94#, #ADDR:0x2314#, #ADDR:0x247D#, #ADDR:0x2C9B#, #ADDR:0x2DE3#,\n#ADDR:0x35C9# and #ADDR:0x36C4#.\n \nThe routine at #ADDR:0x2DC1# continues here.\n \nThis short but vital subroutine is called at least 8 times for various\npurposes. It uses #ADDR:0x2DA2# to get the 'last value' into the #REG:A# register\nwhere this is possible. It therefore tests whether the modulus of the number\nrounds to more than 255 and if it does the subroutine returns with the carry\nflag set. Otherwise it returns with the modulus of the number, rounded to the\nnearest integer, in the #REG:A# register, and the zero flag set to imply that\nthe number was positive, or reset to imply that it was negative.\n \nO:A Last value from the calculator stack\nO:F Carry flag set on overflow\nO:F Zero flag set if the value is positive, reset if negative"
                },
                {
                    "Address": 483,
                    "Comment": "THE 'PRINT A FLOATING-POINT NUMBER' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1FFC# and #ADDR:0x361F#.\n \nThis subroutine prints x, the 'last value' on the calculator stack. The print\nformat never occupies more than 14 spaces.\n \nThe 8 most significant digits of x, correctly rounded, are stored in an ad\nhoc print buffer in mem-3 and mem-4. Small numbers, numerically less than 1,\nand large numbers, numerically greater than 2\\#power27, are dealt with\nseparately. The former are multiplied by 10\\#powern, where n is the\napproximate number of leading zeros after the decimal, while the latter are\ndivided by 10\\#power(n-7), where n is the approximate number of digits before\nthe decimal. This brings all numbers into the middle range, and the number of\ndigits required before the decimal is built up in the second byte of mem-5.\nFinally the printing is done, using E-format if there are more than 8 digits\nbefore the decimal or, for small numbers, more than 4 leading zeros after the\ndecimal.\n \nThe following program shows the range of print formats:\n \n10 FOR a=-11 TO 12: PRINT SGN a*9\\#powera,: NEXT a\n \ni. First the sign of x is taken care of:\n \n\\#LIST\n{ If x is negative, the subroutine jumps to #ADDR:0x2DF2#, takes ABS x and prints\nthe minus sign. }\n{ If x is zero, x is deleted from the calculator stack, a '0' is printed and\na return is made from the subroutine. }\n{ If x is positive, the subroutine just continues. }\nLIST\\#"
                },
                {
                    "Address": 513,
                    "Comment": "ii. This is the start of a loop which deals with large numbers. Every number\nx is first split into its integer part i and the fractional part f. If i is a\nsmall integer, i.e. if -65535<=i<=65535, it is stored in \\#REGde' for\ninsertion into the print buffer."
                },
                {
                    "Address": 548,
                    "Comment": "iii. Pure fractions are multiplied by 10\\#powern, where n is the approximate\nnumber of leading zeros after the decimal; and -n is added to the second byte\nof mem-5, which holds the number of digits needed before the decimal; a\nnegative number here indicates leading zeros after the decimal."
                },
                {
                    "Address": 551,
                    "Comment": "Note that the stack is now unbalanced. An extra byte 'DEFB &02, delete' is\nneeded immediately after the RST \\#o28. Now an expression like \"2\"+STR$ 0.5 is\nevaluated incorrectly as 0.5; the zero left on the stack displaces the \"2\"\nand is treated as a null string. Similarly all the string comparisons can\nyield incorrect values if the second string takes the form STR$ x where x is\nnumerically less than 1; e.g. the expression \"50\"<STR$ 0.1 yields the logical\nvalue \"true\"; once again \"\" is used instead of \"50\"."
                },
                {
                    "Address": 598,
                    "Comment": "iv. Numbers greater than 2\\#power27 are similarly multiplied by 2\\#power(-n+7),\nreducing the number of digits before the decimal to 8, and the loop is\nre-entered at #ADDR:0x2E01#."
                },
                {
                    "Address": 623,
                    "Comment": "v. The integer part of x is now stored in the print buffer in mem-3 and\nmem-4."
                },
                {
                    "Address": 635,
                    "Comment": "Note that the case where i is a small integer (less than 65536) re-enters\nhere."
                },
                {
                    "Address": 660,
                    "Comment": "Decimal adjusting each byte of mem-4 gave 2 decimal digits per byte, there\nbeing at most 9 digits. The digits will now be re-packed, one to a byte, in\nmem-3 and mem-4, using the instruction '\\#S/RLD/'."
                },
                {
                    "Address": 719,
                    "Comment": "vi. The fractional part of x is now stored in the print buffer."
                },
                {
                    "Address": 780,
                    "Comment": "vii. The digits stored in the print buffer are rounded to a maximum of 8\ndigits for printing."
                },
                {
                    "Address": 822,
                    "Comment": "viii. The number can now be printed. First #REG:C# will be set to hold the\nnumber of digits to be printed, not counting final zeros, while #REG:B# will\nhold the number of digits required before the decimal."
                },
                {
                    "Address": 842,
                    "Comment": "The next entry point is also used to print the digits needed for E-format\nprinting."
                },
                {
                    "Address": 907,
                    "Comment": "THE 'CA=10*A+C' SUBROUTINE\n \nThis subroutine is called by #ADDR:0x2DE3# to multiply each byte of \\#REG(d'e'de) by\n10 and return the integer part of the result in the #REG:C# register. On entry,\nthe #REG:A# register contains the byte to be multiplied by 10 and the #REG:C#\nregister contains the carry over from the previous byte. On return, the #REG:A#\nregister contains the resulting byte and the #REG:C# register the carry forward\nto the next byte.\n \nA First number (M)\nC Second number (N)\nO:A LSB of 10*M+N\nO:C MSB of 10*M+N"
                },
                {
                    "Address": 923,
                    "Comment": "THE 'PREPARE TO ADD' SUBROUTINE\n \nUsed by the routine at #ADDR:0x3014#.\n \nThis subroutine is the first of four subroutines that are used by the main\narithmetic operation routines - #ADDR:0x300F#, #ADDR:0x3014#, #ADDR:0x30CA# and #ADDR:0x31AF#.\n \nThis particular subroutine prepares a floating-point number for addition,\nmainly by replacing the sign bit with a true numerical bit 1, and negating\nthe number (two's complement) if it is negative. The exponent is returned in\nthe #REG:A# register and the first byte is set to &00 for a positive number and\n&FF for a negative number.\n \nHL Address of the first byte of the number\nO:A Exponent byte"
                },
                {
                    "Address": 954,
                    "Comment": "THE 'FETCH TWO NUMBERS' SUBROUTINE\n \nUsed by the routines at #ADDR:0x2DE3#, #ADDR:0x3014#, #ADDR:0x30CA# and #ADDR:0x31AF#.\n \nThis subroutine is called by #ADDR:0x3014#, #ADDR:0x30CA# and #ADDR:0x31AF# to get two numbers\nfrom the calculator stack and put them into the registers, including the\nexchange registers.\n \nOn entry to the subroutine the #REG:HL# register pair points to the first byte\nof the first number (M) and the #REG:DE# register pair points to the first byte\nof the second number (N).\n \nWhen the subroutine is called from #ADDR:0x30CA# or #ADDR:0x31AF# the sign of the result\nis saved in the second byte of the first number.\n \nA Bit 7 holds the sign bit of the result (when called from #ADDR:0x30CA# or\n.   #ADDR:0x31AF#)\nDE Address of the first byte of N\nHL Address of the first byte of M\nO:H'B'C'CB The five bytes of M\nO:L'D'E'DE The five bytes of N"
                },
                {
                    "Address": 956,
                    "Comment": "Call the five bytes of the first number M1, M2, M3, M4 and M5, and the five\nbytes of the second number N1, N2, N3, N4 and N5."
                },
                {
                    "Address": 989,
                    "Comment": "Summary:\n \n\\#LIST\n{ M1 - M5 are in \\#REGh', \\#REGb', \\#REGc', #REG:C#, #REG:B#. }\n{ N1 - N5 are in \\#REGl', \\#REGd', \\#REGe', #REG:D#, #REG:E#. }\n{ #REG:HL# points to the first byte of the first number. }\nLIST\\#\nTHE 'SHIFT ADDEND' SUBROUTINE\n \nUsed by the routines at #ADDR:0x2DE3# and #ADDR:0x3014#.\n \nThis subroutine shifts a floating-point number up to 32 places right to line\nit up properly for addition. The number with the smaller exponent has been\nput in the addend position before this subroutine is called. Any overflow to\nthe right, into the carry, is added back into the number. If the exponent\ndifference is greater than 32, or the carry ripples right back to the\nbeginning of the number then the number is set to zero so that the addition\nwill not alter the other number (the augend).\n \nA Number of shifts to perform\nD'E'DE Mantissa of number to shift right\nL' Sign byte of number to shift right (&00 or &FF)"
                },
                {
                    "Address": 1019,
                    "Comment": "This entry point is used by the routine at #ADDR:0x30CA#."
                }
            ],
            "DataInfo": [
                {
                    "Address": 0,
                    "DataType": 11,
                    "InstructionAddressRef": 738066432
                },
                {
                    "Address": 211,
                    "Comment": "#ADDR:0x341B#(stk_zero)"
                },
                {
                    "Address": 212,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 214,
                    "Comment": "#ADDR:0x341B#(stk_one)"
                },
                {
                    "Address": 215,
                    "Comment": "#ADDR:0x342D#(st_mem_0)"
                },
                {
                    "Address": 216,
                    "Comment": "#ADDR:0x33A1#"
                },
                {
                    "Address": 217,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 225,
                    "Comment": "#ADDR:0x340F#(get_mem_0): V, D, N"
                },
                {
                    "Address": 226,
                    "Comment": "#ADDR:0x341B#(stk_ten): V, D, N, 10"
                },
                {
                    "Address": 227,
                    "Comment": "#ADDR:0x31AF#: V, D, N/10"
                },
                {
                    "Address": 228,
                    "Comment": "#ADDR:0x342D#(st_mem_0): V, D, N/10 (N/10 is copied to mem-0)"
                },
                {
                    "Address": 229,
                    "Comment": "#ADDR:0x30CA#: V, D*N/10"
                },
                {
                    "Address": 230,
                    "Comment": "#ADDR:0x3014#: V+D*N/10"
                },
                {
                    "Address": 231,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 312,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 317,
                    "Comment": "#ADDR:0x341B#(stk_zero): (the 'last value' is now zero)"
                },
                {
                    "Address": 318,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 325,
                    "Comment": "#ADDR:0x343C#: D, V"
                },
                {
                    "Address": 326,
                    "Comment": "#ADDR:0x341B#(stk_ten): D, V, 10"
                },
                {
                    "Address": 327,
                    "Comment": "#ADDR:0x30CA#: D, 10*V"
                },
                {
                    "Address": 328,
                    "Comment": "#ADDR:0x3014#: D+10*V"
                },
                {
                    "Address": 329,
                    "Comment": "#ADDR:0x369B#: D+10*V (this is 'V' for the next pass through\nthe loop)"
                },
                {
                    "Address": 349,
                    "Comment": "#ADDR:0x341B#(stk_ten): x, 10"
                },
                {
                    "Address": 350,
                    "Comment": "#ADDR:0x369B#: x, 10"
                },
                {
                    "Address": 358,
                    "Comment": "#ADDR:0x342D#(st_mem_1): (10\\#power(2\\#powern) is copied to\nmem-1)"
                },
                {
                    "Address": 359,
                    "Comment": "#ADDR:0x340F#(get_mem_0): x', 10\\#power(2\\#powern), (1/0)"
                },
                {
                    "Address": 360,
                    "Comment": "{#ADDR:0x368F# to #ADDR:0x2D6D#: x', 10\\#power(2\\#powern)"
                },
                {
                    "Address": 361,
                    "Comment": "}"
                },
                {
                    "Address": 362,
                    "Comment": "#ADDR:0x30CA#: x'*10\\#power(2\\#powern)=x\""
                },
                {
                    "Address": 363,
                    "Comment": "{#ADDR:0x3686# to #ADDR:0x2D6E#: x''"
                },
                {
                    "Address": 364,
                    "Comment": "}"
                },
                {
                    "Address": 365,
                    "Comment": "#ADDR:0x31AF#: x/10\\#power(2\\#powern)=x'' (x'' is\nx'*10\\#power(2\\#powern) or x'/10\\#power(2\\#powern) according\nas m is '+' or '-')"
                },
                {
                    "Address": 366,
                    "Comment": "#ADDR:0x340F#(get_mem_1): x'', 10\\#power(2\\#powern)"
                },
                {
                    "Address": 367,
                    "Comment": "#ADDR:0x369B#: x'', 10\\#power(2\\#powern)"
                },
                {
                    "Address": 373,
                    "Comment": "#ADDR:0x33C0#: x'', 10\\#power(2\\#powern), 10\\#power(2\\#powern)"
                },
                {
                    "Address": 374,
                    "Comment": "#ADDR:0x30CA#: x'', 10\\#power(2\\#power(n+1))"
                },
                {
                    "Address": 375,
                    "Comment": "#ADDR:0x369B#: x'', 10\\#power(2\\#power(n+1))"
                },
                {
                    "Address": 380,
                    "Comment": "#ADDR:0x33A1#"
                },
                {
                    "Address": 381,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 419,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 425,
                    "Comment": "#ADDR:0x341B#(stk_half): V, 0.5"
                },
                {
                    "Address": 426,
                    "Comment": "#ADDR:0x3014#: V+0.5"
                },
                {
                    "Address": 427,
                    "Comment": "#ADDR:0x36AF#: INT (V+0.5)"
                },
                {
                    "Address": 428,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 430,
                    "Comment": "#ADDR:0x33A1#"
                },
                {
                    "Address": 431,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 460,
                    "Comment": "{#ADDR:0x33C6#: log 2 to the base 10 is now stacked"
                },
                {
                    "Address": 461,
                    "ByteSize": 5,
                    "Comment": "}",
                    "DataType": 1
                },
                {
                    "Address": 466,
                    "Comment": "#ADDR:0x30CA#: #REG:A#*log 2 i.e. log (2\\#power#REG:A#)"
                },
                {
                    "Address": 467,
                    "Comment": "#ADDR:0x36AF#: INT log (2\\#power#REG:A#)"
                },
                {
                    "Address": 468,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 484,
                    "Comment": "#ADDR:0x33C0#: x, x"
                },
                {
                    "Address": 485,
                    "Comment": "#ADDR:0x3506#: x, (1/0) Logical value of x."
                },
                {
                    "Address": 486,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x368F# to #ADDR:0x2DF2#: x",
                    "DataType": 1
                },
                {
                    "Address": 488,
                    "Comment": "#ADDR:0x33C0#: x, x"
                },
                {
                    "Address": 489,
                    "Comment": "#ADDR:0x34F9#: x, (1/0) Logical value of x."
                },
                {
                    "Address": 490,
                    "ByteSize": 2,
                    "Comment": "#ADDR:0x368F# to #ADDR:0x2DF8#: x Hereafter x'=ABS x.",
                    "DataType": 1
                },
                {
                    "Address": 492,
                    "Comment": "#ADDR:0x33A1#: -"
                },
                {
                    "Address": 493,
                    "Comment": "#ADDR:0x369B#: -"
                },
                {
                    "Address": 498,
                    "Comment": "#ADDR:0x346A#: x' x'=ABS x."
                },
                {
                    "Address": 499,
                    "Comment": "#ADDR:0x369B#: x'"
                },
                {
                    "Address": 504,
                    "Comment": "{#ADDR:0x341B#(stk_zero): The 15 bytes of mem-3, mem-4 and"
                },
                {
                    "Address": 505,
                    "ByteSize": 3,
                    "Comment": "mem-5 are now initialised to zero to be used for a\nprint buffer and two counters.}",
                    "DataType": 1
                },
                {
                    "Address": 508,
                    "Comment": "#ADDR:0x33A1#: The stack is cleared, except for x'."
                },
                {
                    "Address": 509,
                    "Comment": "#ADDR:0x369B#: x'"
                },
                {
                    "Address": 514,
                    "Comment": "#ADDR:0x33C0#: x', x'"
                },
                {
                    "Address": 515,
                    "Comment": "#ADDR:0x36AF#: x', INT (x')=i"
                },
                {
                    "Address": 516,
                    "Comment": "#ADDR:0x342D#(st_mem_2): (i is stored in mem-2)."
                },
                {
                    "Address": 517,
                    "Comment": "#ADDR:0x300F#: x'-i=f"
                },
                {
                    "Address": 518,
                    "Comment": "#ADDR:0x340F#(get_mem_2): f, i"
                },
                {
                    "Address": 519,
                    "Comment": "#ADDR:0x343C#: i, f"
                },
                {
                    "Address": 520,
                    "Comment": "#ADDR:0x342D#(st_mem_2): (f is stored in mem-2)."
                },
                {
                    "Address": 521,
                    "Comment": "#ADDR:0x33A1#: i"
                },
                {
                    "Address": 522,
                    "Comment": "#ADDR:0x369B#: i"
                },
                {
                    "Address": 549,
                    "Comment": "#ADDR:0x340F#(get_mem_2): i, f"
                },
                {
                    "Address": 550,
                    "Comment": "#ADDR:0x369B#: i, f"
                },
                {
                    "Address": 570,
                    "Comment": "#ADDR:0x33C0#: i, y, y"
                },
                {
                    "Address": 571,
                    "Comment": "#ADDR:0x36AF#: i, y, INT (y)=i2"
                },
                {
                    "Address": 572,
                    "Comment": "#ADDR:0x342D#(st_mem_1): (i2 is copied to mem-1)."
                },
                {
                    "Address": 573,
                    "Comment": "#ADDR:0x300F#: i, y-i2"
                },
                {
                    "Address": 574,
                    "Comment": "#ADDR:0x340F#(get_mem_1): i, y-i2, i2"
                },
                {
                    "Address": 575,
                    "Comment": "#ADDR:0x369B#: i, f2, i2 (f2=y-i2)"
                },
                {
                    "Address": 716,
                    "Comment": "#ADDR:0x33A1#: - (i is now deleted)."
                },
                {
                    "Address": 717,
                    "Comment": "#ADDR:0x340F#(get_mem_2): f"
                },
                {
                    "Address": 718,
                    "Comment": "#ADDR:0x369B#: f"
                },
                {
                    "Address": 817,
                    "Comment": "#ADDR:0x33A1#: -"
                },
                {
                    "Address": 818,
                    "Comment": "#ADDR:0x369B#: -"
                }
            ],
            "LabelInfo": [
                {
                    "Address": 2,
                    "LabelType": 2,
                    "Name": "DIM"
                },
                {
                    "Address": 5,
                    "LabelType": 2,
                    "Name": "D_RPORT_C"
                },
                {
                    "Address": 21,
                    "LabelType": 2,
                    "Name": "D_RUN"
                },
                {
                    "Address": 31,
                    "LabelType": 2,
                    "Name": "D_LETTER"
                },
                {
                    "Address": 45,
                    "LabelType": 2,
                    "Name": "D_SIZE"
                },
                {
                    "Address": 46,
                    "LabelType": 2,
                    "Name": "D_NO_LOOP"
                },
                {
                    "Address": 124,
                    "LabelType": 2,
                    "Name": "DIM_CLEAR"
                },
                {
                    "Address": 127,
                    "LabelType": 2,
                    "Name": "DIM_SIZES"
                },
                {
                    "Address": 136,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "ALPHANUM"
                },
                {
                    "Address": 141,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "ALPHA"
                },
                {
                    "Address": 155,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "DEC_TO_FP"
                },
                {
                    "Address": 162,
                    "LabelType": 2,
                    "Name": "BIN_DIGIT"
                },
                {
                    "Address": 179,
                    "LabelType": 2,
                    "Name": "BIN_END"
                },
                {
                    "Address": 184,
                    "LabelType": 2,
                    "Name": "NOT_BIN"
                },
                {
                    "Address": 203,
                    "LabelType": 2,
                    "Name": "DECIMAL"
                },
                {
                    "Address": 207,
                    "LabelType": 2,
                    "Name": "DEC_RPT_C"
                },
                {
                    "Address": 213,
                    "LabelType": 2,
                    "Name": "DEC_STO_1"
                },
                {
                    "Address": 218,
                    "LabelType": 2,
                    "Name": "NXT_DGT_1"
                },
                {
                    "Address": 235,
                    "LabelType": 2,
                    "Name": "E_FORMAT"
                },
                {
                    "Address": 242,
                    "LabelType": 2,
                    "Name": "SIGN_FLAG"
                },
                {
                    "Address": 254,
                    "LabelType": 2,
                    "Name": "SIGN_DONE"
                },
                {
                    "Address": 255,
                    "LabelType": 2,
                    "Name": "ST_E_PART"
                },
                {
                    "Address": 280,
                    "LabelType": 2,
                    "Name": "E_FP_JUMP"
                },
                {
                    "Address": 283,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "NUMERIC"
                },
                {
                    "Address": 290,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "STK_DIGIT"
                },
                {
                    "Address": 296,
                    "LabelType": 2,
                    "Name": "STACK_A"
                },
                {
                    "Address": 299,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "STACK_BC"
                },
                {
                    "Address": 315,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "INT_TO_FP"
                },
                {
                    "Address": 320,
                    "LabelType": 2,
                    "Name": "NXT_DGT_2"
                },
                {
                    "Address": 335,
                    "LabelType": 2,
                    "Name": "e_to_fp"
                },
                {
                    "Address": 341,
                    "LabelType": 2,
                    "Name": "E_SAVE"
                },
                {
                    "Address": 352,
                    "LabelType": 2,
                    "Name": "E_LOOP"
                },
                {
                    "Address": 365,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "E_DIVSN"
                },
                {
                    "Address": 366,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "E_FETCH"
                },
                {
                    "Address": 369,
                    "LabelType": 2,
                    "Name": "E_TST_END"
                },
                {
                    "Address": 379,
                    "LabelType": 2,
                    "Name": "E_END"
                },
                {
                    "Address": 383,
                    "LabelType": 2,
                    "Name": "INT_FETCH"
                },
                {
                    "Address": 396,
                    "LabelType": 2,
                    "Name": "P_INT_STO"
                },
                {
                    "Address": 398,
                    "LabelType": 2,
                    "Name": "INT_STORE"
                },
                {
                    "Address": 418,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "FP_TO_BC"
                },
                {
                    "Address": 429,
                    "LabelType": 2,
                    "Name": "FP_DELETE"
                },
                {
                    "Address": 449,
                    "LabelType": 2,
                    "Name": "LOG_2_A"
                },
                {
                    "Address": 469,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "FP_TO_A"
                },
                {
                    "Address": 481,
                    "LabelType": 2,
                    "Name": "FP_A_END"
                },
                {
                    "Address": 483,
                    "LabelType": 2,
                    "Name": "PRINT_FP"
                },
                {
                    "Address": 498,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "PF_NEGTVE"
                },
                {
                    "Address": 504,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "PF_POSTVE"
                },
                {
                    "Address": 513,
                    "LabelType": 2,
                    "Name": "PF_LOOP"
                },
                {
                    "Address": 542,
                    "LabelType": 2,
                    "Name": "PF_SAVE"
                },
                {
                    "Address": 548,
                    "LabelType": 2,
                    "Name": "PF_SMALL"
                },
                {
                    "Address": 598,
                    "LabelType": 2,
                    "Name": "PF_LARGE"
                },
                {
                    "Address": 623,
                    "LabelType": 2,
                    "Name": "PF_MEDIUM"
                },
                {
                    "Address": 635,
                    "LabelType": 2,
                    "Name": "PF_BITS"
                },
                {
                    "Address": 650,
                    "LabelType": 2,
                    "Name": "PF_BYTES"
                },
                {
                    "Address": 673,
                    "LabelType": 2,
                    "Name": "PF_DIGITS"
                },
                {
                    "Address": 681,
                    "LabelType": 2,
                    "Name": "PF_INSERT"
                },
                {
                    "Address": 691,
                    "LabelType": 2,
                    "Name": "PF_TEST_2"
                },
                {
                    "Address": 696,
                    "LabelType": 2,
                    "Name": "PF_ALL_9"
                },
                {
                    "Address": 715,
                    "LabelType": 2,
                    "Name": "PF_MORE"
                },
                {
                    "Address": 719,
                    "LabelType": 2,
                    "Name": "PF_FRACTN"
                },
                {
                    "Address": 735,
                    "LabelType": 2,
                    "Name": "PF_FRN_LP"
                },
                {
                    "Address": 748,
                    "LabelType": 2,
                    "Name": "PF_FR_DGT"
                },
                {
                    "Address": 751,
                    "LabelType": 2,
                    "Name": "PF_FR_EXX"
                },
                {
                    "Address": 780,
                    "LabelType": 2,
                    "Name": "PF_ROUND"
                },
                {
                    "Address": 792,
                    "LabelType": 2,
                    "Name": "PF_RND_LP"
                },
                {
                    "Address": 805,
                    "LabelType": 2,
                    "Name": "PF_R_BACK"
                },
                {
                    "Address": 813,
                    "LabelType": 2,
                    "Name": "PF_COUNT"
                },
                {
                    "Address": 838,
                    "LabelType": 2,
                    "Name": "PF_NOT_E"
                },
                {
                    "Address": 842,
                    "LabelType": 2,
                    "Name": "PF_E_SBRN"
                },
                {
                    "Address": 850,
                    "LabelType": 2,
                    "Name": "PF_OUT_LP"
                },
                {
                    "Address": 857,
                    "LabelType": 2,
                    "Name": "PF_OUT_DT"
                },
                {
                    "Address": 862,
                    "LabelType": 2,
                    "Name": "PF_DC_OUT"
                },
                {
                    "Address": 868,
                    "LabelType": 2,
                    "Name": "PF_DEC_0S"
                },
                {
                    "Address": 876,
                    "LabelType": 2,
                    "Name": "PF_E_FRMT"
                },
                {
                    "Address": 899,
                    "LabelType": 2,
                    "Name": "PF_E_POS"
                },
                {
                    "Address": 901,
                    "LabelType": 2,
                    "Name": "PF_E_SIGN"
                },
                {
                    "Address": 907,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "CA_10A_C"
                },
                {
                    "Address": 923,
                    "LabelType": 2,
                    "Name": "PREP_ADD"
                },
                {
                    "Address": 943,
                    "LabelType": 2,
                    "Name": "NEG_BYTE"
                },
                {
                    "Address": 954,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "FETCH_TWO"
                },
                {
                    "Address": 989,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "SHIFT_FP"
                },
                {
                    "Address": 997,
                    "LabelType": 2,
                    "Name": "ONE_SHIFT"
                },
                {
                    "Address": 1017,
                    "LabelType": 2,
                    "Name": "ADDEND_0"
                },
                {
                    "Address": 1019,
                    "LabelType": 2,
                    "Name": "ZEROS_4_5"
                }
            ],
            "PageId": 11
        },
        {
            "CodeInfo": [
                {
                    "Address": 0,
                    "ByteSize": 3,
                    "Comment": "called for near underflow by #ADDR:0x30CA#.}"
                },
                {
                    "Address": 3,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 4,
                    "ByteSize": 1,
                    "Comment": "Add carry to rightmost byte."
                },
                {
                    "Address": 5,
                    "ByteSize": 1,
                    "Comment": "Return if no overflow to left."
                },
                {
                    "Address": 6,
                    "ByteSize": 1,
                    "Comment": "Continue to the next byte."
                },
                {
                    "Address": 7,
                    "ByteSize": 1,
                    "Comment": "Return if no overflow to left."
                },
                {
                    "Address": 8,
                    "ByteSize": 1,
                    "Comment": "Get the next byte."
                },
                {
                    "Address": 9,
                    "ByteSize": 1,
                    "Comment": "Increment it too."
                },
                {
                    "Address": 10,
                    "ByteSize": 2,
                    "Comment": "Jump if no overflow.",
                    "OperandType": 2
                },
                {
                    "Address": 12,
                    "ByteSize": 1,
                    "Comment": "Increment the last byte."
                },
                {
                    "Address": 13,
                    "ByteSize": 1,
                    "Comment": "Restore the original registers."
                },
                {
                    "Address": 14,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 15,
                    "ByteSize": 1,
                    "Comment": "Exchange the pointers."
                },
                {
                    "Address": 16,
                    "ByteSize": 3,
                    "Comment": "Change the sign of the subtrahend.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 19,
                    "ByteSize": 1,
                    "Comment": "Exchange the pointers back and continue into #ADDR:0x3014#."
                },
                {
                    "Address": 20,
                    "ByteSize": 1,
                    "Comment": "{Test whether the first bytes of both numbers are zero."
                },
                {
                    "Address": 21,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 22,
                    "ByteSize": 2,
                    "Comment": "If not, jump for full addition.",
                    "OperandType": 2
                },
                {
                    "Address": 24,
                    "ByteSize": 1,
                    "Comment": "Save the pointer to the second number."
                },
                {
                    "Address": 25,
                    "ByteSize": 1,
                    "Comment": "{Point to the second byte of the first number and save"
                },
                {
                    "Address": 26,
                    "ByteSize": 1,
                    "Comment": "that pointer too.}"
                },
                {
                    "Address": 27,
                    "ByteSize": 1,
                    "Comment": "Point to the less significant byte."
                },
                {
                    "Address": 28,
                    "ByteSize": 1,
                    "Comment": "Fetch it in #REG:E#."
                },
                {
                    "Address": 29,
                    "ByteSize": 1,
                    "Comment": "Point to the more significant byte."
                },
                {
                    "Address": 30,
                    "ByteSize": 1,
                    "Comment": "Fetch it in #REG:D#."
                },
                {
                    "Address": 31,
                    "ByteSize": 1,
                    "Comment": "{Move on to the second byte of the second number."
                },
                {
                    "Address": 32,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 33,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 34,
                    "ByteSize": 1,
                    "Comment": "Fetch it in #REG:A# (this is the sign byte)."
                },
                {
                    "Address": 35,
                    "ByteSize": 1,
                    "Comment": "Point to the less significant byte."
                },
                {
                    "Address": 36,
                    "ByteSize": 1,
                    "Comment": "Fetch it in #REG:C#."
                },
                {
                    "Address": 37,
                    "ByteSize": 1,
                    "Comment": "Point to the more significant byte."
                },
                {
                    "Address": 38,
                    "ByteSize": 1,
                    "Comment": "Fetch it in #REG:B#."
                },
                {
                    "Address": 39,
                    "ByteSize": 1,
                    "Comment": "{Fetch the pointer to the sign byte of the first number;"
                },
                {
                    "Address": 40,
                    "ByteSize": 1,
                    "Comment": "put it in #REG:DE#, and the number in #REG:HL#.}"
                },
                {
                    "Address": 41,
                    "ByteSize": 1,
                    "Comment": "Perform the addition: result in #REG:HL#."
                },
                {
                    "Address": 42,
                    "ByteSize": 1,
                    "Comment": "Result to #REG:DE#, sign byte to #REG:HL#."
                },
                {
                    "Address": 43,
                    "ByteSize": 1,
                    "Comment": "{Add the sign bytes and the carry into #REG:A#; this will"
                },
                {
                    "Address": 44,
                    "ByteSize": 1,
                    "Comment": "detect any overflow.}"
                },
                {
                    "Address": 45,
                    "ByteSize": 2,
                    "Comment": "A non-zero #REG:A# now indicates overflow."
                },
                {
                    "Address": 47,
                    "ByteSize": 2,
                    "Comment": "Jump to reset the pointers and to do full addition.",
                    "OperandType": 2
                },
                {
                    "Address": 49,
                    "ByteSize": 1,
                    "Comment": "Define the correct sign byte for the result."
                },
                {
                    "Address": 50,
                    "ByteSize": 1,
                    "Comment": "Store it on the stack."
                },
                {
                    "Address": 51,
                    "ByteSize": 1,
                    "Comment": "Point to the next location."
                },
                {
                    "Address": 52,
                    "ByteSize": 1,
                    "Comment": "Store the low byte of the result."
                },
                {
                    "Address": 53,
                    "ByteSize": 1,
                    "Comment": "Point to the next location."
                },
                {
                    "Address": 54,
                    "ByteSize": 1,
                    "Comment": "Store the high byte of the result."
                },
                {
                    "Address": 55,
                    "ByteSize": 1,
                    "Comment": "{Move the pointer back to address the first byte of the"
                },
                {
                    "Address": 56,
                    "ByteSize": 1,
                    "Comment": "result."
                },
                {
                    "Address": 57,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 58,
                    "ByteSize": 1,
                    "Comment": "Restore \\#SYSVAR(STKEND) to #REG:DE#."
                },
                {
                    "Address": 59,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 60,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer to the first number."
                },
                {
                    "Address": 61,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer to the second number."
                },
                {
                    "Address": 62,
                    "ByteSize": 3,
                    "Comment": "Re-stack both numbers in full five-byte floating-point\nform.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 65,
                    "ByteSize": 1,
                    "Comment": "Exchange the registers."
                },
                {
                    "Address": 66,
                    "ByteSize": 1,
                    "Comment": "Save the next literal address."
                },
                {
                    "Address": 67,
                    "ByteSize": 1,
                    "Comment": "Exchange the registers."
                },
                {
                    "Address": 68,
                    "ByteSize": 1,
                    "Comment": "Save pointer to the addend."
                },
                {
                    "Address": 69,
                    "ByteSize": 1,
                    "Comment": "Save pointer to the augend."
                },
                {
                    "Address": 70,
                    "ByteSize": 3,
                    "Comment": "Prepare the augend.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 73,
                    "ByteSize": 1,
                    "Comment": "Save its exponent in #REG:B#."
                },
                {
                    "Address": 74,
                    "ByteSize": 1,
                    "Comment": "Exchange the pointers."
                },
                {
                    "Address": 75,
                    "ByteSize": 3,
                    "Comment": "Prepare the addend.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 78,
                    "ByteSize": 1,
                    "Comment": "Save its exponent in #REG:C#."
                },
                {
                    "Address": 79,
                    "ByteSize": 1,
                    "Comment": "{If the first exponent is smaller, keep the first number"
                },
                {
                    "Address": 80,
                    "ByteSize": 2,
                    "Comment": "in the addend position; otherwise change the exponents",
                    "OperandType": 2
                },
                {
                    "Address": 82,
                    "ByteSize": 1,
                    "Comment": "and the pointers back again."
                },
                {
                    "Address": 83,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 84,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 85,
                    "ByteSize": 1,
                    "Comment": "Save the larger exponent in #REG:A#."
                },
                {
                    "Address": 86,
                    "ByteSize": 1,
                    "Comment": "The difference between the exponents is the length of\nthe shift right."
                },
                {
                    "Address": 87,
                    "ByteSize": 3,
                    "Comment": "Get the two numbers from the stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 90,
                    "ByteSize": 3,
                    "Comment": "Shift the addend right.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 93,
                    "ByteSize": 1,
                    "Comment": "Restore the larger exponent."
                },
                {
                    "Address": 94,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# is to point to the result."
                },
                {
                    "Address": 95,
                    "ByteSize": 1,
                    "Comment": "Store the exponent of the result."
                },
                {
                    "Address": 96,
                    "ByteSize": 1,
                    "Comment": "Save the pointer again."
                },
                {
                    "Address": 97,
                    "ByteSize": 1,
                    "Comment": "{M4 to #REG:H# and M5 to #REG:L# (see #ADDR:0x2FBA#)."
                },
                {
                    "Address": 98,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 99,
                    "ByteSize": 1,
                    "Comment": "Add the two right bytes."
                },
                {
                    "Address": 100,
                    "ByteSize": 1,
                    "Comment": "{N2 to \\#REGh' and N3 to \\#REGl' (see #ADDR:0x2FBA#)."
                },
                {
                    "Address": 101,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 102,
                    "ByteSize": 2,
                    "Comment": "Add left bytes with carry."
                },
                {
                    "Address": 104,
                    "ByteSize": 1,
                    "Comment": "Result back in \\#REG(d'e')."
                },
                {
                    "Address": 105,
                    "ByteSize": 1,
                    "Comment": "{Add \\#REGh', \\#REGl' and the carry; the resulting"
                },
                {
                    "Address": 106,
                    "ByteSize": 1,
                    "Comment": "mechanisms will ensure that a single shift right is"
                },
                {
                    "Address": 107,
                    "ByteSize": 1,
                    "Comment": "called if the sum of 2 positive numbers has overflowed"
                },
                {
                    "Address": 108,
                    "ByteSize": 1,
                    "Comment": "left, or the sum of 2 negative numbers has not"
                },
                {
                    "Address": 109,
                    "ByteSize": 1,
                    "Comment": "overflowed left."
                },
                {
                    "Address": 110,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 111,
                    "ByteSize": 1,
                    "Comment": "The result is now in \\#REG(ded'e')."
                },
                {
                    "Address": 112,
                    "ByteSize": 1,
                    "Comment": "Get the pointer to the exponent."
                },
                {
                    "Address": 113,
                    "ByteSize": 1,
                    "Comment": "{The test for shift (\\#REGh', \\#REGl' were &00 for"
                },
                {
                    "Address": 114,
                    "ByteSize": 2,
                    "Comment": "positive numbers and &FF for negative numbers).}",
                    "OperandType": 2
                },
                {
                    "Address": 116,
                    "ByteSize": 2,
                    "Comment": "#REG:A# counts a single shift right."
                },
                {
                    "Address": 118,
                    "ByteSize": 3,
                    "Comment": "The shift is called.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 121,
                    "ByteSize": 1,
                    "Comment": "{Add 1 to the exponent; this may lead to arithmetic"
                },
                {
                    "Address": 122,
                    "ByteSize": 2,
                    "Comment": "overflow.}",
                    "OperandType": 2
                },
                {
                    "Address": 124,
                    "ByteSize": 1,
                    "Comment": "{Test for negative result: get sign bit of \\#REGl' into"
                },
                {
                    "Address": 125,
                    "ByteSize": 1,
                    "Comment": "#REG:A# (this now correctly indicates the sign of the"
                },
                {
                    "Address": 126,
                    "ByteSize": 2,
                    "Comment": "result)."
                },
                {
                    "Address": 128,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 129,
                    "ByteSize": 1,
                    "Comment": "{Store it in the second byte position of the result on"
                },
                {
                    "Address": 130,
                    "ByteSize": 1,
                    "Comment": "the calculator stack."
                },
                {
                    "Address": 131,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 132,
                    "ByteSize": 2,
                    "Comment": "If it is zero, then do not two's complement the result.",
                    "OperandType": 2
                },
                {
                    "Address": 134,
                    "ByteSize": 1,
                    "Comment": "Get the first byte."
                },
                {
                    "Address": 135,
                    "ByteSize": 2,
                    "Comment": "Negate it."
                },
                {
                    "Address": 137,
                    "ByteSize": 1,
                    "Comment": "{Complement the carry for continued negation, and store"
                },
                {
                    "Address": 138,
                    "ByteSize": 1,
                    "Comment": "byte.}"
                },
                {
                    "Address": 139,
                    "ByteSize": 1,
                    "Comment": "Get the next byte."
                },
                {
                    "Address": 140,
                    "ByteSize": 1,
                    "Comment": "One's complement it."
                },
                {
                    "Address": 141,
                    "ByteSize": 2,
                    "Comment": "Add in the carry for negation."
                },
                {
                    "Address": 143,
                    "ByteSize": 1,
                    "Comment": "Store the byte."
                },
                {
                    "Address": 144,
                    "ByteSize": 1,
                    "Comment": "{Proceed to get next byte into the #REG:A# register."
                },
                {
                    "Address": 145,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 146,
                    "ByteSize": 1,
                    "Comment": "One's complement it."
                },
                {
                    "Address": 147,
                    "ByteSize": 2,
                    "Comment": "Add in the carry for negation."
                },
                {
                    "Address": 149,
                    "ByteSize": 1,
                    "Comment": "Store the byte."
                },
                {
                    "Address": 150,
                    "ByteSize": 1,
                    "Comment": "Get the last byte."
                },
                {
                    "Address": 151,
                    "ByteSize": 1,
                    "Comment": "One's complement it."
                },
                {
                    "Address": 152,
                    "ByteSize": 2,
                    "Comment": "Add in the carry for negation."
                },
                {
                    "Address": 154,
                    "ByteSize": 2,
                    "Comment": "Done if no carry.",
                    "OperandType": 2
                },
                {
                    "Address": 156,
                    "ByteSize": 1,
                    "Comment": "{Else, get .5 into mantissa and add 1 to the exponent;"
                },
                {
                    "Address": 157,
                    "ByteSize": 1,
                    "Comment": "this will be needed when two negative numbers add to"
                },
                {
                    "Address": 158,
                    "ByteSize": 1,
                    "Comment": "give an exact power of 2, and it may lead to arithmetic\noverflow.}"
                },
                {
                    "Address": 159,
                    "ByteSize": 3,
                    "Comment": "{Give the error if required.",
                    "OperandType": 2
                },
                {
                    "Address": 162,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 163,
                    "ByteSize": 1,
                    "Comment": "{Store the last byte."
                },
                {
                    "Address": 164,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 165,
                    "ByteSize": 1,
                    "Comment": "Clear #REG:A# and the carry flag."
                },
                {
                    "Address": 166,
                    "ByteSize": 3,
                    "Comment": "Exit via #ADDR:0x3155#.",
                    "OperandType": 2
                },
                {
                    "Address": 169,
                    "ByteSize": 1,
                    "Comment": "#REG:BC# is saved."
                },
                {
                    "Address": 170,
                    "ByteSize": 2,
                    "Comment": "It is to be a 16-bit multiplication."
                },
                {
                    "Address": 172,
                    "ByteSize": 1,
                    "Comment": "#REG:A# holds the high byte."
                },
                {
                    "Address": 173,
                    "ByteSize": 1,
                    "Comment": "#REG:C# holds the low byte."
                },
                {
                    "Address": 174,
                    "ByteSize": 3,
                    "Comment": "Initialise the result to zero."
                },
                {
                    "Address": 177,
                    "ByteSize": 1,
                    "Comment": "Double the result."
                },
                {
                    "Address": 178,
                    "ByteSize": 2,
                    "Comment": "Jump if overflow.",
                    "OperandType": 2
                },
                {
                    "Address": 180,
                    "ByteSize": 2,
                    "Comment": "Rotate bit 7 of #REG:C# into the carry."
                },
                {
                    "Address": 182,
                    "ByteSize": 1,
                    "Comment": "Rotate the carry bit into bit 0 and bit 7 into the carry\nflag."
                },
                {
                    "Address": 183,
                    "ByteSize": 2,
                    "Comment": "Jump if the carry flag is reset.",
                    "OperandType": 2
                },
                {
                    "Address": 185,
                    "ByteSize": 1,
                    "Comment": "Otherwise add #REG:DE# in once."
                },
                {
                    "Address": 186,
                    "ByteSize": 2,
                    "Comment": "Jump if overflow.",
                    "OperandType": 2
                },
                {
                    "Address": 188,
                    "ByteSize": 2,
                    "Comment": "Repeat until 16 passes have been made.",
                    "OperandType": 2
                },
                {
                    "Address": 190,
                    "ByteSize": 1,
                    "Comment": "Restore #REG:BC#."
                },
                {
                    "Address": 191,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 192,
                    "ByteSize": 3,
                    "Comment": "{If the number is zero, return with the carry flag set.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 195,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 196,
                    "ByteSize": 1,
                    "Comment": "Point to the sign byte."
                },
                {
                    "Address": 197,
                    "ByteSize": 1,
                    "Comment": "Get sign for result into #REG:A# (like signs give plus,\nunlike give minus); also reset the carry flag."
                },
                {
                    "Address": 198,
                    "ByteSize": 2,
                    "Comment": "Set the true numeric bit."
                },
                {
                    "Address": 200,
                    "ByteSize": 1,
                    "Comment": "Point to the exponent again."
                },
                {
                    "Address": 201,
                    "ByteSize": 1,
                    "Comment": "Return with carry flag reset."
                },
                {
                    "Address": 202,
                    "ByteSize": 1,
                    "Comment": "{Test whether the first bytes of both numbers are zero."
                },
                {
                    "Address": 203,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 204,
                    "ByteSize": 2,
                    "Comment": "If not, jump for 'long' multiplication.",
                    "OperandType": 2
                },
                {
                    "Address": 206,
                    "ByteSize": 1,
                    "Comment": "Save the pointers to the second number."
                },
                {
                    "Address": 207,
                    "ByteSize": 1,
                    "Comment": "And to the first number."
                },
                {
                    "Address": 208,
                    "ByteSize": 1,
                    "Comment": "And to the second number yet again."
                },
                {
                    "Address": 209,
                    "ByteSize": 3,
                    "Comment": "Fetch sign in #REG:C#, number in #REG:DE#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 212,
                    "ByteSize": 1,
                    "Comment": "Number to #REG:HL# now."
                },
                {
                    "Address": 213,
                    "ByteSize": 1,
                    "Comment": "Number to stack, second pointer to #REG:HL#."
                },
                {
                    "Address": 214,
                    "ByteSize": 1,
                    "Comment": "Save first sign in #REG:B#."
                },
                {
                    "Address": 215,
                    "ByteSize": 3,
                    "Comment": "Fetch second sign in #REG:C#, number in #REG:DE#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 218,
                    "ByteSize": 1,
                    "Comment": "{Form sign of result in #REG:A#: like signs give plus"
                },
                {
                    "Address": 219,
                    "ByteSize": 1,
                    "Comment": "(&00), unlike give minus (&FF).}"
                },
                {
                    "Address": 220,
                    "ByteSize": 1,
                    "Comment": "Store sign of result in #REG:C#."
                },
                {
                    "Address": 221,
                    "ByteSize": 1,
                    "Comment": "Restore the first number to #REG:HL#."
                },
                {
                    "Address": 222,
                    "ByteSize": 3,
                    "Comment": "Perform the actual multiplication.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 225,
                    "ByteSize": 1,
                    "Comment": "Store the result in #REG:DE#."
                },
                {
                    "Address": 226,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer to the first number."
                },
                {
                    "Address": 227,
                    "ByteSize": 2,
                    "Comment": "Jump on overflow to 'full' multiplication.",
                    "OperandType": 2
                },
                {
                    "Address": 229,
                    "ByteSize": 1,
                    "Comment": "{These 5 bytes ensure that 00 \\#S/FF/ 00 00 00 is"
                },
                {
                    "Address": 230,
                    "ByteSize": 1,
                    "Comment": "replaced by zero; that they should not be needed if this"
                },
                {
                    "Address": 231,
                    "ByteSize": 2,
                    "Comment": "number were excluded from the system is noted at",
                    "OperandType": 2
                },
                {
                    "Address": 233,
                    "ByteSize": 1,
                    "Comment": "#ADDR:0x303C#.}"
                },
                {
                    "Address": 234,
                    "ByteSize": 3,
                    "Comment": "Now store the result on the stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 237,
                    "ByteSize": 1,
                    "Comment": "Restore \\#SYSVAR(STKEND) to #REG:DE#."
                },
                {
                    "Address": 238,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 239,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer to the second number."
                },
                {
                    "Address": 240,
                    "ByteSize": 3,
                    "Comment": "Re-stack both numbers in full five byte floating-point\nform.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 243,
                    "ByteSize": 1,
                    "Comment": "#REG:A# is set to zero so that the sign of the first\nnumber will go into #REG:A#."
                },
                {
                    "Address": 244,
                    "ByteSize": 3,
                    "Comment": "{Prepare the first number, and return if zero. (Result",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 247,
                    "ByteSize": 1,
                    "Comment": "already zero.)}"
                },
                {
                    "Address": 248,
                    "ByteSize": 1,
                    "Comment": "Exchange the registers."
                },
                {
                    "Address": 249,
                    "ByteSize": 1,
                    "Comment": "Save the next literal address."
                },
                {
                    "Address": 250,
                    "ByteSize": 1,
                    "Comment": "Exchange the registers."
                },
                {
                    "Address": 251,
                    "ByteSize": 1,
                    "Comment": "Save the pointer to the multiplicand."
                },
                {
                    "Address": 252,
                    "ByteSize": 1,
                    "Comment": "Exchange the pointers."
                },
                {
                    "Address": 253,
                    "ByteSize": 3,
                    "Comment": "Prepare the 2nd number.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 256,
                    "ByteSize": 1,
                    "Comment": "Exchange the pointers again."
                },
                {
                    "Address": 257,
                    "ByteSize": 2,
                    "Comment": "Jump forward if 2nd number is zero.",
                    "OperandType": 2
                },
                {
                    "Address": 259,
                    "ByteSize": 1,
                    "Comment": "Save the pointer to the result."
                },
                {
                    "Address": 260,
                    "ByteSize": 3,
                    "Comment": "Get the two numbers from the stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 263,
                    "ByteSize": 1,
                    "Comment": "M5 to #REG:A# (see #ADDR:0x2FBA#)."
                },
                {
                    "Address": 264,
                    "ByteSize": 1,
                    "Comment": "Prepare for a subtraction."
                },
                {
                    "Address": 265,
                    "ByteSize": 2,
                    "Comment": "Initialise #REG:HL# to zero for the result."
                },
                {
                    "Address": 267,
                    "ByteSize": 1,
                    "Comment": "Exchange the registers."
                },
                {
                    "Address": 268,
                    "ByteSize": 1,
                    "Comment": "Save M1 and N1 (see #ADDR:0x2FBA#)."
                },
                {
                    "Address": 269,
                    "ByteSize": 2,
                    "Comment": "Also initialise \\#REGhl' for the result."
                },
                {
                    "Address": 271,
                    "ByteSize": 1,
                    "Comment": "Exchange the registers."
                },
                {
                    "Address": 272,
                    "ByteSize": 2,
                    "Comment": "#REG:B# counts thirty three shifts."
                },
                {
                    "Address": 274,
                    "ByteSize": 2,
                    "Comment": "Jump forward into the loop.",
                    "OperandType": 2
                },
                {
                    "Address": 276,
                    "ByteSize": 2,
                    "Comment": "Jump forward to #ADDR:0x311B# if no carry, i.e. the multiplier\nbit was reset.",
                    "OperandType": 2
                },
                {
                    "Address": 278,
                    "ByteSize": 1,
                    "Comment": "{Else, add the multiplicand in \\#REG(d'e'de) (see"
                },
                {
                    "Address": 279,
                    "ByteSize": 1,
                    "Comment": "#ADDR:0x2FBA#) into the result being built up in \\#REG(h'l'hl)."
                },
                {
                    "Address": 280,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 282,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 283,
                    "ByteSize": 1,
                    "Comment": "{Whether multiplicand was added or not, shift result"
                },
                {
                    "Address": 284,
                    "ByteSize": 2,
                    "Comment": "right in \\#REG(h'l'hl); the shift is done by rotating"
                },
                {
                    "Address": 286,
                    "ByteSize": 2,
                    "Comment": "each byte with carry, so that any bit that drops into"
                },
                {
                    "Address": 288,
                    "ByteSize": 1,
                    "Comment": "the carry is picked up by the next byte, and the shift"
                },
                {
                    "Address": 289,
                    "ByteSize": 2,
                    "Comment": "continued into \\#REG(b'c'ca)."
                },
                {
                    "Address": 291,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 293,
                    "ByteSize": 1,
                    "Comment": "{Shift right the multiplier in \\#REG(b'c'ca) (see #ADDR:0x2FBA#"
                },
                {
                    "Address": 294,
                    "ByteSize": 2,
                    "Comment": "and above). A final bit dropping into the carry will"
                },
                {
                    "Address": 296,
                    "ByteSize": 2,
                    "Comment": "trigger another add of the multiplicand to the result."
                },
                {
                    "Address": 298,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 299,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 301,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 302,
                    "ByteSize": 2,
                    "Comment": "Loop 33 times to get all the bits.",
                    "OperandType": 2
                },
                {
                    "Address": 304,
                    "ByteSize": 1,
                    "Comment": "{Move the result from \\#REG(h'l'hl) to \\#REG(d'e'de)."
                },
                {
                    "Address": 305,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 306,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 307,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 308,
                    "ByteSize": 1,
                    "Comment": "Restore the exponents - M1 and N1."
                },
                {
                    "Address": 309,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer to the exponent byte."
                },
                {
                    "Address": 310,
                    "ByteSize": 1,
                    "Comment": "{Get the sum of the two exponent bytes in #REG:A#, and the"
                },
                {
                    "Address": 311,
                    "ByteSize": 1,
                    "Comment": "correct carry.}"
                },
                {
                    "Address": 312,
                    "ByteSize": 2,
                    "Comment": "{If the sum equals zero then clear the carry; else leave",
                    "OperandType": 2
                },
                {
                    "Address": 314,
                    "ByteSize": 1,
                    "Comment": "it unchanged.}"
                },
                {
                    "Address": 315,
                    "ByteSize": 1,
                    "Comment": "{Prepare to increase the exponent by &80."
                },
                {
                    "Address": 316,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 317,
                    "ByteSize": 1,
                    "Comment": "{These few bytes very cleverly make the correct exponent"
                },
                {
                    "Address": 318,
                    "ByteSize": 1,
                    "Comment": "byte. Rotating left then right gets the exponent byte"
                },
                {
                    "Address": 319,
                    "ByteSize": 1,
                    "Comment": "(true exponent plus &80) into #REG:A#.}"
                },
                {
                    "Address": 320,
                    "ByteSize": 3,
                    "Comment": "If the sign flag is reset, no report of arithmetic\noverflow needed.",
                    "OperandType": 2
                },
                {
                    "Address": 323,
                    "ByteSize": 2,
                    "Comment": "Report the overflow if carry reset.",
                    "OperandType": 2
                },
                {
                    "Address": 325,
                    "ByteSize": 1,
                    "Comment": "Clear the carry now."
                },
                {
                    "Address": 326,
                    "ByteSize": 1,
                    "Comment": "{The exponent byte is now complete; but if #REG:A# is zero"
                },
                {
                    "Address": 327,
                    "ByteSize": 2,
                    "Comment": "a further check for overflow is needed.",
                    "OperandType": 2
                },
                {
                    "Address": 329,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 331,
                    "ByteSize": 1,
                    "Comment": "{If there is no carry set and the result is already in"
                },
                {
                    "Address": 332,
                    "ByteSize": 2,
                    "Comment": "normal form (bit 7 of \\#REGd' set) then there is overflow"
                },
                {
                    "Address": 334,
                    "ByteSize": 1,
                    "Comment": "to report; but if bit 7 of \\#REGd' is reset, the result"
                },
                {
                    "Address": 335,
                    "ByteSize": 2,
                    "Comment": "in just in range, i.e. just under 2**127.}",
                    "OperandType": 2
                },
                {
                    "Address": 337,
                    "ByteSize": 1,
                    "Comment": "Store the exponent byte, at last."
                },
                {
                    "Address": 338,
                    "ByteSize": 1,
                    "Comment": "{Pass the fifth result byte to #REG:A# for the"
                },
                {
                    "Address": 339,
                    "ByteSize": 1,
                    "Comment": "normalisation sequence, i.e. the overflow from #REG:L#"
                },
                {
                    "Address": 340,
                    "ByteSize": 1,
                    "Comment": "into \\#REGb'.}"
                },
                {
                    "Address": 341,
                    "ByteSize": 2,
                    "Comment": "If no carry then normalise now.",
                    "OperandType": 2
                },
                {
                    "Address": 343,
                    "ByteSize": 1,
                    "Comment": "{Else, deal with underflow (zero result) or near"
                },
                {
                    "Address": 344,
                    "ByteSize": 1,
                    "Comment": "underflow (result 2**-128): return exponent to #REG:A#,"
                },
                {
                    "Address": 345,
                    "ByteSize": 2,
                    "Comment": "test if #REG:A# is zero (case 2**-128) and if so produce"
                },
                {
                    "Address": 347,
                    "ByteSize": 2,
                    "Comment": "2**-128 if number is normal; otherwise produce zero. The",
                    "OperandType": 2
                },
                {
                    "Address": 349,
                    "ByteSize": 1,
                    "Comment": "exponent must then be set to zero (for zero) or 1 (for"
                },
                {
                    "Address": 350,
                    "ByteSize": 1,
                    "Comment": "2**-128)."
                },
                {
                    "Address": 351,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 352,
                    "ByteSize": 3,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 355,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 356,
                    "ByteSize": 1,
                    "Comment": "Restore the exponent byte."
                },
                {
                    "Address": 357,
                    "ByteSize": 2,
                    "Comment": "Jump if case 2**-128.",
                    "OperandType": 2
                },
                {
                    "Address": 359,
                    "ByteSize": 1,
                    "Comment": "{Otherwise, put zero into second byte of result on the"
                },
                {
                    "Address": 360,
                    "ByteSize": 1,
                    "Comment": "calculator stack."
                },
                {
                    "Address": 361,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 362,
                    "ByteSize": 2,
                    "Comment": "Jump forward to transfer the result.",
                    "OperandType": 2
                },
                {
                    "Address": 364,
                    "ByteSize": 2,
                    "Comment": "{Normalise the result by up to 32 shifts left of"
                },
                {
                    "Address": 366,
                    "ByteSize": 1,
                    "Comment": "\\#REG(d'e'de) (with #REG:A# adjoined) until bit 7 of \\#REGd'"
                },
                {
                    "Address": 367,
                    "ByteSize": 2,
                    "Comment": "is set. #REG:A# holds zero after addition so no precision"
                },
                {
                    "Address": 369,
                    "ByteSize": 1,
                    "Comment": "is gained or lost; #REG:A# holds the fifth byte from"
                },
                {
                    "Address": 370,
                    "ByteSize": 2,
                    "Comment": "\\#REGb' after multiplication or division; but as only",
                    "OperandType": 2
                },
                {
                    "Address": 372,
                    "ByteSize": 1,
                    "Comment": "about 32 bits can be correct, no precision is lost. Note"
                },
                {
                    "Address": 373,
                    "ByteSize": 2,
                    "Comment": "that #REG:A# is rotated circularly, with branch at"
                },
                {
                    "Address": 375,
                    "ByteSize": 2,
                    "Comment": "carry...eventually a random process."
                },
                {
                    "Address": 377,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 378,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 380,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 382,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 383,
                    "ByteSize": 1,
                    "Comment": "The exponent is decremented on each shift."
                },
                {
                    "Address": 384,
                    "ByteSize": 2,
                    "Comment": "If the exponent becomes zero, then numbers from 2**-129\nare rounded up to 2**-128.",
                    "OperandType": 2
                },
                {
                    "Address": 386,
                    "ByteSize": 2,
                    "Comment": "Loop back, up to 32 times.",
                    "OperandType": 2
                },
                {
                    "Address": 388,
                    "ByteSize": 2,
                    "Comment": "If bit 7 never became 1 then the whole result is to be\nzero.",
                    "OperandType": 2
                },
                {
                    "Address": 390,
                    "ByteSize": 1,
                    "Comment": "{After normalisation add back any final carry that went"
                },
                {
                    "Address": 391,
                    "ByteSize": 2,
                    "Comment": "into #REG:A#. Jump forward if the carry does not ripple",
                    "OperandType": 2
                },
                {
                    "Address": 393,
                    "ByteSize": 3,
                    "Comment": "right back.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 396,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 398,
                    "ByteSize": 1,
                    "Comment": "{If it should ripple right back then set mantissa to 0.5"
                },
                {
                    "Address": 399,
                    "ByteSize": 2,
                    "Comment": "and increment the exponent. This action may lead to"
                },
                {
                    "Address": 401,
                    "ByteSize": 1,
                    "Comment": "arithmetic overflow (final case)."
                },
                {
                    "Address": 402,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 403,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 405,
                    "ByteSize": 1,
                    "Comment": "Save the result pointer."
                },
                {
                    "Address": 406,
                    "ByteSize": 1,
                    "Comment": "Point to the sign byte in the result."
                },
                {
                    "Address": 407,
                    "ByteSize": 1,
                    "Comment": "{The result is moved from \\#REG(d'e'de) to \\#REG(bcde),"
                },
                {
                    "Address": 408,
                    "ByteSize": 1,
                    "Comment": "and then to \\#REG(acde)."
                },
                {
                    "Address": 409,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 410,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 411,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 412,
                    "ByteSize": 1,
                    "Comment": "{The sign bit is retrieved from its temporary store and"
                },
                {
                    "Address": 413,
                    "ByteSize": 2,
                    "Comment": "transferred to its correct position of bit 7 of the"
                },
                {
                    "Address": 415,
                    "ByteSize": 1,
                    "Comment": "first byte of the mantissa.}"
                },
                {
                    "Address": 416,
                    "ByteSize": 1,
                    "Comment": "The first byte is stored."
                },
                {
                    "Address": 417,
                    "ByteSize": 1,
                    "Comment": "Next."
                },
                {
                    "Address": 418,
                    "ByteSize": 1,
                    "Comment": "The second byte is stored."
                },
                {
                    "Address": 419,
                    "ByteSize": 1,
                    "Comment": "Next."
                },
                {
                    "Address": 420,
                    "ByteSize": 1,
                    "Comment": "The third byte is stored."
                },
                {
                    "Address": 421,
                    "ByteSize": 1,
                    "Comment": "Next."
                },
                {
                    "Address": 422,
                    "ByteSize": 1,
                    "Comment": "The fourth byte is stored."
                },
                {
                    "Address": 423,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer to the result."
                },
                {
                    "Address": 424,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer to second number."
                },
                {
                    "Address": 425,
                    "ByteSize": 1,
                    "Comment": "Exchange the register."
                },
                {
                    "Address": 426,
                    "ByteSize": 1,
                    "Comment": "Restore the next literal address."
                },
                {
                    "Address": 427,
                    "ByteSize": 1,
                    "Comment": "Exchange the registers."
                },
                {
                    "Address": 428,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 429,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 431,
                    "ByteSize": 3,
                    "Comment": "Use full floating-point forms.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 434,
                    "ByteSize": 1,
                    "Comment": "Exchange the pointers."
                },
                {
                    "Address": 435,
                    "ByteSize": 1,
                    "Comment": "#REG:A# is set to 0, so that the sign of the first number\nwill go into #REG:A#."
                },
                {
                    "Address": 436,
                    "ByteSize": 3,
                    "Comment": "{Prepare the divisor and give the report for arithmetic",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 439,
                    "ByteSize": 2,
                    "Comment": "overflow if it is zero.}",
                    "OperandType": 2
                },
                {
                    "Address": 441,
                    "ByteSize": 1,
                    "Comment": "Exchange the pointers."
                },
                {
                    "Address": 442,
                    "ByteSize": 3,
                    "Comment": "{Prepare the dividend and return if it is zero (result",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 445,
                    "ByteSize": 1,
                    "Comment": "already zero).}"
                },
                {
                    "Address": 446,
                    "ByteSize": 1,
                    "Comment": "Exchange the pointers."
                },
                {
                    "Address": 447,
                    "ByteSize": 1,
                    "Comment": "Save the next literal address."
                },
                {
                    "Address": 448,
                    "ByteSize": 1,
                    "Comment": "Exchange the registers."
                },
                {
                    "Address": 449,
                    "ByteSize": 1,
                    "Comment": "Save pointer to divisor."
                },
                {
                    "Address": 450,
                    "ByteSize": 1,
                    "Comment": "Save pointer to dividend."
                },
                {
                    "Address": 451,
                    "ByteSize": 3,
                    "Comment": "Get the two numbers from the stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 454,
                    "ByteSize": 1,
                    "Comment": "Exchange the registers."
                },
                {
                    "Address": 455,
                    "ByteSize": 1,
                    "Comment": "Save M1 and N1 (the exponent bytes) on the machine\nstack."
                },
                {
                    "Address": 456,
                    "ByteSize": 1,
                    "Comment": "{Copy the four bytes of the dividend from registers"
                },
                {
                    "Address": 457,
                    "ByteSize": 1,
                    "Comment": "\\#REG(b'c'cb) (i.e. M2, M3, M4 and M5; see #ADDR:0x2FBA#) to"
                },
                {
                    "Address": 458,
                    "ByteSize": 1,
                    "Comment": "the registers \\#REG(h'l'hl)."
                },
                {
                    "Address": 459,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 460,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 461,
                    "ByteSize": 1,
                    "Comment": "Clear #REG:A# and reset the carry flag."
                },
                {
                    "Address": 462,
                    "ByteSize": 2,
                    "Comment": "#REG:B# will count upwards from -33 to -1 (&DF to &FF),\nlooping on minus and will jump again on zero for extra\nprecision."
                },
                {
                    "Address": 464,
                    "ByteSize": 2,
                    "Comment": "Jump forward into the division loop for the first trial\nsubtraction.",
                    "OperandType": 2
                },
                {
                    "Address": 466,
                    "ByteSize": 1,
                    "Comment": "{Shift the result left into \\#REG(b'c'ca), shifting out"
                },
                {
                    "Address": 467,
                    "ByteSize": 2,
                    "Comment": "the bits already there, picking up 1 from the carry"
                },
                {
                    "Address": 469,
                    "ByteSize": 1,
                    "Comment": "whenever it is set, and rotating left each byte with"
                },
                {
                    "Address": 470,
                    "ByteSize": 2,
                    "Comment": "carry to achieve the 32-bit shift."
                },
                {
                    "Address": 472,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 474,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 475,
                    "ByteSize": 1,
                    "Comment": "{Move what remains of the dividend left in \\#REG(h'l'hl)"
                },
                {
                    "Address": 476,
                    "ByteSize": 1,
                    "Comment": "before the next trial subtraction; if a bit drops into"
                },
                {
                    "Address": 477,
                    "ByteSize": 2,
                    "Comment": "the carry, force no restore and a bit for the quotient,"
                },
                {
                    "Address": 479,
                    "ByteSize": 1,
                    "Comment": "thus retrieving the lost bit and allowing a full 32-bit"
                },
                {
                    "Address": 480,
                    "ByteSize": 2,
                    "Comment": "divisor.}",
                    "OperandType": 2
                },
                {
                    "Address": 482,
                    "ByteSize": 2,
                    "Comment": "{Trial subtract divisor in \\#REG(d'e'de) from rest of"
                },
                {
                    "Address": 484,
                    "ByteSize": 1,
                    "Comment": "dividend in \\#REG(h'l'hl); there is no initial carry (see"
                },
                {
                    "Address": 485,
                    "ByteSize": 2,
                    "Comment": "previous step)."
                },
                {
                    "Address": 487,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 488,
                    "ByteSize": 2,
                    "Comment": "Jump forward if there is no carry.",
                    "OperandType": 2
                },
                {
                    "Address": 490,
                    "ByteSize": 1,
                    "Comment": "{Otherwise restore, i.e. add back the divisor. Then"
                },
                {
                    "Address": 491,
                    "ByteSize": 1,
                    "Comment": "clear the carry so that there will be no bit for the"
                },
                {
                    "Address": 492,
                    "ByteSize": 2,
                    "Comment": "quotient (the divisor 'did not go')."
                },
                {
                    "Address": 494,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 495,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 496,
                    "ByteSize": 2,
                    "Comment": "Jump forward to the counter.",
                    "OperandType": 2
                },
                {
                    "Address": 498,
                    "ByteSize": 1,
                    "Comment": "{Just subtract with no restore and go on to set the"
                },
                {
                    "Address": 499,
                    "ByteSize": 2,
                    "Comment": "carry flag because the lost bit of the dividend is to be"
                },
                {
                    "Address": 501,
                    "ByteSize": 1,
                    "Comment": "retrieved and used for the quotient."
                },
                {
                    "Address": 502,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 504,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 505,
                    "ByteSize": 1,
                    "Comment": "One for the quotient in \\#REG(b'c'ca)."
                },
                {
                    "Address": 506,
                    "ByteSize": 1,
                    "Comment": "Step the loop count up by one."
                },
                {
                    "Address": 507,
                    "ByteSize": 3,
                    "Comment": "Loop 32 times for all bits.",
                    "OperandType": 2
                },
                {
                    "Address": 510,
                    "ByteSize": 1,
                    "Comment": "Save any 33rd bit for extra precision (the present\ncarry)."
                },
                {
                    "Address": 511,
                    "ByteSize": 2,
                    "Comment": "Trial subtract yet again for any 34th bit; the '\\#S/PUSH\nAF/' above saves this bit too.",
                    "OperandType": 2
                },
                {
                    "Address": 513,
                    "ByteSize": 1,
                    "Comment": "{Now move the four bytes that form the mantissa of the"
                },
                {
                    "Address": 514,
                    "ByteSize": 1,
                    "Comment": "result from \\#REG(b'c'ca) to \\#REG(d'e'de)."
                },
                {
                    "Address": 515,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 516,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 517,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 518,
                    "ByteSize": 1,
                    "Comment": "{Then put the 34th and 33rd bits into \\#REGb' to be"
                },
                {
                    "Address": 519,
                    "ByteSize": 2,
                    "Comment": "picked up on normalisation."
                },
                {
                    "Address": 521,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 522,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 524,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 525,
                    "ByteSize": 1,
                    "Comment": "Restore the exponent bytes M1 and N1."
                },
                {
                    "Address": 526,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer to the result."
                },
                {
                    "Address": 527,
                    "ByteSize": 1,
                    "Comment": "{Get the difference between the two exponent bytes into"
                },
                {
                    "Address": 528,
                    "ByteSize": 1,
                    "Comment": "#REG:A# and set the carry flag if required.}"
                },
                {
                    "Address": 529,
                    "ByteSize": 3,
                    "Comment": "Exit via #ADDR:0x313D#.",
                    "OperandType": 2
                },
                {
                    "Address": 532,
                    "ByteSize": 1,
                    "Comment": "Get the exponent byte of x into #REG:A#."
                },
                {
                    "Address": 533,
                    "ByteSize": 1,
                    "Comment": "{If #REG:A# is zero, return since x is already a small"
                },
                {
                    "Address": 534,
                    "ByteSize": 1,
                    "Comment": "integer.}"
                },
                {
                    "Address": 535,
                    "ByteSize": 2,
                    "Comment": "Compare e, the exponent, to &81."
                },
                {
                    "Address": 537,
                    "ByteSize": 2,
                    "Comment": "Jump if e is greater than &80.",
                    "OperandType": 2
                },
                {
                    "Address": 539,
                    "ByteSize": 2,
                    "Comment": "{Else, set the exponent to zero; enter &20 into #REG:A#"
                },
                {
                    "Address": 541,
                    "ByteSize": 2,
                    "Comment": "and jump forward to #ADDR:0x3272# to make all the bits of x be"
                },
                {
                    "Address": 543,
                    "ByteSize": 2,
                    "Comment": "zero.}",
                    "OperandType": 2
                },
                {
                    "Address": 545,
                    "ByteSize": 2,
                    "Comment": "Compare e to &91."
                },
                {
                    "Address": 547,
                    "ByteSize": 2,
                    "Comment": "Jump if e not &91.",
                    "OperandType": 2
                },
                {
                    "Address": 549,
                    "ByteSize": 1,
                    "Comment": "{#REG:HL# is pointed at the fourth byte of x, where the 17"
                },
                {
                    "Address": 550,
                    "ByteSize": 1,
                    "Comment": "bits of the integer part of x end after the first bit."
                },
                {
                    "Address": 551,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 552,
                    "ByteSize": 2,
                    "Comment": "{The first bit is obtained in #REG:A#, using &80 as a"
                },
                {
                    "Address": 554,
                    "ByteSize": 1,
                    "Comment": "mask.}"
                },
                {
                    "Address": 555,
                    "ByteSize": 1,
                    "Comment": "{That bit and the previous 8 bits are tested together"
                },
                {
                    "Address": 556,
                    "ByteSize": 1,
                    "Comment": "for zero.}"
                },
                {
                    "Address": 557,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# is pointed at the second byte of x."
                },
                {
                    "Address": 558,
                    "ByteSize": 2,
                    "Comment": "If already non-zero, the test can end.",
                    "OperandType": 2
                },
                {
                    "Address": 560,
                    "ByteSize": 2,
                    "Comment": "{Otherwise, the test for -65536 is now completed: 91 80"
                },
                {
                    "Address": 562,
                    "ByteSize": 1,
                    "Comment": "00 00 00 will leave the zero flag set now.}"
                },
                {
                    "Address": 563,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# is pointed at the first byte of x."
                },
                {
                    "Address": 564,
                    "ByteSize": 2,
                    "Comment": "If zero reset, the jump is made.",
                    "OperandType": 2
                },
                {
                    "Address": 566,
                    "ByteSize": 1,
                    "Comment": "The first byte is set to zero."
                },
                {
                    "Address": 567,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# points to the second byte."
                },
                {
                    "Address": 568,
                    "ByteSize": 2,
                    "Comment": "The second byte is set to &FF."
                },
                {
                    "Address": 570,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# again points to the first byte."
                },
                {
                    "Address": 571,
                    "ByteSize": 2,
                    "Comment": "The last 24 bits are to be zero."
                },
                {
                    "Address": 573,
                    "ByteSize": 2,
                    "Comment": "The jump to #ADDR:0x3272# completes the number 00 \\#S/FF/ 00 00\n00.",
                    "OperandType": 2
                },
                {
                    "Address": 575,
                    "ByteSize": 2,
                    "Comment": "Jump with exponent byte &92 or more (it would be better\nto jump with &91 too).",
                    "OperandType": 2
                },
                {
                    "Address": 577,
                    "ByteSize": 1,
                    "Comment": "Save \\#SYSVAR(STKEND) in #REG:DE#."
                },
                {
                    "Address": 578,
                    "ByteSize": 1,
                    "Comment": "Range 129<=#REG:A#<=144 becomes 126>=#REG:A#>=111."
                },
                {
                    "Address": 579,
                    "ByteSize": 2,
                    "Comment": "Range is now 15>=#REG:A#>=0."
                },
                {
                    "Address": 581,
                    "ByteSize": 1,
                    "Comment": "Point #REG:HL# at second byte."
                },
                {
                    "Address": 582,
                    "ByteSize": 1,
                    "Comment": "Second byte to #REG:D#."
                },
                {
                    "Address": 583,
                    "ByteSize": 1,
                    "Comment": "Point #REG:HL# at third byte."
                },
                {
                    "Address": 584,
                    "ByteSize": 1,
                    "Comment": "Third byte to #REG:E#."
                },
                {
                    "Address": 585,
                    "ByteSize": 1,
                    "Comment": "{Point #REG:HL# at first byte again."
                },
                {
                    "Address": 586,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 587,
                    "ByteSize": 2,
                    "Comment": "Assume a positive number."
                },
                {
                    "Address": 589,
                    "ByteSize": 2,
                    "Comment": "Now test for negative (bit 7 set)."
                },
                {
                    "Address": 591,
                    "ByteSize": 2,
                    "Comment": "Jump if positive after all.",
                    "OperandType": 2
                },
                {
                    "Address": 593,
                    "ByteSize": 1,
                    "Comment": "Change the sign."
                },
                {
                    "Address": 594,
                    "ByteSize": 2,
                    "Comment": "Insert true numeric bit, 1, in #REG:D#."
                },
                {
                    "Address": 596,
                    "ByteSize": 2,
                    "Comment": "{Now test whether #REG:A#>=8 (one byte only) or two bytes"
                },
                {
                    "Address": 598,
                    "ByteSize": 1,
                    "Comment": "needed.}"
                },
                {
                    "Address": 599,
                    "ByteSize": 1,
                    "Comment": "Leave #REG:A# unchanged."
                },
                {
                    "Address": 600,
                    "ByteSize": 2,
                    "Comment": "Jump if two bytes needed.",
                    "OperandType": 2
                },
                {
                    "Address": 602,
                    "ByteSize": 1,
                    "Comment": "Put the one byte into #REG:E#."
                },
                {
                    "Address": 603,
                    "ByteSize": 2,
                    "Comment": "And set #REG:D# to zero."
                },
                {
                    "Address": 605,
                    "ByteSize": 1,
                    "Comment": "Now 1<=#REG:A#<=7 to count the shifts needed."
                },
                {
                    "Address": 606,
                    "ByteSize": 2,
                    "Comment": "Jump if no shift needed.",
                    "OperandType": 2
                },
                {
                    "Address": 608,
                    "ByteSize": 1,
                    "Comment": "#REG:B# will count the shifts."
                },
                {
                    "Address": 609,
                    "ByteSize": 2,
                    "Comment": "{Shift #REG:D# and #REG:E# right #REG:B# times to produce the"
                },
                {
                    "Address": 611,
                    "ByteSize": 2,
                    "Comment": "correct number.}"
                },
                {
                    "Address": 613,
                    "ByteSize": 2,
                    "Comment": "Loop until #REG:B# is zero.",
                    "OperandType": 2
                },
                {
                    "Address": 615,
                    "ByteSize": 3,
                    "Comment": "Store the result on the stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 618,
                    "ByteSize": 1,
                    "Comment": "Restore \\#SYSVAR(STKEND) to #REG:DE#."
                },
                {
                    "Address": 619,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 620,
                    "ByteSize": 1,
                    "Comment": "Get the exponent byte of x into #REG:A#."
                },
                {
                    "Address": 621,
                    "ByteSize": 2,
                    "Comment": "Subtract &A0 from e."
                },
                {
                    "Address": 623,
                    "ByteSize": 1,
                    "Comment": "Return on plus - x has no significant non-integral part.\n(If the true exponent were reduced to zero, the 'binary\npoint' would come at or after the end of the four bytes\nof the mantissa.)"
                },
                {
                    "Address": 624,
                    "ByteSize": 2,
                    "Comment": "Else, negate the remainder; this gives the number of\nbits to become zero (the number of bits after the\n'binary point')."
                },
                {
                    "Address": 626,
                    "ByteSize": 1,
                    "Comment": "Save the current value of #REG:DE# (\\#SYSVAR(STKEND))."
                },
                {
                    "Address": 627,
                    "ByteSize": 1,
                    "Comment": "Make #REG:HL# point one past the fifth byte."
                },
                {
                    "Address": 628,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# now points to the fifth byte of x."
                },
                {
                    "Address": 629,
                    "ByteSize": 1,
                    "Comment": "{Get the number of bits to be set to zero in #REG:B# and"
                },
                {
                    "Address": 630,
                    "ByteSize": 2,
                    "Comment": "divide it by 8 to give the number of whole bytes"
                },
                {
                    "Address": 632,
                    "ByteSize": 2,
                    "Comment": "implied."
                },
                {
                    "Address": 634,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 636,
                    "ByteSize": 2,
                    "Comment": "Jump forward if the result is zero.",
                    "OperandType": 2
                },
                {
                    "Address": 638,
                    "ByteSize": 2,
                    "Comment": "{Else, set the bytes to zero; #REG:B# counts them."
                },
                {
                    "Address": 640,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 641,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 643,
                    "ByteSize": 2,
                    "Comment": "Get #REG:A# (mod 8); this is the number of bits still to\nbe set to zero."
                },
                {
                    "Address": 645,
                    "ByteSize": 2,
                    "Comment": "Jump to the end if nothing more to do.",
                    "OperandType": 2
                },
                {
                    "Address": 647,
                    "ByteSize": 1,
                    "Comment": "#REG:B# will count the bits now."
                },
                {
                    "Address": 648,
                    "ByteSize": 2,
                    "Comment": "Prepare the mask."
                },
                {
                    "Address": 650,
                    "ByteSize": 2,
                    "Comment": "{With each loop a zero enters the mask from the right"
                },
                {
                    "Address": 652,
                    "ByteSize": 2,
                    "Comment": "and thereby a mask of the correct length is produced.}",
                    "OperandType": 2
                },
                {
                    "Address": 654,
                    "ByteSize": 1,
                    "Comment": "{The unwanted bits of (#REG:HL#) are lost as the masking"
                },
                {
                    "Address": 655,
                    "ByteSize": 1,
                    "Comment": "is performed.}"
                },
                {
                    "Address": 656,
                    "ByteSize": 1,
                    "Comment": "Return the pointer to #REG:HL#."
                },
                {
                    "Address": 657,
                    "ByteSize": 1,
                    "Comment": "Return \\#SYSVAR(STKEND) to #REG:DE#."
                },
                {
                    "Address": 658,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 659,
                    "ByteSize": 3,
                    "Comment": "Call the subroutine and then continue into it for the\nsecond call.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 662,
                    "ByteSize": 1,
                    "Comment": "Exchange the pointers at each call."
                },
                {
                    "Address": 663,
                    "ByteSize": 1,
                    "Comment": "{If the first byte is not zero, return - the number"
                },
                {
                    "Address": 664,
                    "ByteSize": 1,
                    "Comment": "cannot be a 'small integer'."
                },
                {
                    "Address": 665,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 666,
                    "ByteSize": 1,
                    "Comment": "Save the 'other' pointer in #REG:DE#."
                },
                {
                    "Address": 667,
                    "ByteSize": 3,
                    "Comment": "Fetch the sign in #REG:C# and the number in #REG:DE#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 670,
                    "ByteSize": 1,
                    "Comment": "Clear the #REG:A# register."
                },
                {
                    "Address": 671,
                    "ByteSize": 1,
                    "Comment": "Point to the fifth location."
                },
                {
                    "Address": 672,
                    "ByteSize": 1,
                    "Comment": "Set the fifth byte to zero."
                },
                {
                    "Address": 673,
                    "ByteSize": 1,
                    "Comment": "Point to the fourth location."
                },
                {
                    "Address": 674,
                    "ByteSize": 1,
                    "Comment": "Set the fourth byte to zero; bytes 2 and 3 will hold the\nmantissa."
                },
                {
                    "Address": 675,
                    "ByteSize": 2,
                    "Comment": "Set #REG:B# to &91 for the exponent, i.e. for up to 16\nbits in the integer."
                },
                {
                    "Address": 677,
                    "ByteSize": 1,
                    "Comment": "{Test whether #REG:D# is zero so that at most 8 bits would"
                },
                {
                    "Address": 678,
                    "ByteSize": 1,
                    "Comment": "be needed.}"
                },
                {
                    "Address": 679,
                    "ByteSize": 2,
                    "Comment": "Jump if more than 8 bits needed.",
                    "OperandType": 2
                },
                {
                    "Address": 681,
                    "ByteSize": 1,
                    "Comment": "Now test #REG:E# too."
                },
                {
                    "Address": 682,
                    "ByteSize": 1,
                    "Comment": "Save the zero in #REG:B# (it will give zero exponent if\n#REG:E# too is zero)."
                },
                {
                    "Address": 683,
                    "ByteSize": 2,
                    "Comment": "Jump if #REG:E# is indeed zero.",
                    "OperandType": 2
                },
                {
                    "Address": 685,
                    "ByteSize": 1,
                    "Comment": "Move #REG:E# to #REG:D# (#REG:D# was zero, #REG:E# not)."
                },
                {
                    "Address": 686,
                    "ByteSize": 1,
                    "Comment": "Set #REG:E# to zero now."
                },
                {
                    "Address": 687,
                    "ByteSize": 2,
                    "Comment": "Set #REG:B# to &89 for the exponent - no more than 8 bits\nnow."
                },
                {
                    "Address": 689,
                    "ByteSize": 1,
                    "Comment": "Pointer to #REG:DE#, number to #REG:HL#."
                },
                {
                    "Address": 690,
                    "ByteSize": 1,
                    "Comment": "Decrement the exponent on each shift."
                },
                {
                    "Address": 691,
                    "ByteSize": 1,
                    "Comment": "Shift the number right one position."
                },
                {
                    "Address": 692,
                    "ByteSize": 2,
                    "Comment": "Until the carry is set.",
                    "OperandType": 2
                },
                {
                    "Address": 694,
                    "ByteSize": 2,
                    "Comment": "Sign bit to carry flag now."
                },
                {
                    "Address": 696,
                    "ByteSize": 2,
                    "Comment": "{Insert it in place as the number is shifted back one"
                },
                {
                    "Address": 698,
                    "ByteSize": 2,
                    "Comment": "place normal now.}"
                },
                {
                    "Address": 700,
                    "ByteSize": 1,
                    "Comment": "Pointer to byte 4 back to #REG:HL#."
                },
                {
                    "Address": 701,
                    "ByteSize": 1,
                    "Comment": "Point to the third location."
                },
                {
                    "Address": 702,
                    "ByteSize": 1,
                    "Comment": "Store the third byte."
                },
                {
                    "Address": 703,
                    "ByteSize": 1,
                    "Comment": "Point to the second location."
                },
                {
                    "Address": 704,
                    "ByteSize": 1,
                    "Comment": "Store the second byte."
                },
                {
                    "Address": 705,
                    "ByteSize": 1,
                    "Comment": "Point to the first location."
                },
                {
                    "Address": 706,
                    "ByteSize": 1,
                    "Comment": "Store the exponent byte."
                },
                {
                    "Address": 707,
                    "ByteSize": 1,
                    "Comment": "Restore the 'other' pointer to #REG:DE#."
                },
                {
                    "Address": 708,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 859,
                    "ByteSize": 3,
                    "Comment": "Presume a unary operation and therefore set #REG:HL# to\npoint to the start of the 'last value' on the calculator\nstack and #REG:DE# one past this floating-point number\n(\\#SYSVAR(STKEND)).",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 862,
                    "ByteSize": 1,
                    "Comment": "{Either transfer a single operation offset to"
                },
                {
                    "Address": 863,
                    "ByteSize": 3,
                    "Comment": "\\#SYSVAR(BREG) temporarily, or, when using the subroutine\nrecursively, pass the parameter to \\#SYSVAR(BREG) to be\nused as a counter.}",
                    "OperandType": 1
                },
                {
                    "Address": 866,
                    "ByteSize": 1,
                    "Comment": "{The return address of the subroutine is stored in"
                },
                {
                    "Address": 867,
                    "ByteSize": 1,
                    "Comment": "\\#REGhl'. This saves the pointer to the first literal."
                },
                {
                    "Address": 868,
                    "ByteSize": 1,
                    "Comment": "Entering the calculator here is done whenever\n\\#SYSVAR(BREG) is in use as a counter and is not to be\ndisturbed.}"
                },
                {
                    "Address": 869,
                    "ByteSize": 4,
                    "Comment": "A loop is now entered to handle each literal in the list\nthat follows the calling instruction; so first, always\nset \\#SYSVAR(STKEND).",
                    "OperandType": 1
                },
                {
                    "Address": 873,
                    "ByteSize": 1,
                    "Comment": "{Go to the alternate register set and fetch the literal"
                },
                {
                    "Address": 874,
                    "ByteSize": 1,
                    "Comment": "for this loop.}"
                },
                {
                    "Address": 875,
                    "ByteSize": 1,
                    "Comment": "Make \\#REGhl' point to the next literal."
                },
                {
                    "Address": 876,
                    "ByteSize": 1,
                    "Comment": "This pointer is saved briefly on the machine stack.\n#ADDR:0x336C# is used by #ADDR:0x33A2# to find the subroutine that\nis required."
                },
                {
                    "Address": 877,
                    "ByteSize": 1,
                    "Comment": "Test the #REG:A# register."
                },
                {
                    "Address": 878,
                    "ByteSize": 3,
                    "Comment": "Separate the simple literals from the multi-purpose\nliterals. Jump with literals &00 to &3D.",
                    "OperandType": 2
                },
                {
                    "Address": 881,
                    "ByteSize": 1,
                    "Comment": "Save the literal in #REG:D#."
                },
                {
                    "Address": 882,
                    "ByteSize": 2,
                    "Comment": "Continue only with bits 5 and 6."
                },
                {
                    "Address": 884,
                    "ByteSize": 1,
                    "Comment": "{Four right shifts make them now bits 1 and 2."
                },
                {
                    "Address": 885,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 886,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 887,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 888,
                    "ByteSize": 2,
                    "Comment": "{The offsets required are &3E to &41, and #REG:L# will now"
                },
                {
                    "Address": 890,
                    "ByteSize": 1,
                    "Comment": "hold double the required offset.}"
                },
                {
                    "Address": 891,
                    "ByteSize": 1,
                    "Comment": "{Now produce the parameter by taking bits 0, 1, 2, 3 and"
                },
                {
                    "Address": 892,
                    "ByteSize": 2,
                    "Comment": "4 of the literal; keep the parameter in #REG:A#.}"
                },
                {
                    "Address": 894,
                    "ByteSize": 2,
                    "Comment": "Jump forward to find the address of the required\nsubroutine.",
                    "OperandType": 2
                },
                {
                    "Address": 896,
                    "ByteSize": 2,
                    "Comment": "{Jump forward if performing a unary operation."
                },
                {
                    "Address": 898,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 900,
                    "ByteSize": 1,
                    "Comment": "{All of the subroutines that perform binary operations"
                },
                {
                    "Address": 901,
                    "ByteSize": 3,
                    "Comment": "require that #REG:HL# points to the first operand and"
                },
                {
                    "Address": 904,
                    "ByteSize": 1,
                    "Comment": "#REG:DE# points to the second operand (the 'last value')"
                },
                {
                    "Address": 905,
                    "ByteSize": 1,
                    "Comment": "as they appear on the calculator stack."
                },
                {
                    "Address": 906,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 907,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 908,
                    "ByteSize": 1,
                    "Comment": "{As each entry in the table of addresses takes up two"
                },
                {
                    "Address": 909,
                    "ByteSize": 1,
                    "Comment": "bytes the offset produced is doubled.}"
                },
                {
                    "Address": 910,
                    "ByteSize": 3,
                    "Comment": "The base address of the #ADDR:0x32D7#(table)."
                },
                {
                    "Address": 913,
                    "ByteSize": 2,
                    "Comment": "{The address of the required table entry is formed in"
                },
                {
                    "Address": 915,
                    "ByteSize": 1,
                    "Comment": "#REG:HL#, and the required subroutine address is loaded"
                },
                {
                    "Address": 916,
                    "ByteSize": 1,
                    "Comment": "into the #REG:DE# register pair."
                },
                {
                    "Address": 917,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 918,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 919,
                    "ByteSize": 3,
                    "Comment": "{The address of #ADDR:0x3365# is put on the machine stack"
                },
                {
                    "Address": 922,
                    "ByteSize": 1,
                    "Comment": "underneath the subroutine address."
                },
                {
                    "Address": 923,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 924,
                    "ByteSize": 1,
                    "Comment": "Return to the main set of registers."
                },
                {
                    "Address": 925,
                    "ByteSize": 4,
                    "Comment": "The current value of \\#SYSVAR(BREG) is transferred to the\n#REG:B# register thereby returning the single operation\noffset (see #ADDR:0x353B#).",
                    "OperandType": 1
                },
                {
                    "Address": 929,
                    "ByteSize": 1,
                    "Comment": "An indirect jump to the required subroutine."
                },
                {
                    "Address": 930,
                    "ByteSize": 1,
                    "Comment": "Discard the #ADDR:0x3365# address."
                },
                {
                    "Address": 931,
                    "ByteSize": 3,
                    "Comment": "Transfer the offset from \\#SYSVAR(BREG) to #REG:A#.",
                    "OperandType": 1
                },
                {
                    "Address": 934,
                    "ByteSize": 1,
                    "Comment": "Enter the alternate register set."
                },
                {
                    "Address": 935,
                    "ByteSize": 2,
                    "Comment": "Jump back to find the required address; stack the\n#ADDR:0x3365# address and jump to the subroutine for the\noperation.",
                    "OperandType": 2
                },
                {
                    "Address": 937,
                    "ByteSize": 1,
                    "Comment": "Save #REG:DE# briefly."
                },
                {
                    "Address": 938,
                    "ByteSize": 1,
                    "Comment": "Save #REG:HL# briefly."
                },
                {
                    "Address": 939,
                    "ByteSize": 3,
                    "Comment": "Specify the test is for 5 bytes."
                },
                {
                    "Address": 942,
                    "ByteSize": 3,
                    "Comment": "Make the test.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 945,
                    "ByteSize": 1,
                    "Comment": "Restore #REG:HL#."
                },
                {
                    "Address": 946,
                    "ByteSize": 1,
                    "Comment": "Restore #REG:DE#."
                },
                {
                    "Address": 947,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 948,
                    "ByteSize": 4,
                    "Comment": "Copy \\#SYSVAR(STKEND) to #REG:DE# as destination address.",
                    "OperandType": 1
                },
                {
                    "Address": 952,
                    "ByteSize": 3,
                    "Comment": "Move the number.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 955,
                    "ByteSize": 4,
                    "Comment": "Reset \\#SYSVAR(STKEND) from #REG:DE#.",
                    "OperandType": 1
                },
                {
                    "Address": 959,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 960,
                    "ByteSize": 3,
                    "Comment": "A test is made for room.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 963,
                    "ByteSize": 2,
                    "Comment": "Move the five bytes involved."
                },
                {
                    "Address": 965,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 966,
                    "ByteSize": 1,
                    "Comment": "{This subroutine performs the manipulatory operation of"
                },
                {
                    "Address": 967,
                    "ByteSize": 1,
                    "Comment": "adding a 'last value' to the calculator stack; hence\n#REG:HL# is set to point one past the present 'last value'\nand hence point to the result.}"
                },
                {
                    "Address": 968,
                    "ByteSize": 3,
                    "Comment": "Now test that there is indeed room.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 971,
                    "ByteSize": 1,
                    "Comment": "{Go to the alternate register set and stack the pointer"
                },
                {
                    "Address": 972,
                    "ByteSize": 1,
                    "Comment": "to the next literal."
                },
                {
                    "Address": 973,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 974,
                    "ByteSize": 1,
                    "Comment": "Switch over the result pointer and the next literal\npointer."
                },
                {
                    "Address": 975,
                    "ByteSize": 1,
                    "Comment": "Save #REG:BC# briefly."
                },
                {
                    "Address": 976,
                    "ByteSize": 1,
                    "Comment": "{The first literal is put into #REG:A# and divided by &40"
                },
                {
                    "Address": 977,
                    "ByteSize": 2,
                    "Comment": "to give the integer values 0, 1, 2 or 3."
                },
                {
                    "Address": 979,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 980,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 981,
                    "ByteSize": 1,
                    "Comment": "{The integer value is transferred to #REG:C# and"
                },
                {
                    "Address": 982,
                    "ByteSize": 1,
                    "Comment": "incremented, thereby giving the range 1, 2, 3 or 4 for\nthe number of literals that will be needed.}"
                },
                {
                    "Address": 983,
                    "ByteSize": 1,
                    "Comment": "{The literal is fetched anew, reduced mod &40 and"
                },
                {
                    "Address": 984,
                    "ByteSize": 2,
                    "Comment": "discarded as inappropriate if the remainder if zero; in"
                },
                {
                    "Address": 986,
                    "ByteSize": 2,
                    "Comment": "which case the next literal is fetched and used",
                    "OperandType": 2
                },
                {
                    "Address": 988,
                    "ByteSize": 1,
                    "Comment": "unreduced."
                },
                {
                    "Address": 989,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 990,
                    "ByteSize": 2,
                    "Comment": "{The exponent, e, is formed by the addition of &50 and"
                },
                {
                    "Address": 992,
                    "ByteSize": 1,
                    "Comment": "passed to the calculator stack as the first of the five\nbytes of the result.}"
                },
                {
                    "Address": 993,
                    "ByteSize": 2,
                    "Comment": "{The number of literals specified in #REG:C# are taken"
                },
                {
                    "Address": 995,
                    "ByteSize": 1,
                    "Comment": "from the source and entered into the bytes of the"
                },
                {
                    "Address": 996,
                    "ByteSize": 1,
                    "Comment": "result."
                },
                {
                    "Address": 997,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 998,
                    "ByteSize": 2,
                    "Comment": " "
                },
                {
                    "Address": 1000,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 1002,
                    "ByteSize": 1,
                    "Comment": "Restore #REG:BC#."
                },
                {
                    "Address": 1003,
                    "ByteSize": 1,
                    "Comment": "{Return the result pointer to #REG:HL# and the next"
                },
                {
                    "Address": 1004,
                    "ByteSize": 1,
                    "Comment": "literal pointer to its usual position in \\#REGhl'."
                },
                {
                    "Address": 1005,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 1006,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 1007,
                    "ByteSize": 1,
                    "Comment": "{The number of zero bytes required at this stage is"
                },
                {
                    "Address": 1008,
                    "ByteSize": 1,
                    "Comment": "given by 5-#REG:C#-1, and this number of zeros is added to"
                },
                {
                    "Address": 1009,
                    "ByteSize": 1,
                    "Comment": "the result to make up the required five bytes."
                },
                {
                    "Address": 1010,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 1011,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 1012,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 1013,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 1015,
                    "ByteSize": 1,
                    "Comment": "{The subroutine returns if the parameter is zero, or"
                },
                {
                    "Address": 1016,
                    "ByteSize": 1,
                    "Comment": "when the requested constant has been reached.}"
                },
                {
                    "Address": 1017,
                    "ByteSize": 1,
                    "Comment": "Save the parameter."
                },
                {
                    "Address": 1018,
                    "ByteSize": 1,
                    "Comment": "Save the result pointer."
                },
                {
                    "Address": 1019,
                    "ByteSize": 3,
                    "Comment": "The dummy address."
                },
                {
                    "Address": 1022,
                    "ByteSize": 3,
                    "Comment": "Perform imaginary stacking of an expanded constant.",
                    "Flags": 8,
                    "OperandType": 2
                }
            ],
            "CommentBlocks": [
                {
                    "Address": 4,
                    "Comment": "THE 'ADD-BACK' SUBROUTINE\n \nUsed by the routines at #ADDR:0x2FDD# and #ADDR:0x30CA#.\n \nThis subroutine adds back into the number any carry which has overflowed to\nthe right. In the extreme case, the carry ripples right back to the left of\nthe number.\n \nWhen this subroutine is called during addition, this ripple means that a\nmantissa of 0.5 was shifted a full 32 places right, and the addend will now\nbe set to zero; when called from #ADDR:0x30CA#, it means that the exponent must be\nincremented, and this may result in overflow.\n \nD'E'DE Mantissa of number shifted right\nO:F Zero flag set on overflow (mantissa was \\#S/FFFFFFFF/)"
                },
                {
                    "Address": 15,
                    "Comment": "THE 'SUBTRACTION' OPERATION (offset &03)\n \nUsed by the routine at #ADDR:0x353B#.\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &03 by the routines at #ADDR:0x03F8#, #ADDR:0x1DDA#,\n#ADDR:0x2320#, #ADDR:0x2382#, #ADDR:0x247D#, #ADDR:0x25F8#, #ADDR:0x2DE3#, #ADDR:0x3449#, #ADDR:0x36A0#, #ADDR:0x36AF#,\n#ADDR:0x36C4#, #ADDR:0x3713#, #ADDR:0x3783#, #ADDR:0x37AA#, #ADDR:0x37B5#, #ADDR:0x37E2#, #ADDR:0x3833# and #ADDR:0x3843#. It\nis also called indirectly via #ADDR:0x33A2#.\n \nThis subroutine simply changes the sign of the subtrahend and carries on into\n#ADDR:0x3014#.\n \nNote that #REG:HL# points to the minuend and #REG:DE# points to the subtrahend.\n(See #ADDR:0x3014# for more details.)\n \nDE Address of the first byte of the subtrahend\nHL Address of the first byte of the minuend"
                },
                {
                    "Address": 20,
                    "Comment": "THE 'ADDITION' OPERATION (offset &0F)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &0F by the routines at #ADDR:0x03F8#, #ADDR:0x1DAB#,\n#ADDR:0x2320#, #ADDR:0x2382#, #ADDR:0x247D#, #ADDR:0x25F8#, #ADDR:0x2C9B#, #ADDR:0x2D3B#, #ADDR:0x2DA2#, #ADDR:0x3449#,\n#ADDR:0x36C4#, #ADDR:0x3713#, #ADDR:0x3783#, #ADDR:0x37B5#, #ADDR:0x37E2# and #ADDR:0x3833#. It is also called\nindirectly via #ADDR:0x33A2#, and the routine at #ADDR:0x300F# continues here.\n \nThe first of three major arithmetical subroutines, this subroutine carries\nout the floating-point addition of two numbers, each with a 4-byte mantissa\nand a 1-byte exponent. In these three subroutines, the two numbers at the top\nof the calculator stack are added/multiplied/divided to give one number at\nthe top of the calculator stack, a 'last value'.\n \n#REG:HL# points to the second number from the top, the\naugend/multiplier/dividend. #REG:DE# points to the number at the top of the\ncalculator stack, the addend/multiplicand/divisor. Afterwards #REG:HL# points\nto the resultant 'last value' whose address can also be considered to be\n\\#SYSVAR(STKEND)-5.\n \nBut the addition subroutine first tests whether the 2 numbers to be added are\n'small integers'. If they are, it adds them quite simply in #REG:HL# and\n#REG:BC#, and puts the result directly on the stack. No two's complementing is\nneeded before or after the addition, since such numbers are held on the stack\nin two's complement form, ready for addition.\n \nDE Address of the first byte of the addend/multiplicand/divisor\nHL Address of the first byte of the augend/multiplier/dividend"
                },
                {
                    "Address": 60,
                    "Comment": "Note that the number -65536 can arise here in the form 00 \\#S/FF/ 00 00 00 as\nthe result of the addition of two smaller negative integers, e.g. -65000 and\n-536. It is simply stacked in this form. This is a mistake. The Spectrum\nsystem cannot handle this number.\n \nMost functions treat it as zero, and it is printed as -1E-38, obtained by\ntreating is as 'minus zero' in an illegitimate format.\n \nOne possible remedy would be to test for this number at about byte\n#ADDR:0x3032#(\\#h3032) and, if it is present, to make the second byte &80 and the\nfirst byte &91, so producing the full five-byte floating-point form of the\nnumber, i.e. 91 80 00 00 00, which causes no problems. See also the\n#ADDR:0x3225#(remarks in 'truncate')."
                },
                {
                    "Address": 65,
                    "Comment": "The full addition subroutine first calls #ADDR:0x2F9B# for each number, then gets\nthe two numbers from the calculator stack and puts the one with the smaller\nexponent into the addend position. It then calls #ADDR:0x2FDD# to shift the addend\nup to 32 decimal places right to line it up for addition. The actual addition\nis done in a few bytes, a single shift is made for carry (overflow to the\nleft) if needed, the result is two's complemented if negative, and any\narithmetic overflow is reported; otherwise the subroutine jumps to #ADDR:0x3155# to\nnormalise the result and return it to the stack with the correct sign bit\ninserted into the second byte."
                },
                {
                    "Address": 169,
                    "Comment": "THE 'HL=HL*DE' SUBROUTINE\n \nThis subroutine is called by #ADDR:0x2AF4# and by #ADDR:0x30CA# to perform the 16-bit\nmultiplication as stated.\n \nAny overflow of the 16 bits available is dealt with on return from the\nsubroutine.\n \nDE First number (M)\nHL Second number (N)\nO:HL M*N"
                },
                {
                    "Address": 192,
                    "Comment": "THE 'PREPARE TO MULTIPLY OR DIVIDE' SUBROUTINE\n \nUsed by the routines at #ADDR:0x30CA# and #ADDR:0x31AF#.\n \nThis subroutine prepares a floating-point number for multiplication or\ndivision, returning with carry set if the number is zero, getting the sign of\nthe result into the #REG:A# register, and replacing the sign bit in the number\nby the true numeric bit, 1.\n \nA Bit 7 holds 0 on the first call, or the sign bit of the first number\nHL Address of the first byte of the number\nO:A Bit 7 holds the sign bit of the first number, or the sign bit of the\n.   product/quotient\nO:F Carry flag set if the number is zero"
                },
                {
                    "Address": 202,
                    "Comment": "THE 'MULTIPLICATION' OPERATION (offset &04)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &04 by the routines at #ADDR:0x03F8#, #ADDR:0x2320#,\n#ADDR:0x2382#, #ADDR:0x247D#, #ADDR:0x25F8#, #ADDR:0x2C9B#, #ADDR:0x2D3B#, #ADDR:0x2D4F#, #ADDR:0x2DC1#, #ADDR:0x3449#,\n#ADDR:0x36A0#, #ADDR:0x36C4#, #ADDR:0x3713#, #ADDR:0x3783#, #ADDR:0x37B5#, #ADDR:0x37E2#, #ADDR:0x3833# and #ADDR:0x3851#. It\nis also called indirectly via #ADDR:0x33A2#.\n \nThis subroutine first tests whether the two numbers to be multiplied are\n'small integers'. If they are, it uses #ADDR:0x2D7F# to get them from the stack,\n#ADDR:0x30A9# to multiply them and #ADDR:0x2D8E# to return the result to the stack. Any\noverflow of this 'short multiplication' (i.e. if the result is not itself a\n'small integer') causes a jump to multiplication in full five byte\nfloating-point form (see below).\n \nDE Address of the first byte of the second number\nHL Address of the first byte of the first number"
                },
                {
                    "Address": 243,
                    "Comment": "The full multiplication subroutine prepares the first number for\nmultiplication by calling #ADDR:0x30C0#, returning if it is zero; otherwise the\nsecond number is prepared by again calling #ADDR:0x30C0#, and if it is zero the\nsubroutine goes to set the result to zero. Next it fetches the two numbers\nfrom the calculator stack and multiplies their mantissas in the usual way,\nrotating the first number (treated as the multiplier) right and adding in the\nsecond number (the multiplicand) to the result whenever the multiplier bit is\nset. The exponents are then added together and checks are made for overflow\nand for underflow (giving the result zero). Finally, the result is normalised\nand returned to the calculator stack with the correct sign bit in the second\nbyte."
                },
                {
                    "Address": 276,
                    "Comment": "Now enter the multiplier loop."
                },
                {
                    "Address": 308,
                    "Comment": "Now add the exponents together."
                },
                {
                    "Address": 317,
                    "Comment": "This entry point is used by the routine at #ADDR:0x31AF#."
                },
                {
                    "Address": 341,
                    "Comment": "This entry point is used by the routine at #ADDR:0x3014#.\n \nThe remainder of the subroutine deals with normalisation and is common to all\nthe arithmetic routines."
                },
                {
                    "Address": 364,
                    "Comment": "The actual normalisation operation."
                },
                {
                    "Address": 390,
                    "Comment": "Finish the normalisation by considering the 'carry'."
                },
                {
                    "Address": 405,
                    "Comment": "The final part of the subroutine involves passing the result to the bytes\nreserved for it on the calculator stack and resetting the pointers."
                },
                {
                    "Address": 429,
                    "Comment": "This entry point is used by the routines at #ADDR:0x2C9B#, #ADDR:0x3014# and #ADDR:0x31AF#.\n \nReport 6 - Arithmetic overflow."
                },
                {
                    "Address": 431,
                    "Comment": "THE 'DIVISION' OPERATION (offset &05)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &05 by the routines at #ADDR:0x03F8#, #ADDR:0x2382#,\n#ADDR:0x247D#, #ADDR:0x2C9B#, #ADDR:0x2D4F#, #ADDR:0x36A0#, #ADDR:0x37DA#, #ADDR:0x37E2#, #ADDR:0x3833# and #ADDR:0x3851#. It\nis also called indirectly via #ADDR:0x33A2#.\n \nThis subroutine first prepares the divisor by calling #ADDR:0x30C0#, reporting\narithmetic overflow if it is zero; then it prepares the dividend again\ncalling #ADDR:0x30C0#, returning if it is zero. Next it fetches the two numbers\nfrom the calculator stack and divides their mantissa by means of the usual\nrestoring division, trial subtracting the divisor from the dividend and\nrestoring if there is carry, otherwise adding 1 to the quotient. The maximum\nprecision is obtained for a 4-byte division, and after subtracting the\nexponents the subroutine exits by joining the later part of #ADDR:0x30CA#.\n \nDE Address of the first byte of the second number (divisor)\nHL Address of the first byte of the first number (dividend)"
                },
                {
                    "Address": 466,
                    "Comment": "Now enter the division loop."
                },
                {
                    "Address": 513,
                    "Comment": "\\#IF({fix}<2)!!Note: this jump is made to the wrong place. No 34th bit will\never be obtained without first shifting the dividend. Hence important results\nlike 1/10 and 1/1000 are not rounded up as they should be. Rounding up never\noccurs when it depends on the 34th bit. The jump should have been to #ADDR:0x31DB#\nabove, i.e. byte &3200 in the ROM should read &DA instead of &E1.!!"
                },
                {
                    "Address": 532,
                    "Comment": "THE 'INTEGER TRUNCATION TOWARDS ZERO' SUBROUTINE (offset &3A)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &3A by the routine at #ADDR:0x36AF#.\n \nThis subroutine (say I(x)) returns the result of integer truncation of x, the\n'last value', towards zero. Thus I(2.4) is 2 and I(-2.4) is -2. The\nsubroutine returns at once if x is in the form of a 'short integer'. It\nreturns zero if the exponent byte of x is less than &81 (ABS x is less than\n1). If I(x) is a 'short integer' the subroutine returns it in that form. It\nreturns x if the exponent byte is &A0 or greater (x has no significant\nnon-integral part). Otherwise the correct number of bytes of x are set to\nzero and, if needed, one more byte is split with a mask.\n \nHL Address of the first byte of the number"
                },
                {
                    "Address": 549,
                    "Comment": "The next 26 bytes seem designed to test whether x is in fact -65536, i.e. 91\n80 00 00 00, and if it is, to set it to 00 \\#S/FF/ 00 00 00. This is a\nmistake. As #ADDR:0x303C#(already stated), the Spectrum system cannot handle this\nnumber. The result here is simply to make INT (-65536) return the value -1.\nThis is a pity, since the number would have been perfectly all right if left\nalone. The remedy would seem to be simply to omit the 28 bytes from \\#h3223\nabove to \\#h323E inclusive from the program."
                },
                {
                    "Address": 575,
                    "Comment": "If the exponent byte of x is between &81 and &90 inclusive, I(x) is a 'small\ninteger', and will be compressed into one or two bytes. But first a test is\nmade to see whether x is, after all, large."
                },
                {
                    "Address": 620,
                    "Comment": "Large values of x remain to be considered."
                },
                {
                    "Address": 626,
                    "Comment": "Now the bits of the mantissa can be cleared."
                },
                {
                    "Address": 659,
                    "Comment": "THE 'RE-STACK TWO' SUBROUTINE\n \nUsed by the routines at #ADDR:0x3014#, #ADDR:0x30CA# and #ADDR:0x31AF#.\n \nThis subroutine is called to re-stack two 'small integers' in full five-byte\nfloating-point form for the binary operations of addition, multiplication and\ndivision. It does so by calling the following subroutine twice.\n \nDE Address of the first byte of the second number\nHL Address of the first byte of the first number"
                },
                {
                    "Address": 663,
                    "Comment": "This routine continues into #ADDR:0x3297#.\nTHE 'RE-STACK' SUBROUTINE (offset &3D)\n \nUsed by the routine at #ADDR:0x37E2#.\n \nThe routine at #ADDR:0x3293# continues here.\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &3D by the routines at #ADDR:0x2320#, #ADDR:0x2382#,\n#ADDR:0x36C4#, #ADDR:0x3713# and #ADDR:0x3783#. The routine at #ADDR:0x3293# also continues here.\n \nThis subroutine is called to re-stack one number (which could be a 'small\ninteger') in full five-byte floating-point form.\n \nHL Address of the first byte of the number"
                },
                {
                    "Address": 709,
                    "Comment": "THE TABLE OF CONSTANTS\n \nUsed by the routine at #ADDR:0x341B#.\n \nThis table holds five useful and frequently needed numbers: zero, one, a\nhalf, a half of pi, and ten. The numbers are held in a condensed form which\nis expanded by the routine at #ADDR:0x33C6# to give the required floating-point\nform."
                },
                {
                    "Address": 727,
                    "Comment": "THE TABLE OF ADDRESSES\n \nUsed by the routine at #ADDR:0x335B#.\n \nThis table is a look-up table of the addresses of the sixty-six operational\nsubroutines of the calculator. The offsets used to index into the table are\nderived either from the operation codes used in the routine at #ADDR:0x24FB# (see\n#ADDR:0x2734#, etc.) or from the literals that follow a 'RST \\#o28' instruction."
                },
                {
                    "Address": 859,
                    "Comment": "Note: the last four subroutines are multi-purpose subroutines and are entered\nwith a parameter that is a copy of the right hand five bits of the original\nliteral. The full set follows:\n \n\\#LIST\n{ Offset &3E: series-06, series-08 and series-0C; literals &86, &88 and &8C.\n}\n{ Offset &3F: stk-zero, stk-one, stk-half, stk-pi/2 and stk-ten; literals &A0\nto &A4. }\n{ Offset &40: st-mem-0, st-mem-1, st-mem-2, st-mem-3, st-mem-4 and st-mem-5;\nliterals &C0 to &C5. }\n{ Offset &41: get-mem-0, get-mem-1, get-mem-2, get-mem-3, get-mem-4 and\nget-mem-5; literals &E0 to &E5. }\nLIST\\#\nTHE 'CALCULATE' SUBROUTINE\n \nUsed by the routine at #ADDR:0x0028#.\n \nThis subroutine is used to perform floating-point calculations. These can be\nconsidered to be of three types:\n \n\\#LIST\n{ Binary operations, e.g. #ADDR:0x3014#, where two numbers in floating-point form\nare added together to give one 'last value'. }\n{ Unary operations, e.g. #ADDR:0x37B5#, where the 'last value' is changed to give\nthe appropriate function result as a new 'last value'. }\n{ Manipulatory operations, e.g. #ADDR:0x342D#, where the 'last value' is copied to\nthe first five bytes of the calculator's memory area. }\nLIST\\#\n \nThe operations to be performed are specified as a series of data-bytes, the\nliterals, that follow an RST \\#o28 instruction that calls this subroutine. The\nlast literal in the list is always '&38' which leads to an end to the whole\noperation.\n \nIn the case of a single operation needing to be performed, the operation\noffset can be passed to the calculator in the #REG:B# register, and operation\n'&3B', the #ADDR:0x33A2#(single calculation operation), performed.\n \nIt is also possible to call this subroutine recursively, i.e. from within\nitself, and in such a case it is possible to use the system variable\n\\#SYSVAR(BREG) as a counter that controls how many operations are performed\nbefore returning.\n \nThe first part of this subroutine is complicated but essentially it performs\nthe two tasks of setting the registers to hold their required values, and to\nproduce an offset, and possibly a parameter, from the literal that is\ncurrently being considered.\n \nThe offset is used to index into the calculator's #ADDR:0x32D7#(table of addresses)\nto find the required subroutine address.\n \nThe parameter is used when the multi-purpose subroutines are called.\n \nNote: a floating-point number may in reality be a set of string parameters.\n \nB Operation offset or counter"
                },
                {
                    "Address": 862,
                    "Comment": "This entry point is used by the routine at #ADDR:0x3449#."
                },
                {
                    "Address": 866,
                    "Comment": "This entry point is used by the routine at #ADDR:0x3449#."
                },
                {
                    "Address": 876,
                    "Comment": "This entry point is used by the routine at #ADDR:0x33A2#."
                },
                {
                    "Address": 929,
                    "Comment": "The address of this entry point is found in the #ADDR:0x32D7#(table of addresses).\nIt is called via the calculator literal &02 by the routines at #ADDR:0x03F8#,\n#ADDR:0x1CF0#, #ADDR:0x1D03#, #ADDR:0x1DAB#, #ADDR:0x2320#, #ADDR:0x2382#, #ADDR:0x247D#, #ADDR:0x25F8#, #ADDR:0x2AFF#,\n#ADDR:0x2C9B#, #ADDR:0x2D4F#, #ADDR:0x2DA2#, #ADDR:0x2DE3#, #ADDR:0x3449#, #ADDR:0x36A0#, #ADDR:0x36C4#, #ADDR:0x3713#,\n#ADDR:0x3783# and #ADDR:0x3851#."
                },
                {
                    "Address": 930,
                    "Comment": "The #ADDR:0x33A1# subroutine contains only the single '\\#S/RET/' instruction above.\nThe literal '&02' results in this subroutine being considered as a binary\noperation that is to be entered with a first number addressed by the #REG:HL#\nregister pair and a second number addressed by the #REG:DE# register pair, and\nthe result produced again addressed by the #REG:HL# register pair.\n \nThe single '\\#S/RET/' instruction thereby leads to the first number being\nconsidered as the resulting 'last value' and the second number considered as\nbeing deleted. Of course the number has not been deleted from the memory but\nremains inactive and will probably soon be overwritten.\nTHE 'SINGLE OPERATION' SUBROUTINE (offset &3B)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &3B by the routine at #ADDR:0x26C9#.\n \nThis subroutine is only called from #ADDR:0x2757#(\\#h2757) and is used to perform a\nsingle arithmetic operation. The offset that specifies which operation is to\nbe performed is supplied to the calculator in the #REG:B# register and\nsubsequently transferred to the system variable \\#SYSVAR(BREG).\n \nThe effect of calling this subroutine is essentially to make a jump to the\nappropriate subroutine for the single operation."
                },
                {
                    "Address": 937,
                    "Comment": "THE 'TEST 5-SPACES' SUBROUTINE\n \nUsed by the routines at #ADDR:0x2AB1#, #ADDR:0x33C0# and #ADDR:0x33C6#.\n \nThis subroutine tests whether there is sufficient room in memory for another\n5-byte floating-point number to be added to the calculator stack.\n \nO:BC &0005"
                },
                {
                    "Address": 948,
                    "Comment": "THE 'STACK NUMBER' SUBROUTINE\n \nUsed by the routines at #ADDR:0x03F8#, #ADDR:0x268D# and #ADDR:0x26C9#.\n \nThis subroutine is called by #ADDR:0x03F8#, #ADDR:0x25AF# and #ADDR:0x26C9# to copy\n\\#SYSVAR(STKEND) to #REG:DE#, move a floating-point number to the calculator\nstack, and reset \\#SYSVAR(STKEND) from #REG:DE#. It calls #ADDR:0x33C0# to do the\nactual move.\n \nHL Address of the first byte of the number to stack"
                },
                {
                    "Address": 960,
                    "Comment": "THE 'MOVE A FLOATING-POINT NUMBER' SUBROUTINE (offset &31)\n \nUsed by the routines at #ADDR:0x2951#, #ADDR:0x33B4#, #ADDR:0x340F# and #ADDR:0x342D#.\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &31 by the routines at #ADDR:0x03F8#, #ADDR:0x2320#,\n#ADDR:0x2382#, #ADDR:0x247D#, #ADDR:0x25F8#, #ADDR:0x2D4F#, #ADDR:0x2DE3#, #ADDR:0x3449#, #ADDR:0x36A0#, #ADDR:0x36AF#,\n#ADDR:0x36C4#, #ADDR:0x3713#, #ADDR:0x3783#, #ADDR:0x37B5#, #ADDR:0x37DA#, #ADDR:0x37E2#, #ADDR:0x3833#, #ADDR:0x384A# and\n#ADDR:0x3851#.\n \nThis subroutine moves a floating-point number to the top of the calculator\nstack (3 cases) or from the top of the stack to the calculator's memory area\n(1 case). It is also called through the calculator when it simply duplicates\nthe number at the top of the calculator stack, the 'last value', thereby\nextending the stack by five bytes.\n \nDE Destination address\nHL Address of the first byte of the number to move"
                },
                {
                    "Address": 966,
                    "Comment": "THE 'STACK LITERALS' SUBROUTINE (offset &34)\n \nUsed by the routine at #ADDR:0x3449#.\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &34 by the routines at #ADDR:0x03F8#, #ADDR:0x247D#,\n#ADDR:0x25F8#, #ADDR:0x2DC1#, #ADDR:0x36C4#, #ADDR:0x3713# and #ADDR:0x3783#.\n \nThis subroutine places on the calculator stack, as a 'last value', the\nfloating-point number supplied to it as 2, 3, 4 or 5 literals.\n \nWhen called by using offset '&34' the literals follow the '&34' in the list\nof literals; when called by the #ADDR:0x3449#(series generator), the literals are\nsupplied by the subroutine that called for a series to be generated; and when\ncalled by #ADDR:0x33F7# and #ADDR:0x341B# the literals are obtained from the calculator's\n#ADDR:0x32C5#(table of constants).\n \nIn each case, the first literal supplied is divided by &40, and the integer\nquotient plus 1 determines whether 1, 2, 3 or 4 further literals will be\ntaken from the source to form the mantissa of the number. Any unfilled bytes\nof the five bytes that go to form a 5-byte floating-point number are set to\nzero. The first literal is also used to determine the exponent, after\nreducing mod &40, unless the remainder is zero, in which case the second\nliteral is used, as it stands, without reducing mod &40. In either case, &50\nis added to the literal, giving the augmented exponent byte, e (the true\nexponent e' plus &80). The rest of the 5 bytes are stacked, including any\nzeros needed, and the subroutine returns.\n \nDE \\#SYSVAR(STKEND)\nHL' Address of the next literal"
                },
                {
                    "Address": 968,
                    "Comment": "This entry point is used by the routines at #ADDR:0x33F7# and #ADDR:0x341B#."
                },
                {
                    "Address": 1015,
                    "Comment": "THE 'SKIP CONSTANTS' SUBROUTINE\n \nUsed by the routine at #ADDR:0x341B#.\n \nThis subroutine is entered with the \\#REGhl' register pair holding the base\naddress of the calculator's #ADDR:0x32C5#(table of constants) and the #REG:A#\nregister holding a parameter that shows which of the five constants is being\nrequested.\n \nThe subroutine performs the null operations of loading the five bytes of each\nunwanted constant into the locations 0000, 0001, 0002, 0003 and 0004 at the\nbeginning of the ROM until the requested constant is reached.\n \nThe subroutine returns with the \\#REGhl' register pair holding the base\naddress of the requested constant within the table of constants.\n \nA Index of the required constant (&00 to &04)\nHL' #ADDR:0x32C5#\nO:HL' Address of the required constant"
                }
            ],
            "DataInfo": [
                {
                    "Address": 430,
                    "Comment": "}"
                },
                {
                    "Address": 709,
                    "ByteSize": 3,
                    "Comment": "zero (00 00 00 00 00)",
                    "DataType": 1
                },
                {
                    "Address": 712,
                    "ByteSize": 4,
                    "Comment": "one (00 00 01 00 00)",
                    "DataType": 1
                },
                {
                    "Address": 716,
                    "ByteSize": 2,
                    "Comment": "a half (80 00 00 00 00)",
                    "DataType": 1
                },
                {
                    "Address": 718,
                    "ByteSize": 5,
                    "Comment": "a half of pi (81 49 \\#S/0F DA A2/)",
                    "DataType": 1
                },
                {
                    "Address": 723,
                    "ByteSize": 4,
                    "Comment": "ten (00 00 \\#S/0A/ 00 00)",
                    "DataType": 1
                },
                {
                    "Address": 727,
                    "ByteSize": 2,
                    "Comment": "&00",
                    "DataType": 2
                },
                {
                    "Address": 729,
                    "ByteSize": 2,
                    "Comment": "&01",
                    "DataType": 2
                },
                {
                    "Address": 731,
                    "ByteSize": 2,
                    "Comment": "&02",
                    "DataType": 2
                },
                {
                    "Address": 733,
                    "ByteSize": 2,
                    "Comment": "&03",
                    "DataType": 2
                },
                {
                    "Address": 735,
                    "ByteSize": 2,
                    "Comment": "&04",
                    "DataType": 2
                },
                {
                    "Address": 737,
                    "ByteSize": 2,
                    "Comment": "&05",
                    "DataType": 2
                },
                {
                    "Address": 739,
                    "ByteSize": 2,
                    "Comment": "&06",
                    "DataType": 2
                },
                {
                    "Address": 741,
                    "ByteSize": 2,
                    "Comment": "&07",
                    "DataType": 2
                },
                {
                    "Address": 743,
                    "ByteSize": 2,
                    "Comment": "&08",
                    "DataType": 2
                },
                {
                    "Address": 745,
                    "ByteSize": 2,
                    "Comment": "&09: <= (numbers)",
                    "DataType": 2
                },
                {
                    "Address": 747,
                    "ByteSize": 2,
                    "Comment": "&0A: >= (numbers)",
                    "DataType": 2
                },
                {
                    "Address": 749,
                    "ByteSize": 2,
                    "Comment": "&0B: <> (numbers)",
                    "DataType": 2
                },
                {
                    "Address": 751,
                    "ByteSize": 2,
                    "Comment": "&0C: > (numbers)",
                    "DataType": 2
                },
                {
                    "Address": 753,
                    "ByteSize": 2,
                    "Comment": "&0D: < (numbers)",
                    "DataType": 2
                },
                {
                    "Address": 755,
                    "ByteSize": 2,
                    "Comment": "&0E: = (numbers)",
                    "DataType": 2
                },
                {
                    "Address": 757,
                    "ByteSize": 2,
                    "Comment": "&0F",
                    "DataType": 2
                },
                {
                    "Address": 759,
                    "ByteSize": 2,
                    "Comment": "&10",
                    "DataType": 2
                },
                {
                    "Address": 761,
                    "ByteSize": 2,
                    "Comment": "&11: <= (strings)",
                    "DataType": 2
                },
                {
                    "Address": 763,
                    "ByteSize": 2,
                    "Comment": "&12: >= (strings)",
                    "DataType": 2
                },
                {
                    "Address": 765,
                    "ByteSize": 2,
                    "Comment": "&13: <> (strings)",
                    "DataType": 2
                },
                {
                    "Address": 767,
                    "ByteSize": 2,
                    "Comment": "&14: > (strings)",
                    "DataType": 2
                },
                {
                    "Address": 769,
                    "ByteSize": 2,
                    "Comment": "&15: < (strings)",
                    "DataType": 2
                },
                {
                    "Address": 771,
                    "ByteSize": 2,
                    "Comment": "&16: = (strings)",
                    "DataType": 2
                },
                {
                    "Address": 773,
                    "ByteSize": 2,
                    "Comment": "&17",
                    "DataType": 2
                },
                {
                    "Address": 775,
                    "ByteSize": 2,
                    "Comment": "&18 (VAL$)",
                    "DataType": 2
                },
                {
                    "Address": 777,
                    "ByteSize": 2,
                    "Comment": "&19",
                    "DataType": 2
                },
                {
                    "Address": 779,
                    "ByteSize": 2,
                    "Comment": "&1A",
                    "DataType": 2
                },
                {
                    "Address": 781,
                    "ByteSize": 2,
                    "Comment": "&1B",
                    "DataType": 2
                },
                {
                    "Address": 783,
                    "ByteSize": 2,
                    "Comment": "&1C",
                    "DataType": 2
                },
                {
                    "Address": 785,
                    "ByteSize": 2,
                    "Comment": "&1D (VAL)",
                    "DataType": 2
                },
                {
                    "Address": 787,
                    "ByteSize": 2,
                    "Comment": "&1E",
                    "DataType": 2
                },
                {
                    "Address": 789,
                    "ByteSize": 2,
                    "Comment": "&1F",
                    "DataType": 2
                },
                {
                    "Address": 791,
                    "ByteSize": 2,
                    "Comment": "&20",
                    "DataType": 2
                },
                {
                    "Address": 793,
                    "ByteSize": 2,
                    "Comment": "&21",
                    "DataType": 2
                },
                {
                    "Address": 795,
                    "ByteSize": 2,
                    "Comment": "&22",
                    "DataType": 2
                },
                {
                    "Address": 797,
                    "ByteSize": 2,
                    "Comment": "&23",
                    "DataType": 2
                },
                {
                    "Address": 799,
                    "ByteSize": 2,
                    "Comment": "&24",
                    "DataType": 2
                },
                {
                    "Address": 801,
                    "ByteSize": 2,
                    "Comment": "&25",
                    "DataType": 2
                },
                {
                    "Address": 803,
                    "ByteSize": 2,
                    "Comment": "&26",
                    "DataType": 2
                },
                {
                    "Address": 805,
                    "ByteSize": 2,
                    "Comment": "&27",
                    "DataType": 2
                },
                {
                    "Address": 807,
                    "ByteSize": 2,
                    "Comment": "&28",
                    "DataType": 2
                },
                {
                    "Address": 809,
                    "ByteSize": 2,
                    "Comment": "&29",
                    "DataType": 2
                },
                {
                    "Address": 811,
                    "ByteSize": 2,
                    "Comment": "&2A",
                    "DataType": 2
                },
                {
                    "Address": 813,
                    "ByteSize": 2,
                    "Comment": "&2B",
                    "DataType": 2
                },
                {
                    "Address": 815,
                    "ByteSize": 2,
                    "Comment": "&2C",
                    "DataType": 2
                },
                {
                    "Address": 817,
                    "ByteSize": 2,
                    "Comment": "&2D",
                    "DataType": 2
                },
                {
                    "Address": 819,
                    "ByteSize": 2,
                    "Comment": "&2E",
                    "DataType": 2
                },
                {
                    "Address": 821,
                    "ByteSize": 2,
                    "Comment": "&2F",
                    "DataType": 2
                },
                {
                    "Address": 823,
                    "ByteSize": 2,
                    "Comment": "&30",
                    "DataType": 2
                },
                {
                    "Address": 825,
                    "ByteSize": 2,
                    "Comment": "&31",
                    "DataType": 2
                },
                {
                    "Address": 827,
                    "ByteSize": 2,
                    "Comment": "&32",
                    "DataType": 2
                },
                {
                    "Address": 829,
                    "ByteSize": 2,
                    "Comment": "&33",
                    "DataType": 2
                },
                {
                    "Address": 831,
                    "ByteSize": 2,
                    "Comment": "&34",
                    "DataType": 2
                },
                {
                    "Address": 833,
                    "ByteSize": 2,
                    "Comment": "&35",
                    "DataType": 2
                },
                {
                    "Address": 835,
                    "ByteSize": 2,
                    "Comment": "&36",
                    "DataType": 2
                },
                {
                    "Address": 837,
                    "ByteSize": 2,
                    "Comment": "&37",
                    "DataType": 2
                },
                {
                    "Address": 839,
                    "ByteSize": 2,
                    "Comment": "&38",
                    "DataType": 2
                },
                {
                    "Address": 841,
                    "ByteSize": 2,
                    "Comment": "&39",
                    "DataType": 2
                },
                {
                    "Address": 843,
                    "ByteSize": 2,
                    "Comment": "&3A",
                    "DataType": 2
                },
                {
                    "Address": 845,
                    "ByteSize": 2,
                    "Comment": "&3B",
                    "DataType": 2
                },
                {
                    "Address": 847,
                    "ByteSize": 2,
                    "Comment": "&3C",
                    "DataType": 2
                },
                {
                    "Address": 849,
                    "ByteSize": 2,
                    "Comment": "&3D",
                    "DataType": 2
                },
                {
                    "Address": 851,
                    "ByteSize": 2,
                    "Comment": "&3E",
                    "DataType": 2
                },
                {
                    "Address": 853,
                    "ByteSize": 2,
                    "Comment": "&3F",
                    "DataType": 2
                },
                {
                    "Address": 855,
                    "ByteSize": 2,
                    "Comment": "&40",
                    "DataType": 2
                },
                {
                    "Address": 857,
                    "ByteSize": 2,
                    "Comment": "&41",
                    "DataType": 2
                }
            ],
            "LabelInfo": [
                {
                    "Address": 4,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "ADD_BACK"
                },
                {
                    "Address": 13,
                    "LabelType": 2,
                    "Name": "ALL_ADDED"
                },
                {
                    "Address": 15,
                    "LabelType": 2,
                    "Name": "subtract"
                },
                {
                    "Address": 20,
                    "LabelType": 2,
                    "Name": "addition"
                },
                {
                    "Address": 60,
                    "LabelType": 2,
                    "Name": "ADDN_OFLW"
                },
                {
                    "Address": 62,
                    "LabelType": 2,
                    "Name": "FULL_ADDN"
                },
                {
                    "Address": 85,
                    "LabelType": 2,
                    "Name": "SHIFT_LEN"
                },
                {
                    "Address": 124,
                    "LabelType": 2,
                    "Name": "TEST_NEG"
                },
                {
                    "Address": 159,
                    "LabelType": 2,
                    "Name": "ADD_REP_6"
                },
                {
                    "Address": 163,
                    "LabelType": 2,
                    "Name": "END_COMPL"
                },
                {
                    "Address": 165,
                    "LabelType": 2,
                    "Name": "GO_NC_MLT"
                },
                {
                    "Address": 169,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "HL_HLxDE"
                },
                {
                    "Address": 177,
                    "LabelType": 2,
                    "Name": "HL_LOOP"
                },
                {
                    "Address": 188,
                    "LabelType": 2,
                    "Name": "HL_AGAIN"
                },
                {
                    "Address": 190,
                    "LabelType": 2,
                    "Name": "HL_END"
                },
                {
                    "Address": 192,
                    "LabelType": 2,
                    "Name": "PREP_M_D"
                },
                {
                    "Address": 202,
                    "LabelType": 2,
                    "Name": "multiply"
                },
                {
                    "Address": 234,
                    "LabelType": 2,
                    "Name": "MULT_RSLT"
                },
                {
                    "Address": 239,
                    "LabelType": 2,
                    "Name": "MULT_OFLW"
                },
                {
                    "Address": 240,
                    "LabelType": 2,
                    "Name": "MULT_LONG"
                },
                {
                    "Address": 276,
                    "LabelType": 2,
                    "Name": "MLT_LOOP"
                },
                {
                    "Address": 283,
                    "LabelType": 2,
                    "Name": "NO_ADD"
                },
                {
                    "Address": 293,
                    "LabelType": 2,
                    "Name": "STRT_MLT"
                },
                {
                    "Address": 315,
                    "LabelType": 2,
                    "Name": "MAKE_EXPT"
                },
                {
                    "Address": 317,
                    "LabelType": 2,
                    "Name": "DIVN_EXPT"
                },
                {
                    "Address": 326,
                    "LabelType": 2,
                    "Name": "OFLW1_CLR"
                },
                {
                    "Address": 337,
                    "LabelType": 2,
                    "Name": "OFLW2_CLR"
                },
                {
                    "Address": 341,
                    "LabelType": 2,
                    "Name": "TEST_NORM"
                },
                {
                    "Address": 345,
                    "LabelType": 2,
                    "Name": "NEAR_ZERO"
                },
                {
                    "Address": 349,
                    "LabelType": 2,
                    "Name": "ZERO_RSLT"
                },
                {
                    "Address": 350,
                    "LabelType": 2,
                    "Name": "SKIP_ZERO"
                },
                {
                    "Address": 364,
                    "LabelType": 2,
                    "Name": "NORMALISE"
                },
                {
                    "Address": 366,
                    "LabelType": 2,
                    "Name": "SHIFT_ONE"
                },
                {
                    "Address": 390,
                    "LabelType": 2,
                    "Name": "NORML_NOW"
                },
                {
                    "Address": 405,
                    "LabelType": 2,
                    "Name": "OFLOW_CLR"
                },
                {
                    "Address": 429,
                    "LabelType": 2,
                    "Name": "REPORT_6"
                },
                {
                    "Address": 431,
                    "LabelType": 2,
                    "Name": "division"
                },
                {
                    "Address": 466,
                    "LabelType": 2,
                    "Name": "DIV_LOOP"
                },
                {
                    "Address": 475,
                    "LabelType": 2,
                    "Name": "DIV_34TH"
                },
                {
                    "Address": 482,
                    "LabelType": 2,
                    "Name": "DIV_START"
                },
                {
                    "Address": 498,
                    "LabelType": 2,
                    "Name": "SUBN_ONLY"
                },
                {
                    "Address": 505,
                    "LabelType": 2,
                    "Name": "NO_RSTORE"
                },
                {
                    "Address": 506,
                    "LabelType": 2,
                    "Name": "COUNT_ONE"
                },
                {
                    "Address": 532,
                    "LabelType": 2,
                    "Name": "truncate"
                },
                {
                    "Address": 545,
                    "LabelType": 2,
                    "Name": "T_GR_ZERO"
                },
                {
                    "Address": 563,
                    "LabelType": 2,
                    "Name": "T_FIRST"
                },
                {
                    "Address": 575,
                    "LabelType": 2,
                    "Name": "T_SMALL"
                },
                {
                    "Address": 594,
                    "LabelType": 2,
                    "Name": "T_NUMERIC"
                },
                {
                    "Address": 606,
                    "LabelType": 2,
                    "Name": "T_TEST"
                },
                {
                    "Address": 609,
                    "LabelType": 2,
                    "Name": "T_SHIFT"
                },
                {
                    "Address": 615,
                    "LabelType": 2,
                    "Name": "T_STORE"
                },
                {
                    "Address": 620,
                    "LabelType": 2,
                    "Name": "T_EXPNENT"
                },
                {
                    "Address": 621,
                    "LabelType": 2,
                    "Name": "X_LARGE"
                },
                {
                    "Address": 626,
                    "LabelType": 2,
                    "Name": "NIL_BYTES"
                },
                {
                    "Address": 638,
                    "LabelType": 2,
                    "Name": "BYTE_ZERO"
                },
                {
                    "Address": 643,
                    "LabelType": 2,
                    "Name": "BITS_ZERO"
                },
                {
                    "Address": 650,
                    "LabelType": 2,
                    "Name": "LESS_MASK"
                },
                {
                    "Address": 656,
                    "LabelType": 2,
                    "Name": "IX_END"
                },
                {
                    "Address": 659,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "RE_ST_TWO"
                },
                {
                    "Address": 662,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "RESTK_SUB"
                },
                {
                    "Address": 663,
                    "LabelType": 2,
                    "Name": "re_stack"
                },
                {
                    "Address": 689,
                    "LabelType": 2,
                    "Name": "RS_NRMLSE"
                },
                {
                    "Address": 690,
                    "LabelType": 2,
                    "Name": "RSTK_LOOP"
                },
                {
                    "Address": 701,
                    "LabelType": 2,
                    "Name": "RS_STORE"
                },
                {
                    "Address": 709,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "CONSTANTS"
                },
                {
                    "Address": 712,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "stk_one"
                },
                {
                    "Address": 716,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "stk_half"
                },
                {
                    "Address": 718,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "stk_pi_2"
                },
                {
                    "Address": 723,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "stk_ten"
                },
                {
                    "Address": 727,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "CALCADDR"
                },
                {
                    "Address": 859,
                    "LabelType": 2,
                    "Name": "CALCULATE"
                },
                {
                    "Address": 862,
                    "LabelType": 2,
                    "Name": "GEN_ENT_1"
                },
                {
                    "Address": 866,
                    "LabelType": 2,
                    "Name": "GEN_ENT_2"
                },
                {
                    "Address": 869,
                    "LabelType": 2,
                    "Name": "RE_ENTRY"
                },
                {
                    "Address": 876,
                    "LabelType": 2,
                    "Name": "SCAN_ENT"
                },
                {
                    "Address": 896,
                    "LabelType": 2,
                    "Name": "FIRST_3D"
                },
                {
                    "Address": 908,
                    "LabelType": 2,
                    "Name": "DOUBLE_A"
                },
                {
                    "Address": 910,
                    "LabelType": 2,
                    "Name": "ENT_TABLE"
                },
                {
                    "Address": 929,
                    "LabelType": 2,
                    "Name": "delete"
                },
                {
                    "Address": 930,
                    "LabelType": 2,
                    "Name": "fp_calc_2"
                },
                {
                    "Address": 937,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "TEST_5_SP"
                },
                {
                    "Address": 948,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "STACK_NUM"
                },
                {
                    "Address": 960,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "duplicate"
                },
                {
                    "Address": 966,
                    "LabelType": 2,
                    "Name": "stk_data"
                },
                {
                    "Address": 968,
                    "LabelType": 2,
                    "Name": "STK_CONST"
                },
                {
                    "Address": 990,
                    "LabelType": 2,
                    "Name": "FORM_EXP"
                },
                {
                    "Address": 1009,
                    "LabelType": 2,
                    "Name": "STK_ZEROS"
                },
                {
                    "Address": 1015,
                    "LabelType": 2,
                    "Name": "SKIP_CONS"
                },
                {
                    "Address": 1016,
                    "LabelType": 2,
                    "Name": "SKIP_NEXT"
                }
            ],
            "PageId": 12
        },
        {
            "CodeInfo": [
                {
                    "Address": 1,
                    "ByteSize": 1,
                    "Comment": "Restore the result pointer."
                },
                {
                    "Address": 2,
                    "ByteSize": 1,
                    "Comment": "Restore the parameter."
                },
                {
                    "Address": 3,
                    "ByteSize": 1,
                    "Comment": "Count the loops."
                },
                {
                    "Address": 4,
                    "ByteSize": 2,
                    "Comment": "Jump back to consider the value of the counter.",
                    "OperandType": 2
                },
                {
                    "Address": 6,
                    "ByteSize": 1,
                    "Comment": "Copy the parameter to #REG:C#."
                },
                {
                    "Address": 7,
                    "ByteSize": 1,
                    "Comment": "Double the parameter."
                },
                {
                    "Address": 8,
                    "ByteSize": 1,
                    "Comment": "Double the result."
                },
                {
                    "Address": 9,
                    "ByteSize": 1,
                    "Comment": "Add the value of the parameter to give five times the\noriginal value."
                },
                {
                    "Address": 10,
                    "ByteSize": 1,
                    "Comment": "{This result is wanted in the #REG:BC# register pair."
                },
                {
                    "Address": 11,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 13,
                    "ByteSize": 1,
                    "Comment": "Produce the new base address."
                },
                {
                    "Address": 14,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 15,
                    "ByteSize": 1,
                    "Comment": "Save the result pointer."
                },
                {
                    "Address": 16,
                    "ByteSize": 3,
                    "Comment": "Fetch the pointer to the current memory area\n(\\#SYSVAR(MEM)).",
                    "OperandType": 1
                },
                {
                    "Address": 19,
                    "ByteSize": 3,
                    "Comment": "The base address is found.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 22,
                    "ByteSize": 3,
                    "Comment": "The five bytes are moved.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 25,
                    "ByteSize": 1,
                    "Comment": "Set the result pointer."
                },
                {
                    "Address": 26,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 27,
                    "ByteSize": 1,
                    "Comment": "{Set #REG:HL# to hold the result pointer."
                },
                {
                    "Address": 28,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 29,
                    "ByteSize": 1,
                    "Comment": "{Go to the alternate register set and save the next"
                },
                {
                    "Address": 30,
                    "ByteSize": 1,
                    "Comment": "literal pointer.}"
                },
                {
                    "Address": 31,
                    "ByteSize": 3,
                    "Comment": "The base address of the calculator's #ADDR:0x32C5#(table of\nconstants)."
                },
                {
                    "Address": 34,
                    "ByteSize": 1,
                    "Comment": "Back to the main set of registers."
                },
                {
                    "Address": 35,
                    "ByteSize": 3,
                    "Comment": "Find the requested base address.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 38,
                    "ByteSize": 3,
                    "Comment": "Expand the constant.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 41,
                    "ByteSize": 1,
                    "Comment": "{Restore the next literal pointer."
                },
                {
                    "Address": 42,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 43,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 44,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 45,
                    "ByteSize": 1,
                    "Comment": "Save the result pointer."
                },
                {
                    "Address": 46,
                    "ByteSize": 1,
                    "Comment": "Source to #REG:DE# briefly."
                },
                {
                    "Address": 47,
                    "ByteSize": 3,
                    "Comment": "Fetch the pointer to the current memory area\n(\\#SYSVAR(MEM)).",
                    "OperandType": 1
                },
                {
                    "Address": 50,
                    "ByteSize": 3,
                    "Comment": "The base address is found.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 53,
                    "ByteSize": 1,
                    "Comment": "Exchange source and destination pointers."
                },
                {
                    "Address": 54,
                    "ByteSize": 3,
                    "Comment": "The five bytes are moved.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 57,
                    "ByteSize": 1,
                    "Comment": "'Last value'+5, i.e. \\#SYSVAR(STKEND), to #REG:DE#."
                },
                {
                    "Address": 58,
                    "ByteSize": 1,
                    "Comment": "Result pointer to #REG:HL#."
                },
                {
                    "Address": 59,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 60,
                    "ByteSize": 2,
                    "Comment": "There are five bytes involved."
                },
                {
                    "Address": 62,
                    "ByteSize": 1,
                    "Comment": "Each byte of the second number."
                },
                {
                    "Address": 63,
                    "ByteSize": 1,
                    "Comment": "Each byte of the first number."
                },
                {
                    "Address": 64,
                    "ByteSize": 1,
                    "Comment": "Switch source and destination."
                },
                {
                    "Address": 65,
                    "ByteSize": 1,
                    "Comment": "Now to the first number."
                },
                {
                    "Address": 66,
                    "ByteSize": 1,
                    "Comment": "Now to the second number."
                },
                {
                    "Address": 67,
                    "ByteSize": 1,
                    "Comment": "{Move to consider the next pair of bytes."
                },
                {
                    "Address": 68,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 69,
                    "ByteSize": 2,
                    "Comment": "Exchange the five bytes.",
                    "OperandType": 2
                },
                {
                    "Address": 71,
                    "ByteSize": 1,
                    "Comment": "Get the pointers correct as 5 is an odd number."
                },
                {
                    "Address": 72,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 73,
                    "ByteSize": 1,
                    "Comment": "Move the parameter to #REG:B#."
                },
                {
                    "Address": 74,
                    "ByteSize": 3,
                    "Comment": "In effect a RST \\#o28 instruction but sets the counter.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 90,
                    "ByteSize": 3,
                    "Comment": "B(R), 2*B(R)*Z-B(R-1), A(R+1)",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 93,
                    "ByteSize": 3,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 105,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 106,
                    "ByteSize": 2,
                    "Comment": "#REG:B# is set to &FF."
                },
                {
                    "Address": 108,
                    "ByteSize": 2,
                    "Comment": "The jump is made into 'unary minus'.",
                    "OperandType": 2
                },
                {
                    "Address": 110,
                    "ByteSize": 3,
                    "Comment": "{If the number is zero, the subroutine returns leaving",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 113,
                    "ByteSize": 1,
                    "Comment": "00 00 00 00 00 unchanged.}"
                },
                {
                    "Address": 114,
                    "ByteSize": 2,
                    "Comment": "#REG:B# is set to &00 for 'negate'."
                },
                {
                    "Address": 116,
                    "ByteSize": 1,
                    "Comment": "{If the first byte is zero, the jump is made to deal"
                },
                {
                    "Address": 117,
                    "ByteSize": 1,
                    "Comment": "with a 'small integer'."
                },
                {
                    "Address": 118,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 120,
                    "ByteSize": 1,
                    "Comment": "Point to the second byte."
                },
                {
                    "Address": 121,
                    "ByteSize": 1,
                    "Comment": "Get &FF for 'abs', &00 for 'negate'."
                },
                {
                    "Address": 122,
                    "ByteSize": 2,
                    "Comment": "Now &80 for 'abs', &00 for 'negate'."
                },
                {
                    "Address": 124,
                    "ByteSize": 1,
                    "Comment": "This sets bit 7 for 'abs', but changes nothing for\n'negate'."
                },
                {
                    "Address": 125,
                    "ByteSize": 1,
                    "Comment": "{Now bit 7 is changed, leading to bit 7 of byte 2 reset"
                },
                {
                    "Address": 126,
                    "ByteSize": 1,
                    "Comment": "for 'abs', and simply changed for 'negate'."
                },
                {
                    "Address": 127,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 128,
                    "ByteSize": 1,
                    "Comment": "The new second byte is stored."
                },
                {
                    "Address": 129,
                    "ByteSize": 1,
                    "Comment": "#REG:HL# points to the first byte again."
                },
                {
                    "Address": 130,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 131,
                    "ByteSize": 1,
                    "Comment": "Save \\#SYSVAR(STKEND) in #REG:DE#."
                },
                {
                    "Address": 132,
                    "ByteSize": 1,
                    "Comment": "Save pointer to the number in #REG:HL#."
                },
                {
                    "Address": 133,
                    "ByteSize": 3,
                    "Comment": "Fetch the sign in #REG:C#, the number in #REG:DE#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 136,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer to the number in #REG:HL#."
                },
                {
                    "Address": 137,
                    "ByteSize": 1,
                    "Comment": "Get &FF for 'abs', &00 for 'negate'."
                },
                {
                    "Address": 138,
                    "ByteSize": 1,
                    "Comment": "Now &FF for 'abs', no change for 'negate'."
                },
                {
                    "Address": 139,
                    "ByteSize": 1,
                    "Comment": "{Now &00 for 'abs', and a changed byte for 'negate';"
                },
                {
                    "Address": 140,
                    "ByteSize": 1,
                    "Comment": "store it in #REG:C#.}"
                },
                {
                    "Address": 141,
                    "ByteSize": 3,
                    "Comment": "Store result on the stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 144,
                    "ByteSize": 1,
                    "Comment": "Return \\#SYSVAR(STKEND) to #REG:DE#."
                },
                {
                    "Address": 145,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 146,
                    "ByteSize": 3,
                    "Comment": "{If X is zero, just return with zero as the 'last",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 149,
                    "ByteSize": 1,
                    "Comment": "value'.}"
                },
                {
                    "Address": 150,
                    "ByteSize": 1,
                    "Comment": "Save the pointer to \\#SYSVAR(STKEND)."
                },
                {
                    "Address": 151,
                    "ByteSize": 3,
                    "Comment": "Store 1 in #REG:DE#."
                },
                {
                    "Address": 154,
                    "ByteSize": 1,
                    "Comment": "Point to the second byte of X."
                },
                {
                    "Address": 155,
                    "ByteSize": 2,
                    "Comment": "Rotate bit 7 into the carry flag."
                },
                {
                    "Address": 157,
                    "ByteSize": 1,
                    "Comment": "Point to the destination again."
                },
                {
                    "Address": 158,
                    "ByteSize": 1,
                    "Comment": "{Set #REG:C# to zero for positive X and to &FF for"
                },
                {
                    "Address": 159,
                    "ByteSize": 1,
                    "Comment": "negative X.}"
                },
                {
                    "Address": 160,
                    "ByteSize": 3,
                    "Comment": "Stack 1 or -1 as required.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 163,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer to \\#SYSVAR(STKEND)."
                },
                {
                    "Address": 164,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 165,
                    "ByteSize": 3,
                    "Comment": "The 'last value', X, is compressed into #REG:BC#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 168,
                    "ByteSize": 2,
                    "Comment": "The signal is received."
                },
                {
                    "Address": 170,
                    "ByteSize": 2,
                    "Comment": "Jump to stack the result.",
                    "OperandType": 2
                },
                {
                    "Address": 172,
                    "ByteSize": 3,
                    "Comment": "Evaluate the 'last value', rounded to the nearest\ninteger; test that it is in range and return it in\n#REG:BC#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 175,
                    "ByteSize": 1,
                    "Comment": "Fetch the required byte."
                },
                {
                    "Address": 176,
                    "ByteSize": 3,
                    "Comment": "Exit by jumping to #ADDR:0x2D28#.",
                    "OperandType": 2
                },
                {
                    "Address": 179,
                    "ByteSize": 3,
                    "Comment": "Evaluate the 'last value', rounded to the nearest\ninteger; test that it is in range and return it in\n#REG:BC#.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 182,
                    "ByteSize": 3,
                    "Comment": "{Make the return address be that of the subroutine"
                },
                {
                    "Address": 185,
                    "ByteSize": 1,
                    "Comment": "#ADDR:0x2D2B#.}"
                },
                {
                    "Address": 186,
                    "ByteSize": 1,
                    "Comment": "{Make an indirect jump to the required location."
                },
                {
                    "Address": 187,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 188,
                    "ByteSize": 3,
                    "Comment": "Fetch the parameters of the string X$.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 191,
                    "ByteSize": 1,
                    "Comment": "Decrease the length by 1 to test it."
                },
                {
                    "Address": 192,
                    "ByteSize": 1,
                    "Comment": "{If the length was not 1, then jump to give error report"
                },
                {
                    "Address": 193,
                    "ByteSize": 1,
                    "Comment": "A."
                },
                {
                    "Address": 194,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 196,
                    "ByteSize": 1,
                    "Comment": "Fetch the single code of the string."
                },
                {
                    "Address": 197,
                    "ByteSize": 3,
                    "Comment": "Does it denote a letter?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 200,
                    "ByteSize": 2,
                    "Comment": "If so, jump to gets its address.",
                    "OperandType": 2
                },
                {
                    "Address": 202,
                    "ByteSize": 2,
                    "Comment": "Reduce range for actual user-defined graphics to 0-20."
                },
                {
                    "Address": 204,
                    "ByteSize": 2,
                    "Comment": "Give report A if out of range.",
                    "OperandType": 2
                },
                {
                    "Address": 206,
                    "ByteSize": 2,
                    "Comment": "Test the range again."
                },
                {
                    "Address": 208,
                    "ByteSize": 2,
                    "Comment": "Give report A if out of range.",
                    "OperandType": 2
                },
                {
                    "Address": 210,
                    "ByteSize": 1,
                    "Comment": "Make range of user-defined graphics 1 to 21, as for 'a'\nto 'u'."
                },
                {
                    "Address": 211,
                    "ByteSize": 1,
                    "Comment": "Now make the range 0 to 20 in each case."
                },
                {
                    "Address": 212,
                    "ByteSize": 1,
                    "Comment": "{Multiply by 8 to get an offset for the address."
                },
                {
                    "Address": 213,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 214,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 215,
                    "ByteSize": 2,
                    "Comment": "Test the range of the offset."
                },
                {
                    "Address": 217,
                    "ByteSize": 2,
                    "Comment": "Give report A if out of range.",
                    "OperandType": 2
                },
                {
                    "Address": 219,
                    "ByteSize": 4,
                    "Comment": "Fetch the address of the first user-defined graphic\n(\\#SYSVAR(UDG)) in #REG:BC#.",
                    "OperandType": 1
                },
                {
                    "Address": 223,
                    "ByteSize": 1,
                    "Comment": "Add #REG:C# to the offset."
                },
                {
                    "Address": 224,
                    "ByteSize": 1,
                    "Comment": "Store the result back in #REG:C#."
                },
                {
                    "Address": 225,
                    "ByteSize": 2,
                    "Comment": "Jump if there is no carry.",
                    "OperandType": 2
                },
                {
                    "Address": 227,
                    "ByteSize": 1,
                    "Comment": "Increment #REG:B# to complete the address."
                },
                {
                    "Address": 228,
                    "ByteSize": 3,
                    "Comment": "Jump to stack the address.",
                    "OperandType": 2
                },
                {
                    "Address": 231,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 233,
                    "ByteSize": 1,
                    "Comment": "Save #REG:HL# on the stack."
                },
                {
                    "Address": 234,
                    "ByteSize": 1,
                    "Comment": "Save #REG:BC# on the stack."
                },
                {
                    "Address": 235,
                    "ByteSize": 1,
                    "Comment": "Save the value of #REG:A# in #REG:B#."
                },
                {
                    "Address": 236,
                    "ByteSize": 1,
                    "Comment": "Get the first byte."
                },
                {
                    "Address": 237,
                    "ByteSize": 1,
                    "Comment": "Point to the second byte."
                },
                {
                    "Address": 238,
                    "ByteSize": 1,
                    "Comment": "'\\#S/OR/' the first byte with the second."
                },
                {
                    "Address": 239,
                    "ByteSize": 1,
                    "Comment": "Point to the third byte."
                },
                {
                    "Address": 240,
                    "ByteSize": 1,
                    "Comment": "'\\#S/OR/' the result with the third byte."
                },
                {
                    "Address": 241,
                    "ByteSize": 1,
                    "Comment": "Point to the fourth byte."
                },
                {
                    "Address": 242,
                    "ByteSize": 1,
                    "Comment": "'\\#S/OR/' the result with the fourth byte."
                },
                {
                    "Address": 243,
                    "ByteSize": 1,
                    "Comment": "Restore the original value of #REG:A#."
                },
                {
                    "Address": 244,
                    "ByteSize": 1,
                    "Comment": "And of #REG:BC#."
                },
                {
                    "Address": 245,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer to the number to #REG:HL#."
                },
                {
                    "Address": 246,
                    "ByteSize": 1,
                    "Comment": "Return with carry reset if any of the four bytes was\nnon-zero."
                },
                {
                    "Address": 247,
                    "ByteSize": 1,
                    "Comment": "{Set the carry flag to indicate that the number was"
                },
                {
                    "Address": 248,
                    "ByteSize": 1,
                    "Comment": "zero, and return.}"
                },
                {
                    "Address": 249,
                    "ByteSize": 3,
                    "Comment": "Is the 'last-value' zero?",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 252,
                    "ByteSize": 1,
                    "Comment": "If so, return."
                },
                {
                    "Address": 253,
                    "ByteSize": 2,
                    "Comment": "{Jump forward to #ADDR:0x3506# but signal the opposite action"
                },
                {
                    "Address": 255,
                    "ByteSize": 2,
                    "Comment": "is needed.}",
                    "OperandType": 2
                },
                {
                    "Address": 257,
                    "ByteSize": 3,
                    "Comment": "The carry flag will be set only if the 'last value' is\nzero; this gives the correct result.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 260,
                    "ByteSize": 2,
                    "Comment": "Jump forward.",
                    "OperandType": 2
                },
                {
                    "Address": 262,
                    "ByteSize": 1,
                    "Comment": "Clear the #REG:A# register."
                },
                {
                    "Address": 263,
                    "ByteSize": 1,
                    "Comment": "Point to the sign byte."
                },
                {
                    "Address": 264,
                    "ByteSize": 1,
                    "Comment": "{The carry is reset for a positive number and set for a"
                },
                {
                    "Address": 265,
                    "ByteSize": 1,
                    "Comment": "negative number; when entered from #ADDR:0x34F9# the opposite"
                },
                {
                    "Address": 266,
                    "ByteSize": 1,
                    "Comment": "sign goes to the carry.}"
                },
                {
                    "Address": 267,
                    "ByteSize": 1,
                    "Comment": "Save the result pointer."
                },
                {
                    "Address": 268,
                    "ByteSize": 2,
                    "Comment": "Clear #REG:A# without disturbing the carry."
                },
                {
                    "Address": 270,
                    "ByteSize": 1,
                    "Comment": "Set the first byte to zero."
                },
                {
                    "Address": 271,
                    "ByteSize": 1,
                    "Comment": "Point to the second byte."
                },
                {
                    "Address": 272,
                    "ByteSize": 1,
                    "Comment": "Set the second byte to zero."
                },
                {
                    "Address": 273,
                    "ByteSize": 1,
                    "Comment": "Point to the third byte."
                },
                {
                    "Address": 274,
                    "ByteSize": 1,
                    "Comment": "Rotate the carry into #REG:A#, making #REG:A# one if the\ncarry was set, but zero if the carry was reset."
                },
                {
                    "Address": 275,
                    "ByteSize": 1,
                    "Comment": "Set the third byte to one or zero."
                },
                {
                    "Address": 276,
                    "ByteSize": 1,
                    "Comment": "Ensure that #REG:A# is zero again."
                },
                {
                    "Address": 277,
                    "ByteSize": 1,
                    "Comment": "Point to the fourth byte."
                },
                {
                    "Address": 278,
                    "ByteSize": 1,
                    "Comment": "Set the fourth byte to zero."
                },
                {
                    "Address": 279,
                    "ByteSize": 1,
                    "Comment": "Point to the fifth byte."
                },
                {
                    "Address": 280,
                    "ByteSize": 1,
                    "Comment": "Set the fifth byte to zero."
                },
                {
                    "Address": 281,
                    "ByteSize": 1,
                    "Comment": "Restore the result pointer."
                },
                {
                    "Address": 282,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 283,
                    "ByteSize": 1,
                    "Comment": "Point #REG:HL# at Y, the second number."
                },
                {
                    "Address": 284,
                    "ByteSize": 3,
                    "Comment": "Test whether Y is zero.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 287,
                    "ByteSize": 1,
                    "Comment": "Restore the pointers."
                },
                {
                    "Address": 288,
                    "ByteSize": 1,
                    "Comment": "Return if Y was zero; X is now the 'last value'."
                },
                {
                    "Address": 289,
                    "ByteSize": 1,
                    "Comment": "{Set the carry flag and jump back to set the 'last"
                },
                {
                    "Address": 290,
                    "ByteSize": 2,
                    "Comment": "value' to 1.}",
                    "OperandType": 2
                },
                {
                    "Address": 292,
                    "ByteSize": 1,
                    "Comment": "Point #REG:HL# at Y, #REG:DE# at X."
                },
                {
                    "Address": 293,
                    "ByteSize": 3,
                    "Comment": "Test whether Y is zero.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 296,
                    "ByteSize": 1,
                    "Comment": "Swap the pointers back."
                },
                {
                    "Address": 297,
                    "ByteSize": 1,
                    "Comment": "Return with X as the 'last value' if Y was non-zero."
                },
                {
                    "Address": 298,
                    "ByteSize": 1,
                    "Comment": "{Reset the carry flag and jump back to set the 'last"
                },
                {
                    "Address": 299,
                    "ByteSize": 2,
                    "Comment": "value' to zero.}",
                    "OperandType": 2
                },
                {
                    "Address": 301,
                    "ByteSize": 1,
                    "Comment": "Point #REG:HL# at Y, #REG:DE# at X$."
                },
                {
                    "Address": 302,
                    "ByteSize": 3,
                    "Comment": "Test whether Y is zero.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 305,
                    "ByteSize": 1,
                    "Comment": "Swap the pointers back."
                },
                {
                    "Address": 306,
                    "ByteSize": 1,
                    "Comment": "Return with X$ as the 'last value' if Y was non-zero."
                },
                {
                    "Address": 307,
                    "ByteSize": 1,
                    "Comment": "Save the pointer to the number."
                },
                {
                    "Address": 308,
                    "ByteSize": 1,
                    "Comment": "Point to the fifth byte of the string parameters, i.e.\nlength-high."
                },
                {
                    "Address": 309,
                    "ByteSize": 1,
                    "Comment": "Clear the #REG:A# register."
                },
                {
                    "Address": 310,
                    "ByteSize": 1,
                    "Comment": "Length-high is now set to zero."
                },
                {
                    "Address": 311,
                    "ByteSize": 1,
                    "Comment": "Point to length-low."
                },
                {
                    "Address": 312,
                    "ByteSize": 1,
                    "Comment": "Length-low is now set to zero."
                },
                {
                    "Address": 313,
                    "ByteSize": 1,
                    "Comment": "Restore the pointer."
                },
                {
                    "Address": 314,
                    "ByteSize": 1,
                    "Comment": "Return with the string parameters being the 'last\nvalue'."
                },
                {
                    "Address": 315,
                    "ByteSize": 1,
                    "Comment": "The single offset goes to the #REG:A# register."
                },
                {
                    "Address": 316,
                    "ByteSize": 2,
                    "Comment": "The range is now &01 to &06 and &09 to &0E."
                },
                {
                    "Address": 318,
                    "ByteSize": 2,
                    "Comment": "{This range is changed to &00, &01, &02, &04, &05, &06,"
                },
                {
                    "Address": 320,
                    "ByteSize": 2,
                    "Comment": "&08, &09, &0A, &0C, &0D, &0E.",
                    "OperandType": 2
                },
                {
                    "Address": 322,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 323,
                    "ByteSize": 1,
                    "Comment": "{Then reduced to &00 to &07 with carry set for 'greater"
                },
                {
                    "Address": 324,
                    "ByteSize": 2,
                    "Comment": "than or equal to' and 'less than'; the operations with",
                    "OperandType": 2
                },
                {
                    "Address": 326,
                    "ByteSize": 1,
                    "Comment": "carry set are then treated as their complementary"
                },
                {
                    "Address": 327,
                    "ByteSize": 1,
                    "Comment": "operation once their values have been exchanged."
                },
                {
                    "Address": 328,
                    "ByteSize": 3,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 331,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 332,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 333,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 334,
                    "ByteSize": 2,
                    "Comment": "{The numerical comparisons are now separated from the"
                },
                {
                    "Address": 336,
                    "ByteSize": 2,
                    "Comment": "string comparisons by testing bit 2.}",
                    "OperandType": 2
                },
                {
                    "Address": 338,
                    "ByteSize": 1,
                    "Comment": "The numerical operations now have the range &00 to &01\nwith carry set for 'equal' and 'not equal'."
                },
                {
                    "Address": 339,
                    "ByteSize": 1,
                    "Comment": "Save the offset."
                },
                {
                    "Address": 340,
                    "ByteSize": 3,
                    "Comment": "{The numbers are subtracted for the final tests.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 343,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 345,
                    "ByteSize": 1,
                    "Comment": "The string comparisons now have the range &02 to &03\nwith carry set for 'equal' and 'not equal'."
                },
                {
                    "Address": 346,
                    "ByteSize": 1,
                    "Comment": "Save the offset."
                },
                {
                    "Address": 347,
                    "ByteSize": 3,
                    "Comment": "{The lengths and starting addresses of the strings are",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 350,
                    "ByteSize": 1,
                    "Comment": "fetched from the calculator stack."
                },
                {
                    "Address": 351,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 352,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 355,
                    "ByteSize": 1,
                    "Comment": "The length of the second string."
                },
                {
                    "Address": 356,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 357,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 358,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 359,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 360,
                    "ByteSize": 2,
                    "Comment": "Jump unless the second string is null.",
                    "OperandType": 2
                },
                {
                    "Address": 362,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 363,
                    "ByteSize": 1,
                    "Comment": "Here the second string is either null or less than the\nfirst."
                },
                {
                    "Address": 364,
                    "ByteSize": 2,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 366,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 367,
                    "ByteSize": 1,
                    "Comment": "{The carry is complemented to give the correct test"
                },
                {
                    "Address": 368,
                    "ByteSize": 2,
                    "Comment": "results.}",
                    "OperandType": 2
                },
                {
                    "Address": 370,
                    "ByteSize": 1,
                    "Comment": "{Here the carry is used as it stands."
                },
                {
                    "Address": 371,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 373,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 374,
                    "ByteSize": 2,
                    "Comment": "The first string is now null, the second not.",
                    "OperandType": 2
                },
                {
                    "Address": 376,
                    "ByteSize": 1,
                    "Comment": "{Neither string is null, so their next bytes are"
                },
                {
                    "Address": 377,
                    "ByteSize": 1,
                    "Comment": "compared.}"
                },
                {
                    "Address": 378,
                    "ByteSize": 2,
                    "Comment": "Jump if the first byte is less.",
                    "OperandType": 2
                },
                {
                    "Address": 380,
                    "ByteSize": 2,
                    "Comment": "Jump if the second byte is less.",
                    "OperandType": 2
                },
                {
                    "Address": 382,
                    "ByteSize": 1,
                    "Comment": "{The bytes are equal; so the lengths are decremented and"
                },
                {
                    "Address": 383,
                    "ByteSize": 1,
                    "Comment": "a jump is made to #ADDR:0x3564# to compare the next bytes of"
                },
                {
                    "Address": 384,
                    "ByteSize": 1,
                    "Comment": "the reduced strings."
                },
                {
                    "Address": 385,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 386,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 387,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 389,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 390,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 391,
                    "ByteSize": 1,
                    "Comment": "The carry is cleared here for the correct test results."
                },
                {
                    "Address": 392,
                    "ByteSize": 1,
                    "Comment": "{For the string tests, a zero is put on to the"
                },
                {
                    "Address": 393,
                    "ByteSize": 1,
                    "Comment": "calculator stack.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 396,
                    "ByteSize": 1,
                    "Comment": "{These three tests, called as needed, give the correct"
                },
                {
                    "Address": 397,
                    "ByteSize": 1,
                    "Comment": "results for all twelve comparisons. The initial carry is"
                },
                {
                    "Address": 398,
                    "ByteSize": 3,
                    "Comment": "set for 'not equal' and 'equal', and the final carry is",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 401,
                    "ByteSize": 1,
                    "Comment": "set for 'greater than', 'less than' and 'equal'."
                },
                {
                    "Address": 402,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 403,
                    "ByteSize": 3,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 406,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 407,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 408,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 411,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 412,
                    "ByteSize": 3,
                    "Comment": "{The parameters of the second string are fetched and",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 415,
                    "ByteSize": 1,
                    "Comment": "saved."
                },
                {
                    "Address": 416,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 417,
                    "ByteSize": 3,
                    "Comment": "The parameters of the first string are fetched.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 420,
                    "ByteSize": 1,
                    "Comment": "{The lengths are now in #REG:HL# and #REG:BC#."
                },
                {
                    "Address": 421,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 422,
                    "ByteSize": 1,
                    "Comment": "{The parameters of the first string are saved."
                },
                {
                    "Address": 423,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 424,
                    "ByteSize": 1,
                    "Comment": "{The total length of the two strings is calculated and"
                },
                {
                    "Address": 425,
                    "ByteSize": 1,
                    "Comment": "passed to #REG:BC#."
                },
                {
                    "Address": 426,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 427,
                    "ByteSize": 1,
                    "Comment": "Sufficient room is made available.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 428,
                    "ByteSize": 3,
                    "Comment": "The parameters of the new string are passed to the\ncalculator stack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 431,
                    "ByteSize": 1,
                    "Comment": "{The parameters of the first string are retrieved and"
                },
                {
                    "Address": 432,
                    "ByteSize": 1,
                    "Comment": "the string copied to the work space as long as it is not"
                },
                {
                    "Address": 433,
                    "ByteSize": 1,
                    "Comment": "a null string."
                },
                {
                    "Address": 434,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 435,
                    "ByteSize": 2,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 437,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 439,
                    "ByteSize": 1,
                    "Comment": "{Exactly the same procedure is followed for the second"
                },
                {
                    "Address": 440,
                    "ByteSize": 1,
                    "Comment": "string thereby giving 'A$+B$'."
                },
                {
                    "Address": 441,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 442,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 443,
                    "ByteSize": 2,
                    "Comment": " ",
                    "OperandType": 2
                },
                {
                    "Address": 445,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 447,
                    "ByteSize": 3,
                    "Comment": "Fetch the current value of \\#SYSVAR(STKEND).",
                    "OperandType": 1
                },
                {
                    "Address": 450,
                    "ByteSize": 3,
                    "Comment": "Set #REG:DE# to -5, two's complement."
                },
                {
                    "Address": 453,
                    "ByteSize": 1,
                    "Comment": "Stack the value for \\#SYSVAR(STKEND)."
                },
                {
                    "Address": 454,
                    "ByteSize": 1,
                    "Comment": "Calculate \\#SYSVAR(STKEND)-5."
                },
                {
                    "Address": 455,
                    "ByteSize": 1,
                    "Comment": "#REG:DE# now holds \\#SYSVAR(STKEND) and #REG:HL# holds\n\\#SYSVAR(STKEND)-5."
                },
                {
                    "Address": 456,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 457,
                    "ByteSize": 3,
                    "Comment": "The 'last value' is compressed into the #REG:A# register.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 460,
                    "ByteSize": 2,
                    "Comment": "{Give the error report if X is greater than 255, or X is",
                    "OperandType": 2
                },
                {
                    "Address": 462,
                    "ByteSize": 2,
                    "Comment": "a negative number.}",
                    "OperandType": 2
                },
                {
                    "Address": 464,
                    "ByteSize": 1,
                    "Comment": "Save the compressed value of X."
                },
                {
                    "Address": 465,
                    "ByteSize": 3,
                    "Comment": "{Make one space available in the work space."
                },
                {
                    "Address": 468,
                    "ByteSize": 1,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 469,
                    "ByteSize": 1,
                    "Comment": "Fetch the value."
                },
                {
                    "Address": 470,
                    "ByteSize": 1,
                    "Comment": "Copy the value to the work space."
                },
                {
                    "Address": 471,
                    "ByteSize": 3,
                    "Comment": "Pass the parameters of the new string to the calculator\nstack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 474,
                    "ByteSize": 1,
                    "Comment": "Reset the pointers."
                },
                {
                    "Address": 475,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 476,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 478,
                    "ByteSize": 3,
                    "Comment": "{The current value of \\#SYSVAR(CH-ADD) is preserved on",
                    "OperandType": 1
                },
                {
                    "Address": 481,
                    "ByteSize": 1,
                    "Comment": "the machine stack.}"
                },
                {
                    "Address": 482,
                    "ByteSize": 1,
                    "Comment": "The 'offset' for 'val' or 'val$' must be in the #REG:B#\nregister; it is now copied to #REG:A#."
                },
                {
                    "Address": 483,
                    "ByteSize": 2,
                    "Comment": "Produce &00 and carry set for 'val', &FB and carry\nreset for 'val$'."
                },
                {
                    "Address": 485,
                    "ByteSize": 1,
                    "Comment": "Produce &FF (bit 6 therefore set) for 'val', but &00\n(bit 6 reset) for 'val$'."
                },
                {
                    "Address": 486,
                    "ByteSize": 1,
                    "Comment": "Save this 'flag' on the machine stack."
                },
                {
                    "Address": 487,
                    "ByteSize": 3,
                    "Comment": "{The parameters of the string are fetched; the starting",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 490,
                    "ByteSize": 1,
                    "Comment": "address is saved; one byte is added to the length and"
                },
                {
                    "Address": 491,
                    "ByteSize": 1,
                    "Comment": "room made available for the string (+1) in the work"
                },
                {
                    "Address": 492,
                    "ByteSize": 1,
                    "Comment": "space.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 493,
                    "ByteSize": 1,
                    "Comment": "The starting address of the string goes to #REG:HL# as a\nsource address."
                },
                {
                    "Address": 494,
                    "ByteSize": 4,
                    "Comment": "{The pointer to the first new space goes to",
                    "OperandType": 1
                },
                {
                    "Address": 498,
                    "ByteSize": 1,
                    "Comment": "\\#SYSVAR(CH-ADD) and to the machine stack.}"
                },
                {
                    "Address": 499,
                    "ByteSize": 2,
                    "Comment": "The string is copied to the work space, together with\nan extra byte."
                },
                {
                    "Address": 501,
                    "ByteSize": 1,
                    "Comment": "Switch the pointers."
                },
                {
                    "Address": 502,
                    "ByteSize": 1,
                    "Comment": "{The extra byte is replaced by a 'carriage return'"
                },
                {
                    "Address": 503,
                    "ByteSize": 2,
                    "Comment": "character.}"
                },
                {
                    "Address": 505,
                    "ByteSize": 4,
                    "Comment": "{The syntax flag (bit 7 of \\#SYSVAR(FLAGS)) is reset and"
                },
                {
                    "Address": 509,
                    "ByteSize": 3,
                    "Comment": "the string is scanned for correct syntax.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 512,
                    "ByteSize": 1,
                    "Comment": "The character after the string is fetched.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 513,
                    "ByteSize": 2,
                    "Comment": "A check is made that the end of the expression has been\nreached."
                },
                {
                    "Address": 515,
                    "ByteSize": 2,
                    "Comment": "If not, the error is reported.",
                    "OperandType": 2
                },
                {
                    "Address": 517,
                    "ByteSize": 1,
                    "Comment": "The starting address of the string is fetched."
                },
                {
                    "Address": 518,
                    "ByteSize": 1,
                    "Comment": "{The 'flag' for 'val/val$' is fetched and bit 6 is"
                },
                {
                    "Address": 519,
                    "ByteSize": 3,
                    "Comment": "compared with bit 6 of the result (\\#SYSVAR(FLAGS)) of"
                },
                {
                    "Address": 522,
                    "ByteSize": 2,
                    "Comment": "the syntax scan.}"
                },
                {
                    "Address": 524,
                    "ByteSize": 3,
                    "Comment": "Report the error if they do not match.",
                    "OperandType": 2
                },
                {
                    "Address": 527,
                    "ByteSize": 3,
                    "Comment": "Start address to \\#SYSVAR(CH-ADD) again.",
                    "OperandType": 1
                },
                {
                    "Address": 530,
                    "ByteSize": 4,
                    "Comment": "The flag (bit 7 of \\#SYSVAR(FLAGS)) is set for line\nexecution."
                },
                {
                    "Address": 534,
                    "ByteSize": 3,
                    "Comment": "The string is treated as a 'next expression' and a\n'last value' produced.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 537,
                    "ByteSize": 1,
                    "Comment": "{The original value of \\#SYSVAR(CH-ADD) is restored."
                },
                {
                    "Address": 538,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 541,
                    "ByteSize": 2,
                    "Comment": "The subroutine exits via #ADDR:0x35BF# which resets the\npointers.",
                    "OperandType": 2
                },
                {
                    "Address": 543,
                    "ByteSize": 3,
                    "Comment": "{One space is made in the work space and its address is"
                },
                {
                    "Address": 546,
                    "ByteSize": 1,
                    "Comment": "copied to \\#SYSVAR(K-CUR), the address of the cursor.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 547,
                    "ByteSize": 3,
                    "Comment": "}",
                    "OperandType": 1
                },
                {
                    "Address": 550,
                    "ByteSize": 1,
                    "Comment": "This address is saved on the stack too."
                },
                {
                    "Address": 551,
                    "ByteSize": 3,
                    "Comment": "{The current channel address (\\#SYSVAR(CURCHL)) is saved",
                    "OperandType": 1
                },
                {
                    "Address": 554,
                    "ByteSize": 1,
                    "Comment": "on the machine stack.}"
                },
                {
                    "Address": 555,
                    "ByteSize": 2,
                    "Comment": "{Channel 'R' is opened, allowing the string to be"
                },
                {
                    "Address": 557,
                    "ByteSize": 3,
                    "Comment": "'printed' out into the work space.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 560,
                    "ByteSize": 3,
                    "Comment": "The 'last value', X, is now printed out in the work\nspace and the work space is expanded with each\ncharacter.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 563,
                    "ByteSize": 1,
                    "Comment": "{Restore \\#SYSVAR(CURCHL) to #REG:HL# and restore the flags"
                },
                {
                    "Address": 564,
                    "ByteSize": 3,
                    "Comment": "that are appropriate to it.}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 567,
                    "ByteSize": 1,
                    "Comment": "Restore the start address of the string."
                },
                {
                    "Address": 568,
                    "ByteSize": 3,
                    "Comment": "{Now the cursor address is one past the end of the",
                    "OperandType": 1
                },
                {
                    "Address": 571,
                    "ByteSize": 1,
                    "Comment": "string and hence the difference is the length."
                },
                {
                    "Address": 572,
                    "ByteSize": 2,
                    "Comment": "}"
                },
                {
                    "Address": 574,
                    "ByteSize": 1,
                    "Comment": "{Transfer the length to #REG:BC#."
                },
                {
                    "Address": 575,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 576,
                    "ByteSize": 3,
                    "Comment": "Pass the parameters of the new string to the calculator\nstack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 579,
                    "ByteSize": 1,
                    "Comment": "Reset the pointers."
                },
                {
                    "Address": 580,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 581,
                    "ByteSize": 3,
                    "Comment": "The numerical parameter is compressed into the #REG:A#\nregister.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 584,
                    "ByteSize": 2,
                    "Comment": "Is it smaller than 16?"
                },
                {
                    "Address": 586,
                    "ByteSize": 3,
                    "Comment": "If not, report the error.",
                    "OperandType": 2
                },
                {
                    "Address": 589,
                    "ByteSize": 3,
                    "Comment": "{The current channel address (\\#SYSVAR(CURCHL)) is saved",
                    "OperandType": 1
                },
                {
                    "Address": 592,
                    "ByteSize": 1,
                    "Comment": "on the machine stack.}"
                },
                {
                    "Address": 593,
                    "ByteSize": 3,
                    "Comment": "The channel specified by the parameter is opened.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 596,
                    "ByteSize": 3,
                    "Comment": "The signal is now accepted, like a 'key-value'.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 599,
                    "ByteSize": 3,
                    "Comment": "The default length of the resulting string is zero."
                },
                {
                    "Address": 602,
                    "ByteSize": 2,
                    "Comment": "Jump if there was no signal.",
                    "OperandType": 2
                },
                {
                    "Address": 604,
                    "ByteSize": 1,
                    "Comment": "Set the length to 1 now."
                },
                {
                    "Address": 605,
                    "ByteSize": 1,
                    "Comment": "Make a space in the work space.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 606,
                    "ByteSize": 1,
                    "Comment": "Put the string into it."
                },
                {
                    "Address": 607,
                    "ByteSize": 3,
                    "Comment": "Pass the parameters of the string to the calculator\nstack.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 610,
                    "ByteSize": 1,
                    "Comment": "{Restore \\#SYSVAR(CURCHL) and the appropriate flags."
                },
                {
                    "Address": 611,
                    "ByteSize": 3,
                    "Comment": "}",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 614,
                    "ByteSize": 3,
                    "Comment": "Exit, setting the pointers.",
                    "OperandType": 2
                },
                {
                    "Address": 617,
                    "ByteSize": 3,
                    "Comment": "The parameters of the string are fetched.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 620,
                    "ByteSize": 1,
                    "Comment": "{The length is tested and the #REG:A# register holding"
                },
                {
                    "Address": 621,
                    "ByteSize": 1,
                    "Comment": "zero is carried forward if A$ is a null string."
                },
                {
                    "Address": 622,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 624,
                    "ByteSize": 1,
                    "Comment": "The code of the first character is put into #REG:A#\notherwise."
                },
                {
                    "Address": 625,
                    "ByteSize": 3,
                    "Comment": "The subroutine exits via #ADDR:0x2D28# which gives the correct\n'last value'.",
                    "OperandType": 2
                },
                {
                    "Address": 628,
                    "ByteSize": 3,
                    "Comment": "The parameters of the string are fetched.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 631,
                    "ByteSize": 3,
                    "Comment": "The subroutine exits via #ADDR:0x2D2B# which gives the correct\n'last value'.",
                    "OperandType": 2
                },
                {
                    "Address": 634,
                    "ByteSize": 1,
                    "Comment": "{Go to the alternative register set and save the next"
                },
                {
                    "Address": 635,
                    "ByteSize": 1,
                    "Comment": "literal pointer on the machine stack.}"
                },
                {
                    "Address": 636,
                    "ByteSize": 3,
                    "Comment": "Make #REG:HL# point to \\#SYSVAR(BREG)."
                },
                {
                    "Address": 639,
                    "ByteSize": 1,
                    "Comment": "Decrease \\#SYSVAR(BREG)."
                },
                {
                    "Address": 640,
                    "ByteSize": 1,
                    "Comment": "Restore the next literal pointer."
                },
                {
                    "Address": 641,
                    "ByteSize": 2,
                    "Comment": "The jump is made on non-zero.",
                    "OperandType": 2
                },
                {
                    "Address": 643,
                    "ByteSize": 1,
                    "Comment": "The next literal is passed over."
                },
                {
                    "Address": 644,
                    "ByteSize": 1,
                    "Comment": "Return to the main register set."
                },
                {
                    "Address": 645,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 646,
                    "ByteSize": 1,
                    "Comment": "Go to the next alternate register set."
                },
                {
                    "Address": 647,
                    "ByteSize": 1,
                    "Comment": "The next literal (jump length) is put in the \\#REGe'\nregister."
                },
                {
                    "Address": 648,
                    "ByteSize": 1,
                    "Comment": "{The number &00 or &FF is formed in #REG:A# according as"
                },
                {
                    "Address": 649,
                    "ByteSize": 1,
                    "Comment": "\\#REGe' is positive or negative, and is then copied to"
                },
                {
                    "Address": 650,
                    "ByteSize": 1,
                    "Comment": "\\#REGd'."
                },
                {
                    "Address": 651,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 652,
                    "ByteSize": 1,
                    "Comment": "{\\#REGhl' now holds the next literal pointer."
                },
                {
                    "Address": 653,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 654,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 655,
                    "ByteSize": 1,
                    "Comment": "{Point to the third byte, which is zero or one."
                },
                {
                    "Address": 656,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 657,
                    "ByteSize": 1,
                    "Comment": "Collect this byte in the #REG:A# register."
                },
                {
                    "Address": 658,
                    "ByteSize": 1,
                    "Comment": "{Point to the first byte once again."
                },
                {
                    "Address": 659,
                    "ByteSize": 1,
                    "Comment": "}"
                },
                {
                    "Address": 660,
                    "ByteSize": 1,
                    "Comment": "Test the third byte: is it zero?"
                },
                {
                    "Address": 661,
                    "ByteSize": 2,
                    "Comment": "Make the jump if the byte is non-zero, i.e. if the\nnumber is not-false.",
                    "OperandType": 2
                },
                {
                    "Address": 663,
                    "ByteSize": 1,
                    "Comment": "Go to the alternate register set."
                },
                {
                    "Address": 664,
                    "ByteSize": 1,
                    "Comment": "Pass over the jump length."
                },
                {
                    "Address": 665,
                    "ByteSize": 1,
                    "Comment": "Back to the main set of registers."
                },
                {
                    "Address": 666,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 667,
                    "ByteSize": 1,
                    "Comment": "The return address to the calculator (#ADDR:0x3365#) is\ndiscarded."
                },
                {
                    "Address": 668,
                    "ByteSize": 1,
                    "Comment": "{Instead, the address in \\#REGhl' is put on the machine"
                },
                {
                    "Address": 669,
                    "ByteSize": 1,
                    "Comment": "stack and an indirect jump is made to it. \\#REGhl' will"
                },
                {
                    "Address": 670,
                    "ByteSize": 1,
                    "Comment": "now hold any earlier address in the calculator chain of\naddresses.}"
                },
                {
                    "Address": 671,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 672,
                    "ByteSize": 1,
                    "Comment": "N, M",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 686,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 687,
                    "ByteSize": 1,
                    "Comment": "X",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 694,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 707,
                    "ByteSize": 1,
                    "Comment": " "
                },
                {
                    "Address": 708,
                    "ByteSize": 1,
                    "Comment": "X",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 761,
                    "ByteSize": 3,
                    "Comment": "The absolute value of N mod 256 is put into\nthe #REG:A# register.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 764,
                    "ByteSize": 2,
                    "Comment": "Jump forward if N was negative.",
                    "OperandType": 2
                },
                {
                    "Address": 766,
                    "ByteSize": 2,
                    "Comment": "Error if ABS N>&FF.",
                    "OperandType": 2
                },
                {
                    "Address": 768,
                    "ByteSize": 1,
                    "Comment": "Now add ABS N to the exponent."
                },
                {
                    "Address": 769,
                    "ByteSize": 2,
                    "Comment": "Jump unless e>&FF.",
                    "OperandType": 2
                },
                {
                    "Address": 771,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 773,
                    "ByteSize": 2,
                    "Comment": "The result is to be zero if N<-255.",
                    "OperandType": 2
                },
                {
                    "Address": 775,
                    "ByteSize": 1,
                    "Comment": "Subtract ABS N from the exponent as N was\nnegative."
                },
                {
                    "Address": 776,
                    "ByteSize": 2,
                    "Comment": "Zero result if e less than zero.",
                    "OperandType": 2
                },
                {
                    "Address": 778,
                    "ByteSize": 2,
                    "Comment": "Minus e is changed to e."
                },
                {
                    "Address": 780,
                    "ByteSize": 1,
                    "Comment": "The exponent, e, is entered."
                },
                {
                    "Address": 781,
                    "ByteSize": 1,
                    "Comment": "Finished: 'last value' is EXP X."
                },
                {
                    "Address": 782,
                    "ByteSize": 1,
                    "Comment": "Use the calculator to make the 'last value'\nzero.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 786,
                    "ByteSize": 1,
                    "Comment": "Finished, with EXP X=0."
                },
                {
                    "Address": 787,
                    "ByteSize": 1,
                    "Comment": "X",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 794,
                    "ByteSize": 1,
                    "Comment": "{Call the error handling routine.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 799,
                    "ByteSize": 1,
                    "Comment": "The exponent, e, goes into #REG:A#."
                },
                {
                    "Address": 800,
                    "ByteSize": 2,
                    "Comment": "X is reduced to X'."
                },
                {
                    "Address": 802,
                    "ByteSize": 3,
                    "Comment": "The stack holds: X', e.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 805,
                    "ByteSize": 1,
                    "Comment": "X', e",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 827,
                    "ByteSize": 1,
                    "Comment": "Double X' to give 2*X'."
                },
                {
                    "Address": 828,
                    "ByteSize": 1,
                    "Comment": "e'-1, 2*X'",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 898,
                    "ByteSize": 1,
                    "Comment": "Finished: 'last value' is LN X."
                },
                {
                    "Address": 899,
                    "ByteSize": 1,
                    "Comment": "X",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 928,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 937,
                    "ByteSize": 1,
                    "Comment": "Finished."
                },
                {
                    "Address": 938,
                    "ByteSize": 1,
                    "Comment": "X",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 949,
                    "ByteSize": 1,
                    "Comment": "X",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 985,
                    "ByteSize": 1,
                    "Comment": "Finished: 'last value'=SIN X (or COS X)."
                },
                {
                    "Address": 986,
                    "ByteSize": 1,
                    "Comment": "X",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 993,
                    "ByteSize": 1,
                    "Comment": "Finished: 'last value'=TAN X."
                },
                {
                    "Address": 994,
                    "ByteSize": 3,
                    "Comment": "Use the full floating-point form of X.",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 997,
                    "ByteSize": 1,
                    "Comment": "Fetch the exponent of X."
                },
                {
                    "Address": 998,
                    "ByteSize": 2,
                    "Comment": "{Jump forward for case i: Y=X."
                },
                {
                    "Address": 1000,
                    "ByteSize": 2,
                    "Comment": "}",
                    "OperandType": 2
                },
                {
                    "Address": 1002,
                    "ByteSize": 1,
                    "Comment": "X",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 1016,
                    "ByteSize": 1,
                    "Comment": " ",
                    "Flags": 8,
                    "OperandType": 2
                }
            ],
            "CommentBlocks": [
                {
                    "Address": 6,
                    "Comment": "THE 'MEMORY LOCATION' SUBROUTINE\n \nUsed by the routines at #ADDR:0x03F8#, #ADDR:0x340F# and #ADDR:0x342D#.\n \nThis subroutine finds the base address for each five-byte portion of the\ncalculator's memory area to or from which a floating-point number is to be\nmoved from or to the calculator stack. It does this operation by adding five\ntimes the parameter supplied to the base address for the area which is held\nin the #REG:HL# register pair.\n \nNote that when a FOR-NEXT variable is being handled then the pointers are\nchanged so that the variable is treated as if it were the calculator's memory\narea.\n \nA Index of the required entry\nHL Base address (#ADDR:0x046E# or \\#SYSVAR(MEM))\nO:HL Base address + 5 * #REG:A#"
                },
                {
                    "Address": 15,
                    "Comment": "THE 'GET FROM MEMORY AREA' SUBROUTINE (offset &41)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via a calculator literal (&E0 to &E5) by the routines at #ADDR:0x03F8#,\n#ADDR:0x1D03#, #ADDR:0x1DAB#, #ADDR:0x1DDA#, #ADDR:0x2320#, #ADDR:0x2382#, #ADDR:0x247D#, #ADDR:0x2C9B#, #ADDR:0x2D4F#,\n#ADDR:0x2DE3#, #ADDR:0x3449#, #ADDR:0x36A0#, #ADDR:0x36AF#, #ADDR:0x36C4# and #ADDR:0x37AA#.\n \nThis subroutine is called using the literals &E0 to &E5 and the parameter\nderived from these literals is held in the #REG:A# register. The subroutine\ncalls #ADDR:0x3406# to put the required source address into the #REG:HL# register\npair and #ADDR:0x33C0# to copy the five bytes involved from the calculator's memory\narea to the top of the calculator stack to form a new 'last value'.\n \nA Index of the required memory area (&00 to &05)\nDE Destination address\nO:HL Destination address (as #REG:DE# on entry)"
                },
                {
                    "Address": 27,
                    "Comment": "THE 'STACK A CONSTANT' SUBROUTINE (offset &3F)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via a calculator literal (&A0 to &A4) by the routines at #ADDR:0x03F8#,\n#ADDR:0x1CDE#, #ADDR:0x1D03#, #ADDR:0x2320#, #ADDR:0x2382#, #ADDR:0x247D#, #ADDR:0x25F8#, #ADDR:0x2627#, #ADDR:0x2C9B#,\n#ADDR:0x2D3B#, #ADDR:0x2D4F#, #ADDR:0x2DA2#, #ADDR:0x2DE3#, #ADDR:0x3449#, #ADDR:0x353B#, #ADDR:0x36AF#, #ADDR:0x36C4#,\n#ADDR:0x3713#, #ADDR:0x3783#, #ADDR:0x37AA#, #ADDR:0x37B5#, #ADDR:0x37E2#, #ADDR:0x3833#, #ADDR:0x3843#, #ADDR:0x384A# and\n#ADDR:0x3851#.\n \nThis subroutine uses #ADDR:0x33F7# to find the base address of the requested\nconstants from the calculator's table of constants and then calls #ADDR:0x33C8# to\nmake the expanded form of the constant the 'last value' on the calculator\nstack.\n \nA Index of the required constant (&00 to &04)\nDE \\#SYSVAR(STKEND)"
                },
                {
                    "Address": 45,
                    "Comment": "THE 'STORE IN MEMORY AREA' SUBROUTINE (offset &40)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via a calculator literal (&C0 to &C5) by the routines at #ADDR:0x03F8#,\n#ADDR:0x1D03#, #ADDR:0x1DAB#, #ADDR:0x2320#, #ADDR:0x2382#, #ADDR:0x247D#, #ADDR:0x2C9B#, #ADDR:0x2D4F#, #ADDR:0x2DE3#,\n#ADDR:0x3449#, #ADDR:0x36A0#, #ADDR:0x36AF#, #ADDR:0x36C4# and #ADDR:0x3783#.\n \nThis subroutine is called using the literals &C0 to &C5 and the parameter\nderived from these literals is held in the #REG:A# register. This subroutine is\nvery similar to #ADDR:0x340F# but the source and destination pointers are\nexchanged.\n \nA Index of the required memory area (&00 to &05)\nHL Source address"
                },
                {
                    "Address": 60,
                    "Comment": "Note that the pointers #REG:HL# and #REG:DE# remain as they were, pointing to\n\\#SYSVAR(STKEND)-5 and \\#SYSVAR(STKEND) respectively, so that the 'last value'\nremains on the calculator stack. If required it can be removed by using\n#ADDR:0x33A1#.\nTHE 'EXCHANGE' SUBROUTINE (offset &01)\n \nUsed by the routine at #ADDR:0x353B#.\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &01 by the routines at #ADDR:0x03F8#, #ADDR:0x1736#,\n#ADDR:0x1D03#, #ADDR:0x1DDA#, #ADDR:0x2320#, #ADDR:0x2382#, #ADDR:0x247D#, #ADDR:0x2D3B#, #ADDR:0x2DE3#, #ADDR:0x3449#,\n#ADDR:0x36A0#, #ADDR:0x36AF#, #ADDR:0x3713#, #ADDR:0x3783#, #ADDR:0x37DA#, #ADDR:0x37E2# and #ADDR:0x3851#.\n \nThis binary operation 'exchanges' the first number with the second number,\ni.e. the topmost two numbers on the calculator stack are exchanged.\n \nDE Address of the first byte of the second number\nHL Address of the first byte of the first number\nO:HL Address of the first byte of the second number"
                },
                {
                    "Address": 73,
                    "Comment": "THE 'SERIES GENERATOR' SUBROUTINE (offset &3E)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via a calculator literal (&86, &88 or &8C) by the routines at\n#ADDR:0x36C4#, #ADDR:0x3713#, #ADDR:0x37B5# and #ADDR:0x37E2#.\n \nThis important subroutine generates the series of Chebyshev polynomials which\nare used to approximate to SIN, ATN, LN and EXP and hence to derive the other\narithmetic functions which depend on these (COS, TAN, ASN, ACS, ** and SQR).\n \n\\#HTML[The polynomials are generated, for n=1, 2, etc. by the recurrence\nrelation T<sub>n+1</sub>(z)=2zT<sub>n</sub>(z)-T<sub>n-1</sub>(z), where\nT<sub>n</sub>(z) is the nth Chebyshev polynomial in z.]\n \n\\#HTML[The series in fact generates T<sub>0</sub>, 2T<sub>1</sub>,\n2T<sub>2</sub>, ..., 2T<sub>n-1</sub>, where n is 6 for SIN, 8 for EXP, and\n12 for LN and ATN.]\n \n\\#HTML[The coefficients of the powers of z in these polynomials may be found\nin the Handbook of Mathematical Functions by M. Abramowitz and I. A. Stegun\n(Dover 1965), page 795.]\n \nIn simple terms this subroutine is called with the 'last value' on the\ncalculator stack, say Z, being a number that bears a simple relationship to\nthe argument, say X, when the task is to evaluate, for instance, SIN X. The\ncalling subroutine also supplies the list of constants that are to be\nrequired (six constants for SIN). The series generator then manipulates its\ndata and returns to the calling routine a 'last value' that bears a simple\nrelationship to the requested function, for instance, SIN X.\n \nA Series parameter (&06, &08 or &0C)\n \nThis subroutine can be considered to have four major parts.\n \ni. The setting of the loop counter. The calling subroutine passes its\nparameters in the #REG:A# register for use as a counter. The calculator is\nentered at #ADDR:0x335E# so that the counter can be set."
                },
                {
                    "Address": 77,
                    "Comment": "ii. The handling of the 'last value', Z. The loop of the generator requires\n2*Z to be placed in mem-0, zero to be placed in mem-2 and the 'last value' to\nbe zero."
                },
                {
                    "Address": 83,
                    "Comment": "iii. The main loop.\n \nThe series is generated by looping, using \\#SYSVAR(BREG) as a counter; the\nconstants in the calling subroutine are stacked in turn by calling #ADDR:0x33C6#;\nthe calculator is re-entered at #ADDR:0x3362# so as not to disturb the value of\n\\#SYSVAR(BREG); and the series is built up in the form:\n \nB(R)=2*Z*B(R-1)-B(R-2)+A(R), for R=1, 2, ..., N, where A(1), A(2)...A(N) are\nthe constants supplied by the calling subroutine (SIN, ATN, LN and EXP) and\nB(0)=0=B(-1).\n \nThe (R+1)th loop starts with B(R) on the stack and with 2*Z, B(R-2) and\nB(R-1) in mem-0, mem-1 and mem-2 respectively."
                },
                {
                    "Address": 90,
                    "Comment": "The next constant is placed on the calculator stack."
                },
                {
                    "Address": 93,
                    "Comment": "The calculator is re-entered without disturbing \\#SYSVAR(BREG)."
                },
                {
                    "Address": 102,
                    "Comment": "iv. The subtraction of B(N-2). The loop above leaves B(N) on the stack and\nthe required result is given by B(N)-B(N-2)."
                },
                {
                    "Address": 106,
                    "Comment": "THE 'ABSOLUTE MAGNITUDE' FUNCTION (offset &2A)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &2A by the routines at #ADDR:0x2320#, #ADDR:0x2382#,\n#ADDR:0x247D#, #ADDR:0x2DE3#, #ADDR:0x3783# and #ADDR:0x37AA#. It is also called indirectly via\n#ADDR:0x33A2#.\n \nThis subroutine performs its unary operation by ensuring that the sign bit of\na floating-point number is reset.\n \n'Small integers' have to be treated separately. Most of the work is shared\nwith the 'unary minus' operation.\n \nHL Address of the first byte of the number"
                },
                {
                    "Address": 110,
                    "Comment": "THE 'UNARY MINUS' OPERATION (offset &1B)\n \nUsed by the routine at #ADDR:0x300F#.\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &1B by the routines at #ADDR:0x247D#, #ADDR:0x3783#,\n#ADDR:0x37AA#, #ADDR:0x37E2#, #ADDR:0x3833# and #ADDR:0x3843#. It is also called indirectly via\n#ADDR:0x33A2#.\n \nThis subroutine performs its unary operation by changing the sign of the\n'last value' on the calculator stack.\n \nZero is simply returned unchanged. Full five byte floating-point numbers have\ntheir sign bit manipulated so that it ends up reset (for 'abs') or changed\n(for 'negate'). 'Small integers' have their sign byte set to zero (for 'abs')\nor changed (for 'negate').\n \nHL Address of the first byte of the number"
                },
                {
                    "Address": 116,
                    "Comment": "This entry point is used by the routine at #ADDR:0x346A#."
                },
                {
                    "Address": 131,
                    "Comment": "The 'integer case' does a similar operation with the sign byte."
                },
                {
                    "Address": 146,
                    "Comment": "THE 'SIGNUM' FUNCTION (offset &29)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the function SGN X and therefore returns a 'last\nvalue' of 1 if X is positive, zero if X is zero and -1 if X is negative.\n \nHL Address of the first byte of the number"
                },
                {
                    "Address": 165,
                    "Comment": "THE 'IN' FUNCTION (offset &2C)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the function IN X. It inputs at processor level from\nport X, loading #REG:BC# with X and performing the instruction '\\#S/IN A,(C)/'."
                },
                {
                    "Address": 172,
                    "Comment": "THE 'PEEK' FUNCTION (offset &2B)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the function PEEK X. The 'last value' is unstacked by\ncalling #ADDR:0x1E99# and replaced by the value of the contents of the required\nlocation."
                },
                {
                    "Address": 176,
                    "Comment": "This entry point is used by the routine at #ADDR:0x34A5#."
                },
                {
                    "Address": 179,
                    "Comment": "THE 'USR' FUNCTION (offset &2D)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine ('USR number' as distinct from 'USR string') handles the\nfunction USR X, where X is a number. The value of X is obtained in #REG:BC#, a\nreturn address is stacked and the machine code is executed from location X."
                },
                {
                    "Address": 188,
                    "Comment": "Note: it is interesting that the #REG:IY# register pair is re-initialised when\nthe return to #ADDR:0x2D2B# has been made, but the important \\#REGhl' that holds the\nnext literal pointer is not restored should it have been disturbed. For a\nsuccessful return to BASIC, \\#REGhl' must on exit from the machine code\ncontain the address of the 'end-calc' instruction at #ADDR:0x2758#(&2758).\nTHE 'USR STRING' FUNCTION (offset &19)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the function USR X$, where X$ is a string. The\nsubroutine returns in #REG:BC# the address of the bit pattern for the\nuser-defined graphic corresponding to X$. It reports error A if X$ is not a\nsingle letter between 'a' and 'u' or a user-defined graphic."
                },
                {
                    "Address": 231,
                    "Comment": "Report A - Invalid argument."
                },
                {
                    "Address": 233,
                    "Comment": "THE 'TEST-ZERO' SUBROUTINE\n \nUsed by the routines at #ADDR:0x1CF0#, #ADDR:0x30C0#, #ADDR:0x346E#, #ADDR:0x3492#, #ADDR:0x34F9#, #ADDR:0x3501#,\n#ADDR:0x351B#, #ADDR:0x3524# and #ADDR:0x352D#.\n \nThis subroutine is called at least nine times to test whether a\nfloating-point number is zero. This test requires that the first four bytes\nof the number should each be zero. The subroutine returns with the carry flag\nset if the number was in fact zero.\n \nHL Address of the first byte of the number\nO:F Carry flag set if the number is zero"
                },
                {
                    "Address": 249,
                    "Comment": "THE 'GREATER THAN ZERO' OPERATION (offset &37)\n \nUsed by the routine at #ADDR:0x353B#.\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &37 by the routines at #ADDR:0x1DDA#, #ADDR:0x2DE3#,\n#ADDR:0x3713#, #ADDR:0x3783# and #ADDR:0x3851#.\n \nThis subroutine returns a 'last value' of one if the present 'last value' is\ngreater than zero and zero otherwise. It is also used by other subroutines to\n'jump on plus'.\n \nHL Address of the first byte of the number"
                },
                {
                    "Address": 257,
                    "Comment": "THE 'NOT' FUNCTION (offset &30)\n \nUsed by the routine at #ADDR:0x353B#.\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &30 by the routines at #ADDR:0x2382#, #ADDR:0x36AF#,\n#ADDR:0x384A# and #ADDR:0x3851#. It is also called indirectly via #ADDR:0x33A2#.\n \nThis subroutine returns a 'last value' of one if the present 'last value' is\nzero and zero otherwise. It is also used by other subroutines to 'jump on\nzero'.\n \nHL Address of the first byte of the number"
                },
                {
                    "Address": 262,
                    "Comment": "THE 'LESS THAN ZERO' OPERATION (offset &36)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &36 by the routines at #ADDR:0x1DDA#, #ADDR:0x2DE3#,\n#ADDR:0x36AF#, #ADDR:0x3783# and #ADDR:0x37E2#.\n \nThis subroutine returns a 'last value' of one if the present 'last value' is\nless than zero and zero otherwise. It is also used by other subroutines to\n'jump on minus'.\n \nHL Address of the first byte of the number"
                },
                {
                    "Address": 263,
                    "Comment": "This entry point is used by the routine at #ADDR:0x34F9# with #REG:A#=&FF."
                },
                {
                    "Address": 267,
                    "Comment": "This routine continues into #ADDR:0x350B#.\nTHE 'ZERO OR ONE' SUBROUTINE\n \nUsed by the routines at #ADDR:0x2D4F#, #ADDR:0x3501#, #ADDR:0x351B# and #ADDR:0x3524#.\n \nThe routine at #ADDR:0x3506# continues here.\n \nThis subroutine sets the 'last value' to zero if the carry flag is reset and\nto one if it is set. When called from #ADDR:0x2D4F# however it creates the zero or\none not on the stack but in mem-0.\n \nHL Address of the first byte of the number\nF Carry set for 1, reset for 0"
                },
                {
                    "Address": 283,
                    "Comment": "THE 'OR' OPERATION (offset &07)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine performs the binary operation 'X OR Y' and returns X if Y is\nzero and the value 1 otherwise.\n \nDE Address of the first byte of the second number (Y)\nHL Address of the first byte of the first number (X)"
                },
                {
                    "Address": 292,
                    "Comment": "THE 'NUMBER AND NUMBER' OPERATION (offset &08)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine performs the binary operation 'X AND Y' and returns X if Y is\nnon-zero and the value zero otherwise.\n \nDE Address of the first byte of the second number (Y)\nHL Address of the first byte of the first number (X)"
                },
                {
                    "Address": 301,
                    "Comment": "THE 'STRING AND NUMBER' OPERATION (offset &10)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine performs the binary operation 'X$ AND Y' and returns X$ if Y\nis non-zero and a null string otherwise.\n \nDE Address of the first byte of the number (Y)"
                },
                {
                    "Address": 315,
                    "Comment": "THE 'COMPARISON' OPERATIONS (offsets &09 to &0E, &11 to &16)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine is used to perform the twelve possible comparison operations\n(offsets &09 to &0E and &11 to &16: '<=', '>=', '<>', '>', '<' and '=' for\nnumbers and strings respectively). The single operation offset is present in\nthe #REG:B# register at the start of the subroutine.\n \nB Operation offset (&09 to &0E, &11 to &16)\nDE Address of the first byte of the second argument\nHL Address of the first byte of the first argument"
                },
                {
                    "Address": 412,
                    "Comment": "THE 'STRING CONCATENATION' OPERATION (offset &17)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine performs the binary operation 'A$+B$'. The parameters for\nthese strings are fetched and the total length found. Sufficient room to hold\nboth the strings is made available in the work space and the strings are\ncopied over. The result of this subroutine is therefore to produce a\ntemporary variable A$+B$ that resides in the work space."
                },
                {
                    "Address": 447,
                    "Comment": "This routine continues into #ADDR:0x35BF#.\nTHE 'STK-PNTRS' SUBROUTINE\n \nUsed by the routines at #ADDR:0x335B#, #ADDR:0x359C#, #ADDR:0x35DE# and #ADDR:0x3645#.\n \nThis subroutine resets the #REG:HL# register pair to point to the first byte of\nthe 'last value', i.e. \\#SYSVAR(STKEND)-5, and the #REG:DE# register pair to\npoint one past the 'last value', i.e. \\#SYSVAR(STKEND).\n \nO:DE \\#SYSVAR(STKEND)\nO:HL \\#SYSVAR(STKEND)-5"
                },
                {
                    "Address": 457,
                    "Comment": "THE 'CHR$' FUNCTION (offset &2F)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the function CHR$ X and creates a single character\nstring in the work space."
                },
                {
                    "Address": 476,
                    "Comment": "Report B - Integer out of range."
                },
                {
                    "Address": 478,
                    "Comment": "THE 'VAL' AND 'VAL$' FUNCTIONS (offsets &18, &1D)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the functions VAL X$ and VAL$ X$. When handling VAL\nX$, it returns a 'last value' that is the result of evaluating the string\n(without its bounding quotes) as a numerical expression. when handling VAL$\nX$, it evaluates X$ (without its bounding quotes) as a string expression, and\nreturns the parameters of that string expression as a 'last value' on the\ncalculator stack.\n \nB Offset (&18 or &1D)"
                },
                {
                    "Address": 543,
                    "Comment": "THE 'STR$' FUNCTION (offset &2E)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the function STR$ X and returns a 'last value' which\nis a set of parameters that define a string containing what would appear on\nthe screen if X were displayed by a PRINT command."
                },
                {
                    "Address": 581,
                    "Comment": "Note: see #ADDR:0x2DE3# for an explanation of the 'PRINT \"A\"+STR$ 0.1' error.\nTHE 'READ-IN' SUBROUTINE (offset &1A)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine is called via the calculator offset (&5A) through the first\nline of #ADDR:0x2634#. It appears to provide for the reading in of data through\ndifferent streams from those available on the standard Spectrum. Like #ADDR:0x2634#\nthe subroutine returns a string."
                },
                {
                    "Address": 617,
                    "Comment": "THE 'CODE' FUNCTION (offset &1C)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the function CODE A$ and returns the Spectrum code of\nthe first character in A$, or zero if A$ is null."
                },
                {
                    "Address": 628,
                    "Comment": "THE 'LEN' FUNCTION (offset &1E)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the function LEN A$ and returns a 'last value' that\nis equal to the length of the string."
                },
                {
                    "Address": 634,
                    "Comment": "THE 'DECREASE THE COUNTER' SUBROUTINE (offset &35)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &35 by the routine at #ADDR:0x3449#.\n \nThis subroutine is only called by the #ADDR:0x3449#(series generator) and in effect\nis a '\\#S/DJNZ/' operation but the counter is the system variable,\n\\#SYSVAR(BREG), rather than the #REG:B# register.\n \nHL' Address of the jump offset\nO:HL' Address of the next calculator literal to execute"
                },
                {
                    "Address": 646,
                    "Comment": "THE 'JUMP' SUBROUTINE (offset &33)\n \nUsed by the routine at #ADDR:0x368F#.\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &33 by the routines at #ADDR:0x2D4F#, #ADDR:0x37AA#\nand #ADDR:0x37E2#.\n \nThis subroutine executes an unconditional jump when called by the literal\n'&33'.\n \nHL' Address of the jump offset\nO:HL' Address of the next calculator literal to execute"
                },
                {
                    "Address": 647,
                    "Comment": "This entry point is used by the routine at #ADDR:0x367A#."
                },
                {
                    "Address": 655,
                    "Comment": "THE 'JUMP ON TRUE' SUBROUTINE (offset &00)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &00 by the routines at #ADDR:0x1DDA#, #ADDR:0x2382#,\n#ADDR:0x2D4F#, #ADDR:0x2DE3#, #ADDR:0x36AF#, #ADDR:0x3713#, #ADDR:0x3783#, #ADDR:0x37AA#, #ADDR:0x37E2#, #ADDR:0x384A# and\n#ADDR:0x3851#.\n \nThis subroutine executes a conditional jump if the 'last value' on the\ncalculator stack, or more precisely the number addressed currently by the\n#REG:DE# register pair, is true.\n \nDE Address of the first byte of the last value on the calculator stack\nHL' Address of the jump offset\nO:HL' Address of the next calculator literal to execute"
                },
                {
                    "Address": 667,
                    "Comment": "THE 'END-CALC' SUBROUTINE (offset &38)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &38 by the routines at #ADDR:0x03F8#, #ADDR:0x1736#,\n#ADDR:0x1CDE#, #ADDR:0x1CF0#, #ADDR:0x1D03#, #ADDR:0x1DAB#, #ADDR:0x1DDA#, #ADDR:0x2320#, #ADDR:0x2382#, #ADDR:0x247D#,\n#ADDR:0x25F8#, #ADDR:0x2627#, #ADDR:0x26C9#, #ADDR:0x2AFF#, #ADDR:0x2C9B#, #ADDR:0x2D2B#, #ADDR:0x2D3B#, #ADDR:0x2D4F#,\n#ADDR:0x2DA2#, #ADDR:0x2DC1#, #ADDR:0x2DE3#, #ADDR:0x3449#, #ADDR:0x353B#, #ADDR:0x36A0#, #ADDR:0x36AF#, #ADDR:0x36C4#,\n#ADDR:0x3713#, #ADDR:0x3783#, #ADDR:0x37B5#, #ADDR:0x37DA#, #ADDR:0x37E2#, #ADDR:0x3833#, #ADDR:0x3843#, #ADDR:0x384A# and\n#ADDR:0x3851#.\n \nThis subroutine ends a RST \\#o28 operation."
                },
                {
                    "Address": 672,
                    "Comment": "THE 'MODULUS' SUBROUTINE (offset &32)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &32 by the routine at #ADDR:0x25F8#.\n \nThis subroutine calculates N (mod M), where M is a positive integer held at\nthe top of the calculator stack (the 'last value'), and N is the integer held\non the stack beneath M.\n \nThe subroutine returns the integer quotient INT (N/M) at the top of the\ncalculator stack (the 'last value'), and the remainder N-INT (N/M) in the\nsecond place on the stack.\n \nThis subroutine is called during the calculation of a random number to reduce\nN mod 65537."
                },
                {
                    "Address": 687,
                    "Comment": "THE 'INT' FUNCTION (offset &27)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &27 by the routines at #ADDR:0x03F8#, #ADDR:0x2DA2#,\n#ADDR:0x2DC1#, #ADDR:0x2DE3#, #ADDR:0x36A0#, #ADDR:0x36C4# and #ADDR:0x3783#. It is also called indirectly\nvia #ADDR:0x33A2#.\n \nThis subroutine handles the function INT X and returns a 'last value' that is\nthe 'integer part' of the value supplied. Thus INT 2.4 gives 2 but as the\nsubroutine always rounds the result down INT -2.4 gives -3.\n \nThe subroutine uses #ADDR:0x3214# to produce I(X) such that I(2.4)=2 and\nI(-2.4)=-2. Thus, INT X is given by I(X) when X>=0, and by I(X)-1 for\nnegative values of X that are not already integers, when the result is, of\ncourse, I(X)."
                },
                {
                    "Address": 692,
                    "Comment": "For values of X that have been shown to be greater than or equal to zero\nthere is no jump and I(X) is readily found."
                },
                {
                    "Address": 695,
                    "Comment": "When X is a negative integer I(X) is returned, otherwise I(X)-1 is returned."
                },
                {
                    "Address": 704,
                    "Comment": "The jump is made for values of X that are negative integers, otherwise there\nis no jump and I(X)-1 is calculated."
                },
                {
                    "Address": 706,
                    "Comment": "In either case the subroutine finishes with:"
                },
                {
                    "Address": 708,
                    "Comment": "THE 'EXPONENTIAL' FUNCTION (offset &26)\n \nUsed by the routine at #ADDR:0x3851#.\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the function EXP X and is the first of four routines\nthat use the #ADDR:0x3449#(series generator) to produce Chebyshev polynomials.\n \nThe approximation to EXP X is found as follows:\n \n\\#LIST\n{ i. X is divided by LN 2 to give Y, so that 2**Y is now the required result.\n}\n{ ii. The value N is found, such that N=INT Y. }\n{ iii. The value W=Y-N is found; 0<=W<=1, as required for the series to\nconverge. }\n{ iv. The argument Z=2*W-1 is formed. }\n{ v. The #ADDR:0x3449#(series generator) is used to return 2**W. }\n{ vi. Finally N is added to the exponent, giving 2**(N+W), which is 2**Y and\ntherefore the required answer. }\nLIST\\#"
                },
                {
                    "Address": 709,
                    "Comment": "Perform step i."
                },
                {
                    "Address": 717,
                    "Comment": "Perform step ii."
                },
                {
                    "Address": 720,
                    "Comment": "Perform step iii."
                },
                {
                    "Address": 721,
                    "Comment": "Perform step iv."
                },
                {
                    "Address": 725,
                    "Comment": "Perform step v, passing to the #ADDR:0x3449#(series generator) the parameter '8'\nand the eight constants required."
                },
                {
                    "Address": 759,
                    "Comment": "At the end of the last loop the 'last value' is 2**W.\n \nPerform step vi."
                },
                {
                    "Address": 771,
                    "Comment": "Report 6 - Number too big."
                },
                {
                    "Address": 787,
                    "Comment": "THE 'NATURAL LOGARITHM' FUNCTION (offset &25)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &25 by the routine at #ADDR:0x3851#. It is\nalso called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the function LN X and is the second of the four\nroutines that use the #ADDR:0x3449#(series generator) to produce Chebyshev\npolynomials.\n \nThe approximation to LN X is found as follows:\n \n\\#LIST\n{ i. X is tested and report A is given if X is not positive. }\n{ ii. X is then split into its true exponent, e', and its mantissa\nX'=X/(2**e'), where 0.5<=X'<1. }\n{ iii. The required value Y1 or Y2 is formed: if X'>0.8 then Y1=e'*LN 2,\notherwise Y2=(e'-1)*LN 2. }\n{ iv. If X'>0.8 then the quantity X'-1 is stacked; otherwise 2*X'-1 is\nstacked. }\n{ v. Now the argument Z is formed, being 2.5*X'-3 if X'>0.8, otherwise\n5*X'-3. In each case, -1<=Z<=1, as required for the series to converge. }\n{ vi. The #ADDR:0x3449#(series generator) is used to produce the required function.\n}\n{ vii. Finally a simple multiplication and addition leads to LN X being\nreturned as the 'last value'. }\nLIST\\#"
                },
                {
                    "Address": 788,
                    "Comment": "Perform step i."
                },
                {
                    "Address": 794,
                    "Comment": "Report A - Invalid argument."
                },
                {
                    "Address": 796,
                    "Comment": "Perform step ii."
                },
                {
                    "Address": 810,
                    "Comment": "Perform step iii."
                },
                {
                    "Address": 837,
                    "Comment": "Perform step iv."
                },
                {
                    "Address": 842,
                    "Comment": "Perform step v."
                },
                {
                    "Address": 849,
                    "Comment": "Perform step vi, passing to the #ADDR:0x3449#(series generator) the parameter '12',\nand the twelve constants required."
                },
                {
                    "Address": 895,
                    "Comment": "At the end of the last loop the 'last value' is:\n \n\\#LIST\n{ LN X'/(X'-1) if X'>0.8 }\n{ LN (2*X')/(2*X'-1) if X'<=0.8 }\nLIST\\#\n \nPerform step vii."
                },
                {
                    "Address": 899,
                    "Comment": "THE 'REDUCE ARGUMENT' SUBROUTINE (offset &39)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &39 by the routines at #ADDR:0x37AA# and\n#ADDR:0x37B5#.\n \nThis subroutine transforms the argument X of SIN X or COS X into a value V.\n \nThe subroutine first finds the value Y=X/2\\#pi-INT(X/2\\#pi+0.5), where\n-0.5<=Y<0.5.\n \nThe subroutine returns with:\n \n\\#LIST\n{ V=4*Y if -1<=4*Y<=1 (case i) }\n{ or V=2-4*Y if 1<4*Y<2 (case ii) }\n{ or V=-4*Y-2 if -2<=4*Y<-1 (case iii) }\nLIST\\#\n \nIn each case, -1<=V<=1 and SIN (\\#piV/2)=SIN X."
                },
                {
                    "Address": 913,
                    "Comment": "Note: adding 0.5 and taking INT rounds the result to the nearest integer."
                },
                {
                    "Address": 929,
                    "Comment": "If the jump was made then continue."
                },
                {
                    "Address": 938,
                    "Comment": "THE 'COSINE' FUNCTION (offset &20)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &20 by the routines at #ADDR:0x2382# and\n#ADDR:0x37DA#. It is also called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the function COS X and returns a 'last value' 'that\nis an approximation to COS X.\n \nThe subroutine uses the expression COS X=SIN (\\#piW/2), where -1<=W<=1.\n \nIn deriving W for X the subroutine uses the test result obtained in the\nprevious subroutine and stored for this purpose in mem-0. It then jumps to\nthe #ADDR:0x37B5# subroutine, entering at #ADDR:0x37B7#, to produce a 'last value' of COS\nX."
                },
                {
                    "Address": 946,
                    "Comment": "If the jump was not made then continue."
                },
                {
                    "Address": 949,
                    "Comment": "THE 'SINE' FUNCTION (offset &1F)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &1F by the routines at #ADDR:0x2382#, #ADDR:0x247D#\nand #ADDR:0x37DA#. It is also called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the function SIN X and is the third of the four\nroutines that use the #ADDR:0x3449#(series generator) to produce Chebyshev\npolynomials.\n \nThe approximation to SIN X is found as follows:\n \n\\#LIST\n{ i. The argument X is reduced to W, such that SIN (\\#pi*W/2)=SIN X. Note that\n-1<=W<=1, as required for the series to converge. }\n{ ii. The argument Z=2*W*W-1 is formed. }\n{ iii. The #ADDR:0x3449#(series generator) is used to return (SIN (\\#pi*W/2))/W. }\n{ iv. Finally a simple multiplication by W gives SIN X. }\nLIST\\#"
                },
                {
                    "Address": 950,
                    "Comment": "Perform step i."
                },
                {
                    "Address": 951,
                    "Comment": "Perform step ii. The subroutine from now on is common to both the SINE and\nCOSINE functions."
                },
                {
                    "Address": 958,
                    "Comment": "Perform step iii, passing to the #ADDR:0x3449#(series generator) the parameter '6'\nand the six constants required."
                },
                {
                    "Address": 983,
                    "Comment": "At the end of the last loop the 'last value' is (SIN (\\#pi*W/2))/W.\n \nPerform step iv."
                },
                {
                    "Address": 986,
                    "Comment": "THE 'TAN' FUNCTION (offset &21)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the function TAN X. It simply returns SIN X/COS X,\nwith arithmetic overflow if COS X=0."
                },
                {
                    "Address": 994,
                    "Comment": "THE 'ARCTAN' FUNCTION (offset &24)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &24 by the routine at #ADDR:0x3833#. It is\nalso called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the function ATN X and is the last of the four\nroutines that use the #ADDR:0x3449#(series generator) to produce Chebyshev\npolynomials. It returns a real number between -\\#pi/2 and \\#pi/2, which is\nequal to the value in radians of the angle whose tan is X.\n \nThe approximation to ATN X is found as follows:\n \ni. The values W and Y are found for three cases of X, such that:\n \n\\#LIST\n{ if -1<X<1 then W=0, Y=X (case i) }\n{ if 1<=X then W=\\#pi/2, Y=-1/X (case ii) }\n{ if X<=-1 then W=-\\#pi/2, Y=-1/X (case iii) }\nLIST\\#\n \nIn each case, -1<=Y<=1, as required for the series to converge.\n \nii. The argument Z is formed, such that:\n \n\\#LIST\n{ if -1<X<1 then Z=2*Y*Y-1=2*X*X-1 (case i) }\n{ otherwise Z=2*Y*Y-1=2/(X*X)-1 (cases ii and iii) }\nLIST\\#\n \niii. The #ADDR:0x3449#(series generator) is used to produce the required function.\n \niv. Finally a simple multiplication and addition give ATN X.\n \nHL Address of the first byte of the number (X)\n \nPerform step i."
                },
                {
                    "Address": 1018,
                    "Comment": "Perform step ii."
                }
            ],
            "DataInfo": [
                {
                    "Address": 0,
                    "DataType": 11,
                    "InstructionAddressRef": 872284160
                },
                {
                    "Address": 77,
                    "Comment": "#ADDR:0x33C0#: Z, Z"
                },
                {
                    "Address": 78,
                    "Comment": "#ADDR:0x3014#: 2*Z"
                },
                {
                    "Address": 79,
                    "Comment": "#ADDR:0x342D#(st_mem_0): 2*Z (mem-0 holds 2*Z)"
                },
                {
                    "Address": 80,
                    "Comment": "#ADDR:0x33A1#: -"
                },
                {
                    "Address": 81,
                    "Comment": "#ADDR:0x341B#(stk_zero): 0"
                },
                {
                    "Address": 82,
                    "Comment": "#ADDR:0x342D#(st_mem_2): 0 (mem-2 holds 0)"
                },
                {
                    "Address": 83,
                    "Comment": "#ADDR:0x33C0#: B(R), B(R)"
                },
                {
                    "Address": 84,
                    "Comment": "#ADDR:0x340F#(get_mem_0): B(R), B(R), 2*Z"
                },
                {
                    "Address": 85,
                    "Comment": "#ADDR:0x30CA#: B(R), 2*B(R)*Z"
                },
                {
                    "Address": 86,
                    "Comment": "#ADDR:0x340F#(get_mem_2): B(R),2*B(R)*Z, B(R-1)"
                },
                {
                    "Address": 87,
                    "Comment": "#ADDR:0x342D#(st_mem_1): mem-1 holds B(R-1)"
                },
                {
                    "Address": 88,
                    "Comment": "#ADDR:0x300F#: B(R), 2*B(R)*Z-B(R-1)"
                },
                {
                    "Address": 89,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 96,
                    "Comment": "#ADDR:0x3014#: B(R), 2*B(R)*Z-B(R-1)+A(R+1)"
                },
                {
                    "Address": 97,
                    "Comment": "#ADDR:0x343C#: 2*B(R)*Z-B(R-1)+A(R+1), B(R)"
                },
                {
                    "Address": 98,
                    "Comment": "#ADDR:0x342D#(st_mem_2): mem-2 holds B(R)"
                },
                {
                    "Address": 99,
                    "Comment": "#ADDR:0x33A1#: 2*B(R)*Z-B(R-1)+A(R+1)=B(R+1)"
                },
                {
                    "Address": 100,
                    "Comment": "{#ADDR:0x367A# to #ADDR:0x3453#: B(R+1)"
                },
                {
                    "Address": 101,
                    "Comment": "}"
                },
                {
                    "Address": 102,
                    "Comment": "#ADDR:0x340F#(get_mem_1): B(N), B(N-2)"
                },
                {
                    "Address": 103,
                    "Comment": "#ADDR:0x300F#: B(N)-B(N-2)"
                },
                {
                    "Address": 104,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 232,
                    "Comment": "}"
                },
                {
                    "Address": 394,
                    "Comment": "#ADDR:0x341B#(stk_zero)"
                },
                {
                    "Address": 395,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 477,
                    "Comment": "}"
                },
                {
                    "Address": 673,
                    "Comment": "#ADDR:0x342D#(st_mem_0): N, M (mem-0 holds M)"
                },
                {
                    "Address": 674,
                    "Comment": "#ADDR:0x33A1#: N"
                },
                {
                    "Address": 675,
                    "Comment": "#ADDR:0x33C0#: N, N"
                },
                {
                    "Address": 676,
                    "Comment": "#ADDR:0x340F#(get_mem_0): N, N, M"
                },
                {
                    "Address": 677,
                    "Comment": "#ADDR:0x31AF#: N, N/M"
                },
                {
                    "Address": 678,
                    "Comment": "#ADDR:0x36AF#: N, INT (N/M)"
                },
                {
                    "Address": 679,
                    "Comment": "#ADDR:0x340F#(get_mem_0): N, INT (N/M), M"
                },
                {
                    "Address": 680,
                    "Comment": "#ADDR:0x343C#: N, M, INT (N/M)"
                },
                {
                    "Address": 681,
                    "Comment": "#ADDR:0x342D#(st_mem_0): N, M, INT (N/M) (mem-0 holds INT\n(N/M))"
                },
                {
                    "Address": 682,
                    "Comment": "#ADDR:0x30CA#: N, M*INT (N/M)"
                },
                {
                    "Address": 683,
                    "Comment": "#ADDR:0x300F#: N-M*INT (N/M)"
                },
                {
                    "Address": 684,
                    "Comment": "#ADDR:0x340F#(get_mem_0): N-M*INT (N/M), INT (N/M)"
                },
                {
                    "Address": 685,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 688,
                    "Comment": "#ADDR:0x33C0#: X, X"
                },
                {
                    "Address": 689,
                    "Comment": "#ADDR:0x3506#: X, (1/0)"
                },
                {
                    "Address": 690,
                    "Comment": "{#ADDR:0x368F# to #ADDR:0x36B7#: X"
                },
                {
                    "Address": 691,
                    "Comment": "}"
                },
                {
                    "Address": 692,
                    "Comment": "#ADDR:0x3214#: I(X)"
                },
                {
                    "Address": 693,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 695,
                    "Comment": "#ADDR:0x33C0#: X, X"
                },
                {
                    "Address": 696,
                    "Comment": "#ADDR:0x3214#: X, I(X)"
                },
                {
                    "Address": 697,
                    "Comment": "#ADDR:0x342D#(st_mem_0): X, I(X) (mem-0 holds I(X))"
                },
                {
                    "Address": 698,
                    "Comment": "#ADDR:0x300F#: X-I(X)"
                },
                {
                    "Address": 699,
                    "Comment": "#ADDR:0x340F#(get_mem_0): X-I(X), I(X)"
                },
                {
                    "Address": 700,
                    "Comment": "#ADDR:0x343C#: I(X), X-I(X)"
                },
                {
                    "Address": 701,
                    "Comment": "#ADDR:0x3501#: I(X), (1/0)"
                },
                {
                    "Address": 702,
                    "Comment": "{#ADDR:0x368F# to #ADDR:0x36C2#: I(X)"
                },
                {
                    "Address": 703,
                    "Comment": "}"
                },
                {
                    "Address": 704,
                    "Comment": "#ADDR:0x341B#(stk_one): I(X), 1"
                },
                {
                    "Address": 705,
                    "Comment": "#ADDR:0x300F#: I(X)-1"
                },
                {
                    "Address": 706,
                    "Comment": "#ADDR:0x369B#: I(X) or I(X)-1"
                },
                {
                    "Address": 709,
                    "Comment": "#ADDR:0x3297#: X (in full floating-point form)"
                },
                {
                    "Address": 710,
                    "Comment": "{#ADDR:0x33C6#: X, 1/LN 2"
                },
                {
                    "Address": 711,
                    "ByteSize": 5,
                    "Comment": "}",
                    "DataType": 1
                },
                {
                    "Address": 716,
                    "Comment": "#ADDR:0x30CA#: X/LN 2=Y"
                },
                {
                    "Address": 717,
                    "Comment": "#ADDR:0x33C0#: Y, Y"
                },
                {
                    "Address": 718,
                    "Comment": "#ADDR:0x36AF#: Y, INT Y=N"
                },
                {
                    "Address": 719,
                    "Comment": "#ADDR:0x342D#(st_mem_3): Y, N (mem-3 holds N)"
                },
                {
                    "Address": 720,
                    "Comment": "#ADDR:0x300F#: Y-N=W"
                },
                {
                    "Address": 721,
                    "Comment": "#ADDR:0x33C0#: W, W"
                },
                {
                    "Address": 722,
                    "Comment": "#ADDR:0x3014#: 2*W"
                },
                {
                    "Address": 723,
                    "Comment": "#ADDR:0x341B#(stk_one): 2*W, 1"
                },
                {
                    "Address": 724,
                    "Comment": "#ADDR:0x300F#: 2*W-1=Z"
                },
                {
                    "Address": 725,
                    "Comment": "#ADDR:0x3449#(series_08): Z"
                },
                {
                    "Address": 726,
                    "ByteSize": 2,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 728,
                    "ByteSize": 3,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 731,
                    "ByteSize": 4,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 735,
                    "ByteSize": 4,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 739,
                    "ByteSize": 5,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 744,
                    "ByteSize": 5,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 749,
                    "ByteSize": 5,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 754,
                    "ByteSize": 5,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 759,
                    "Comment": "#ADDR:0x340F#(get_mem_3): 2**W, N"
                },
                {
                    "Address": 760,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 772,
                    "Comment": "}"
                },
                {
                    "Address": 783,
                    "Comment": "#ADDR:0x33A1# (the stack is now empty)"
                },
                {
                    "Address": 784,
                    "Comment": "#ADDR:0x341B#(stk_zero): 0"
                },
                {
                    "Address": 785,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 788,
                    "Comment": "#ADDR:0x3297#: X (in full floating-point form)"
                },
                {
                    "Address": 789,
                    "Comment": "#ADDR:0x33C0#: X, X"
                },
                {
                    "Address": 790,
                    "Comment": "#ADDR:0x34F9#: X, (1/0)"
                },
                {
                    "Address": 791,
                    "Comment": "#ADDR:0x368F# to #ADDR:0x371C#: X"
                },
                {
                    "Address": 792,
                    "Comment": "#ADDR:0x30CA#: X"
                },
                {
                    "Address": 793,
                    "Comment": "#ADDR:0x369B#: X"
                },
                {
                    "Address": 795,
                    "Comment": "}"
                },
                {
                    "Address": 796,
                    "Comment": "#ADDR:0x341B#(stk_zero): X, 0 (the deleted 1 is\noverwritten with zero)"
                },
                {
                    "Address": 797,
                    "Comment": "#ADDR:0x33A1#: X"
                },
                {
                    "Address": 798,
                    "Comment": "#ADDR:0x369B#: X"
                },
                {
                    "Address": 806,
                    "Comment": "{#ADDR:0x33C6#: X', e, 128"
                },
                {
                    "Address": 807,
                    "ByteSize": 2,
                    "Comment": "}",
                    "DataType": 1
                },
                {
                    "Address": 809,
                    "Comment": "#ADDR:0x300F#: X', e'"
                },
                {
                    "Address": 810,
                    "Comment": "#ADDR:0x343C#: e', X'"
                },
                {
                    "Address": 811,
                    "Comment": "#ADDR:0x33C0#: e', X', X'"
                },
                {
                    "Address": 812,
                    "Comment": "{#ADDR:0x33C6#: e', X', X', 0.8"
                },
                {
                    "Address": 813,
                    "ByteSize": 5,
                    "Comment": "}",
                    "DataType": 1
                },
                {
                    "Address": 818,
                    "Comment": "#ADDR:0x300F#: e', X', X'-0.8"
                },
                {
                    "Address": 819,
                    "Comment": "#ADDR:0x34F9#: e', X', (1/0)"
                },
                {
                    "Address": 820,
                    "Comment": "{#ADDR:0x368F# to #ADDR:0x373D#: e', X'"
                },
                {
                    "Address": 821,
                    "Comment": "}"
                },
                {
                    "Address": 822,
                    "Comment": "#ADDR:0x343C#: X', e'"
                },
                {
                    "Address": 823,
                    "Comment": "#ADDR:0x341B#(stk_one): X', e', 1"
                },
                {
                    "Address": 824,
                    "Comment": "#ADDR:0x300F#: X', e'-1"
                },
                {
                    "Address": 825,
                    "Comment": "#ADDR:0x343C#: e'-1, X'"
                },
                {
                    "Address": 826,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 829,
                    "Comment": "#ADDR:0x343C#: X', e' (X'>0.8) or 2*X', e'-1\n(X'<=0.8)"
                },
                {
                    "Address": 830,
                    "Comment": "{#ADDR:0x33C6#: X', e', LN 2 or 2*X', e'-1, LN 2"
                },
                {
                    "Address": 831,
                    "ByteSize": 5,
                    "Comment": "}",
                    "DataType": 1
                },
                {
                    "Address": 836,
                    "Comment": "#ADDR:0x30CA#: X', e'*LN 2=Y1 or 2*X', (e'-1)*LN\n2=Y2"
                },
                {
                    "Address": 837,
                    "Comment": "#ADDR:0x343C#: Y1, X' (X'>0.8) or Y2, 2*X'\n(X'<=0.8)"
                },
                {
                    "Address": 838,
                    "Comment": "#ADDR:0x341B#(stk_half): Y1, X', .5 or Y2, 2*X', .5"
                },
                {
                    "Address": 839,
                    "Comment": "#ADDR:0x300F#: Y1, X'-.5 or Y2, 2*X'-.5"
                },
                {
                    "Address": 840,
                    "Comment": "#ADDR:0x341B#(stk_half): Y1, X'-.5, .5 or Y2,\n2*X'-.5, .5"
                },
                {
                    "Address": 841,
                    "Comment": "#ADDR:0x300F#: Y1, X'-1 or Y2, 2*X'-1"
                },
                {
                    "Address": 842,
                    "Comment": "#ADDR:0x33C0#: Y, X'-1, X'-1 or Y2, 2*X'-1, 2*X'-1"
                },
                {
                    "Address": 843,
                    "Comment": "{#ADDR:0x33C6#: Y1, X'-1, X'-1, 2.5 or Y2, 2*X'-1,"
                },
                {
                    "Address": 844,
                    "ByteSize": 2,
                    "Comment": "2*X'-1, 2.5}",
                    "DataType": 1
                },
                {
                    "Address": 846,
                    "Comment": "#ADDR:0x30CA#: Y1, X'-1, 2.5*X'-2.5 or Y2, 2*X'-1,\n5*X'-2.5"
                },
                {
                    "Address": 847,
                    "Comment": "#ADDR:0x341B#(stk_half): Y1, X'-1, 2.5*X'-2.5, .5\nor Y2, 2*X'-1, 5*X'-2.5, .5"
                },
                {
                    "Address": 848,
                    "Comment": "#ADDR:0x300F#: Y1, X'-1, 2.5*X'-3=Z or Y2, 2*X'-1,\n5*X'-3=Z"
                },
                {
                    "Address": 849,
                    "Comment": "#ADDR:0x3449#(series_0C): Y1, X'-1, Z or Y2,\n2*X'-1, Z"
                },
                {
                    "Address": 850,
                    "ByteSize": 2,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 852,
                    "ByteSize": 2,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 854,
                    "ByteSize": 3,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 857,
                    "ByteSize": 3,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 860,
                    "ByteSize": 3,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 863,
                    "ByteSize": 4,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 867,
                    "ByteSize": 4,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 871,
                    "ByteSize": 4,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 875,
                    "ByteSize": 5,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 880,
                    "ByteSize": 5,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 885,
                    "ByteSize": 5,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 890,
                    "ByteSize": 5,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 895,
                    "Comment": "#ADDR:0x30CA#: Y1=LN (2**e'), LN X' or Y2=LN\n(2**(e'-1)), LN (2*X')"
                },
                {
                    "Address": 896,
                    "Comment": "#ADDR:0x3014#: LN (2**e')*X')=LN X or LN\n(2**(e'-1)*2*X')=LN X"
                },
                {
                    "Address": 897,
                    "Comment": "#ADDR:0x369B#: LN X"
                },
                {
                    "Address": 900,
                    "Comment": "#ADDR:0x3297#: X (in full floating-point form)"
                },
                {
                    "Address": 901,
                    "Comment": "{#ADDR:0x33C6#: X, 1/2\\#pi"
                },
                {
                    "Address": 902,
                    "ByteSize": 5,
                    "Comment": "}",
                    "DataType": 1
                },
                {
                    "Address": 907,
                    "Comment": "#ADDR:0x30CA#: X/2\\#pi"
                },
                {
                    "Address": 908,
                    "Comment": "#ADDR:0x33C0#: X/2\\#pi, X/2\\#pi"
                },
                {
                    "Address": 909,
                    "Comment": "#ADDR:0x341B#(stk_half): X/2\\#pi, X/2\\#pi, 0.5"
                },
                {
                    "Address": 910,
                    "Comment": "#ADDR:0x3014#: X/2\\#pi, X/2\\#pi+0.5"
                },
                {
                    "Address": 911,
                    "Comment": "#ADDR:0x36AF#: X/2\\#pi, INT (X/2\\#pi+0.5)"
                },
                {
                    "Address": 912,
                    "Comment": "#ADDR:0x300F#: X/2\\#pi-INT (X/2\\#pi+0.5)=Y"
                },
                {
                    "Address": 913,
                    "Comment": "#ADDR:0x33C0#: Y, Y"
                },
                {
                    "Address": 914,
                    "Comment": "#ADDR:0x3014#: 2*Y"
                },
                {
                    "Address": 915,
                    "Comment": "#ADDR:0x33C0#: 2*Y, 2*Y"
                },
                {
                    "Address": 916,
                    "Comment": "#ADDR:0x3014#: 4*Y"
                },
                {
                    "Address": 917,
                    "Comment": "#ADDR:0x33C0#: 4*Y, 4*Y"
                },
                {
                    "Address": 918,
                    "Comment": "#ADDR:0x346A#: 4*Y, ABS (4*Y)"
                },
                {
                    "Address": 919,
                    "Comment": "#ADDR:0x341B#(stk_one): 4*Y, ABS (4*Y), 1"
                },
                {
                    "Address": 920,
                    "Comment": "#ADDR:0x300F#: 4*Y, ABS (4*Y)-1=Z"
                },
                {
                    "Address": 921,
                    "Comment": "#ADDR:0x33C0#: 4*Y, Z, Z"
                },
                {
                    "Address": 922,
                    "Comment": "#ADDR:0x34F9#: 4*Y, Z, (1/0)"
                },
                {
                    "Address": 923,
                    "Comment": "#ADDR:0x342D#(st_mem_0): (mem-0 holds the result of\nthe test)"
                },
                {
                    "Address": 924,
                    "Comment": "{#ADDR:0x368F# to #ADDR:0x37A1#: 4*Y, Z"
                },
                {
                    "Address": 925,
                    "Comment": "}"
                },
                {
                    "Address": 926,
                    "Comment": "#ADDR:0x33A1#: 4*Y"
                },
                {
                    "Address": 927,
                    "Comment": "#ADDR:0x369B#: 4*Y=V (case i)"
                },
                {
                    "Address": 929,
                    "Comment": "#ADDR:0x341B#(stk_one): 4*Y, Z, 1"
                },
                {
                    "Address": 930,
                    "Comment": "#ADDR:0x300F#: 4*Y, Z-1"
                },
                {
                    "Address": 931,
                    "Comment": "#ADDR:0x343C#: Z-1, 4*Y"
                },
                {
                    "Address": 932,
                    "Comment": "#ADDR:0x3506#: Z-1, (1/0)"
                },
                {
                    "Address": 933,
                    "Comment": "{#ADDR:0x368F# to #ADDR:0x37A8#: Z-1"
                },
                {
                    "Address": 934,
                    "Comment": "}"
                },
                {
                    "Address": 935,
                    "Comment": "#ADDR:0x346E#: 1-Z"
                },
                {
                    "Address": 936,
                    "Comment": "#ADDR:0x369B#: 1-Z=V (case ii) or Z-1=V (case iii)"
                },
                {
                    "Address": 939,
                    "Comment": "#ADDR:0x3783#: V"
                },
                {
                    "Address": 940,
                    "Comment": "#ADDR:0x346A#: ABS V"
                },
                {
                    "Address": 941,
                    "Comment": "#ADDR:0x341B#(stk_one): ABS V, 1"
                },
                {
                    "Address": 942,
                    "Comment": "#ADDR:0x300F#: ABS V-1"
                },
                {
                    "Address": 943,
                    "Comment": "#ADDR:0x340F#(get_mem_0): ABS V-1, (1/0)"
                },
                {
                    "Address": 944,
                    "Comment": "{#ADDR:0x368F# to #ADDR:0x37B7#: ABS V-1=W"
                },
                {
                    "Address": 945,
                    "Comment": "}"
                },
                {
                    "Address": 946,
                    "Comment": "#ADDR:0x346E#: 1-ABS V"
                },
                {
                    "Address": 947,
                    "Comment": "{#ADDR:0x3686# to #ADDR:0x37B7#: 1-ABS V=W"
                },
                {
                    "Address": 948,
                    "Comment": "}"
                },
                {
                    "Address": 950,
                    "Comment": "#ADDR:0x3783#: W"
                },
                {
                    "Address": 951,
                    "Comment": "#ADDR:0x33C0#: W, W"
                },
                {
                    "Address": 952,
                    "Comment": "#ADDR:0x33C0#: W, W, W"
                },
                {
                    "Address": 953,
                    "Comment": "#ADDR:0x30CA#: W, W*W"
                },
                {
                    "Address": 954,
                    "Comment": "#ADDR:0x33C0#: W, W*W, W*W"
                },
                {
                    "Address": 955,
                    "Comment": "#ADDR:0x3014#: W, 2*W*W"
                },
                {
                    "Address": 956,
                    "Comment": "#ADDR:0x341B#(stk_one): W, 2*W*W, 1"
                },
                {
                    "Address": 957,
                    "Comment": "#ADDR:0x300F#: W, 2*W*W-1=Z"
                },
                {
                    "Address": 958,
                    "Comment": "#ADDR:0x3449#(series_06): W, Z"
                },
                {
                    "Address": 959,
                    "ByteSize": 2,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 961,
                    "ByteSize": 3,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 964,
                    "ByteSize": 4,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 968,
                    "ByteSize": 5,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 973,
                    "ByteSize": 5,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 978,
                    "ByteSize": 5,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 983,
                    "Comment": "#ADDR:0x30CA#: SIN (\\#pi*W/2)=SIN X (or COS X)"
                },
                {
                    "Address": 984,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 987,
                    "Comment": "#ADDR:0x33C0#: X, X"
                },
                {
                    "Address": 988,
                    "Comment": "#ADDR:0x37B5#: X, SIN X"
                },
                {
                    "Address": 989,
                    "Comment": "#ADDR:0x343C#: SIN X, X"
                },
                {
                    "Address": 990,
                    "Comment": "#ADDR:0x37AA#: SIN X, COS X"
                },
                {
                    "Address": 991,
                    "Comment": "#ADDR:0x31AF#: SIN X/COS X=TAN X (report arithmetic overflow\nif needed)"
                },
                {
                    "Address": 992,
                    "Comment": "#ADDR:0x369B#: TAN X"
                },
                {
                    "Address": 1003,
                    "Comment": "#ADDR:0x341B#(stk_one): X, 1"
                },
                {
                    "Address": 1004,
                    "Comment": "#ADDR:0x346E#: X, -1"
                },
                {
                    "Address": 1005,
                    "Comment": "#ADDR:0x343C#: -1, X"
                },
                {
                    "Address": 1006,
                    "Comment": "#ADDR:0x31AF#: -1/X"
                },
                {
                    "Address": 1007,
                    "Comment": "#ADDR:0x33C0#: -1/X, -1/X"
                },
                {
                    "Address": 1008,
                    "Comment": "#ADDR:0x3506#: -1/X, (1/0)"
                },
                {
                    "Address": 1009,
                    "Comment": "#ADDR:0x341B#(stk_pi_2): -1/X, (1/0), \\#pi/2"
                },
                {
                    "Address": 1010,
                    "Comment": "#ADDR:0x343C#: -1/X, \\#pi/2, (1/0)"
                },
                {
                    "Address": 1011,
                    "Comment": "{#ADDR:0x368F# to #ADDR:0x37FA# for case ii: -1/X, \\#pi/2"
                },
                {
                    "Address": 1012,
                    "Comment": "}"
                },
                {
                    "Address": 1013,
                    "Comment": "#ADDR:0x346E#: -1/X, -\\#pi/2"
                },
                {
                    "Address": 1014,
                    "Comment": "{#ADDR:0x3686# to #ADDR:0x37FA# for case iii: -1/X,"
                },
                {
                    "Address": 1015,
                    "Comment": "-\\#pi/2}"
                },
                {
                    "Address": 1017,
                    "Comment": "#ADDR:0x341B#(stk_zero): Y, 0; continue for case i:\nW=0"
                },
                {
                    "Address": 1018,
                    "Comment": "#ADDR:0x343C#: W, Y"
                },
                {
                    "Address": 1019,
                    "Comment": "#ADDR:0x33C0#: W, Y, Y"
                },
                {
                    "Address": 1020,
                    "Comment": "#ADDR:0x33C0#: W, Y, Y, Y"
                },
                {
                    "Address": 1021,
                    "Comment": "#ADDR:0x30CA#: W, Y, Y*Y"
                },
                {
                    "Address": 1022,
                    "Comment": "#ADDR:0x33C0#: W, Y, Y*Y, Y*Y"
                },
                {
                    "Address": 1023,
                    "Comment": "#ADDR:0x3014#: W, Y, 2*Y*Y"
                }
            ],
            "LabelInfo": [
                {
                    "Address": 6,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "LOC_MEM"
                },
                {
                    "Address": 15,
                    "LabelType": 2,
                    "Name": "get_mem"
                },
                {
                    "Address": 27,
                    "LabelType": 2,
                    "Name": "stk_con"
                },
                {
                    "Address": 45,
                    "LabelType": 2,
                    "Name": "st_mem"
                },
                {
                    "Address": 60,
                    "LabelType": 2,
                    "Name": "exchange"
                },
                {
                    "Address": 62,
                    "LabelType": 2,
                    "Name": "SWAP_BYTE"
                },
                {
                    "Address": 73,
                    "LabelType": 2,
                    "Name": "series"
                },
                {
                    "Address": 83,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "G_LOOP"
                },
                {
                    "Address": 106,
                    "LabelType": 2,
                    "Name": "abs"
                },
                {
                    "Address": 110,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "negate"
                },
                {
                    "Address": 116,
                    "LabelType": 2,
                    "Name": "NEG_TEST"
                },
                {
                    "Address": 131,
                    "LabelType": 2,
                    "Name": "INT_CASE"
                },
                {
                    "Address": 146,
                    "LabelType": 2,
                    "Name": "sgn"
                },
                {
                    "Address": 165,
                    "LabelType": 2,
                    "Name": "f_in"
                },
                {
                    "Address": 172,
                    "LabelType": 2,
                    "Name": "peek"
                },
                {
                    "Address": 176,
                    "LabelType": 2,
                    "Name": "IN_PK_STK"
                },
                {
                    "Address": 179,
                    "LabelType": 2,
                    "Name": "usr_no"
                },
                {
                    "Address": 188,
                    "LabelType": 2,
                    "Name": "usr"
                },
                {
                    "Address": 211,
                    "LabelType": 2,
                    "Name": "USR_RANGE"
                },
                {
                    "Address": 228,
                    "LabelType": 2,
                    "Name": "USR_STACK"
                },
                {
                    "Address": 231,
                    "LabelType": 2,
                    "Name": "REPORT_A"
                },
                {
                    "Address": 233,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "TEST_ZERO"
                },
                {
                    "Address": 249,
                    "LabelType": 2,
                    "Name": "greater_0"
                },
                {
                    "Address": 257,
                    "LabelType": 2,
                    "Name": "f_not"
                },
                {
                    "Address": 262,
                    "LabelType": 2,
                    "Name": "less_0"
                },
                {
                    "Address": 263,
                    "LabelType": 2,
                    "Name": "SIGN_TO_C"
                },
                {
                    "Address": 267,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "FP_0_1"
                },
                {
                    "Address": 283,
                    "LabelType": 2,
                    "Name": "no_or_no"
                },
                {
                    "Address": 292,
                    "LabelType": 2,
                    "Name": "no_and_no"
                },
                {
                    "Address": 301,
                    "LabelType": 2,
                    "Name": "str_no"
                },
                {
                    "Address": 315,
                    "LabelType": 2,
                    "Name": "compare"
                },
                {
                    "Address": 323,
                    "LabelType": 2,
                    "Name": "EX_OR_NOT"
                },
                {
                    "Address": 334,
                    "LabelType": 2,
                    "Name": "NU_OR_STR"
                },
                {
                    "Address": 345,
                    "LabelType": 2,
                    "Name": "STRINGS"
                },
                {
                    "Address": 356,
                    "LabelType": 2,
                    "Name": "BYTE_COMP"
                },
                {
                    "Address": 363,
                    "LabelType": 2,
                    "Name": "SECND_LOW"
                },
                {
                    "Address": 370,
                    "LabelType": 2,
                    "Name": "BOTH_NULL"
                },
                {
                    "Address": 373,
                    "LabelType": 2,
                    "Name": "SEC_PLUS"
                },
                {
                    "Address": 389,
                    "LabelType": 2,
                    "Name": "FRST_LESS"
                },
                {
                    "Address": 392,
                    "LabelType": 2,
                    "Name": "STR_TEST"
                },
                {
                    "Address": 396,
                    "LabelType": 2,
                    "Name": "END_TESTS"
                },
                {
                    "Address": 412,
                    "LabelType": 2,
                    "Name": "strs_add"
                },
                {
                    "Address": 439,
                    "LabelType": 2,
                    "Name": "OTHER_STR"
                },
                {
                    "Address": 447,
                    "Global": true,
                    "LabelType": 1,
                    "Name": "STK_PNTRS"
                },
                {
                    "Address": 457,
                    "LabelType": 2,
                    "Name": "chrs"
                },
                {
                    "Address": 476,
                    "LabelType": 2,
                    "Name": "REPORT_B_4"
                },
                {
                    "Address": 478,
                    "LabelType": 2,
                    "Name": "val"
                },
                {
                    "Address": 524,
                    "LabelType": 2,
                    "Name": "V_RPORT_C"
                },
                {
                    "Address": 543,
                    "LabelType": 2,
                    "Name": "str"
                },
                {
                    "Address": 581,
                    "LabelType": 2,
                    "Name": "read_in"
                },
                {
                    "Address": 607,
                    "LabelType": 2,
                    "Name": "R_I_STORE"
                },
                {
                    "Address": 617,
                    "LabelType": 2,
                    "Name": "code"
                },
                {
                    "Address": 625,
                    "LabelType": 2,
                    "Name": "STK_CODE"
                },
                {
                    "Address": 628,
                    "LabelType": 2,
                    "Name": "len"
                },
                {
                    "Address": 634,
                    "LabelType": 2,
                    "Name": "dec_jr_nz"
                },
                {
                    "Address": 646,
                    "LabelType": 2,
                    "Name": "jump"
                },
                {
                    "Address": 647,
                    "LabelType": 2,
                    "Name": "JUMP_2"
                },
                {
                    "Address": 655,
                    "LabelType": 2,
                    "Name": "jump_true"
                },
                {
                    "Address": 667,
                    "LabelType": 2,
                    "Name": "end_calc"
                },
                {
                    "Address": 672,
                    "LabelType": 2,
                    "Name": "n_mod_m"
                },
                {
                    "Address": 687,
                    "LabelType": 2,
                    "Name": "int"
                },
                {
                    "Address": 695,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "X_NEG"
                },
                {
                    "Address": 706,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "EXIT"
                },
                {
                    "Address": 708,
                    "LabelType": 2,
                    "Name": "exp"
                },
                {
                    "Address": 771,
                    "LabelType": 2,
                    "Name": "REPORT_6_2"
                },
                {
                    "Address": 773,
                    "LabelType": 2,
                    "Name": "N_NEGTV"
                },
                {
                    "Address": 780,
                    "LabelType": 2,
                    "Name": "RESULT_OK"
                },
                {
                    "Address": 782,
                    "LabelType": 2,
                    "Name": "RSLT_ZERO"
                },
                {
                    "Address": 787,
                    "LabelType": 2,
                    "Name": "ln"
                },
                {
                    "Address": 796,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "VALID"
                },
                {
                    "Address": 829,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "GRE_8"
                },
                {
                    "Address": 899,
                    "LabelType": 2,
                    "Name": "get_argt"
                },
                {
                    "Address": 929,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "ZPLUS"
                },
                {
                    "Address": 936,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "YNEG"
                },
                {
                    "Address": 938,
                    "LabelType": 2,
                    "Name": "cos"
                },
                {
                    "Address": 949,
                    "LabelType": 2,
                    "Name": "sin"
                },
                {
                    "Address": 951,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "C_ENT"
                },
                {
                    "Address": 986,
                    "LabelType": 2,
                    "Name": "tan"
                },
                {
                    "Address": 994,
                    "LabelType": 2,
                    "Name": "atn"
                },
                {
                    "Address": 1016,
                    "LabelType": 2,
                    "Name": "SMALL"
                },
                {
                    "Address": 1018,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "CASES"
                }
            ],
            "PageId": 13
        },
        {
            "CodeInfo": [
                {
                    "Address": 50,
                    "ByteSize": 1,
                    "Comment": "Finished: 'last value'=ATN X."
                },
                {
                    "Address": 51,
                    "ByteSize": 1,
                    "Comment": "X",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 66,
                    "ByteSize": 1,
                    "Comment": "Finished: 'last value'=ASN X."
                },
                {
                    "Address": 67,
                    "ByteSize": 1,
                    "Comment": "X",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 73,
                    "ByteSize": 1,
                    "Comment": "Finished: 'last value'=ACS X."
                },
                {
                    "Address": 74,
                    "ByteSize": 1,
                    "Comment": "X",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 81,
                    "ByteSize": 1,
                    "Comment": "X, Y",
                    "Flags": 8,
                    "OperandType": 2
                },
                {
                    "Address": 90,
                    "ByteSize": 3,
                    "Comment": "Exit via #ADDR:0x36C4# to form EXP (Y*LN X).",
                    "OperandType": 2
                },
                {
                    "Address": 109,
                    "ByteSize": 1,
                    "Comment": "Finished: 'last value' is 0 or 1."
                }
            ],
            "CommentBlocks": [
                {
                    "Address": 2,
                    "Comment": "Perform step iii, passing to the #ADDR:0x3449#(series generator) the parameter\n'12', and the twelve constants required."
                },
                {
                    "Address": 47,
                    "Comment": "At the end of the last loop the 'last value' is:\n \n\\#LIST\n{ ATN X/X (case i) }\n{ ATN (-1/X)/(-1/X) (cases ii and iii) }\nLIST\\#\n \nPerform step iv."
                },
                {
                    "Address": 51,
                    "Comment": "THE 'ARCSIN' FUNCTION (offset &22)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &22 by the routine at #ADDR:0x3843#. It is\nalso called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the function ASN X and returns a real number from\n-\\#pi/2 to \\#pi/2 inclusive which is equal to the value in radians of the angle\nwhose sine is X. Thereby if Y=ASN X then X=SIN Y.\n \nThis subroutine uses the trigonometric identity TAN (Y/2)=SIN Y/(1+COS Y) to\nobtain TAN (Y/2) and hence (using ATN) Y/2 and finally Y."
                },
                {
                    "Address": 67,
                    "Comment": "THE 'ARCCOS' FUNCTION (offset &23)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the function ACS X and returns a real number from 0\nto \\#pi inclusive which is equal to the value in radians of the angle whose\ncosine is X.\n \nThis subroutine uses the relation ACS X=\\#pi/2-ASN X."
                },
                {
                    "Address": 74,
                    "Comment": "THE 'SQUARE ROOT' FUNCTION (offset &28)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called via the calculator literal &28 by the routines at #ADDR:0x247D# and\n#ADDR:0x3833#. It is also called indirectly via #ADDR:0x33A2#.\n \nThis subroutine handles the function SQR X and returns the positive square\nroot of the real number X if X is positive, and zero if X is zero. A negative\nvalue of X gives rise to report A - invalid argument (via #ADDR:0x3851#).\n \nThis subroutine treats the square root operation as being X**0.5 and\ntherefore stacks the value 0.5 and proceeds directly into #ADDR:0x3851#."
                },
                {
                    "Address": 79,
                    "Comment": "The jump is made if X=0; otherwise continue with:"
                },
                {
                    "Address": 81,
                    "Comment": "Continue into #ADDR:0x3851# to find the result of X**0.5.\nTHE 'EXPONENTIATION' OPERATION (offset &06)\n \nThe address of this routine is found in the #ADDR:0x32D7#(table of addresses). It\nis called indirectly via #ADDR:0x33A2#, and the routine at #ADDR:0x384A# continues here.\n \nThis subroutine performs the binary operation of raising the first number, X,\nto the power of the second number, Y.\n \nThe subroutine treats the result X**Y as being equivalent to EXP (Y*LN X). It\nreturns this value unless X is zero, in which case it returns 1 if Y is also\nzero (0**0=1), returns zero if Y is positive, and reports arithmetic overflow\nif Y is negative."
                },
                {
                    "Address": 87,
                    "Comment": "The jump is made if X=0, otherwise EXP (Y*LN X) is formed."
                },
                {
                    "Address": 88,
                    "Comment": "Giving report A if X is negative."
                },
                {
                    "Address": 93,
                    "Comment": "The value of X is zero so consider the three possible cases involved."
                },
                {
                    "Address": 98,
                    "Comment": "The jump is made if X=0 and Y=0, otherwise proceed."
                },
                {
                    "Address": 103,
                    "Comment": "The jump is made if X=0 and Y is positive, otherwise proceed."
                },
                {
                    "Address": 106,
                    "Comment": "The result is to be 1 for the operation."
                },
                {
                    "Address": 108,
                    "Comment": "Now return with the 'last value' on the stack being 0**Y."
                },
                {
                    "Address": 110,
                    "Comment": "Unused"
                }
            ],
            "DataInfo": [
                {
                    "Address": 0,
                    "Comment": "#ADDR:0x341B#(stk_one): W, Y, 2*Y*Y, 1"
                },
                {
                    "Address": 1,
                    "Comment": "#ADDR:0x300F#: W, Y, 2*Y*Y-1=Z"
                },
                {
                    "Address": 2,
                    "Comment": "#ADDR:0x3449#(series_0C): W, Y, Z"
                },
                {
                    "Address": 3,
                    "ByteSize": 2,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 5,
                    "ByteSize": 2,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 7,
                    "ByteSize": 3,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 10,
                    "ByteSize": 3,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 13,
                    "ByteSize": 3,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 16,
                    "ByteSize": 4,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 20,
                    "ByteSize": 4,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 24,
                    "ByteSize": 3,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 27,
                    "ByteSize": 5,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 32,
                    "ByteSize": 5,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 37,
                    "ByteSize": 5,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 42,
                    "ByteSize": 5,
                    "Comment": " ",
                    "DataType": 1
                },
                {
                    "Address": 47,
                    "Comment": "#ADDR:0x30CA#: W, ATN X (case i) or W, ATN (-1/X)\n(cases ii and iii)"
                },
                {
                    "Address": 48,
                    "Comment": "#ADDR:0x3014#: ATN X (all cases now)"
                },
                {
                    "Address": 49,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 52,
                    "Comment": "#ADDR:0x33C0#: X, X"
                },
                {
                    "Address": 53,
                    "Comment": "#ADDR:0x33C0#: X, X, X"
                },
                {
                    "Address": 54,
                    "Comment": "#ADDR:0x30CA#: X, X*X"
                },
                {
                    "Address": 55,
                    "Comment": "#ADDR:0x341B#(stk_one): X, X*X, 1"
                },
                {
                    "Address": 56,
                    "Comment": "#ADDR:0x300F#: X, X*X-1"
                },
                {
                    "Address": 57,
                    "Comment": "#ADDR:0x346E#: X, 1-X*X"
                },
                {
                    "Address": 58,
                    "Comment": "#ADDR:0x384A#: X, SQR (1-X*X)"
                },
                {
                    "Address": 59,
                    "Comment": "#ADDR:0x341B#(stk_one): X, SQR (1-X*X), 1"
                },
                {
                    "Address": 60,
                    "Comment": "#ADDR:0x3014#: X, 1+SQR (1-X*X)"
                },
                {
                    "Address": 61,
                    "Comment": "#ADDR:0x31AF#: X/(1+SQR (1-X*X))=TAN (Y/2)"
                },
                {
                    "Address": 62,
                    "Comment": "#ADDR:0x37E2#: Y/2"
                },
                {
                    "Address": 63,
                    "Comment": "#ADDR:0x33C0#: Y/2, Y/2"
                },
                {
                    "Address": 64,
                    "Comment": "#ADDR:0x3014#: Y=ASN X"
                },
                {
                    "Address": 65,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 68,
                    "Comment": "#ADDR:0x3833#: ASN X"
                },
                {
                    "Address": 69,
                    "Comment": "#ADDR:0x341B#(stk_pi_2): ASN X, \\#pi/2"
                },
                {
                    "Address": 70,
                    "Comment": "#ADDR:0x300F#: ASN X-\\#pi/2"
                },
                {
                    "Address": 71,
                    "Comment": "#ADDR:0x346E#: \\#pi/2-ASN X=ACS X"
                },
                {
                    "Address": 72,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 75,
                    "Comment": "#ADDR:0x33C0#: X, X"
                },
                {
                    "Address": 76,
                    "Comment": "#ADDR:0x3501#: X, (1/0)"
                },
                {
                    "Address": 77,
                    "Comment": "{#ADDR:0x368F# to #ADDR:0x386C#: X"
                },
                {
                    "Address": 78,
                    "Comment": "}"
                },
                {
                    "Address": 79,
                    "Comment": "#ADDR:0x341B#(stk_half): X, 0.5"
                },
                {
                    "Address": 80,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 82,
                    "Comment": "#ADDR:0x343C#: Y, X"
                },
                {
                    "Address": 83,
                    "Comment": "#ADDR:0x33C0#: Y, X, X"
                },
                {
                    "Address": 84,
                    "Comment": "#ADDR:0x3501#: Y, X, (1/0)"
                },
                {
                    "Address": 85,
                    "Comment": "{#ADDR:0x368F# to #ADDR:0x385D#: Y, X"
                },
                {
                    "Address": 86,
                    "Comment": "}"
                },
                {
                    "Address": 87,
                    "Comment": "#ADDR:0x3713#: Y, LN X"
                },
                {
                    "Address": 88,
                    "Comment": "#ADDR:0x30CA#: Y*LN X"
                },
                {
                    "Address": 89,
                    "Comment": "#ADDR:0x369B#"
                },
                {
                    "Address": 93,
                    "Comment": "#ADDR:0x33A1#: Y"
                },
                {
                    "Address": 94,
                    "Comment": "#ADDR:0x33C0#: Y, Y"
                },
                {
                    "Address": 95,
                    "Comment": "#ADDR:0x3501#: Y, (1/0)"
                },
                {
                    "Address": 96,
                    "Comment": "{#ADDR:0x368F# to #ADDR:0x386A#: Y"
                },
                {
                    "Address": 97,
                    "Comment": "}"
                },
                {
                    "Address": 98,
                    "Comment": "#ADDR:0x341B#(stk_zero): Y, 0"
                },
                {
                    "Address": 99,
                    "Comment": "#ADDR:0x343C#: 0, Y"
                },
                {
                    "Address": 100,
                    "Comment": "#ADDR:0x34F9#: 0, (1/0)"
                },
                {
                    "Address": 101,
                    "Comment": "{#ADDR:0x368F# to #ADDR:0x386C#: 0"
                },
                {
                    "Address": 102,
                    "Comment": "}"
                },
                {
                    "Address": 103,
                    "Comment": "#ADDR:0x341B#(stk_one): 0, 1"
                },
                {
                    "Address": 104,
                    "Comment": "#ADDR:0x343C#: 1, 0"
                },
                {
                    "Address": 105,
                    "Comment": "#ADDR:0x31AF#: Exit via #ADDR:0x31AF# as dividing by zero gives\n'arithmetic overflow'."
                },
                {
                    "Address": 106,
                    "Comment": "#ADDR:0x33A1#: -"
                },
                {
                    "Address": 107,
                    "Comment": "#ADDR:0x341B#(stk_one): 1"
                },
                {
                    "Address": 108,
                    "Comment": "#ADDR:0x369B#: (1/0)"
                },
                {
                    "Address": 110,
                    "Comment": "These locations are 'spare'. They all hold &FF."
                }
            ],
            "LabelInfo": [
                {
                    "Address": 51,
                    "LabelType": 2,
                    "Name": "asn"
                },
                {
                    "Address": 67,
                    "LabelType": 2,
                    "Name": "acs"
                },
                {
                    "Address": 74,
                    "LabelType": 2,
                    "Name": "sqr"
                },
                {
                    "Address": 81,
                    "LabelType": 2,
                    "Name": "to_power"
                },
                {
                    "Address": 93,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "XIS0"
                },
                {
                    "Address": 106,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "ONE"
                },
                {
                    "Address": 108,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "LAST"
                }
            ],
            "PageId": 14
        },
        {
            "CommentBlocks": [
                {
                    "Address": 256,
                    "Comment": "Character set\n \nUsed by the routines at #ADDR:0x0B24# and #ADDR:0x11B7#.\n \nThese locations hold the 'character set'. There are 8-byte representations\nfor all the characters with codes &20 (space) to &7F (\\#CHR169)."
                }
            ],
            "DataInfo": [
                {
                    "Address": 256,
                    "Comment": "{\\#CHAR$3D00",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 257,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 258,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 259,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 260,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 261,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 262,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 263,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 264,
                    "Comment": "{\\#CHAR$3D08",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 265,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 266,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 267,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 268,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 269,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 270,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 271,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 272,
                    "Comment": "{\\#CHAR$3D10",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 273,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 274,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 275,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 276,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 277,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 278,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 279,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 280,
                    "Comment": "{\\#CHAR$3D18",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 281,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 282,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 283,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 284,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 285,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 286,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 287,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 288,
                    "Comment": "{\\#CHAR$3D20",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 289,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 290,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 291,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 292,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 293,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 294,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 295,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 296,
                    "Comment": "{\\#CHAR$3D28",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 297,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 298,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 299,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 300,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 301,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 302,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 303,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 304,
                    "Comment": "{\\#CHAR$3D30",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 305,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 306,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 307,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 308,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 309,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 310,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 311,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 312,
                    "Comment": "{\\#CHAR$3D38",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 313,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 314,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 315,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 316,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 317,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 318,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 319,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 320,
                    "Comment": "{\\#CHAR$3D40",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 321,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 322,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 323,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 324,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 325,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 326,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 327,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 328,
                    "Comment": "{\\#CHAR$3D48",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 329,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 330,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 331,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 332,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 333,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 334,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 335,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 336,
                    "Comment": "{\\#CHAR$3D50",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 337,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 338,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 339,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 340,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 341,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 342,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 343,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 344,
                    "Comment": "{\\#CHAR$3D58",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 345,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 346,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 347,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 348,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 349,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 350,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 351,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 352,
                    "Comment": "{\\#CHAR$3D60",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 353,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 354,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 355,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 356,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 357,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 358,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 359,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 360,
                    "Comment": "{\\#CHAR$3D68",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 361,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 362,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 363,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 364,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 365,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 366,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 367,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 368,
                    "Comment": "{\\#CHAR$3D70",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 369,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 370,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 371,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 372,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 373,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 374,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 375,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 376,
                    "Comment": "{\\#CHAR$3D78",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 377,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 378,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 379,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 380,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 381,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 382,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 383,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 384,
                    "Comment": "{\\#CHAR$3D80",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 385,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 386,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 387,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 388,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 389,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 390,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 391,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 392,
                    "Comment": "{\\#CHAR$3D88",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 393,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 394,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 395,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 396,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 397,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 398,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 399,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 400,
                    "Comment": "{\\#CHAR$3D90",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 401,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 402,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 403,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 404,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 405,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 406,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 407,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 408,
                    "Comment": "{\\#CHAR$3D98",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 409,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 410,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 411,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 412,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 413,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 414,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 415,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 416,
                    "Comment": "{\\#CHAR$3DA0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 417,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 418,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 419,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 420,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 421,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 422,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 423,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 424,
                    "Comment": "{\\#CHAR$3DA8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 425,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 426,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 427,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 428,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 429,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 430,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 431,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 432,
                    "Comment": "{\\#CHAR$3DB0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 433,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 434,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 435,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 436,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 437,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 438,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 439,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 440,
                    "Comment": "{\\#CHAR$3DB8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 441,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 442,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 443,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 444,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 445,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 446,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 447,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 448,
                    "Comment": "{\\#CHAR$3DC0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 449,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 450,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 451,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 452,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 453,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 454,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 455,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 456,
                    "Comment": "{\\#CHAR$3DC8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 457,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 458,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 459,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 460,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 461,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 462,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 463,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 464,
                    "Comment": "{\\#CHAR$3DD0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 465,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 466,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 467,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 468,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 469,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 470,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 471,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 472,
                    "Comment": "{\\#CHAR$3DD8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 473,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 474,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 475,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 476,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 477,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 478,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 479,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 480,
                    "Comment": "{\\#CHAR$3DE0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 481,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 482,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 483,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 484,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 485,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 486,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 487,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 488,
                    "Comment": "{\\#CHAR$3DE8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 489,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 490,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 491,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 492,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 493,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 494,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 495,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 496,
                    "Comment": "{\\#CHAR$3DF0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 497,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 498,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 499,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 500,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 501,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 502,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 503,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 504,
                    "Comment": "{\\#CHAR$3DF8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 505,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 506,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 507,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 508,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 509,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 510,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 511,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 512,
                    "Comment": "{\\#CHAR$3E00",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 513,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 514,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 515,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 516,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 517,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 518,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 519,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 520,
                    "Comment": "{\\#CHAR$3E08",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 521,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 522,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 523,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 524,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 525,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 526,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 527,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 528,
                    "Comment": "{\\#CHAR$3E10",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 529,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 530,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 531,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 532,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 533,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 534,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 535,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 536,
                    "Comment": "{\\#CHAR$3E18",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 537,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 538,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 539,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 540,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 541,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 542,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 543,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 544,
                    "Comment": "{\\#CHAR$3E20",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 545,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 546,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 547,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 548,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 549,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 550,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 551,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 552,
                    "Comment": "{\\#CHAR$3E28",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 553,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 554,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 555,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 556,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 557,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 558,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 559,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 560,
                    "Comment": "{\\#CHAR$3E30",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 561,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 562,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 563,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 564,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 565,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 566,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 567,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 568,
                    "Comment": "{\\#CHAR$3E38",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 569,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 570,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 571,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 572,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 573,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 574,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 575,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 576,
                    "Comment": "{\\#CHAR$3E40",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 577,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 578,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 579,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 580,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 581,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 582,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 583,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 584,
                    "Comment": "{\\#CHAR$3E48",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 585,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 586,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 587,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 588,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 589,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 590,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 591,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 592,
                    "Comment": "{\\#CHAR$3E50",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 593,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 594,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 595,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 596,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 597,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 598,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 599,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 600,
                    "Comment": "{\\#CHAR$3E58",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 601,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 602,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 603,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 604,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 605,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 606,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 607,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 608,
                    "Comment": "{\\#CHAR$3E60",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 609,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 610,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 611,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 612,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 613,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 614,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 615,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 616,
                    "Comment": "{\\#CHAR$3E68",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 617,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 618,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 619,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 620,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 621,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 622,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 623,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 624,
                    "Comment": "{\\#CHAR$3E70",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 625,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 626,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 627,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 628,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 629,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 630,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 631,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 632,
                    "Comment": "{\\#CHAR$3E78",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 633,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 634,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 635,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 636,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 637,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 638,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 639,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 640,
                    "Comment": "{\\#CHAR$3E80",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 641,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 642,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 643,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 644,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 645,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 646,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 647,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 648,
                    "Comment": "{\\#CHAR$3E88",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 649,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 650,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 651,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 652,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 653,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 654,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 655,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 656,
                    "Comment": "{\\#CHAR$3E90",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 657,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 658,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 659,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 660,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 661,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 662,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 663,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 664,
                    "Comment": "{\\#CHAR$3E98",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 665,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 666,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 667,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 668,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 669,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 670,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 671,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 672,
                    "Comment": "{\\#CHAR$3EA0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 673,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 674,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 675,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 676,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 677,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 678,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 679,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 680,
                    "Comment": "{\\#CHAR$3EA8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 681,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 682,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 683,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 684,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 685,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 686,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 687,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 688,
                    "Comment": "{\\#CHAR$3EB0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 689,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 690,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 691,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 692,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 693,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 694,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 695,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 696,
                    "Comment": "{\\#CHAR$3EB8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 697,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 698,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 699,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 700,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 701,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 702,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 703,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 704,
                    "Comment": "{\\#CHAR$3EC0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 705,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 706,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 707,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 708,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 709,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 710,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 711,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 712,
                    "Comment": "{\\#CHAR$3EC8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 713,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 714,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 715,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 716,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 717,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 718,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 719,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 720,
                    "Comment": "{\\#CHAR$3ED0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 721,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 722,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 723,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 724,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 725,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 726,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 727,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 728,
                    "Comment": "{\\#CHAR$3ED8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 729,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 730,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 731,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 732,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 733,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 734,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 735,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 736,
                    "Comment": "{\\#CHAR$3EE0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 737,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 738,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 739,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 740,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 741,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 742,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 743,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 744,
                    "Comment": "{\\#CHAR$3EE8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 745,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 746,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 747,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 748,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 749,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 750,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 751,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 752,
                    "Comment": "{\\#CHAR$3EF0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 753,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 754,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 755,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 756,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 757,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 758,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 759,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 760,
                    "Comment": "{\\#CHAR$3EF8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 761,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 762,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 763,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 764,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 765,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 766,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 767,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 768,
                    "Comment": "{\\#CHAR$3F00",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 769,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 770,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 771,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 772,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 773,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 774,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 775,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 776,
                    "Comment": "{\\#CHAR$3F08",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 777,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 778,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 779,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 780,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 781,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 782,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 783,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 784,
                    "Comment": "{\\#CHAR$3F10",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 785,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 786,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 787,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 788,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 789,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 790,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 791,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 792,
                    "Comment": "{\\#CHAR$3F18",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 793,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 794,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 795,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 796,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 797,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 798,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 799,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 800,
                    "Comment": "{\\#CHAR$3F20",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 801,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 802,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 803,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 804,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 805,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 806,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 807,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 808,
                    "Comment": "{\\#CHAR$3F28",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 809,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 810,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 811,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 812,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 813,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 814,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 815,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 816,
                    "Comment": "{\\#CHAR$3F30",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 817,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 818,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 819,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 820,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 821,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 822,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 823,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 824,
                    "Comment": "{\\#CHAR$3F38",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 825,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 826,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 827,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 828,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 829,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 830,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 831,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 832,
                    "Comment": "{\\#CHAR$3F40",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 833,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 834,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 835,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 836,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 837,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 838,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 839,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 840,
                    "Comment": "{\\#CHAR$3F48",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 841,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 842,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 843,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 844,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 845,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 846,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 847,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 848,
                    "Comment": "{\\#CHAR$3F50",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 849,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 850,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 851,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 852,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 853,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 854,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 855,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 856,
                    "Comment": "{\\#CHAR$3F58",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 857,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 858,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 859,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 860,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 861,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 862,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 863,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 864,
                    "Comment": "{\\#CHAR$3F60",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 865,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 866,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 867,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 868,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 869,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 870,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 871,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 872,
                    "Comment": "{\\#CHAR$3F68",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 873,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 874,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 875,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 876,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 877,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 878,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 879,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 880,
                    "Comment": "{\\#CHAR$3F70",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 881,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 882,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 883,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 884,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 885,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 886,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 887,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 888,
                    "Comment": "{\\#CHAR$3F78",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 889,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 890,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 891,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 892,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 893,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 894,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 895,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 896,
                    "Comment": "{\\#CHAR$3F80",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 897,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 898,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 899,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 900,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 901,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 902,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 903,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 904,
                    "Comment": "{\\#CHAR$3F88",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 905,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 906,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 907,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 908,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 909,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 910,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 911,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 912,
                    "Comment": "{\\#CHAR$3F90",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 913,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 914,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 915,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 916,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 917,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 918,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 919,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 920,
                    "Comment": "{\\#CHAR$3F98",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 921,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 922,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 923,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 924,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 925,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 926,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 927,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 928,
                    "Comment": "{\\#CHAR$3FA0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 929,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 930,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 931,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 932,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 933,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 934,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 935,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 936,
                    "Comment": "{\\#CHAR$3FA8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 937,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 938,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 939,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 940,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 941,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 942,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 943,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 944,
                    "Comment": "{\\#CHAR$3FB0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 945,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 946,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 947,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 948,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 949,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 950,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 951,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 952,
                    "Comment": "{\\#CHAR$3FB8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 953,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 954,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 955,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 956,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 957,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 958,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 959,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 960,
                    "Comment": "{\\#CHAR$3FC0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 961,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 962,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 963,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 964,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 965,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 966,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 967,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 968,
                    "Comment": "{\\#CHAR$3FC8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 969,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 970,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 971,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 972,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 973,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 974,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 975,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 976,
                    "Comment": "{\\#CHAR$3FD0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 977,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 978,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 979,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 980,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 981,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 982,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 983,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 984,
                    "Comment": "{\\#CHAR$3FD8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 985,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 986,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 987,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 988,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 989,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 990,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 991,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 992,
                    "Comment": "{\\#CHAR$3FE0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 993,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 994,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 995,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 996,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 997,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 998,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 999,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1000,
                    "Comment": "{\\#CHAR$3FE8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1001,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1002,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1003,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1004,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1005,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1006,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1007,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1008,
                    "Comment": "{\\#CHAR$3FF0",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1009,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1010,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1011,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1012,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1013,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1014,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1015,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1016,
                    "Comment": "{\\#CHAR$3FF8",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1017,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1018,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1019,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1020,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1021,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1022,
                    "Comment": " ",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                },
                {
                    "Address": 1023,
                    "Comment": "}",
                    "DataType": 5,
                    "DisplayType": 6,
                    "GraphicsSetRef": 65535
                }
            ],
            "LabelInfo": [
                {
                    "Address": 256,
                    "Global": true,
                    "LabelType": 0,
                    "Name": "CHARSET"
                }
            ],
            "PageId": 15
        }
    ]
}
